//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace globaltraders.UserServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SP_Users_GetTransferAdminAmount_Result", Namespace="http://schemas.datacontract.org/2004/07/bfnexchange.Services.DBModel")]
    [System.SerializableAttribute()]
    public partial class SP_Users_GetTransferAdminAmount_Result : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> TransferAdminAmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> TransferAdminAmountGreyHoundField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> TransferAdminAmountHorseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> TransferAdminAmountSoccerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> TransferAdminAmountTennisField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TransferAgentIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> TransferAdminAmount {
            get {
                return this.TransferAdminAmountField;
            }
            set {
                if ((this.TransferAdminAmountField.Equals(value) != true)) {
                    this.TransferAdminAmountField = value;
                    this.RaisePropertyChanged("TransferAdminAmount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> TransferAdminAmountGreyHound {
            get {
                return this.TransferAdminAmountGreyHoundField;
            }
            set {
                if ((this.TransferAdminAmountGreyHoundField.Equals(value) != true)) {
                    this.TransferAdminAmountGreyHoundField = value;
                    this.RaisePropertyChanged("TransferAdminAmountGreyHound");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> TransferAdminAmountHorse {
            get {
                return this.TransferAdminAmountHorseField;
            }
            set {
                if ((this.TransferAdminAmountHorseField.Equals(value) != true)) {
                    this.TransferAdminAmountHorseField = value;
                    this.RaisePropertyChanged("TransferAdminAmountHorse");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> TransferAdminAmountSoccer {
            get {
                return this.TransferAdminAmountSoccerField;
            }
            set {
                if ((this.TransferAdminAmountSoccerField.Equals(value) != true)) {
                    this.TransferAdminAmountSoccerField = value;
                    this.RaisePropertyChanged("TransferAdminAmountSoccer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> TransferAdminAmountTennis {
            get {
                return this.TransferAdminAmountTennisField;
            }
            set {
                if ((this.TransferAdminAmountTennisField.Equals(value) != true)) {
                    this.TransferAdminAmountTennisField = value;
                    this.RaisePropertyChanged("TransferAdminAmountTennis");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TransferAgentID {
            get {
                return this.TransferAgentIDField;
            }
            set {
                if ((this.TransferAgentIDField.Equals(value) != true)) {
                    this.TransferAgentIDField = value;
                    this.RaisePropertyChanged("TransferAgentID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SP_Referrers_GetReferrerRateandReferrerIDbyUserID_Result", Namespace="http://schemas.datacontract.org/2004/07/bfnexchange.Services.DBModel")]
    [System.SerializableAttribute()]
    public partial class SP_Referrers_GetReferrerRateandReferrerIDbyUserID_Result : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ReferrerIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ReferrerRateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ReferrerID {
            get {
                return this.ReferrerIDField;
            }
            set {
                if ((this.ReferrerIDField.Equals(value) != true)) {
                    this.ReferrerIDField = value;
                    this.RaisePropertyChanged("ReferrerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ReferrerRate {
            get {
                return this.ReferrerRateField;
            }
            set {
                if ((this.ReferrerRateField.Equals(value) != true)) {
                    this.ReferrerRateField = value;
                    this.RaisePropertyChanged("ReferrerRate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="APIResponse", Namespace="http://schemas.datacontract.org/2004/07/bfnexchange.Services")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(int[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(string[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(long[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ExternalAPI.TO.MarketBook[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ExternalAPI.TO.MarketBook))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ExternalAPI.TO.DebitCredit[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ExternalAPI.TO.DebitCredit))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ExternalAPI.TO.SP_UserMarket_GetDistinctKJMarketsbyEventID_Result[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ExternalAPI.TO.SP_UserMarket_GetDistinctKJMarketsbyEventID_Result))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ExternalAPI.TO.LinevMarkets[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ExternalAPI.TO.LinevMarkets))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ExternalAPI.TO.LinevMarketsIN[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ExternalAPI.TO.LinevMarketsIN))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ExternalAPI.TO.Runner[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ExternalAPI.TO.Runner))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ExternalAPI.TO.ExchangePrices))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ExternalAPI.TO.PriceSize[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ExternalAPI.TO.PriceSize))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ExternalAPI.TO.Match[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ExternalAPI.TO.Match))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ExternalAPI.TO.Side))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ExternalAPI.TO.Order[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ExternalAPI.TO.Order))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ExternalAPI.TO.OrderType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ExternalAPI.TO.PersistenceType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ExternalAPI.TO.OrderStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ExternalAPI.TO.StartingPrices))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ExternalAPI.TO.RunnerStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ExternalAPI.TO.MarketStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ExternalAPI.TO.MarketBookForindianFancy[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ExternalAPI.TO.MarketBookForindianFancy))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ExternalAPI.TO.RunnerForIndianFancy[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ExternalAPI.TO.RunnerForIndianFancy))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(globaltraders.UserServiceReference.SP_Users_GetTransferAdminAmount_Result))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(globaltraders.UserServiceReference.SP_Referrers_GetReferrerRateandReferrerIDbyUserID_Result[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(globaltraders.UserServiceReference.SP_Referrers_GetReferrerRateandReferrerIDbyUserID_Result))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(globaltraders.UserServiceReference.SP_UserMarket_GetToWinTheTossbyEventID_Result))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(globaltraders.UserServiceReference.SP_UserMarket_GetToTiedMarketbyEventID_Result))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(globaltraders.UserServiceReference.SP_UserMarket_GetSoccergoalbyEventID_Result[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(globaltraders.UserServiceReference.SP_UserMarket_GetSoccergoalbyEventID_Result))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(globaltraders.UserServiceReference.SP_Users_GetCommissionAccountIDandBookAccountID_Result))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(globaltraders.UserServiceReference.SP_Users_GetReferrerRateandReferrerIDbyUserID_Result))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(globaltraders.UserServiceReference.SP_UserMarket_GetMarketForAllowedBetting_Result[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(globaltraders.UserServiceReference.SP_UserMarket_GetMarketForAllowedBetting_Result))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(globaltraders.UserServiceReference.SP_UserMarket_GetEventDetailsbyMarketID_Result))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(globaltraders.UserServiceReference.SP_Users_GetMaxOddBackandLay_Result))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(globaltraders.UserServiceReference.SP_MarketCatalogueSelections_Get_Result[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(globaltraders.UserServiceReference.SP_MarketCatalogueSelections_Get_Result))]
    public partial class APIResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private object EtagField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string cache_keyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private object dataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string matchkeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool statusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int status_codeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string versionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object Etag {
            get {
                return this.EtagField;
            }
            set {
                if ((object.ReferenceEquals(this.EtagField, value) != true)) {
                    this.EtagField = value;
                    this.RaisePropertyChanged("Etag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string cache_key {
            get {
                return this.cache_keyField;
            }
            set {
                if ((object.ReferenceEquals(this.cache_keyField, value) != true)) {
                    this.cache_keyField = value;
                    this.RaisePropertyChanged("cache_key");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object data {
            get {
                return this.dataField;
            }
            set {
                if ((object.ReferenceEquals(this.dataField, value) != true)) {
                    this.dataField = value;
                    this.RaisePropertyChanged("data");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string matchkey {
            get {
                return this.matchkeyField;
            }
            set {
                if ((object.ReferenceEquals(this.matchkeyField, value) != true)) {
                    this.matchkeyField = value;
                    this.RaisePropertyChanged("matchkey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool status {
            get {
                return this.statusField;
            }
            set {
                if ((this.statusField.Equals(value) != true)) {
                    this.statusField = value;
                    this.RaisePropertyChanged("status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int status_code {
            get {
                return this.status_codeField;
            }
            set {
                if ((this.status_codeField.Equals(value) != true)) {
                    this.status_codeField = value;
                    this.RaisePropertyChanged("status_code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string version {
            get {
                return this.versionField;
            }
            set {
                if ((object.ReferenceEquals(this.versionField, value) != true)) {
                    this.versionField = value;
                    this.RaisePropertyChanged("version");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SP_UserMarket_GetToWinTheTossbyEventID_Result", Namespace="http://schemas.datacontract.org/2004/07/bfnexchange.Services.DBModel")]
    [System.SerializableAttribute()]
    public partial class SP_UserMarket_GetToWinTheTossbyEventID_Result : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MarketCatalogueIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MarketCatalogueNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MarketCatalogueID {
            get {
                return this.MarketCatalogueIDField;
            }
            set {
                if ((object.ReferenceEquals(this.MarketCatalogueIDField, value) != true)) {
                    this.MarketCatalogueIDField = value;
                    this.RaisePropertyChanged("MarketCatalogueID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MarketCatalogueName {
            get {
                return this.MarketCatalogueNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MarketCatalogueNameField, value) != true)) {
                    this.MarketCatalogueNameField = value;
                    this.RaisePropertyChanged("MarketCatalogueName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SP_UserMarket_GetToTiedMarketbyEventID_Result", Namespace="http://schemas.datacontract.org/2004/07/bfnexchange.Services.DBModel")]
    [System.SerializableAttribute()]
    public partial class SP_UserMarket_GetToTiedMarketbyEventID_Result : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MarketCatalogueIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MarketCatalogueNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MarketCatalogueID {
            get {
                return this.MarketCatalogueIDField;
            }
            set {
                if ((object.ReferenceEquals(this.MarketCatalogueIDField, value) != true)) {
                    this.MarketCatalogueIDField = value;
                    this.RaisePropertyChanged("MarketCatalogueID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MarketCatalogueName {
            get {
                return this.MarketCatalogueNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MarketCatalogueNameField, value) != true)) {
                    this.MarketCatalogueNameField = value;
                    this.RaisePropertyChanged("MarketCatalogueName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SP_UserMarket_GetSoccergoalbyEventID_Result", Namespace="http://schemas.datacontract.org/2004/07/bfnexchange.Services.DBModel")]
    [System.SerializableAttribute()]
    public partial class SP_UserMarket_GetSoccergoalbyEventID_Result : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MarketCatalogueIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MarketCatalogueNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MarketCatalogueID {
            get {
                return this.MarketCatalogueIDField;
            }
            set {
                if ((object.ReferenceEquals(this.MarketCatalogueIDField, value) != true)) {
                    this.MarketCatalogueIDField = value;
                    this.RaisePropertyChanged("MarketCatalogueID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MarketCatalogueName {
            get {
                return this.MarketCatalogueNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MarketCatalogueNameField, value) != true)) {
                    this.MarketCatalogueNameField = value;
                    this.RaisePropertyChanged("MarketCatalogueName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SP_Users_GetCommissionAccountIDandBookAccountID_Result", Namespace="http://schemas.datacontract.org/2004/07/bfnexchange.Services.DBModel")]
    [System.SerializableAttribute()]
    public partial class SP_Users_GetCommissionAccountIDandBookAccountID_Result : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> BookAccountIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CommisionAccountIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> BookAccountID {
            get {
                return this.BookAccountIDField;
            }
            set {
                if ((this.BookAccountIDField.Equals(value) != true)) {
                    this.BookAccountIDField = value;
                    this.RaisePropertyChanged("BookAccountID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CommisionAccountID {
            get {
                return this.CommisionAccountIDField;
            }
            set {
                if ((this.CommisionAccountIDField.Equals(value) != true)) {
                    this.CommisionAccountIDField = value;
                    this.RaisePropertyChanged("CommisionAccountID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SP_Users_GetReferrerRateandReferrerIDbyUserID_Result", Namespace="http://schemas.datacontract.org/2004/07/bfnexchange.Services.DBModel")]
    [System.SerializableAttribute()]
    public partial class SP_Users_GetReferrerRateandReferrerIDbyUserID_Result : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ReferrerIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ReferrerRateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ReferrerID {
            get {
                return this.ReferrerIDField;
            }
            set {
                if ((this.ReferrerIDField.Equals(value) != true)) {
                    this.ReferrerIDField = value;
                    this.RaisePropertyChanged("ReferrerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ReferrerRate {
            get {
                return this.ReferrerRateField;
            }
            set {
                if ((this.ReferrerRateField.Equals(value) != true)) {
                    this.ReferrerRateField = value;
                    this.RaisePropertyChanged("ReferrerRate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SP_UserMarket_GetMarketForAllowedBetting_Result", Namespace="http://schemas.datacontract.org/2004/07/bfnexchange.Services.DBModel")]
    [System.SerializableAttribute()]
    public partial class SP_UserMarket_GetMarketForAllowedBetting_Result : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BettingAllowedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EventIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> EventOpenDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EventTypeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MarketField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MarketCatalogueIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BettingAllowed {
            get {
                return this.BettingAllowedField;
            }
            set {
                if ((this.BettingAllowedField.Equals(value) != true)) {
                    this.BettingAllowedField = value;
                    this.RaisePropertyChanged("BettingAllowed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EventID {
            get {
                return this.EventIDField;
            }
            set {
                if ((object.ReferenceEquals(this.EventIDField, value) != true)) {
                    this.EventIDField = value;
                    this.RaisePropertyChanged("EventID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> EventOpenDate {
            get {
                return this.EventOpenDateField;
            }
            set {
                if ((this.EventOpenDateField.Equals(value) != true)) {
                    this.EventOpenDateField = value;
                    this.RaisePropertyChanged("EventOpenDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EventTypeName {
            get {
                return this.EventTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.EventTypeNameField, value) != true)) {
                    this.EventTypeNameField = value;
                    this.RaisePropertyChanged("EventTypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Market {
            get {
                return this.MarketField;
            }
            set {
                if ((object.ReferenceEquals(this.MarketField, value) != true)) {
                    this.MarketField = value;
                    this.RaisePropertyChanged("Market");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MarketCatalogueID {
            get {
                return this.MarketCatalogueIDField;
            }
            set {
                if ((object.ReferenceEquals(this.MarketCatalogueIDField, value) != true)) {
                    this.MarketCatalogueIDField = value;
                    this.RaisePropertyChanged("MarketCatalogueID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SP_UserMarket_GetEventDetailsbyMarketID_Result", Namespace="http://schemas.datacontract.org/2004/07/bfnexchange.Services.DBModel")]
    [System.SerializableAttribute()]
    public partial class SP_UserMarket_GetEventDetailsbyMarketID_Result : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EventIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EventNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> EventOpenDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MarketCatalogueIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MarketCatalogueNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string associateeventIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EventID {
            get {
                return this.EventIDField;
            }
            set {
                if ((object.ReferenceEquals(this.EventIDField, value) != true)) {
                    this.EventIDField = value;
                    this.RaisePropertyChanged("EventID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EventName {
            get {
                return this.EventNameField;
            }
            set {
                if ((object.ReferenceEquals(this.EventNameField, value) != true)) {
                    this.EventNameField = value;
                    this.RaisePropertyChanged("EventName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> EventOpenDate {
            get {
                return this.EventOpenDateField;
            }
            set {
                if ((this.EventOpenDateField.Equals(value) != true)) {
                    this.EventOpenDateField = value;
                    this.RaisePropertyChanged("EventOpenDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MarketCatalogueID {
            get {
                return this.MarketCatalogueIDField;
            }
            set {
                if ((object.ReferenceEquals(this.MarketCatalogueIDField, value) != true)) {
                    this.MarketCatalogueIDField = value;
                    this.RaisePropertyChanged("MarketCatalogueID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MarketCatalogueName {
            get {
                return this.MarketCatalogueNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MarketCatalogueNameField, value) != true)) {
                    this.MarketCatalogueNameField = value;
                    this.RaisePropertyChanged("MarketCatalogueName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string associateeventID {
            get {
                return this.associateeventIDField;
            }
            set {
                if ((object.ReferenceEquals(this.associateeventIDField, value) != true)) {
                    this.associateeventIDField = value;
                    this.RaisePropertyChanged("associateeventID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SP_Users_GetMaxOddBackandLay_Result", Namespace="http://schemas.datacontract.org/2004/07/bfnexchange.Services.DBModel")]
    [System.SerializableAttribute()]
    public partial class SP_Users_GetMaxOddBackandLay_Result : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> CheckforMaxOddBackField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> CheckforMaxOddLayField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<decimal> MaxOddBackField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<decimal> MaxOddLayField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> CheckforMaxOddBack {
            get {
                return this.CheckforMaxOddBackField;
            }
            set {
                if ((this.CheckforMaxOddBackField.Equals(value) != true)) {
                    this.CheckforMaxOddBackField = value;
                    this.RaisePropertyChanged("CheckforMaxOddBack");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> CheckforMaxOddLay {
            get {
                return this.CheckforMaxOddLayField;
            }
            set {
                if ((this.CheckforMaxOddLayField.Equals(value) != true)) {
                    this.CheckforMaxOddLayField = value;
                    this.RaisePropertyChanged("CheckforMaxOddLay");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> MaxOddBack {
            get {
                return this.MaxOddBackField;
            }
            set {
                if ((this.MaxOddBackField.Equals(value) != true)) {
                    this.MaxOddBackField = value;
                    this.RaisePropertyChanged("MaxOddBack");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> MaxOddLay {
            get {
                return this.MaxOddLayField;
            }
            set {
                if ((this.MaxOddLayField.Equals(value) != true)) {
                    this.MaxOddLayField = value;
                    this.RaisePropertyChanged("MaxOddLay");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SP_MarketCatalogueSelections_Get_Result", Namespace="http://schemas.datacontract.org/2004/07/bfnexchange.Services.DBModel")]
    [System.SerializableAttribute()]
    public partial class SP_MarketCatalogueSelections_Get_Result : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ClothNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string JockeyNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SelectionIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SelectionNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StallDrawField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WearingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WearingDescField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ClothNumber {
            get {
                return this.ClothNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.ClothNumberField, value) != true)) {
                    this.ClothNumberField = value;
                    this.RaisePropertyChanged("ClothNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string JockeyName {
            get {
                return this.JockeyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.JockeyNameField, value) != true)) {
                    this.JockeyNameField = value;
                    this.RaisePropertyChanged("JockeyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SelectionID {
            get {
                return this.SelectionIDField;
            }
            set {
                if ((object.ReferenceEquals(this.SelectionIDField, value) != true)) {
                    this.SelectionIDField = value;
                    this.RaisePropertyChanged("SelectionID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SelectionName {
            get {
                return this.SelectionNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SelectionNameField, value) != true)) {
                    this.SelectionNameField = value;
                    this.RaisePropertyChanged("SelectionName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StallDraw {
            get {
                return this.StallDrawField;
            }
            set {
                if ((object.ReferenceEquals(this.StallDrawField, value) != true)) {
                    this.StallDrawField = value;
                    this.RaisePropertyChanged("StallDraw");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Wearing {
            get {
                return this.WearingField;
            }
            set {
                if ((object.ReferenceEquals(this.WearingField, value) != true)) {
                    this.WearingField = value;
                    this.RaisePropertyChanged("Wearing");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WearingDesc {
            get {
                return this.WearingDescField;
            }
            set {
                if ((object.ReferenceEquals(this.WearingDescField, value) != true)) {
                    this.WearingDescField = value;
                    this.RaisePropertyChanged("WearingDesc");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="UserServiceReference.IUserServices")]
    public interface IUserServices {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetFancyResultPostSetting", ReplyAction="http://tempuri.org/IUserServices/GetFancyResultPostSettingResponse")]
        bool GetFancyResultPostSetting();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetFancyResultPostSetting", ReplyAction="http://tempuri.org/IUserServices/GetFancyResultPostSettingResponse")]
        System.IAsyncResult BeginGetFancyResultPostSetting(System.AsyncCallback callback, object asyncState);
        
        bool EndGetFancyResultPostSetting(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateFancyResultPostSetting", ReplyAction="http://tempuri.org/IUserServices/UpdateFancyResultPostSettingResponse")]
        void UpdateFancyResultPostSetting(bool fancyresultpost);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/UpdateFancyResultPostSetting", ReplyAction="http://tempuri.org/IUserServices/UpdateFancyResultPostSettingResponse")]
        System.IAsyncResult BeginUpdateFancyResultPostSetting(bool fancyresultpost, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateFancyResultPostSetting(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetCommissionRatebyUserIDFancy", ReplyAction="http://tempuri.org/IUserServices/GetCommissionRatebyUserIDFancyResponse")]
        int GetCommissionRatebyUserIDFancy(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetCommissionRatebyUserIDFancy", ReplyAction="http://tempuri.org/IUserServices/GetCommissionRatebyUserIDFancyResponse")]
        System.IAsyncResult BeginGetCommissionRatebyUserIDFancy(int UserID, System.AsyncCallback callback, object asyncState);
        
        int EndGetCommissionRatebyUserIDFancy(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateCommissionRatebyUserID", ReplyAction="http://tempuri.org/IUserServices/UpdateCommissionRatebyUserIDResponse")]
        void UpdateCommissionRatebyUserID(int UserID, int CommisionrateFancy);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/UpdateCommissionRatebyUserID", ReplyAction="http://tempuri.org/IUserServices/UpdateCommissionRatebyUserIDResponse")]
        System.IAsyncResult BeginUpdateCommissionRatebyUserID(int UserID, int CommisionrateFancy, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateCommissionRatebyUserID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateCricketAPIMatchKey", ReplyAction="http://tempuri.org/IUserServices/UpdateCricketAPIMatchKeyResponse")]
        void UpdateCricketAPIMatchKey(string EventID, string CricketAPIMatchKey);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/UpdateCricketAPIMatchKey", ReplyAction="http://tempuri.org/IUserServices/UpdateCricketAPIMatchKeyResponse")]
        System.IAsyncResult BeginUpdateCricketAPIMatchKey(string EventID, string CricketAPIMatchKey, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateCricketAPIMatchKey(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetFancyResultsFrom", ReplyAction="http://tempuri.org/IUserServices/GetFancyResultsFromResponse")]
        string GetFancyResultsFrom();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetFancyResultsFrom", ReplyAction="http://tempuri.org/IUserServices/GetFancyResultsFromResponse")]
        System.IAsyncResult BeginGetFancyResultsFrom(System.AsyncCallback callback, object asyncState);
        
        string EndGetFancyResultsFrom(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateGetFancyResultsFrom", ReplyAction="http://tempuri.org/IUserServices/UpdateGetFancyResultsFromResponse")]
        void UpdateGetFancyResultsFrom(string ResultsFrom);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/UpdateGetFancyResultsFrom", ReplyAction="http://tempuri.org/IUserServices/UpdateGetFancyResultsFromResponse")]
        System.IAsyncResult BeginUpdateGetFancyResultsFrom(string ResultsFrom, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateGetFancyResultsFrom(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetRecentMatchesFromCricketAPI", ReplyAction="http://tempuri.org/IUserServices/GetRecentMatchesFromCricketAPIResponse")]
        string GetRecentMatchesFromCricketAPI();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetRecentMatchesFromCricketAPI", ReplyAction="http://tempuri.org/IUserServices/GetRecentMatchesFromCricketAPIResponse")]
        System.IAsyncResult BeginGetRecentMatchesFromCricketAPI(System.AsyncCallback callback, object asyncState);
        
        string EndGetRecentMatchesFromCricketAPI(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateGetDataFromForLoggingData", ReplyAction="http://tempuri.org/IUserServices/UpdateGetDataFromForLoggingDataResponse")]
        void UpdateGetDataFromForLoggingData(string EventID, string GetDataFrom);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/UpdateGetDataFromForLoggingData", ReplyAction="http://tempuri.org/IUserServices/UpdateGetDataFromForLoggingDataResponse")]
        System.IAsyncResult BeginUpdateGetDataFromForLoggingData(string EventID, string GetDataFrom, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateGetDataFromForLoggingData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetAccountsDatabyEventNameuserIDandDateRange", ReplyAction="http://tempuri.org/IUserServices/GetAccountsDatabyEventNameuserIDandDateRangeResp" +
            "onse")]
        string GetAccountsDatabyEventNameuserIDandDateRange(int UserID, string From, string To, string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetAccountsDatabyEventNameuserIDandDateRange", ReplyAction="http://tempuri.org/IUserServices/GetAccountsDatabyEventNameuserIDandDateRangeResp" +
            "onse")]
        System.IAsyncResult BeginGetAccountsDatabyEventNameuserIDandDateRange(int UserID, string From, string To, string Password, System.AsyncCallback callback, object asyncState);
        
        string EndGetAccountsDatabyEventNameuserIDandDateRange(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetAccountsDatabyEventNameuserIDandDateRangeFanc" +
            "ywithMArketName", ReplyAction="http://tempuri.org/IUserServices/GetAccountsDatabyEventNameuserIDandDateRangeFanc" +
            "ywithMArketNameResponse")]
        string GetAccountsDatabyEventNameuserIDandDateRangeFancywithMArketName(int UserID, string From, string To, string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetAccountsDatabyEventNameuserIDandDateRangeFanc" +
            "ywithMArketName", ReplyAction="http://tempuri.org/IUserServices/GetAccountsDatabyEventNameuserIDandDateRangeFanc" +
            "ywithMArketNameResponse")]
        System.IAsyncResult BeginGetAccountsDatabyEventNameuserIDandDateRangeFancywithMArketName(int UserID, string From, string To, string Password, System.AsyncCallback callback, object asyncState);
        
        string EndGetAccountsDatabyEventNameuserIDandDateRangeFancywithMArketName(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateTransferAdminAmount", ReplyAction="http://tempuri.org/IUserServices/UpdateTransferAdminAmountResponse")]
        void UpdateTransferAdminAmount(int UserID, bool TransferAdminAmount, int TransferAgentID, bool TransferAdminAmountSoccer, bool TransferAdminAmountTennis, bool TransferAdminAmountHorse, bool TransferAdminAmountGreyHound);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/UpdateTransferAdminAmount", ReplyAction="http://tempuri.org/IUserServices/UpdateTransferAdminAmountResponse")]
        System.IAsyncResult BeginUpdateTransferAdminAmount(int UserID, bool TransferAdminAmount, int TransferAgentID, bool TransferAdminAmountSoccer, bool TransferAdminAmountTennis, bool TransferAdminAmountHorse, bool TransferAdminAmountGreyHound, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateTransferAdminAmount(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetTransferAdminAmount", ReplyAction="http://tempuri.org/IUserServices/GetTransferAdminAmountResponse")]
        globaltraders.UserServiceReference.SP_Users_GetTransferAdminAmount_Result GetTransferAdminAmount(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetTransferAdminAmount", ReplyAction="http://tempuri.org/IUserServices/GetTransferAdminAmountResponse")]
        System.IAsyncResult BeginGetTransferAdminAmount(int UserID, System.AsyncCallback callback, object asyncState);
        
        globaltraders.UserServiceReference.SP_Users_GetTransferAdminAmount_Result EndGetTransferAdminAmount(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetAllPendingAmountsbyDate", ReplyAction="http://tempuri.org/IUserServices/GetAllPendingAmountsbyDateResponse")]
        string GetAllPendingAmountsbyDate(System.DateTime DueDate);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetAllPendingAmountsbyDate", ReplyAction="http://tempuri.org/IUserServices/GetAllPendingAmountsbyDateResponse")]
        System.IAsyncResult BeginGetAllPendingAmountsbyDate(System.DateTime DueDate, System.AsyncCallback callback, object asyncState);
        
        string EndGetAllPendingAmountsbyDate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/AddAmountReceviables", ReplyAction="http://tempuri.org/IUserServices/AddAmountReceviablesResponse")]
        void AddAmountReceviables(int UserId, decimal Amount, System.DateTime DueDate, string Status, decimal AmountReceived);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/AddAmountReceviables", ReplyAction="http://tempuri.org/IUserServices/AddAmountReceviablesResponse")]
        System.IAsyncResult BeginAddAmountReceviables(int UserId, decimal Amount, System.DateTime DueDate, string Status, decimal AmountReceived, System.AsyncCallback callback, object asyncState);
        
        void EndAddAmountReceviables(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateAmountReceviables", ReplyAction="http://tempuri.org/IUserServices/UpdateAmountReceviablesResponse")]
        void UpdateAmountReceviables(int ID, decimal Amount, System.DateTime DueDate, string Status);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/UpdateAmountReceviables", ReplyAction="http://tempuri.org/IUserServices/UpdateAmountReceviablesResponse")]
        System.IAsyncResult BeginUpdateAmountReceviables(int ID, decimal Amount, System.DateTime DueDate, string Status, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateAmountReceviables(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetBettingAllowedbyMarketIDandUserID", ReplyAction="http://tempuri.org/IUserServices/GetBettingAllowedbyMarketIDandUserIDResponse")]
        bool GetBettingAllowedbyMarketIDandUserID(int UserId, string MarketBookID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetBettingAllowedbyMarketIDandUserID", ReplyAction="http://tempuri.org/IUserServices/GetBettingAllowedbyMarketIDandUserIDResponse")]
        System.IAsyncResult BeginGetBettingAllowedbyMarketIDandUserID(int UserId, string MarketBookID, System.AsyncCallback callback, object asyncState);
        
        bool EndGetBettingAllowedbyMarketIDandUserID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetBettingAllowedbyMarketIDandUserIDInplay", ReplyAction="http://tempuri.org/IUserServices/GetBettingAllowedbyMarketIDandUserIDInplayRespon" +
            "se")]
        bool GetBettingAllowedbyMarketIDandUserIDInplay(int UserId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetBettingAllowedbyMarketIDandUserIDInplay", ReplyAction="http://tempuri.org/IUserServices/GetBettingAllowedbyMarketIDandUserIDInplayRespon" +
            "se")]
        System.IAsyncResult BeginGetBettingAllowedbyMarketIDandUserIDInplay(int UserId, System.AsyncCallback callback, object asyncState);
        
        bool EndGetBettingAllowedbyMarketIDandUserIDInplay(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/AddReferrerUsers", ReplyAction="http://tempuri.org/IUserServices/AddReferrerUsersResponse")]
        void AddReferrerUsers(int UserID, int ReferrerID, int ReferrerRate);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/AddReferrerUsers", ReplyAction="http://tempuri.org/IUserServices/AddReferrerUsersResponse")]
        System.IAsyncResult BeginAddReferrerUsers(int UserID, int ReferrerID, int ReferrerRate, System.AsyncCallback callback, object asyncState);
        
        void EndAddReferrerUsers(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/DeletReffererUSers", ReplyAction="http://tempuri.org/IUserServices/DeletReffererUSersResponse")]
        void DeletReffererUSers(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/DeletReffererUSers", ReplyAction="http://tempuri.org/IUserServices/DeletReffererUSersResponse")]
        System.IAsyncResult BeginDeletReffererUSers(int UserID, System.AsyncCallback callback, object asyncState);
        
        void EndDeletReffererUSers(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetReferrerRatesbyUserID", ReplyAction="http://tempuri.org/IUserServices/GetReferrerRatesbyUserIDResponse")]
        globaltraders.UserServiceReference.SP_Referrers_GetReferrerRateandReferrerIDbyUserID_Result[] GetReferrerRatesbyUserID(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetReferrerRatesbyUserID", ReplyAction="http://tempuri.org/IUserServices/GetReferrerRatesbyUserIDResponse")]
        System.IAsyncResult BeginGetReferrerRatesbyUserID(int UserID, System.AsyncCallback callback, object asyncState);
        
        globaltraders.UserServiceReference.SP_Referrers_GetReferrerRateandReferrerIDbyUserID_Result[] EndGetReferrerRatesbyUserID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/InsertUserBetNew", ReplyAction="http://tempuri.org/IUserServices/InsertUserBetNewResponse")]
        void InsertUserBetNew(
                    decimal userodd, 
                    string SelectionID, 
                    string Selectionname, 
                    string BetType, 
                    string nupdownAmount, 
                    string betslipamountlabel, 
                    decimal MaxOddBack, 
                    decimal MaxOddLay, 
                    bool CheckforMaxOddBack, 
                    bool CheckforMaxOddLay, 
                    int Clickedlocation, 
                    int UserID, 
                    string Betslipsize, 
                    string Password, 
                    string marketbookId, 
                    string Marketbookname, 
                    bool GetData);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/InsertUserBetNew", ReplyAction="http://tempuri.org/IUserServices/InsertUserBetNewResponse")]
        System.IAsyncResult BeginInsertUserBetNew(
                    decimal userodd, 
                    string SelectionID, 
                    string Selectionname, 
                    string BetType, 
                    string nupdownAmount, 
                    string betslipamountlabel, 
                    decimal MaxOddBack, 
                    decimal MaxOddLay, 
                    bool CheckforMaxOddBack, 
                    bool CheckforMaxOddLay, 
                    int Clickedlocation, 
                    int UserID, 
                    string Betslipsize, 
                    string Password, 
                    string marketbookId, 
                    string Marketbookname, 
                    bool GetData, 
                    System.AsyncCallback callback, 
                    object asyncState);
        
        void EndInsertUserBetNew(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetDistinctMarketsFromBets", ReplyAction="http://tempuri.org/IUserServices/GetDistinctMarketsFromBetsResponse")]
        string GetDistinctMarketsFromBets(string From, string To);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetDistinctMarketsFromBets", ReplyAction="http://tempuri.org/IUserServices/GetDistinctMarketsFromBetsResponse")]
        System.IAsyncResult BeginGetDistinctMarketsFromBets(string From, string To, System.AsyncCallback callback, object asyncState);
        
        string EndGetDistinctMarketsFromBets(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetDistinctMarketsFromAccounts", ReplyAction="http://tempuri.org/IUserServices/GetDistinctMarketsFromAccountsResponse")]
        string GetDistinctMarketsFromAccounts(string From, string To);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetDistinctMarketsFromAccounts", ReplyAction="http://tempuri.org/IUserServices/GetDistinctMarketsFromAccountsResponse")]
        System.IAsyncResult BeginGetDistinctMarketsFromAccounts(string From, string To, System.AsyncCallback callback, object asyncState);
        
        string EndGetDistinctMarketsFromAccounts(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UnPostUserAccountsbyUserIDandMarketID", ReplyAction="http://tempuri.org/IUserServices/UnPostUserAccountsbyUserIDandMarketIDResponse")]
        bool UnPostUserAccountsbyUserIDandMarketID(string MarketBookId, int UserID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/UnPostUserAccountsbyUserIDandMarketID", ReplyAction="http://tempuri.org/IUserServices/UnPostUserAccountsbyUserIDandMarketIDResponse")]
        System.IAsyncResult BeginUnPostUserAccountsbyUserIDandMarketID(string MarketBookId, int UserID, string Password, System.AsyncCallback callback, object asyncState);
        
        bool EndUnPostUserAccountsbyUserIDandMarketID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateUserBetsStatusbyMarketIDandUserID", ReplyAction="http://tempuri.org/IUserServices/UpdateUserBetsStatusbyMarketIDandUserIDResponse")]
        bool UpdateUserBetsStatusbyMarketIDandUserID(string MarketBookId, int UserID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/UpdateUserBetsStatusbyMarketIDandUserID", ReplyAction="http://tempuri.org/IUserServices/UpdateUserBetsStatusbyMarketIDandUserIDResponse")]
        System.IAsyncResult BeginUpdateUserBetsStatusbyMarketIDandUserID(string MarketBookId, int UserID, string Password, System.AsyncCallback callback, object asyncState);
        
        bool EndUpdateUserBetsStatusbyMarketIDandUserID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateTotalOversbyMarket", ReplyAction="http://tempuri.org/IUserServices/UpdateTotalOversbyMarketResponse")]
        void UpdateTotalOversbyMarket(string EventID, string TotalOvers);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/UpdateTotalOversbyMarket", ReplyAction="http://tempuri.org/IUserServices/UpdateTotalOversbyMarketResponse")]
        System.IAsyncResult BeginUpdateTotalOversbyMarket(string EventID, string TotalOvers, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateTotalOversbyMarket(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/SetBlockedStatusofUserBMS", ReplyAction="http://tempuri.org/IUserServices/SetBlockedStatusofUserBMSResponse")]
        string SetBlockedStatusofUserBMS(int UserID, bool isBlocked, string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/SetBlockedStatusofUserBMS", ReplyAction="http://tempuri.org/IUserServices/SetBlockedStatusofUserBMSResponse")]
        System.IAsyncResult BeginSetBlockedStatusofUserBMS(int UserID, bool isBlocked, string Password, System.AsyncCallback callback, object asyncState);
        
        string EndSetBlockedStatusofUserBMS(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetMatchScoreCard", ReplyAction="http://tempuri.org/IUserServices/GetMatchScoreCardResponse")]
        globaltraders.UserServiceReference.APIResponse GetMatchScoreCard(string strMatchKey, string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetMatchScoreCard", ReplyAction="http://tempuri.org/IUserServices/GetMatchScoreCardResponse")]
        System.IAsyncResult BeginGetMatchScoreCard(string strMatchKey, string Password, System.AsyncCallback callback, object asyncState);
        
        globaltraders.UserServiceReference.APIResponse EndGetMatchScoreCard(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetCricketMatchKey", ReplyAction="http://tempuri.org/IUserServices/GetCricketMatchKeyResponse")]
        string GetCricketMatchKey(string MarketCatalogueID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetCricketMatchKey", ReplyAction="http://tempuri.org/IUserServices/GetCricketMatchKeyResponse")]
        System.IAsyncResult BeginGetCricketMatchKey(string MarketCatalogueID, System.AsyncCallback callback, object asyncState);
        
        string EndGetCricketMatchKey(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateMarketsForView", ReplyAction="http://tempuri.org/IUserServices/UpdateMarketsForViewResponse")]
        void UpdateMarketsForView(int userID, bool isAllowedGrayHound, bool isAllowedHorse, bool isTennisAllowed, bool isSoccerAllowed, string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/UpdateMarketsForView", ReplyAction="http://tempuri.org/IUserServices/UpdateMarketsForViewResponse")]
        System.IAsyncResult BeginUpdateMarketsForView(int userID, bool isAllowedGrayHound, bool isAllowedHorse, bool isTennisAllowed, bool isSoccerAllowed, string Password, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateMarketsForView(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateAllMarketClosedbyUserID", ReplyAction="http://tempuri.org/IUserServices/UpdateAllMarketClosedbyUserIDResponse")]
        void UpdateAllMarketClosedbyUserID(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/UpdateAllMarketClosedbyUserID", ReplyAction="http://tempuri.org/IUserServices/UpdateAllMarketClosedbyUserIDResponse")]
        System.IAsyncResult BeginUpdateAllMarketClosedbyUserID(int UserID, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateAllMarketClosedbyUserID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetURLsData", ReplyAction="http://tempuri.org/IUserServices/GetURLsDataResponse")]
        string GetURLsData();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetURLsData", ReplyAction="http://tempuri.org/IUserServices/GetURLsDataResponse")]
        System.IAsyncResult BeginGetURLsData(System.AsyncCallback callback, object asyncState);
        
        string EndGetURLsData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetTransferAgnetCommision", ReplyAction="http://tempuri.org/IUserServices/GetTransferAgnetCommisionResponse")]
        bool GetTransferAgnetCommision(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetTransferAgnetCommision", ReplyAction="http://tempuri.org/IUserServices/GetTransferAgnetCommisionResponse")]
        System.IAsyncResult BeginGetTransferAgnetCommision(int UserID, System.AsyncCallback callback, object asyncState);
        
        bool EndGetTransferAgnetCommision(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateTransferAgnetCommision", ReplyAction="http://tempuri.org/IUserServices/UpdateTransferAgnetCommisionResponse")]
        void UpdateTransferAgnetCommision(int UserID, bool TranserAgentCommision);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/UpdateTransferAgnetCommision", ReplyAction="http://tempuri.org/IUserServices/UpdateTransferAgnetCommisionResponse")]
        System.IAsyncResult BeginUpdateTransferAgnetCommision(int UserID, bool TranserAgentCommision, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateTransferAgnetCommision(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateFancySyncONorOFF", ReplyAction="http://tempuri.org/IUserServices/UpdateFancySyncONorOFFResponse")]
        void UpdateFancySyncONorOFF(int UserId, string EventID, bool isopenenedbyuser);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/UpdateFancySyncONorOFF", ReplyAction="http://tempuri.org/IUserServices/UpdateFancySyncONorOFFResponse")]
        System.IAsyncResult BeginUpdateFancySyncONorOFF(int UserId, string EventID, bool isopenenedbyuser, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateFancySyncONorOFF(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetMaxBalanceTransferLimit", ReplyAction="http://tempuri.org/IUserServices/GetMaxBalanceTransferLimitResponse")]
        int GetMaxBalanceTransferLimit(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetMaxBalanceTransferLimit", ReplyAction="http://tempuri.org/IUserServices/GetMaxBalanceTransferLimitResponse")]
        System.IAsyncResult BeginGetMaxBalanceTransferLimit(int UserID, System.AsyncCallback callback, object asyncState);
        
        int EndGetMaxBalanceTransferLimit(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateMaxBalanceTransferLimit", ReplyAction="http://tempuri.org/IUserServices/UpdateMaxBalanceTransferLimitResponse")]
        void UpdateMaxBalanceTransferLimit(int UserID, int MaxBalanceTransferLimit);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/UpdateMaxBalanceTransferLimit", ReplyAction="http://tempuri.org/IUserServices/UpdateMaxBalanceTransferLimitResponse")]
        System.IAsyncResult BeginUpdateMaxBalanceTransferLimit(int UserID, int MaxBalanceTransferLimit, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateMaxBalanceTransferLimit(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetMaxAgentRate", ReplyAction="http://tempuri.org/IUserServices/GetMaxAgentRateResponse")]
        int GetMaxAgentRate(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetMaxAgentRate", ReplyAction="http://tempuri.org/IUserServices/GetMaxAgentRateResponse")]
        System.IAsyncResult BeginGetMaxAgentRate(int UserID, System.AsyncCallback callback, object asyncState);
        
        int EndGetMaxAgentRate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateMaxAgentRate", ReplyAction="http://tempuri.org/IUserServices/UpdateMaxAgentRateResponse")]
        void UpdateMaxAgentRate(int UserID, int MaxAgentRate);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/UpdateMaxAgentRate", ReplyAction="http://tempuri.org/IUserServices/UpdateMaxAgentRateResponse")]
        System.IAsyncResult BeginUpdateMaxAgentRate(int UserID, int MaxAgentRate, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateMaxAgentRate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateFancySyncONorOFFbyMarketID", ReplyAction="http://tempuri.org/IUserServices/UpdateFancySyncONorOFFbyMarketIDResponse")]
        void UpdateFancySyncONorOFFbyMarketID(int UserId, string MarektID, bool isopenenedbyuser);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/UpdateFancySyncONorOFFbyMarketID", ReplyAction="http://tempuri.org/IUserServices/UpdateFancySyncONorOFFbyMarketIDResponse")]
        System.IAsyncResult BeginUpdateFancySyncONorOFFbyMarketID(int UserId, string MarektID, bool isopenenedbyuser, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateFancySyncONorOFFbyMarketID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateKJSyncONorOFFbyMarketID", ReplyAction="http://tempuri.org/IUserServices/UpdateKJSyncONorOFFbyMarketIDResponse")]
        void UpdateKJSyncONorOFFbyMarketID(int UserId, string MarektID, bool isopenenedbyuser);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/UpdateKJSyncONorOFFbyMarketID", ReplyAction="http://tempuri.org/IUserServices/UpdateKJSyncONorOFFbyMarketIDResponse")]
        System.IAsyncResult BeginUpdateKJSyncONorOFFbyMarketID(int UserId, string MarektID, bool isopenenedbyuser, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateKJSyncONorOFFbyMarketID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetTotalAgentCommissionbyAgentID", ReplyAction="http://tempuri.org/IUserServices/GetTotalAgentCommissionbyAgentIDResponse")]
        decimal GetTotalAgentCommissionbyAgentID(int UserId, string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetTotalAgentCommissionbyAgentID", ReplyAction="http://tempuri.org/IUserServices/GetTotalAgentCommissionbyAgentIDResponse")]
        System.IAsyncResult BeginGetTotalAgentCommissionbyAgentID(int UserId, string Password, System.AsyncCallback callback, object asyncState);
        
        decimal EndGetTotalAgentCommissionbyAgentID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetToWintheTossbyeventId", ReplyAction="http://tempuri.org/IUserServices/GetToWintheTossbyeventIdResponse")]
        globaltraders.UserServiceReference.SP_UserMarket_GetToWinTheTossbyEventID_Result GetToWintheTossbyeventId(int UserId, string EventId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetToWintheTossbyeventId", ReplyAction="http://tempuri.org/IUserServices/GetToWintheTossbyeventIdResponse")]
        System.IAsyncResult BeginGetToWintheTossbyeventId(int UserId, string EventId, System.AsyncCallback callback, object asyncState);
        
        globaltraders.UserServiceReference.SP_UserMarket_GetToWinTheTossbyEventID_Result EndGetToWintheTossbyeventId(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetToTiedMarketbyEventID", ReplyAction="http://tempuri.org/IUserServices/GetToTiedMarketbyEventIDResponse")]
        globaltraders.UserServiceReference.SP_UserMarket_GetToTiedMarketbyEventID_Result GetToTiedMarketbyEventID(int UserId, string EventId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetToTiedMarketbyEventID", ReplyAction="http://tempuri.org/IUserServices/GetToTiedMarketbyEventIDResponse")]
        System.IAsyncResult BeginGetToTiedMarketbyEventID(int UserId, string EventId, System.AsyncCallback callback, object asyncState);
        
        globaltraders.UserServiceReference.SP_UserMarket_GetToTiedMarketbyEventID_Result EndGetToTiedMarketbyEventID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetSoccergoalbyeventId", ReplyAction="http://tempuri.org/IUserServices/GetSoccergoalbyeventIdResponse")]
        globaltraders.UserServiceReference.SP_UserMarket_GetSoccergoalbyEventID_Result[] GetSoccergoalbyeventId(int UserId, string EventId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetSoccergoalbyeventId", ReplyAction="http://tempuri.org/IUserServices/GetSoccergoalbyeventIdResponse")]
        System.IAsyncResult BeginGetSoccergoalbyeventId(int UserId, string EventId, System.AsyncCallback callback, object asyncState);
        
        globaltraders.UserServiceReference.SP_UserMarket_GetSoccergoalbyEventID_Result[] EndGetSoccergoalbyeventId(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/SetMarketOpenedbyuserinAPP", ReplyAction="http://tempuri.org/IUserServices/SetMarketOpenedbyuserinAPPResponse")]
        void SetMarketOpenedbyuserinAPP();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/SetMarketOpenedbyuserinAPP", ReplyAction="http://tempuri.org/IUserServices/SetMarketOpenedbyuserinAPPResponse")]
        System.IAsyncResult BeginSetMarketOpenedbyuserinAPP(System.AsyncCallback callback, object asyncState);
        
        void EndSetMarketOpenedbyuserinAPP(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetAllMatches", ReplyAction="http://tempuri.org/IUserServices/GetAllMatchesResponse")]
        string GetAllMatches(int userID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetAllMatches", ReplyAction="http://tempuri.org/IUserServices/GetAllMatchesResponse")]
        System.IAsyncResult BeginGetAllMatches(int userID, System.AsyncCallback callback, object asyncState);
        
        string EndGetAllMatches(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetAllCricketMatches", ReplyAction="http://tempuri.org/IUserServices/GetAllCricketMatchesResponse")]
        string GetAllCricketMatches(int userID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetAllCricketMatches", ReplyAction="http://tempuri.org/IUserServices/GetAllCricketMatchesResponse")]
        System.IAsyncResult BeginGetAllCricketMatches(int userID, System.AsyncCallback callback, object asyncState);
        
        string EndGetAllCricketMatches(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetAllSoccerMatches", ReplyAction="http://tempuri.org/IUserServices/GetAllSoccerMatchesResponse")]
        string GetAllSoccerMatches(int userID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetAllSoccerMatches", ReplyAction="http://tempuri.org/IUserServices/GetAllSoccerMatchesResponse")]
        System.IAsyncResult BeginGetAllSoccerMatches(int userID, System.AsyncCallback callback, object asyncState);
        
        string EndGetAllSoccerMatches(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetAllTennisMatches", ReplyAction="http://tempuri.org/IUserServices/GetAllTennisMatchesResponse")]
        string GetAllTennisMatches(int userID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetAllTennisMatches", ReplyAction="http://tempuri.org/IUserServices/GetAllTennisMatchesResponse")]
        System.IAsyncResult BeginGetAllTennisMatches(int userID, System.AsyncCallback callback, object asyncState);
        
        string EndGetAllTennisMatches(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateUserbetamountbyParentID", ReplyAction="http://tempuri.org/IUserServices/UpdateUserbetamountbyParentIDResponse")]
        bool UpdateUserbetamountbyParentID(long ID, decimal amount, string userodd, string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/UpdateUserbetamountbyParentID", ReplyAction="http://tempuri.org/IUserServices/UpdateUserbetamountbyParentIDResponse")]
        System.IAsyncResult BeginUpdateUserbetamountbyParentID(long ID, decimal amount, string userodd, string Password, System.AsyncCallback callback, object asyncState);
        
        bool EndUpdateUserbetamountbyParentID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetUserBetsbyAgentID", ReplyAction="http://tempuri.org/IUserServices/GetUserBetsbyAgentIDResponse")]
        string GetUserBetsbyAgentID(int AgentID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetUserBetsbyAgentID", ReplyAction="http://tempuri.org/IUserServices/GetUserBetsbyAgentIDResponse")]
        System.IAsyncResult BeginGetUserBetsbyAgentID(int AgentID, string Password, System.AsyncCallback callback, object asyncState);
        
        string EndGetUserBetsbyAgentID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetUserBetsbySuperID", ReplyAction="http://tempuri.org/IUserServices/GetUserBetsbySuperIDResponse")]
        string GetUserBetsbySuperID(int SuperID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetUserBetsbySuperID", ReplyAction="http://tempuri.org/IUserServices/GetUserBetsbySuperIDResponse")]
        System.IAsyncResult BeginGetUserBetsbySuperID(int SuperID, string Password, System.AsyncCallback callback, object asyncState);
        
        string EndGetUserBetsbySuperID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetUserBetsbySamiAdmin", ReplyAction="http://tempuri.org/IUserServices/GetUserBetsbySamiAdminResponse")]
        string GetUserBetsbySamiAdmin(int SuperID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetUserBetsbySamiAdmin", ReplyAction="http://tempuri.org/IUserServices/GetUserBetsbySamiAdminResponse")]
        System.IAsyncResult BeginGetUserBetsbySamiAdmin(int SuperID, string Password, System.AsyncCallback callback, object asyncState);
        
        string EndGetUserBetsbySamiAdmin(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetUserBetsbyAgentIDwithZeroReferer", ReplyAction="http://tempuri.org/IUserServices/GetUserBetsbyAgentIDwithZeroRefererResponse")]
        string GetUserBetsbyAgentIDwithZeroReferer(int AgentID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetUserBetsbyAgentIDwithZeroReferer", ReplyAction="http://tempuri.org/IUserServices/GetUserBetsbyAgentIDwithZeroRefererResponse")]
        System.IAsyncResult BeginGetUserBetsbyAgentIDwithZeroReferer(int AgentID, string Password, System.AsyncCallback callback, object asyncState);
        
        string EndGetUserBetsbyAgentIDwithZeroReferer(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetUserbetsbyUserIDandAgentID", ReplyAction="http://tempuri.org/IUserServices/GetUserbetsbyUserIDandAgentIDResponse")]
        string GetUserbetsbyUserIDandAgentID(int AgentID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetUserbetsbyUserIDandAgentID", ReplyAction="http://tempuri.org/IUserServices/GetUserbetsbyUserIDandAgentIDResponse")]
        System.IAsyncResult BeginGetUserbetsbyUserIDandAgentID(int AgentID, string Password, System.AsyncCallback callback, object asyncState);
        
        string EndGetUserbetsbyUserIDandAgentID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetUserbetsForAdmin", ReplyAction="http://tempuri.org/IUserServices/GetUserbetsForAdminResponse")]
        string GetUserbetsForAdmin(string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetUserbetsForAdmin", ReplyAction="http://tempuri.org/IUserServices/GetUserbetsForAdminResponse")]
        System.IAsyncResult BeginGetUserbetsForAdmin(string Password, System.AsyncCallback callback, object asyncState);
        
        string EndGetUserbetsForAdmin(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetMarketsOpenedbyUsersofAgent", ReplyAction="http://tempuri.org/IUserServices/GetMarketsOpenedbyUsersofAgentResponse")]
        string GetMarketsOpenedbyUsersofAgent(int AgentID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetMarketsOpenedbyUsersofAgent", ReplyAction="http://tempuri.org/IUserServices/GetMarketsOpenedbyUsersofAgentResponse")]
        System.IAsyncResult BeginGetMarketsOpenedbyUsersofAgent(int AgentID, System.AsyncCallback callback, object asyncState);
        
        string EndGetMarketsOpenedbyUsersofAgent(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetMarketsOpenedbyUsersForAdmin", ReplyAction="http://tempuri.org/IUserServices/GetMarketsOpenedbyUsersForAdminResponse")]
        string GetMarketsOpenedbyUsersForAdmin();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetMarketsOpenedbyUsersForAdmin", ReplyAction="http://tempuri.org/IUserServices/GetMarketsOpenedbyUsersForAdminResponse")]
        System.IAsyncResult BeginGetMarketsOpenedbyUsersForAdmin(System.AsyncCallback callback, object asyncState);
        
        string EndGetMarketsOpenedbyUsersForAdmin(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/SetLoggedinStatus", ReplyAction="http://tempuri.org/IUserServices/SetLoggedinStatusResponse")]
        void SetLoggedinStatus(int userID, bool LoggedIn);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/SetLoggedinStatus", ReplyAction="http://tempuri.org/IUserServices/SetLoggedinStatusResponse")]
        System.IAsyncResult BeginSetLoggedinStatus(int userID, bool LoggedIn, System.AsyncCallback callback, object asyncState);
        
        void EndSetLoggedinStatus(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetCompletedMatchedBetsbyUserID", ReplyAction="http://tempuri.org/IUserServices/GetCompletedMatchedBetsbyUserIDResponse")]
        string GetCompletedMatchedBetsbyUserID(int UserID, string MarketbookID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetCompletedMatchedBetsbyUserID", ReplyAction="http://tempuri.org/IUserServices/GetCompletedMatchedBetsbyUserIDResponse")]
        System.IAsyncResult BeginGetCompletedMatchedBetsbyUserID(int UserID, string MarketbookID, System.AsyncCallback callback, object asyncState);
        
        string EndGetCompletedMatchedBetsbyUserID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetAllUserMarketbyUserID", ReplyAction="http://tempuri.org/IUserServices/GetAllUserMarketbyUserIDResponse")]
        string GetAllUserMarketbyUserID(int userID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetAllUserMarketbyUserID", ReplyAction="http://tempuri.org/IUserServices/GetAllUserMarketbyUserIDResponse")]
        System.IAsyncResult BeginGetAllUserMarketbyUserID(int userID, System.AsyncCallback callback, object asyncState);
        
        string EndGetAllUserMarketbyUserID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetUserStatus", ReplyAction="http://tempuri.org/IUserServices/GetUserStatusResponse")]
        string GetUserStatus(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetUserStatus", ReplyAction="http://tempuri.org/IUserServices/GetUserStatusResponse")]
        System.IAsyncResult BeginGetUserStatus(int UserID, System.AsyncCallback callback, object asyncState);
        
        string EndGetUserStatus(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetLastLoginTimes", ReplyAction="http://tempuri.org/IUserServices/GetLastLoginTimesResponse")]
        string GetLastLoginTimes(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetLastLoginTimes", ReplyAction="http://tempuri.org/IUserServices/GetLastLoginTimesResponse")]
        System.IAsyncResult BeginGetLastLoginTimes(int UserID, System.AsyncCallback callback, object asyncState);
        
        string EndGetLastLoginTimes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateBetSizebyID", ReplyAction="http://tempuri.org/IUserServices/UpdateBetSizebyIDResponse")]
        void UpdateBetSizebyID(long ID, string BetSize, string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/UpdateBetSizebyID", ReplyAction="http://tempuri.org/IUserServices/UpdateBetSizebyIDResponse")]
        System.IAsyncResult BeginUpdateBetSizebyID(long ID, string BetSize, string Password, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateBetSizebyID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetUnMatchedBets", ReplyAction="http://tempuri.org/IUserServices/GetUnMatchedBetsResponse")]
        string GetUnMatchedBets(string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetUnMatchedBets", ReplyAction="http://tempuri.org/IUserServices/GetUnMatchedBetsResponse")]
        System.IAsyncResult BeginGetUnMatchedBets(string Password, System.AsyncCallback callback, object asyncState);
        
        string EndGetUnMatchedBets(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetSheetNamebyMarketID", ReplyAction="http://tempuri.org/IUserServices/GetSheetNamebyMarketIDResponse")]
        string GetSheetNamebyMarketID(string marketbookID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetSheetNamebyMarketID", ReplyAction="http://tempuri.org/IUserServices/GetSheetNamebyMarketIDResponse")]
        System.IAsyncResult BeginGetSheetNamebyMarketID(string marketbookID, System.AsyncCallback callback, object asyncState);
        
        string EndGetSheetNamebyMarketID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateBetLowerLimit", ReplyAction="http://tempuri.org/IUserServices/UpdateBetLowerLimitResponse")]
        void UpdateBetLowerLimit(
                    int userID, 
                    decimal BetLowerLimit, 
                    decimal BetUpperLimit, 
                    bool isAllowedGrayHound, 
                    bool isAllowedHorse, 
                    decimal BetLowerLimitHorsePlace, 
                    decimal BetUpperLimitHorsePlace, 
                    decimal BetLowerLimitGrayHoundWin, 
                    decimal BetUpperLimitGrayHoundWin, 
                    decimal BetLowerLimitGrayHoundPlace, 
                    decimal BetUpperLimitGrayHoundPlace, 
                    decimal BetLowerLimitMatchOdds, 
                    decimal BetUpperLimitMatchOdds, 
                    decimal BetLowerLimitInningsRunns, 
                    decimal BetUpperLimitInningsRunns, 
                    decimal BetLowerLimitCompletedMatch, 
                    decimal BetUpperLimitCompletedMatch, 
                    bool isTennisAllowed, 
                    bool isSoccerAllowed, 
                    int CommissionRate, 
                    decimal BetLowerLimitMatchOddsSoccer, 
                    decimal BetUpperLimitMatchOddsSoccer, 
                    decimal BetLowerLimitMatchOddsTennis, 
                    decimal BetUpperLimitMatchOddsTennis, 
                    decimal BetUpperLimitTiedMatch, 
                    decimal BetLowerLimitTiedMatch, 
                    decimal BetUpperLimitWinner, 
                    decimal BetLowerLimitWinner, 
                    string Password, 
                    decimal BetUpperLimitFancy, 
                    decimal BetLowerLimitFancy);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/UpdateBetLowerLimit", ReplyAction="http://tempuri.org/IUserServices/UpdateBetLowerLimitResponse")]
        System.IAsyncResult BeginUpdateBetLowerLimit(
                    int userID, 
                    decimal BetLowerLimit, 
                    decimal BetUpperLimit, 
                    bool isAllowedGrayHound, 
                    bool isAllowedHorse, 
                    decimal BetLowerLimitHorsePlace, 
                    decimal BetUpperLimitHorsePlace, 
                    decimal BetLowerLimitGrayHoundWin, 
                    decimal BetUpperLimitGrayHoundWin, 
                    decimal BetLowerLimitGrayHoundPlace, 
                    decimal BetUpperLimitGrayHoundPlace, 
                    decimal BetLowerLimitMatchOdds, 
                    decimal BetUpperLimitMatchOdds, 
                    decimal BetLowerLimitInningsRunns, 
                    decimal BetUpperLimitInningsRunns, 
                    decimal BetLowerLimitCompletedMatch, 
                    decimal BetUpperLimitCompletedMatch, 
                    bool isTennisAllowed, 
                    bool isSoccerAllowed, 
                    int CommissionRate, 
                    decimal BetLowerLimitMatchOddsSoccer, 
                    decimal BetUpperLimitMatchOddsSoccer, 
                    decimal BetLowerLimitMatchOddsTennis, 
                    decimal BetUpperLimitMatchOddsTennis, 
                    decimal BetUpperLimitTiedMatch, 
                    decimal BetLowerLimitTiedMatch, 
                    decimal BetUpperLimitWinner, 
                    decimal BetLowerLimitWinner, 
                    string Password, 
                    decimal BetUpperLimitFancy, 
                    decimal BetLowerLimitFancy, 
                    System.AsyncCallback callback, 
                    object asyncState);
        
        void EndUpdateBetLowerLimit(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateCheckConditionforPlaceBet", ReplyAction="http://tempuri.org/IUserServices/UpdateCheckConditionforPlaceBetResponse")]
        void UpdateCheckConditionforPlaceBet(int UserID, bool CheckConditionforPlaceBet);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/UpdateCheckConditionforPlaceBet", ReplyAction="http://tempuri.org/IUserServices/UpdateCheckConditionforPlaceBetResponse")]
        System.IAsyncResult BeginUpdateCheckConditionforPlaceBet(int UserID, bool CheckConditionforPlaceBet, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateCheckConditionforPlaceBet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetTodayHorseRacing", ReplyAction="http://tempuri.org/IUserServices/GetTodayHorseRacingResponse")]
        string GetTodayHorseRacing(int UserID, string EventTypeID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetTodayHorseRacing", ReplyAction="http://tempuri.org/IUserServices/GetTodayHorseRacingResponse")]
        System.IAsyncResult BeginGetTodayHorseRacing(int UserID, string EventTypeID, System.AsyncCallback callback, object asyncState);
        
        string EndGetTodayHorseRacing(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetTodayHorseRacingNew", ReplyAction="http://tempuri.org/IUserServices/GetTodayHorseRacingNewResponse")]
        string GetTodayHorseRacingNew(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetTodayHorseRacingNew", ReplyAction="http://tempuri.org/IUserServices/GetTodayHorseRacingNewResponse")]
        System.IAsyncResult BeginGetTodayHorseRacingNew(int UserID, System.AsyncCallback callback, object asyncState);
        
        string EndGetTodayHorseRacingNew(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetDistinctmarketopened", ReplyAction="http://tempuri.org/IUserServices/GetDistinctmarketopenedResponse")]
        string GetDistinctmarketopened();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetDistinctmarketopened", ReplyAction="http://tempuri.org/IUserServices/GetDistinctmarketopenedResponse")]
        System.IAsyncResult BeginGetDistinctmarketopened(System.AsyncCallback callback, object asyncState);
        
        string EndGetDistinctmarketopened(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateOddsData", ReplyAction="http://tempuri.org/IUserServices/UpdateOddsDataResponse")]
        void UpdateOddsData(string oddsdata, string Oddtype);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/UpdateOddsData", ReplyAction="http://tempuri.org/IUserServices/UpdateOddsDataResponse")]
        System.IAsyncResult BeginUpdateOddsData(string oddsdata, string Oddtype, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateOddsData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetCommissionRatebyUserID", ReplyAction="http://tempuri.org/IUserServices/GetCommissionRatebyUserIDResponse")]
        int GetCommissionRatebyUserID(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetCommissionRatebyUserID", ReplyAction="http://tempuri.org/IUserServices/GetCommissionRatebyUserIDResponse")]
        System.IAsyncResult BeginGetCommissionRatebyUserID(int UserID, System.AsyncCallback callback, object asyncState);
        
        int EndGetCommissionRatebyUserID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateUserPhoneandNamebyUserId", ReplyAction="http://tempuri.org/IUserServices/UpdateUserPhoneandNamebyUserIdResponse")]
        void UpdateUserPhoneandNamebyUserId(int userId, string Name, string Phone);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/UpdateUserPhoneandNamebyUserId", ReplyAction="http://tempuri.org/IUserServices/UpdateUserPhoneandNamebyUserIdResponse")]
        System.IAsyncResult BeginUpdateUserPhoneandNamebyUserId(int userId, string Name, string Phone, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateUserPhoneandNamebyUserId(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetAccountsDatabyEventtypeuserIDandDateRange", ReplyAction="http://tempuri.org/IUserServices/GetAccountsDatabyEventtypeuserIDandDateRangeResp" +
            "onse")]
        string GetAccountsDatabyEventtypeuserIDandDateRange(int UserID, string From, string To, string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetAccountsDatabyEventtypeuserIDandDateRange", ReplyAction="http://tempuri.org/IUserServices/GetAccountsDatabyEventtypeuserIDandDateRangeResp" +
            "onse")]
        System.IAsyncResult BeginGetAccountsDatabyEventtypeuserIDandDateRange(int UserID, string From, string To, string Password, System.AsyncCallback callback, object asyncState);
        
        string EndGetAccountsDatabyEventtypeuserIDandDateRange(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetDatabyAgentIDForCommisionandDateRange", ReplyAction="http://tempuri.org/IUserServices/GetDatabyAgentIDForCommisionandDateRangeResponse" +
            "")]
        string GetDatabyAgentIDForCommisionandDateRange(int UserID, string From, string To, string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetDatabyAgentIDForCommisionandDateRange", ReplyAction="http://tempuri.org/IUserServices/GetDatabyAgentIDForCommisionandDateRangeResponse" +
            "")]
        System.IAsyncResult BeginGetDatabyAgentIDForCommisionandDateRange(int UserID, string From, string To, string Password, System.AsyncCallback callback, object asyncState);
        
        string EndGetDatabyAgentIDForCommisionandDateRange(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetDatabyAgentIDForCommisionandDateRangeByEventt" +
            "ype", ReplyAction="http://tempuri.org/IUserServices/GetDatabyAgentIDForCommisionandDateRangeByEventt" +
            "ypeResponse")]
        string GetDatabyAgentIDForCommisionandDateRangeByEventtype(int UserID, string From, string To, string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetDatabyAgentIDForCommisionandDateRangeByEventt" +
            "ype", ReplyAction="http://tempuri.org/IUserServices/GetDatabyAgentIDForCommisionandDateRangeByEventt" +
            "ypeResponse")]
        System.IAsyncResult BeginGetDatabyAgentIDForCommisionandDateRangeByEventtype(int UserID, string From, string To, string Password, System.AsyncCallback callback, object asyncState);
        
        string EndGetDatabyAgentIDForCommisionandDateRangeByEventtype(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UserAccountsGetCommission", ReplyAction="http://tempuri.org/IUserServices/UserAccountsGetCommissionResponse")]
        string UserAccountsGetCommission(int UserID, string From, string To, string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/UserAccountsGetCommission", ReplyAction="http://tempuri.org/IUserServices/UserAccountsGetCommissionResponse")]
        System.IAsyncResult BeginUserAccountsGetCommission(int UserID, string From, string To, string Password, System.AsyncCallback callback, object asyncState);
        
        string EndUserAccountsGetCommission(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetEventTypeNamebyMarketID", ReplyAction="http://tempuri.org/IUserServices/GetEventTypeNamebyMarketIDResponse")]
        string GetEventTypeNamebyMarketID(string marketBookId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetEventTypeNamebyMarketID", ReplyAction="http://tempuri.org/IUserServices/GetEventTypeNamebyMarketIDResponse")]
        System.IAsyncResult BeginGetEventTypeNamebyMarketID(string marketBookId, System.AsyncCallback callback, object asyncState);
        
        string EndGetEventTypeNamebyMarketID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateLiveOddbyID", ReplyAction="http://tempuri.org/IUserServices/UpdateLiveOddbyIDResponse")]
        void UpdateLiveOddbyID(long ID, string liveOdd, string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/UpdateLiveOddbyID", ReplyAction="http://tempuri.org/IUserServices/UpdateLiveOddbyIDResponse")]
        System.IAsyncResult BeginUpdateLiveOddbyID(long ID, string liveOdd, string Password, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateLiveOddbyID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateUserOddbyID", ReplyAction="http://tempuri.org/IUserServices/UpdateUserOddbyIDResponse")]
        void UpdateUserOddbyID(long ID, string UserOdd, string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/UpdateUserOddbyID", ReplyAction="http://tempuri.org/IUserServices/UpdateUserOddbyIDResponse")]
        System.IAsyncResult BeginUpdateUserOddbyID(long ID, string UserOdd, string Password, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateUserOddbyID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetAllowedMarketsbyUserID", ReplyAction="http://tempuri.org/IUserServices/GetAllowedMarketsbyUserIDResponse")]
        string GetAllowedMarketsbyUserID(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetAllowedMarketsbyUserID", ReplyAction="http://tempuri.org/IUserServices/GetAllowedMarketsbyUserIDResponse")]
        System.IAsyncResult BeginGetAllowedMarketsbyUserID(int UserID, System.AsyncCallback callback, object asyncState);
        
        string EndGetAllowedMarketsbyUserID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateAllowedMarketsbyUserID", ReplyAction="http://tempuri.org/IUserServices/UpdateAllowedMarketsbyUserIDResponse")]
        void UpdateAllowedMarketsbyUserID(bool isCricketMatchOddsAllowedForBet, bool isCricketTiedMatchAllowedForBet, bool isCricketCompletedMatchAllowedForBet, bool isCricketInningsRunsAllowedForBet, bool isSoccerAllowedForBet, bool isTennisAllowedForBet, bool isHorseRaceWinAllowedForBet, bool isHorseRacePlaceAllowedForBet, bool isGrayHoundRaceWinAllowedForBet, bool isGrayHoundRacePlaceAllowedForBet, int UserID, bool isWinnerMarketAllowedForBet, string Password, bool isFancyAllowed);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/UpdateAllowedMarketsbyUserID", ReplyAction="http://tempuri.org/IUserServices/UpdateAllowedMarketsbyUserIDResponse")]
        System.IAsyncResult BeginUpdateAllowedMarketsbyUserID(
                    bool isCricketMatchOddsAllowedForBet, 
                    bool isCricketTiedMatchAllowedForBet, 
                    bool isCricketCompletedMatchAllowedForBet, 
                    bool isCricketInningsRunsAllowedForBet, 
                    bool isSoccerAllowedForBet, 
                    bool isTennisAllowedForBet, 
                    bool isHorseRaceWinAllowedForBet, 
                    bool isHorseRacePlaceAllowedForBet, 
                    bool isGrayHoundRaceWinAllowedForBet, 
                    bool isGrayHoundRacePlaceAllowedForBet, 
                    int UserID, 
                    bool isWinnerMarketAllowedForBet, 
                    string Password, 
                    bool isFancyAllowed, 
                    System.AsyncCallback callback, 
                    object asyncState);
        
        void EndUpdateAllowedMarketsbyUserID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetCommissionaccountIdandBookAccountbyUserID", ReplyAction="http://tempuri.org/IUserServices/GetCommissionaccountIdandBookAccountbyUserIDResp" +
            "onse")]
        globaltraders.UserServiceReference.SP_Users_GetCommissionAccountIDandBookAccountID_Result GetCommissionaccountIdandBookAccountbyUserID(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetCommissionaccountIdandBookAccountbyUserID", ReplyAction="http://tempuri.org/IUserServices/GetCommissionaccountIdandBookAccountbyUserIDResp" +
            "onse")]
        System.IAsyncResult BeginGetCommissionaccountIdandBookAccountbyUserID(int UserID, System.AsyncCallback callback, object asyncState);
        
        globaltraders.UserServiceReference.SP_Users_GetCommissionAccountIDandBookAccountID_Result EndGetCommissionaccountIdandBookAccountbyUserID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetReferrerRateandIDbyUserID", ReplyAction="http://tempuri.org/IUserServices/GetReferrerRateandIDbyUserIDResponse")]
        globaltraders.UserServiceReference.SP_Users_GetReferrerRateandReferrerIDbyUserID_Result GetReferrerRateandIDbyUserID(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetReferrerRateandIDbyUserID", ReplyAction="http://tempuri.org/IUserServices/GetReferrerRateandIDbyUserIDResponse")]
        System.IAsyncResult BeginGetReferrerRateandIDbyUserID(int UserID, System.AsyncCallback callback, object asyncState);
        
        globaltraders.UserServiceReference.SP_Users_GetReferrerRateandReferrerIDbyUserID_Result EndGetReferrerRateandIDbyUserID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateRefererRateandIDbyUserID", ReplyAction="http://tempuri.org/IUserServices/UpdateRefererRateandIDbyUserIDResponse")]
        void UpdateRefererRateandIDbyUserID(int UserID, int ReffereID, int ReferrerRate);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/UpdateRefererRateandIDbyUserID", ReplyAction="http://tempuri.org/IUserServices/UpdateRefererRateandIDbyUserIDResponse")]
        System.IAsyncResult BeginUpdateRefererRateandIDbyUserID(int UserID, int ReffereID, int ReferrerRate, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateRefererRateandIDbyUserID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateUsersAllBlock", ReplyAction="http://tempuri.org/IUserServices/UpdateUsersAllBlockResponse")]
        void UpdateUsersAllBlock();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/UpdateUsersAllBlock", ReplyAction="http://tempuri.org/IUserServices/UpdateUsersAllBlockResponse")]
        System.IAsyncResult BeginUpdateUsersAllBlock(System.AsyncCallback callback, object asyncState);
        
        void EndUpdateUsersAllBlock(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateUsersAllLoggedOut", ReplyAction="http://tempuri.org/IUserServices/UpdateUsersAllLoggedOutResponse")]
        void UpdateUsersAllLoggedOut();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/UpdateUsersAllLoggedOut", ReplyAction="http://tempuri.org/IUserServices/UpdateUsersAllLoggedOutResponse")]
        System.IAsyncResult BeginUpdateUsersAllLoggedOut(System.AsyncCallback callback, object asyncState);
        
        void EndUpdateUsersAllLoggedOut(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateMaxOddBackandLay", ReplyAction="http://tempuri.org/IUserServices/UpdateMaxOddBackandLayResponse")]
        void UpdateMaxOddBackandLay(int UserID, decimal MaxOddBack, bool CheckForMaxOddBack, decimal MaxOddLay, bool CheckForMaxOddLay);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/UpdateMaxOddBackandLay", ReplyAction="http://tempuri.org/IUserServices/UpdateMaxOddBackandLayResponse")]
        System.IAsyncResult BeginUpdateMaxOddBackandLay(int UserID, decimal MaxOddBack, bool CheckForMaxOddBack, decimal MaxOddLay, bool CheckForMaxOddLay, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateMaxOddBackandLay(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetIntervalandBetPlaceTimings", ReplyAction="http://tempuri.org/IUserServices/GetIntervalandBetPlaceTimingsResponse")]
        string GetIntervalandBetPlaceTimings(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetIntervalandBetPlaceTimings", ReplyAction="http://tempuri.org/IUserServices/GetIntervalandBetPlaceTimingsResponse")]
        System.IAsyncResult BeginGetIntervalandBetPlaceTimings(int UserID, System.AsyncCallback callback, object asyncState);
        
        string EndGetIntervalandBetPlaceTimings(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateIntervalandBetPlaceTimings", ReplyAction="http://tempuri.org/IUserServices/UpdateIntervalandBetPlaceTimingsResponse")]
        void UpdateIntervalandBetPlaceTimings(
                    int HorseRaceTimerInterval, 
                    int HorseRaceBetPlaceWait, 
                    int GrayHoundTimerInterval, 
                    int GrayHoundBetPlaceWait, 
                    int CricketMatchOddsTimerInterval, 
                    int CricketMatchOddsBetPlaceWait, 
                    int CompletedMatchTimerInterval, 
                    int CompletedMatchBetPlaceWait, 
                    int TiedMatchTimerInterval, 
                    int TiedMatchBetPlaceWait, 
                    int InningsRunsTimerInterval, 
                    int InningsRunsBetPlaceWait, 
                    int WinnerTimerInterval, 
                    int WinnerBetPlaceWait, 
                    int TennisTimerInterval, 
                    int TennisBetPlaceWait, 
                    int SoccerTimerInterval, 
                    int SoccerBetPlaceWait, 
                    decimal PoundRate, 
                    int userID, 
                    int FancyTimerInterval, 
                    int FancyBetPlaceWait, 
                    int RaceMinutesBeforeStart, 
                    int CancelBetTime);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/UpdateIntervalandBetPlaceTimings", ReplyAction="http://tempuri.org/IUserServices/UpdateIntervalandBetPlaceTimingsResponse")]
        System.IAsyncResult BeginUpdateIntervalandBetPlaceTimings(
                    int HorseRaceTimerInterval, 
                    int HorseRaceBetPlaceWait, 
                    int GrayHoundTimerInterval, 
                    int GrayHoundBetPlaceWait, 
                    int CricketMatchOddsTimerInterval, 
                    int CricketMatchOddsBetPlaceWait, 
                    int CompletedMatchTimerInterval, 
                    int CompletedMatchBetPlaceWait, 
                    int TiedMatchTimerInterval, 
                    int TiedMatchBetPlaceWait, 
                    int InningsRunsTimerInterval, 
                    int InningsRunsBetPlaceWait, 
                    int WinnerTimerInterval, 
                    int WinnerBetPlaceWait, 
                    int TennisTimerInterval, 
                    int TennisBetPlaceWait, 
                    int SoccerTimerInterval, 
                    int SoccerBetPlaceWait, 
                    decimal PoundRate, 
                    int userID, 
                    int FancyTimerInterval, 
                    int FancyBetPlaceWait, 
                    int RaceMinutesBeforeStart, 
                    int CancelBetTime, 
                    System.AsyncCallback callback, 
                    object asyncState);
        
        void EndUpdateIntervalandBetPlaceTimings(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetHawalaAccountIDbyUserID", ReplyAction="http://tempuri.org/IUserServices/GetHawalaAccountIDbyUserIDResponse")]
        int GetHawalaAccountIDbyUserID(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetHawalaAccountIDbyUserID", ReplyAction="http://tempuri.org/IUserServices/GetHawalaAccountIDbyUserIDResponse")]
        System.IAsyncResult BeginGetHawalaAccountIDbyUserID(int UserID, System.AsyncCallback callback, object asyncState);
        
        int EndGetHawalaAccountIDbyUserID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetCreatedbyID", ReplyAction="http://tempuri.org/IUserServices/GetCreatedbyIDResponse")]
        int GetCreatedbyID(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetCreatedbyID", ReplyAction="http://tempuri.org/IUserServices/GetCreatedbyIDResponse")]
        System.IAsyncResult BeginGetCreatedbyID(int UserID, System.AsyncCallback callback, object asyncState);
        
        int EndGetCreatedbyID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateHawalaIDbyUserID", ReplyAction="http://tempuri.org/IUserServices/UpdateHawalaIDbyUserIDResponse")]
        void UpdateHawalaIDbyUserID(int userID, int ParentID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/UpdateHawalaIDbyUserID", ReplyAction="http://tempuri.org/IUserServices/UpdateHawalaIDbyUserIDResponse")]
        System.IAsyncResult BeginUpdateHawalaIDbyUserID(int userID, int ParentID, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateHawalaIDbyUserID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetMarketsforBettingAllowed", ReplyAction="http://tempuri.org/IUserServices/GetMarketsforBettingAllowedResponse")]
        string GetMarketsforBettingAllowed(int userID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetMarketsforBettingAllowed", ReplyAction="http://tempuri.org/IUserServices/GetMarketsforBettingAllowedResponse")]
        System.IAsyncResult BeginGetMarketsforBettingAllowed(int userID, System.AsyncCallback callback, object asyncState);
        
        string EndGetMarketsforBettingAllowed(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateMarketAllowedBetting", ReplyAction="http://tempuri.org/IUserServices/UpdateMarketAllowedBettingResponse")]
        void UpdateMarketAllowedBetting(int UserId, string MarketbookId, bool AllowedBetting);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/UpdateMarketAllowedBetting", ReplyAction="http://tempuri.org/IUserServices/UpdateMarketAllowedBettingResponse")]
        System.IAsyncResult BeginUpdateMarketAllowedBetting(int UserId, string MarketbookId, bool AllowedBetting, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateMarketAllowedBetting(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateMarketAllowedBettingForAllAgents", ReplyAction="http://tempuri.org/IUserServices/UpdateMarketAllowedBettingForAllAgentsResponse")]
        void UpdateMarketAllowedBettingForAllAgents(int[] UserIds, globaltraders.UserServiceReference.SP_UserMarket_GetMarketForAllowedBetting_Result[] lstMarkets);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/UpdateMarketAllowedBettingForAllAgents", ReplyAction="http://tempuri.org/IUserServices/UpdateMarketAllowedBettingForAllAgentsResponse")]
        System.IAsyncResult BeginUpdateMarketAllowedBettingForAllAgents(int[] UserIds, globaltraders.UserServiceReference.SP_UserMarket_GetMarketForAllowedBetting_Result[] lstMarkets, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateMarketAllowedBettingForAllAgents(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetBetSlipKeys", ReplyAction="http://tempuri.org/IUserServices/GetBetSlipKeysResponse")]
        string GetBetSlipKeys(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetBetSlipKeys", ReplyAction="http://tempuri.org/IUserServices/GetBetSlipKeysResponse")]
        System.IAsyncResult BeginGetBetSlipKeys(int UserID, System.AsyncCallback callback, object asyncState);
        
        string EndGetBetSlipKeys(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateBetSlipKeys", ReplyAction="http://tempuri.org/IUserServices/UpdateBetSlipKeysResponse")]
        void UpdateBetSlipKeys(
                    int UserID, 
                    string SimpleBtn1, 
                    string SimpleBtn2, 
                    string SimpleBtn3, 
                    string SimpleBtn4, 
                    string SimpleBtn5, 
                    string SimpleBtn6, 
                    string SimpleBtn7, 
                    string SimpleBtn8, 
                    string SimpleBtn9, 
                    string SimpleBtn10, 
                    string SimpleBtn11, 
                    string SimpleBtn12, 
                    string MutipleBtn1, 
                    string MutipleBtn2, 
                    string MutipleBtn3, 
                    string MutipleBtn4, 
                    string MutipleBtn5, 
                    string MutipleBtn6, 
                    string MutipleBtn7, 
                    string MutipleBtn8, 
                    string MutipleBtn9, 
                    string MutipleBtn10, 
                    string MutipleBtn11, 
                    string MutipleBtn12);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/UpdateBetSlipKeys", ReplyAction="http://tempuri.org/IUserServices/UpdateBetSlipKeysResponse")]
        System.IAsyncResult BeginUpdateBetSlipKeys(
                    int UserID, 
                    string SimpleBtn1, 
                    string SimpleBtn2, 
                    string SimpleBtn3, 
                    string SimpleBtn4, 
                    string SimpleBtn5, 
                    string SimpleBtn6, 
                    string SimpleBtn7, 
                    string SimpleBtn8, 
                    string SimpleBtn9, 
                    string SimpleBtn10, 
                    string SimpleBtn11, 
                    string SimpleBtn12, 
                    string MutipleBtn1, 
                    string MutipleBtn2, 
                    string MutipleBtn3, 
                    string MutipleBtn4, 
                    string MutipleBtn5, 
                    string MutipleBtn6, 
                    string MutipleBtn7, 
                    string MutipleBtn8, 
                    string MutipleBtn9, 
                    string MutipleBtn10, 
                    string MutipleBtn11, 
                    string MutipleBtn12, 
                    System.AsyncCallback callback, 
                    object asyncState);
        
        void EndUpdateBetSlipKeys(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateBettingAllowed", ReplyAction="http://tempuri.org/IUserServices/UpdateBettingAllowedResponse")]
        void UpdateBettingAllowed(string EventID, string BettingAllowed);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/UpdateBettingAllowed", ReplyAction="http://tempuri.org/IUserServices/UpdateBettingAllowedResponse")]
        System.IAsyncResult BeginUpdateBettingAllowed(string EventID, string BettingAllowed, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateBettingAllowed(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetPoundRatebyUserID", ReplyAction="http://tempuri.org/IUserServices/GetPoundRatebyUserIDResponse")]
        decimal GetPoundRatebyUserID(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetPoundRatebyUserID", ReplyAction="http://tempuri.org/IUserServices/GetPoundRatebyUserIDResponse")]
        System.IAsyncResult BeginGetPoundRatebyUserID(int UserID, System.AsyncCallback callback, object asyncState);
        
        decimal EndGetPoundRatebyUserID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetMarqueeText", ReplyAction="http://tempuri.org/IUserServices/GetMarqueeTextResponse")]
        string GetMarqueeText();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetMarqueeText", ReplyAction="http://tempuri.org/IUserServices/GetMarqueeTextResponse")]
        System.IAsyncResult BeginGetMarqueeText(System.AsyncCallback callback, object asyncState);
        
        string EndGetMarqueeText(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateMarqueeText", ReplyAction="http://tempuri.org/IUserServices/UpdateMarqueeTextResponse")]
        void UpdateMarqueeText(string marqueetext);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/UpdateMarqueeText", ReplyAction="http://tempuri.org/IUserServices/UpdateMarqueeTextResponse")]
        System.IAsyncResult BeginUpdateMarqueeText(string marqueetext, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateMarqueeText(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/SendBalanceSheettoEmail", ReplyAction="http://tempuri.org/IUserServices/SendBalanceSheettoEmailResponse")]
        void SendBalanceSheettoEmail(string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/SendBalanceSheettoEmail", ReplyAction="http://tempuri.org/IUserServices/SendBalanceSheettoEmailResponse")]
        System.IAsyncResult BeginSendBalanceSheettoEmail(string Password, System.AsyncCallback callback, object asyncState);
        
        void EndSendBalanceSheettoEmail(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/SendBalanceSheettoEmailAutomatic", ReplyAction="http://tempuri.org/IUserServices/SendBalanceSheettoEmailAutomaticResponse")]
        void SendBalanceSheettoEmailAutomatic(string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/SendBalanceSheettoEmailAutomatic", ReplyAction="http://tempuri.org/IUserServices/SendBalanceSheettoEmailAutomaticResponse")]
        System.IAsyncResult BeginSendBalanceSheettoEmailAutomatic(string Password, System.AsyncCallback callback, object asyncState);
        
        void EndSendBalanceSheettoEmailAutomatic(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetShowTV", ReplyAction="http://tempuri.org/IUserServices/GetShowTVResponse")]
        bool GetShowTV(int userID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetShowTV", ReplyAction="http://tempuri.org/IUserServices/GetShowTVResponse")]
        System.IAsyncResult BeginGetShowTV(int userID, System.AsyncCallback callback, object asyncState);
        
        bool EndGetShowTV(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateShowTV", ReplyAction="http://tempuri.org/IUserServices/UpdateShowTVResponse")]
        void UpdateShowTV(int userID, bool ShowTV);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/UpdateShowTV", ReplyAction="http://tempuri.org/IUserServices/UpdateShowTVResponse")]
        System.IAsyncResult BeginUpdateShowTV(int userID, bool ShowTV, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateShowTV(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetEventDetailsbyMarketBook", ReplyAction="http://tempuri.org/IUserServices/GetEventDetailsbyMarketBookResponse")]
        globaltraders.UserServiceReference.SP_UserMarket_GetEventDetailsbyMarketID_Result GetEventDetailsbyMarketBook(string MarketbookID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetEventDetailsbyMarketBook", ReplyAction="http://tempuri.org/IUserServices/GetEventDetailsbyMarketBookResponse")]
        System.IAsyncResult BeginGetEventDetailsbyMarketBook(string MarketbookID, System.AsyncCallback callback, object asyncState);
        
        globaltraders.UserServiceReference.SP_UserMarket_GetEventDetailsbyMarketID_Result EndGetEventDetailsbyMarketBook(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetLinevMarketsbyEventID", ReplyAction="http://tempuri.org/IUserServices/GetLinevMarketsbyEventIDResponse")]
        string GetLinevMarketsbyEventID(string EventID, System.DateTime EventOpenDate, int UserID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetLinevMarketsbyEventID", ReplyAction="http://tempuri.org/IUserServices/GetLinevMarketsbyEventIDResponse")]
        System.IAsyncResult BeginGetLinevMarketsbyEventID(string EventID, System.DateTime EventOpenDate, int UserID, System.AsyncCallback callback, object asyncState);
        
        string EndGetLinevMarketsbyEventID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/KJMarketsbyEventID", ReplyAction="http://tempuri.org/IUserServices/KJMarketsbyEventIDResponse")]
        string KJMarketsbyEventID(string EventID, int UserID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/KJMarketsbyEventID", ReplyAction="http://tempuri.org/IUserServices/KJMarketsbyEventIDResponse")]
        System.IAsyncResult BeginKJMarketsbyEventID(string EventID, int UserID, System.AsyncCallback callback, object asyncState);
        
        string EndKJMarketsbyEventID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetLinevMarketsbyEventIDIN", ReplyAction="http://tempuri.org/IUserServices/GetLinevMarketsbyEventIDINResponse")]
        string GetLinevMarketsbyEventIDIN(string EventID, System.DateTime EventOpenDate, int UserID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetLinevMarketsbyEventIDIN", ReplyAction="http://tempuri.org/IUserServices/GetLinevMarketsbyEventIDINResponse")]
        System.IAsyncResult BeginGetLinevMarketsbyEventIDIN(string EventID, System.DateTime EventOpenDate, int UserID, System.AsyncCallback callback, object asyncState);
        
        string EndGetLinevMarketsbyEventIDIN(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetMarketIDbyEventID", ReplyAction="http://tempuri.org/IUserServices/GetMarketIDbyEventIDResponse")]
        string GetMarketIDbyEventID(string EventID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetMarketIDbyEventID", ReplyAction="http://tempuri.org/IUserServices/GetMarketIDbyEventIDResponse")]
        System.IAsyncResult BeginGetMarketIDbyEventID(string EventID, System.AsyncCallback callback, object asyncState);
        
        string EndGetMarketIDbyEventID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetKalijut", ReplyAction="http://tempuri.org/IUserServices/GetKalijutResponse")]
        string GetKalijut();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetKalijut", ReplyAction="http://tempuri.org/IUserServices/GetKalijutResponse")]
        System.IAsyncResult BeginGetKalijut(System.AsyncCallback callback, object asyncState);
        
        string EndGetKalijut(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetFigureOdds", ReplyAction="http://tempuri.org/IUserServices/GetFigureOddsResponse")]
        string GetFigureOdds();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetFigureOdds", ReplyAction="http://tempuri.org/IUserServices/GetFigureOddsResponse")]
        System.IAsyncResult BeginGetFigureOdds(System.AsyncCallback callback, object asyncState);
        
        string EndGetFigureOdds(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetScoresbyEventIDandDate", ReplyAction="http://tempuri.org/IUserServices/GetScoresbyEventIDandDateResponse")]
        string GetScoresbyEventIDandDate(string EventId, System.DateTime EventOpenDate);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetScoresbyEventIDandDate", ReplyAction="http://tempuri.org/IUserServices/GetScoresbyEventIDandDateResponse")]
        System.IAsyncResult BeginGetScoresbyEventIDandDate(string EventId, System.DateTime EventOpenDate, System.AsyncCallback callback, object asyncState);
        
        string EndGetScoresbyEventIDandDate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetMarketRules", ReplyAction="http://tempuri.org/IUserServices/GetMarketRulesResponse")]
        string GetMarketRules();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetMarketRules", ReplyAction="http://tempuri.org/IUserServices/GetMarketRulesResponse")]
        System.IAsyncResult BeginGetMarketRules(System.AsyncCallback callback, object asyncState);
        
        string EndGetMarketRules(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetLineandMatchOddsforAssociation", ReplyAction="http://tempuri.org/IUserServices/GetLineandMatchOddsforAssociationResponse")]
        string GetLineandMatchOddsforAssociation();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetLineandMatchOddsforAssociation", ReplyAction="http://tempuri.org/IUserServices/GetLineandMatchOddsforAssociationResponse")]
        System.IAsyncResult BeginGetLineandMatchOddsforAssociation(System.AsyncCallback callback, object asyncState);
        
        string EndGetLineandMatchOddsforAssociation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateAssociateEventID", ReplyAction="http://tempuri.org/IUserServices/UpdateAssociateEventIDResponse")]
        void UpdateAssociateEventID(string associateventID, string EventID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/UpdateAssociateEventID", ReplyAction="http://tempuri.org/IUserServices/UpdateAssociateEventIDResponse")]
        System.IAsyncResult BeginUpdateAssociateEventID(string associateventID, string EventID, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateAssociateEventID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetLiveTVChanels", ReplyAction="http://tempuri.org/IUserServices/GetLiveTVChanelsResponse")]
        string GetLiveTVChanels(string Passkey);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetLiveTVChanels", ReplyAction="http://tempuri.org/IUserServices/GetLiveTVChanelsResponse")]
        System.IAsyncResult BeginGetLiveTVChanels(string Passkey, System.AsyncCallback callback, object asyncState);
        
        string EndGetLiveTVChanels(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetScorebyEventIDandInnings", ReplyAction="http://tempuri.org/IUserServices/GetScorebyEventIDandInningsResponse")]
        string GetScorebyEventIDandInnings(string EventID, System.DateTime EventOpenDate, int Innings);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetScorebyEventIDandInnings", ReplyAction="http://tempuri.org/IUserServices/GetScorebyEventIDandInningsResponse")]
        System.IAsyncResult BeginGetScorebyEventIDandInnings(string EventID, System.DateTime EventOpenDate, int Innings, System.AsyncCallback callback, object asyncState);
        
        string EndGetScorebyEventIDandInnings(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetScorebyEventIDandInningsandOvers", ReplyAction="http://tempuri.org/IUserServices/GetScorebyEventIDandInningsandOversResponse")]
        string GetScorebyEventIDandInningsandOvers(string EventID, System.DateTime EventOpenDate, int Innings, int Overs);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetScorebyEventIDandInningsandOvers", ReplyAction="http://tempuri.org/IUserServices/GetScorebyEventIDandInningsandOversResponse")]
        System.IAsyncResult BeginGetScorebyEventIDandInningsandOvers(string EventID, System.DateTime EventOpenDate, int Innings, int Overs, System.AsyncCallback callback, object asyncState);
        
        string EndGetScorebyEventIDandInningsandOvers(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/AddScoreToBallbyBallsummary", ReplyAction="http://tempuri.org/IUserServices/AddScoreToBallbyBallsummaryResponse")]
        void AddScoreToBallbyBallsummary(string EventID, string MarketCatalogueID, double over, int score, int innings, System.DateTime EventOpenDate, int wickets, string teamname, string matchstatus);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/AddScoreToBallbyBallsummary", ReplyAction="http://tempuri.org/IUserServices/AddScoreToBallbyBallsummaryResponse")]
        System.IAsyncResult BeginAddScoreToBallbyBallsummary(string EventID, string MarketCatalogueID, double over, int score, int innings, System.DateTime EventOpenDate, int wickets, string teamname, string matchstatus, System.AsyncCallback callback, object asyncState);
        
        void EndAddScoreToBallbyBallsummary(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/CheckforMatchCompletedFancy", ReplyAction="http://tempuri.org/IUserServices/CheckforMatchCompletedFancyResponse")]
        void CheckforMatchCompletedFancy(string MarketBookID, int ScoreforThisOver);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/CheckforMatchCompletedFancy", ReplyAction="http://tempuri.org/IUserServices/CheckforMatchCompletedFancyResponse")]
        System.IAsyncResult BeginCheckforMatchCompletedFancy(string MarketBookID, int ScoreforThisOver, System.AsyncCallback callback, object asyncState);
        
        void EndCheckforMatchCompletedFancy(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/CheckforMatchCompletedFancyIN", ReplyAction="http://tempuri.org/IUserServices/CheckforMatchCompletedFancyINResponse")]
        void CheckforMatchCompletedFancyIN(string MarketBookID, string Marketname, int ScoreforThisOver);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/CheckforMatchCompletedFancyIN", ReplyAction="http://tempuri.org/IUserServices/CheckforMatchCompletedFancyINResponse")]
        System.IAsyncResult BeginCheckforMatchCompletedFancyIN(string MarketBookID, string Marketname, int ScoreforThisOver, System.AsyncCallback callback, object asyncState);
        
        void EndCheckforMatchCompletedFancyIN(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/CheckforMatchCompletedFancyKJ", ReplyAction="http://tempuri.org/IUserServices/CheckforMatchCompletedFancyKJResponse")]
        void CheckforMatchCompletedFancyKJ(string MarketBookID, int selectionID, int ScoreforThisOver);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/CheckforMatchCompletedFancyKJ", ReplyAction="http://tempuri.org/IUserServices/CheckforMatchCompletedFancyKJResponse")]
        System.IAsyncResult BeginCheckforMatchCompletedFancyKJ(string MarketBookID, int selectionID, int ScoreforThisOver, System.AsyncCallback callback, object asyncState);
        
        void EndCheckforMatchCompletedFancyKJ(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/CheckforMatchCompletedSmallFig", ReplyAction="http://tempuri.org/IUserServices/CheckforMatchCompletedSmallFigResponse")]
        void CheckforMatchCompletedSmallFig(string MarketBookID, int selectionID, int ScoreforThisOver);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/CheckforMatchCompletedSmallFig", ReplyAction="http://tempuri.org/IUserServices/CheckforMatchCompletedSmallFigResponse")]
        System.IAsyncResult BeginCheckforMatchCompletedSmallFig(string MarketBookID, int selectionID, int ScoreforThisOver, System.AsyncCallback callback, object asyncState);
        
        void EndCheckforMatchCompletedSmallFig(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/CheckforMatchCompletedFancyFig", ReplyAction="http://tempuri.org/IUserServices/CheckforMatchCompletedFancyFigResponse")]
        void CheckforMatchCompletedFancyFig(string MarketBookID, int selectionID, int ScoreforThisOver);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/CheckforMatchCompletedFancyFig", ReplyAction="http://tempuri.org/IUserServices/CheckforMatchCompletedFancyFigResponse")]
        System.IAsyncResult BeginCheckforMatchCompletedFancyFig(string MarketBookID, int selectionID, int ScoreforThisOver, System.AsyncCallback callback, object asyncState);
        
        void EndCheckforMatchCompletedFancyFig(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/InsertUserAccountsFancy", ReplyAction="http://tempuri.org/IUserServices/InsertUserAccountsFancyResponse")]
        bool InsertUserAccountsFancy(ExternalAPI.TO.MarketBook[] marketbookstatus, int userID, string Password, int ScoreforThisOver);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/InsertUserAccountsFancy", ReplyAction="http://tempuri.org/IUserServices/InsertUserAccountsFancyResponse")]
        System.IAsyncResult BeginInsertUserAccountsFancy(ExternalAPI.TO.MarketBook[] marketbookstatus, int userID, string Password, int ScoreforThisOver, System.AsyncCallback callback, object asyncState);
        
        bool EndInsertUserAccountsFancy(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetIsComAllowbyUserID", ReplyAction="http://tempuri.org/IUserServices/GetIsComAllowbyUserIDResponse")]
        bool GetIsComAllowbyUserID(int userID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetIsComAllowbyUserID", ReplyAction="http://tempuri.org/IUserServices/GetIsComAllowbyUserIDResponse")]
        System.IAsyncResult BeginGetIsComAllowbyUserID(int userID, System.AsyncCallback callback, object asyncState);
        
        bool EndGetIsComAllowbyUserID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateMarketStatusbyMarketBookID", ReplyAction="http://tempuri.org/IUserServices/UpdateMarketStatusbyMarketBookIDResponse")]
        void UpdateMarketStatusbyMarketBookID(string MarketBookID, string MarketStatus);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/UpdateMarketStatusbyMarketBookID", ReplyAction="http://tempuri.org/IUserServices/UpdateMarketStatusbyMarketBookIDResponse")]
        System.IAsyncResult BeginUpdateMarketStatusbyMarketBookID(string MarketBookID, string MarketStatus, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateMarketStatusbyMarketBookID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetUserbyUsernameandPassword", ReplyAction="http://tempuri.org/IUserServices/GetUserbyUsernameandPasswordResponse")]
        string GetUserbyUsernameandPassword(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetUserbyUsernameandPassword", ReplyAction="http://tempuri.org/IUserServices/GetUserbyUsernameandPasswordResponse")]
        System.IAsyncResult BeginGetUserbyUsernameandPassword(string username, string password, System.AsyncCallback callback, object asyncState);
        
        string EndGetUserbyUsernameandPassword(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetUserbyUsernameandPasswordNew", ReplyAction="http://tempuri.org/IUserServices/GetUserbyUsernameandPasswordNewResponse")]
        string GetUserbyUsernameandPasswordNew(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetUserbyUsernameandPasswordNew", ReplyAction="http://tempuri.org/IUserServices/GetUserbyUsernameandPasswordNewResponse")]
        System.IAsyncResult BeginGetUserbyUsernameandPasswordNew(string username, string password, System.AsyncCallback callback, object asyncState);
        
        string EndGetUserbyUsernameandPasswordNew(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateCurrentLoggedInIDbyUserID", ReplyAction="http://tempuri.org/IUserServices/UpdateCurrentLoggedInIDbyUserIDResponse")]
        void UpdateCurrentLoggedInIDbyUserID(int userID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/UpdateCurrentLoggedInIDbyUserID", ReplyAction="http://tempuri.org/IUserServices/UpdateCurrentLoggedInIDbyUserIDResponse")]
        System.IAsyncResult BeginUpdateCurrentLoggedInIDbyUserID(int userID, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateCurrentLoggedInIDbyUserID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/AddUserActivity", ReplyAction="http://tempuri.org/IUserServices/AddUserActivityResponse")]
        void AddUserActivity(string Activityname, System.DateTime ActivityTime, string IPAddress, string Location, string Deviceinfo, int userID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/AddUserActivity", ReplyAction="http://tempuri.org/IUserServices/AddUserActivityResponse")]
        System.IAsyncResult BeginAddUserActivity(string Activityname, System.DateTime ActivityTime, string IPAddress, string Location, string Deviceinfo, int userID, System.AsyncCallback callback, object asyncState);
        
        void EndAddUserActivity(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetAccessRightsbyUserType", ReplyAction="http://tempuri.org/IUserServices/GetAccessRightsbyUserTypeResponse")]
        string GetAccessRightsbyUserType(int UserTypeID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetAccessRightsbyUserType", ReplyAction="http://tempuri.org/IUserServices/GetAccessRightsbyUserTypeResponse")]
        System.IAsyncResult BeginGetAccessRightsbyUserType(int UserTypeID, string Password, System.AsyncCallback callback, object asyncState);
        
        string EndGetAccessRightsbyUserType(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/AddUser", ReplyAction="http://tempuri.org/IUserServices/AddUserResponse")]
        string AddUser(
                    string Name, 
                    string Phonenumber, 
                    string EmailAddress, 
                    string username, 
                    string Password, 
                    string Location, 
                    decimal Accountbalance, 
                    int usertypeID, 
                    int createdByID, 
                    string RatePercent, 
                    decimal BetLowerLimit, 
                    decimal BetUpperLimit, 
                    bool CheckConditionsforPlacingBet, 
                    decimal BetLowerLimitHorsePlace, 
                    decimal BetUpperLimitHorsePlace, 
                    decimal BetLowerLimitGrayHoundWin, 
                    decimal BetUpperLimitGrayHoundWin, 
                    decimal BetLowerLimitGrayHoundPlace, 
                    decimal BetUpperLimitGrayHoundPlace, 
                    decimal BetLowerLimitMatchOdds, 
                    decimal BetUpperLimitMatchOdds, 
                    decimal BetLowerLimitInningsRunns, 
                    decimal BetUpperLimitInningsRunns, 
                    decimal BetLowerLimitCompletedMatch, 
                    decimal BetUpperLimitCompletedMatch, 
                    decimal BetLowerLimitMatchOddsSoccer, 
                    decimal BetUpperLimitMatchOddsSoccer, 
                    decimal BetLowerLimitMatchOddsTennis, 
                    decimal BetUpperLimitMatchOddsTennis, 
                    decimal BetUpperLimitTiedMatch, 
                    decimal BetLowerLimitTiedMatch, 
                    decimal BetUpperLimitWinner, 
                    decimal BetLowerLimitWinner, 
                    string Passwordforvalidate, 
                    decimal BetUpperLimitFancy, 
                    decimal BetLowerLimitFancy);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/AddUser", ReplyAction="http://tempuri.org/IUserServices/AddUserResponse")]
        System.IAsyncResult BeginAddUser(
                    string Name, 
                    string Phonenumber, 
                    string EmailAddress, 
                    string username, 
                    string Password, 
                    string Location, 
                    decimal Accountbalance, 
                    int usertypeID, 
                    int createdByID, 
                    string RatePercent, 
                    decimal BetLowerLimit, 
                    decimal BetUpperLimit, 
                    bool CheckConditionsforPlacingBet, 
                    decimal BetLowerLimitHorsePlace, 
                    decimal BetUpperLimitHorsePlace, 
                    decimal BetLowerLimitGrayHoundWin, 
                    decimal BetUpperLimitGrayHoundWin, 
                    decimal BetLowerLimitGrayHoundPlace, 
                    decimal BetUpperLimitGrayHoundPlace, 
                    decimal BetLowerLimitMatchOdds, 
                    decimal BetUpperLimitMatchOdds, 
                    decimal BetLowerLimitInningsRunns, 
                    decimal BetUpperLimitInningsRunns, 
                    decimal BetLowerLimitCompletedMatch, 
                    decimal BetUpperLimitCompletedMatch, 
                    decimal BetLowerLimitMatchOddsSoccer, 
                    decimal BetUpperLimitMatchOddsSoccer, 
                    decimal BetLowerLimitMatchOddsTennis, 
                    decimal BetUpperLimitMatchOddsTennis, 
                    decimal BetUpperLimitTiedMatch, 
                    decimal BetLowerLimitTiedMatch, 
                    decimal BetUpperLimitWinner, 
                    decimal BetLowerLimitWinner, 
                    string Passwordforvalidate, 
                    decimal BetUpperLimitFancy, 
                    decimal BetLowerLimitFancy, 
                    System.AsyncCallback callback, 
                    object asyncState);
        
        string EndAddUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/CheckifUserExists", ReplyAction="http://tempuri.org/IUserServices/CheckifUserExistsResponse")]
        string CheckifUserExists(string username);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/CheckifUserExists", ReplyAction="http://tempuri.org/IUserServices/CheckifUserExistsResponse")]
        System.IAsyncResult BeginCheckifUserExists(string username, System.AsyncCallback callback, object asyncState);
        
        string EndCheckifUserExists(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/AddCredittoUser", ReplyAction="http://tempuri.org/IUserServices/AddCredittoUserResponse")]
        void AddCredittoUser(decimal Amount, int userID, int AddedbyID, System.DateTime addedtime, decimal Amountremoved, bool AddtoUserAccounts, string AccountsTitle, bool isCreditAmount, string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/AddCredittoUser", ReplyAction="http://tempuri.org/IUserServices/AddCredittoUserResponse")]
        System.IAsyncResult BeginAddCredittoUser(decimal Amount, int userID, int AddedbyID, System.DateTime addedtime, decimal Amountremoved, bool AddtoUserAccounts, string AccountsTitle, bool isCreditAmount, string Password, System.AsyncCallback callback, object asyncState);
        
        void EndAddCredittoUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/AddAdminAmountForSuper", ReplyAction="http://tempuri.org/IUserServices/AddAdminAmountForSuperResponse")]
        void AddAdminAmountForSuper(string AccountsTitle, string debit, string Credit, int userID, string marketid, System.DateTime addedtime, string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/AddAdminAmountForSuper", ReplyAction="http://tempuri.org/IUserServices/AddAdminAmountForSuperResponse")]
        System.IAsyncResult BeginAddAdminAmountForSuper(string AccountsTitle, string debit, string Credit, int userID, string marketid, System.DateTime addedtime, string Password, System.AsyncCallback callback, object asyncState);
        
        void EndAddAdminAmountForSuper(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateStartBalancebyUserID", ReplyAction="http://tempuri.org/IUserServices/UpdateStartBalancebyUserIDResponse")]
        void UpdateStartBalancebyUserID(int userID, decimal newBalance, string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/UpdateStartBalancebyUserID", ReplyAction="http://tempuri.org/IUserServices/UpdateStartBalancebyUserIDResponse")]
        System.IAsyncResult BeginUpdateStartBalancebyUserID(int userID, decimal newBalance, string Password, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateStartBalancebyUserID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateAccountsOpeningBalance", ReplyAction="http://tempuri.org/IUserServices/UpdateAccountsOpeningBalanceResponse")]
        void UpdateAccountsOpeningBalance(int userID, decimal Balance, string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/UpdateAccountsOpeningBalance", ReplyAction="http://tempuri.org/IUserServices/UpdateAccountsOpeningBalanceResponse")]
        System.IAsyncResult BeginUpdateAccountsOpeningBalance(int userID, decimal Balance, string Password, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateAccountsOpeningBalance(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetCurrentBalancebyUser", ReplyAction="http://tempuri.org/IUserServices/GetCurrentBalancebyUserResponse")]
        string GetCurrentBalancebyUser(int userid, string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetCurrentBalancebyUser", ReplyAction="http://tempuri.org/IUserServices/GetCurrentBalancebyUserResponse")]
        System.IAsyncResult BeginGetCurrentBalancebyUser(int userid, string Password, System.AsyncCallback callback, object asyncState);
        
        string EndGetCurrentBalancebyUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetStartingBalance", ReplyAction="http://tempuri.org/IUserServices/GetStartingBalanceResponse")]
        decimal GetStartingBalance(int UserID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetStartingBalance", ReplyAction="http://tempuri.org/IUserServices/GetStartingBalanceResponse")]
        System.IAsyncResult BeginGetStartingBalance(int UserID, string Password, System.AsyncCallback callback, object asyncState);
        
        decimal EndGetStartingBalance(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/AddKalijut", ReplyAction="http://tempuri.org/IUserServices/AddKalijutResponse")]
        void AddKalijut(System.Nullable<int> userID, string eventTypeID, string competitonID, string eventID, string marketCatalogue, System.Nullable<int> updatedbyID, string eventTypeName, string competitionName, string eventName, string marketCatalogueName, System.Nullable<System.DateTime> eventOpenDate, string sheetName, string associateEventID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/AddKalijut", ReplyAction="http://tempuri.org/IUserServices/AddKalijutResponse")]
        System.IAsyncResult BeginAddKalijut(System.Nullable<int> userID, string eventTypeID, string competitonID, string eventID, string marketCatalogue, System.Nullable<int> updatedbyID, string eventTypeName, string competitionName, string eventName, string marketCatalogueName, System.Nullable<System.DateTime> eventOpenDate, string sheetName, string associateEventID, System.AsyncCallback callback, object asyncState);
        
        void EndAddKalijut(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/MarketCatalogueSelectionskalijut", ReplyAction="http://tempuri.org/IUserServices/MarketCatalogueSelectionskalijutResponse")]
        void MarketCatalogueSelectionskalijut(string marketCatalogueID, string selectionID, string selectionName, string jockeyName, string wearing, string wearingDesc, string clothnumber, string stallDraw);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/MarketCatalogueSelectionskalijut", ReplyAction="http://tempuri.org/IUserServices/MarketCatalogueSelectionskalijutResponse")]
        System.IAsyncResult BeginMarketCatalogueSelectionskalijut(string marketCatalogueID, string selectionID, string selectionName, string jockeyName, string wearing, string wearingDesc, string clothnumber, string stallDraw, System.AsyncCallback callback, object asyncState);
        
        void EndMarketCatalogueSelectionskalijut(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateAccountBalacnebyUser", ReplyAction="http://tempuri.org/IUserServices/UpdateAccountBalacnebyUserResponse")]
        void UpdateAccountBalacnebyUser(int userid, decimal AccountBalance, string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/UpdateAccountBalacnebyUser", ReplyAction="http://tempuri.org/IUserServices/UpdateAccountBalacnebyUserResponse")]
        System.IAsyncResult BeginUpdateAccountBalacnebyUser(int userid, decimal AccountBalance, string Password, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateAccountBalacnebyUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetAllCuttingUsers", ReplyAction="http://tempuri.org/IUserServices/GetAllCuttingUsersResponse")]
        string GetAllCuttingUsers(string Passwordforvalidate);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetAllCuttingUsers", ReplyAction="http://tempuri.org/IUserServices/GetAllCuttingUsersResponse")]
        System.IAsyncResult BeginGetAllCuttingUsers(string Passwordforvalidate, System.AsyncCallback callback, object asyncState);
        
        string EndGetAllCuttingUsers(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetAllUsersbyUserType", ReplyAction="http://tempuri.org/IUserServices/GetAllUsersbyUserTypeResponse")]
        string GetAllUsersbyUserType(int userID, int usertypeID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetAllUsersbyUserType", ReplyAction="http://tempuri.org/IUserServices/GetAllUsersbyUserTypeResponse")]
        System.IAsyncResult BeginGetAllUsersbyUserType(int userID, int usertypeID, string Password, System.AsyncCallback callback, object asyncState);
        
        string EndGetAllUsersbyUserType(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetAllUsersbyUserTypeNew", ReplyAction="http://tempuri.org/IUserServices/GetAllUsersbyUserTypeNewResponse")]
        string GetAllUsersbyUserTypeNew(int userID, int usertypeID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetAllUsersbyUserTypeNew", ReplyAction="http://tempuri.org/IUserServices/GetAllUsersbyUserTypeNewResponse")]
        System.IAsyncResult BeginGetAllUsersbyUserTypeNew(int userID, int usertypeID, string Password, System.AsyncCallback callback, object asyncState);
        
        string EndGetAllUsersbyUserTypeNew(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetUserDetailsbyID", ReplyAction="http://tempuri.org/IUserServices/GetUserDetailsbyIDResponse")]
        string GetUserDetailsbyID(int userID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetUserDetailsbyID", ReplyAction="http://tempuri.org/IUserServices/GetUserDetailsbyIDResponse")]
        System.IAsyncResult BeginGetUserDetailsbyID(int userID, string Password, System.AsyncCallback callback, object asyncState);
        
        string EndGetUserDetailsbyID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetMarketbyEventID", ReplyAction="http://tempuri.org/IUserServices/GetMarketbyEventIDResponse")]
        string GetMarketbyEventID(string EventID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetMarketbyEventID", ReplyAction="http://tempuri.org/IUserServices/GetMarketbyEventIDResponse")]
        System.IAsyncResult BeginGetMarketbyEventID(string EventID, System.AsyncCallback callback, object asyncState);
        
        string EndGetMarketbyEventID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetMarketbyEventID1", ReplyAction="http://tempuri.org/IUserServices/GetMarketbyEventID1Response")]
        string GetMarketbyEventID1(string EventID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetMarketbyEventID1", ReplyAction="http://tempuri.org/IUserServices/GetMarketbyEventID1Response")]
        System.IAsyncResult BeginGetMarketbyEventID1(string EventID, System.AsyncCallback callback, object asyncState);
        
        string EndGetMarketbyEventID1(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/SetDeleteStatusofUser", ReplyAction="http://tempuri.org/IUserServices/SetDeleteStatusofUserResponse")]
        string SetDeleteStatusofUser(int UserID, bool isDeleted, string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/SetDeleteStatusofUser", ReplyAction="http://tempuri.org/IUserServices/SetDeleteStatusofUserResponse")]
        System.IAsyncResult BeginSetDeleteStatusofUser(int UserID, bool isDeleted, string Password, System.AsyncCallback callback, object asyncState);
        
        string EndSetDeleteStatusofUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/SetBlockedStatusofUser", ReplyAction="http://tempuri.org/IUserServices/SetBlockedStatusofUserResponse")]
        string SetBlockedStatusofUser(int UserID, bool isBlocked, string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/SetBlockedStatusofUser", ReplyAction="http://tempuri.org/IUserServices/SetBlockedStatusofUserResponse")]
        System.IAsyncResult BeginSetBlockedStatusofUser(int UserID, bool isBlocked, string Password, System.AsyncCallback callback, object asyncState);
        
        string EndSetBlockedStatusofUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/ResetPasswordofUser", ReplyAction="http://tempuri.org/IUserServices/ResetPasswordofUserResponse")]
        string ResetPasswordofUser(int UserID, string Password, int Updatedby, System.DateTime updatedtime, string Passwordforvalidate);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/ResetPasswordofUser", ReplyAction="http://tempuri.org/IUserServices/ResetPasswordofUserResponse")]
        System.IAsyncResult BeginResetPasswordofUser(int UserID, string Password, int Updatedby, System.DateTime updatedtime, string Passwordforvalidate, System.AsyncCallback callback, object asyncState);
        
        string EndResetPasswordofUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetUserMArket", ReplyAction="http://tempuri.org/IUserServices/GetUserMArketResponse")]
        string GetUserMArket(int userID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetUserMArket", ReplyAction="http://tempuri.org/IUserServices/GetUserMArketResponse")]
        System.IAsyncResult BeginGetUserMArket(int userID, System.AsyncCallback callback, object asyncState);
        
        string EndGetUserMArket(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/InsertUserMarket", ReplyAction="http://tempuri.org/IUserServices/InsertUserMarketResponse")]
        string InsertUserMarket(string[] allmarketitems, int userID, int UpdatedbyID, bool DeleteOldMarkets);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/InsertUserMarket", ReplyAction="http://tempuri.org/IUserServices/InsertUserMarketResponse")]
        System.IAsyncResult BeginInsertUserMarket(string[] allmarketitems, int userID, int UpdatedbyID, bool DeleteOldMarkets, System.AsyncCallback callback, object asyncState);
        
        string EndInsertUserMarket(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/InsertUserMarketKJ", ReplyAction="http://tempuri.org/IUserServices/InsertUserMarketKJResponse")]
        string InsertUserMarketKJ(string[] kalijutt, string[] KaliCatelogIDs, string[] selections, int[] userIDs, string EventID, int UpdatedbyID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/InsertUserMarketKJ", ReplyAction="http://tempuri.org/IUserServices/InsertUserMarketKJResponse")]
        System.IAsyncResult BeginInsertUserMarketKJ(string[] kalijutt, string[] KaliCatelogIDs, string[] selections, int[] userIDs, string EventID, int UpdatedbyID, System.AsyncCallback callback, object asyncState);
        
        string EndInsertUserMarketKJ(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/InsertUserMarketSFig", ReplyAction="http://tempuri.org/IUserServices/InsertUserMarketSFigResponse")]
        string InsertUserMarketSFig(string[] SmallFig, string[] smallFigCatelogIDs, string[] selections, int[] userIDs, string EventID, int UpdatedbyID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/InsertUserMarketSFig", ReplyAction="http://tempuri.org/IUserServices/InsertUserMarketSFigResponse")]
        System.IAsyncResult BeginInsertUserMarketSFig(string[] SmallFig, string[] smallFigCatelogIDs, string[] selections, int[] userIDs, string EventID, int UpdatedbyID, System.AsyncCallback callback, object asyncState);
        
        string EndInsertUserMarketSFig(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/InsertUserMarketFigure", ReplyAction="http://tempuri.org/IUserServices/InsertUserMarketFigureResponse")]
        string InsertUserMarketFigure(string[] Figure, string[] FigureCatelogIDs, string[] Figureselections, string[] FigureselectionsName, int[] userIDs, string EventID, int UpdatedbyID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/InsertUserMarketFigure", ReplyAction="http://tempuri.org/IUserServices/InsertUserMarketFigureResponse")]
        System.IAsyncResult BeginInsertUserMarketFigure(string[] Figure, string[] FigureCatelogIDs, string[] Figureselections, string[] FigureselectionsName, int[] userIDs, string EventID, int UpdatedbyID, System.AsyncCallback callback, object asyncState);
        
        string EndInsertUserMarketFigure(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/InsertIndainFancy", ReplyAction="http://tempuri.org/IUserServices/InsertIndainFancyResponse")]
        string InsertIndainFancy(ExternalAPI.TO.MarketBookForindianFancy[] allmarkets, ExternalAPI.TO.RunnerForIndianFancy[] runners, int[] userIDs, string EventID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/InsertIndainFancy", ReplyAction="http://tempuri.org/IUserServices/InsertIndainFancyResponse")]
        System.IAsyncResult BeginInsertIndainFancy(ExternalAPI.TO.MarketBookForindianFancy[] allmarkets, ExternalAPI.TO.RunnerForIndianFancy[] runners, int[] userIDs, string EventID, string Password, System.AsyncCallback callback, object asyncState);
        
        string EndInsertIndainFancy(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetUserMarketforSelection", ReplyAction="http://tempuri.org/IUserServices/GetUserMarketforSelectionResponse")]
        string GetUserMarketforSelection(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetUserMarketforSelection", ReplyAction="http://tempuri.org/IUserServices/GetUserMarketforSelectionResponse")]
        System.IAsyncResult BeginGetUserMarketforSelection(int UserID, System.AsyncCallback callback, object asyncState);
        
        string EndGetUserMarketforSelection(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetFavoriteEventTypes", ReplyAction="http://tempuri.org/IUserServices/GetFavoriteEventTypesResponse")]
        string GetFavoriteEventTypes(int userID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetFavoriteEventTypes", ReplyAction="http://tempuri.org/IUserServices/GetFavoriteEventTypesResponse")]
        System.IAsyncResult BeginGetFavoriteEventTypes(int userID, System.AsyncCallback callback, object asyncState);
        
        string EndGetFavoriteEventTypes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/AddtoFavoriteEventTypes", ReplyAction="http://tempuri.org/IUserServices/AddtoFavoriteEventTypesResponse")]
        void AddtoFavoriteEventTypes(string EventTypeID, int userID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/AddtoFavoriteEventTypes", ReplyAction="http://tempuri.org/IUserServices/AddtoFavoriteEventTypesResponse")]
        System.IAsyncResult BeginAddtoFavoriteEventTypes(string EventTypeID, int userID, System.AsyncCallback callback, object asyncState);
        
        void EndAddtoFavoriteEventTypes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/DeleteFromFavoriteEventTypes", ReplyAction="http://tempuri.org/IUserServices/DeleteFromFavoriteEventTypesResponse")]
        void DeleteFromFavoriteEventTypes(string EventTypeID, int userID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/DeleteFromFavoriteEventTypes", ReplyAction="http://tempuri.org/IUserServices/DeleteFromFavoriteEventTypesResponse")]
        System.IAsyncResult BeginDeleteFromFavoriteEventTypes(string EventTypeID, int userID, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteFromFavoriteEventTypes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetFavoriteEvents", ReplyAction="http://tempuri.org/IUserServices/GetFavoriteEventsResponse")]
        string GetFavoriteEvents(int userID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetFavoriteEvents", ReplyAction="http://tempuri.org/IUserServices/GetFavoriteEventsResponse")]
        System.IAsyncResult BeginGetFavoriteEvents(int userID, System.AsyncCallback callback, object asyncState);
        
        string EndGetFavoriteEvents(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/AddtoFavoriteEvents", ReplyAction="http://tempuri.org/IUserServices/AddtoFavoriteEventsResponse")]
        void AddtoFavoriteEvents(string EventID, int userID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/AddtoFavoriteEvents", ReplyAction="http://tempuri.org/IUserServices/AddtoFavoriteEventsResponse")]
        System.IAsyncResult BeginAddtoFavoriteEvents(string EventID, int userID, System.AsyncCallback callback, object asyncState);
        
        void EndAddtoFavoriteEvents(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/DeleteFromFavoriteEvents", ReplyAction="http://tempuri.org/IUserServices/DeleteFromFavoriteEventsResponse")]
        void DeleteFromFavoriteEvents(string EventID, int userID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/DeleteFromFavoriteEvents", ReplyAction="http://tempuri.org/IUserServices/DeleteFromFavoriteEventsResponse")]
        System.IAsyncResult BeginDeleteFromFavoriteEvents(string EventID, int userID, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteFromFavoriteEvents(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetFavoriteCompetitions", ReplyAction="http://tempuri.org/IUserServices/GetFavoriteCompetitionsResponse")]
        string GetFavoriteCompetitions(int userID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetFavoriteCompetitions", ReplyAction="http://tempuri.org/IUserServices/GetFavoriteCompetitionsResponse")]
        System.IAsyncResult BeginGetFavoriteCompetitions(int userID, System.AsyncCallback callback, object asyncState);
        
        string EndGetFavoriteCompetitions(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/AddtoFavoriteCompetitions", ReplyAction="http://tempuri.org/IUserServices/AddtoFavoriteCompetitionsResponse")]
        void AddtoFavoriteCompetitions(string EventID, int userID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/AddtoFavoriteCompetitions", ReplyAction="http://tempuri.org/IUserServices/AddtoFavoriteCompetitionsResponse")]
        System.IAsyncResult BeginAddtoFavoriteCompetitions(string EventID, int userID, System.AsyncCallback callback, object asyncState);
        
        void EndAddtoFavoriteCompetitions(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/DeleteFromFavoriteCompetitions", ReplyAction="http://tempuri.org/IUserServices/DeleteFromFavoriteCompetitionsResponse")]
        void DeleteFromFavoriteCompetitions(string EventID, int userID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/DeleteFromFavoriteCompetitions", ReplyAction="http://tempuri.org/IUserServices/DeleteFromFavoriteCompetitionsResponse")]
        System.IAsyncResult BeginDeleteFromFavoriteCompetitions(string EventID, int userID, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteFromFavoriteCompetitions(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetEventTypeIDs", ReplyAction="http://tempuri.org/IUserServices/GetEventTypeIDsResponse")]
        string GetEventTypeIDs(int userID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetEventTypeIDs", ReplyAction="http://tempuri.org/IUserServices/GetEventTypeIDsResponse")]
        System.IAsyncResult BeginGetEventTypeIDs(int userID, System.AsyncCallback callback, object asyncState);
        
        string EndGetEventTypeIDs(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/getlistuserids", ReplyAction="http://tempuri.org/IUserServices/getlistuseridsResponse")]
        string getlistuserids(int createdid);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/getlistuserids", ReplyAction="http://tempuri.org/IUserServices/getlistuseridsResponse")]
        System.IAsyncResult Begingetlistuserids(int createdid, System.AsyncCallback callback, object asyncState);
        
        string Endgetlistuserids(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetCompetitionIDs", ReplyAction="http://tempuri.org/IUserServices/GetCompetitionIDsResponse")]
        string GetCompetitionIDs(string eventTypeID, int userID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetCompetitionIDs", ReplyAction="http://tempuri.org/IUserServices/GetCompetitionIDsResponse")]
        System.IAsyncResult BeginGetCompetitionIDs(string eventTypeID, int userID, System.AsyncCallback callback, object asyncState);
        
        string EndGetCompetitionIDs(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetEventsIDs", ReplyAction="http://tempuri.org/IUserServices/GetEventsIDsResponse")]
        string GetEventsIDs(string CompetitionID, int userID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetEventsIDs", ReplyAction="http://tempuri.org/IUserServices/GetEventsIDsResponse")]
        System.IAsyncResult BeginGetEventsIDs(string CompetitionID, int userID, System.AsyncCallback callback, object asyncState);
        
        string EndGetEventsIDs(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetMarketCatalogueIDs", ReplyAction="http://tempuri.org/IUserServices/GetMarketCatalogueIDsResponse")]
        string GetMarketCatalogueIDs(string eventID, int userID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetMarketCatalogueIDs", ReplyAction="http://tempuri.org/IUserServices/GetMarketCatalogueIDsResponse")]
        System.IAsyncResult BeginGetMarketCatalogueIDs(string eventID, int userID, System.AsyncCallback callback, object asyncState);
        
        string EndGetMarketCatalogueIDs(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/InsertUserBet", ReplyAction="http://tempuri.org/IUserServices/InsertUserBetResponse")]
        string InsertUserBet(
                    string SelectionID, 
                    int userID, 
                    string UserOdd, 
                    string amount, 
                    string bettype, 
                    string LiveOdd, 
                    bool ismatched, 
                    string status, 
                    string marketbookId, 
                    System.DateTime createddate, 
                    System.DateTime updatedtime, 
                    string Selectionname, 
                    string Marketbookname, 
                    string Liability, 
                    string BetSize, 
                    decimal PendingAmount, 
                    string location, 
                    long ParentID, 
                    decimal MaxOddBack, 
                    decimal MaxOddLay, 
                    bool CheckforMaxOddBack, 
                    bool CheckforMaxOddLay, 
                    string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/InsertUserBet", ReplyAction="http://tempuri.org/IUserServices/InsertUserBetResponse")]
        System.IAsyncResult BeginInsertUserBet(
                    string SelectionID, 
                    int userID, 
                    string UserOdd, 
                    string amount, 
                    string bettype, 
                    string LiveOdd, 
                    bool ismatched, 
                    string status, 
                    string marketbookId, 
                    System.DateTime createddate, 
                    System.DateTime updatedtime, 
                    string Selectionname, 
                    string Marketbookname, 
                    string Liability, 
                    string BetSize, 
                    decimal PendingAmount, 
                    string location, 
                    long ParentID, 
                    decimal MaxOddBack, 
                    decimal MaxOddLay, 
                    bool CheckforMaxOddBack, 
                    bool CheckforMaxOddLay, 
                    string Password, 
                    System.AsyncCallback callback, 
                    object asyncState);
        
        string EndInsertUserBet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/InsertUserBetAdmin", ReplyAction="http://tempuri.org/IUserServices/InsertUserBetAdminResponse")]
        string InsertUserBetAdmin(
                    string SelectionID, 
                    int userID, 
                    string UserOdd, 
                    string amount, 
                    string bettype, 
                    string LiveOdd, 
                    bool ismatched, 
                    string status, 
                    string marketbookId, 
                    System.DateTime createddate, 
                    System.DateTime updatedtime, 
                    string Selectionname, 
                    string Marketbookname, 
                    string Liability, 
                    string BetSize, 
                    decimal PendingAmount, 
                    string location, 
                    long ParentID, 
                    string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/InsertUserBetAdmin", ReplyAction="http://tempuri.org/IUserServices/InsertUserBetAdminResponse")]
        System.IAsyncResult BeginInsertUserBetAdmin(
                    string SelectionID, 
                    int userID, 
                    string UserOdd, 
                    string amount, 
                    string bettype, 
                    string LiveOdd, 
                    bool ismatched, 
                    string status, 
                    string marketbookId, 
                    System.DateTime createddate, 
                    System.DateTime updatedtime, 
                    string Selectionname, 
                    string Marketbookname, 
                    string Liability, 
                    string BetSize, 
                    decimal PendingAmount, 
                    string location, 
                    long ParentID, 
                    string Password, 
                    System.AsyncCallback callback, 
                    object asyncState);
        
        string EndInsertUserBetAdmin(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateUserBet", ReplyAction="http://tempuri.org/IUserServices/UpdateUserBetResponse")]
        bool UpdateUserBet(long ID, int userID, string UserOdd, string amount, string bettype, string LiveOdd, bool ismatched, string status, string marketbookId, System.DateTime createddate, System.DateTime updatedtime, string Liabality, string BetSize, decimal PendingAmount, string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/UpdateUserBet", ReplyAction="http://tempuri.org/IUserServices/UpdateUserBetResponse")]
        System.IAsyncResult BeginUpdateUserBet(
                    long ID, 
                    int userID, 
                    string UserOdd, 
                    string amount, 
                    string bettype, 
                    string LiveOdd, 
                    bool ismatched, 
                    string status, 
                    string marketbookId, 
                    System.DateTime createddate, 
                    System.DateTime updatedtime, 
                    string Liabality, 
                    string BetSize, 
                    decimal PendingAmount, 
                    string Password, 
                    System.AsyncCallback callback, 
                    object asyncState);
        
        bool EndUpdateUserBet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetUserbetsbyUserIDandMarketID", ReplyAction="http://tempuri.org/IUserServices/GetUserbetsbyUserIDandMarketIDResponse")]
        string GetUserbetsbyUserIDandMarketID(int UserID, string MarketID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetUserbetsbyUserIDandMarketID", ReplyAction="http://tempuri.org/IUserServices/GetUserbetsbyUserIDandMarketIDResponse")]
        System.IAsyncResult BeginGetUserbetsbyUserIDandMarketID(int UserID, string MarketID, string Password, System.AsyncCallback callback, object asyncState);
        
        string EndGetUserbetsbyUserIDandMarketID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetMaxOddBackandLay", ReplyAction="http://tempuri.org/IUserServices/GetMaxOddBackandLayResponse")]
        globaltraders.UserServiceReference.SP_Users_GetMaxOddBackandLay_Result GetMaxOddBackandLay(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetMaxOddBackandLay", ReplyAction="http://tempuri.org/IUserServices/GetMaxOddBackandLayResponse")]
        System.IAsyncResult BeginGetMaxOddBackandLay(int UserID, System.AsyncCallback callback, object asyncState);
        
        globaltraders.UserServiceReference.SP_Users_GetMaxOddBackandLay_Result EndGetMaxOddBackandLay(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetMaxOddBackandLayStr", ReplyAction="http://tempuri.org/IUserServices/GetMaxOddBackandLayStrResponse")]
        string GetMaxOddBackandLayStr(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetMaxOddBackandLayStr", ReplyAction="http://tempuri.org/IUserServices/GetMaxOddBackandLayStrResponse")]
        System.IAsyncResult BeginGetMaxOddBackandLayStr(int UserID, System.AsyncCallback callback, object asyncState);
        
        string EndGetMaxOddBackandLayStr(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetUserbetsbyUserID", ReplyAction="http://tempuri.org/IUserServices/GetUserbetsbyUserIDResponse")]
        string GetUserbetsbyUserID(int UserID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetUserbetsbyUserID", ReplyAction="http://tempuri.org/IUserServices/GetUserbetsbyUserIDResponse")]
        System.IAsyncResult BeginGetUserbetsbyUserID(int UserID, string Password, System.AsyncCallback callback, object asyncState);
        
        string EndGetUserbetsbyUserID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateUserBetMatched", ReplyAction="http://tempuri.org/IUserServices/UpdateUserBetMatchedResponse")]
        void UpdateUserBetMatched(long[] ID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/UpdateUserBetMatched", ReplyAction="http://tempuri.org/IUserServices/UpdateUserBetMatchedResponse")]
        System.IAsyncResult BeginUpdateUserBetMatched(long[] ID, string Password, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateUserBetMatched(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetCurrentLiabality", ReplyAction="http://tempuri.org/IUserServices/GetCurrentLiabalityResponse")]
        string GetCurrentLiabality(int userID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetCurrentLiabality", ReplyAction="http://tempuri.org/IUserServices/GetCurrentLiabalityResponse")]
        System.IAsyncResult BeginGetCurrentLiabality(int userID, System.AsyncCallback callback, object asyncState);
        
        string EndGetCurrentLiabality(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetAgentRate", ReplyAction="http://tempuri.org/IUserServices/GetAgentRateResponse")]
        string GetAgentRate(int userID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetAgentRate", ReplyAction="http://tempuri.org/IUserServices/GetAgentRateResponse")]
        System.IAsyncResult BeginGetAgentRate(int userID, System.AsyncCallback callback, object asyncState);
        
        string EndGetAgentRate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetSuperName", ReplyAction="http://tempuri.org/IUserServices/GetSuperNameResponse")]
        string GetSuperName(int userID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetSuperName", ReplyAction="http://tempuri.org/IUserServices/GetSuperNameResponse")]
        System.IAsyncResult BeginGetSuperName(int userID, System.AsyncCallback callback, object asyncState);
        
        string EndGetSuperName(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/CheckforMatchCompleted", ReplyAction="http://tempuri.org/IUserServices/CheckforMatchCompletedResponse")]
        void CheckforMatchCompleted();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/CheckforMatchCompleted", ReplyAction="http://tempuri.org/IUserServices/CheckforMatchCompletedResponse")]
        System.IAsyncResult BeginCheckforMatchCompleted(System.AsyncCallback callback, object asyncState);
        
        void EndCheckforMatchCompleted(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/CloseAllClosedMarkets", ReplyAction="http://tempuri.org/IUserServices/CloseAllClosedMarketsResponse")]
        void CloseAllClosedMarkets();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/CloseAllClosedMarkets", ReplyAction="http://tempuri.org/IUserServices/CloseAllClosedMarketsResponse")]
        System.IAsyncResult BeginCloseAllClosedMarkets(System.AsyncCallback callback, object asyncState);
        
        void EndCloseAllClosedMarkets(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/SetAgentRateofUser", ReplyAction="http://tempuri.org/IUserServices/SetAgentRateofUserResponse")]
        string SetAgentRateofUser(int UserID, string AgentRate, string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/SetAgentRateofUser", ReplyAction="http://tempuri.org/IUserServices/SetAgentRateofUserResponse")]
        System.IAsyncResult BeginSetAgentRateofUser(int UserID, string AgentRate, string Password, System.AsyncCallback callback, object asyncState);
        
        string EndSetAgentRateofUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateUserBetUnMatchedStatusTocomplete", ReplyAction="http://tempuri.org/IUserServices/UpdateUserBetUnMatchedStatusTocompleteResponse")]
        void UpdateUserBetUnMatchedStatusTocomplete(long[] ID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/UpdateUserBetUnMatchedStatusTocomplete", ReplyAction="http://tempuri.org/IUserServices/UpdateUserBetUnMatchedStatusTocompleteResponse")]
        System.IAsyncResult BeginUpdateUserBetUnMatchedStatusTocomplete(long[] ID, string Password, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateUserBetUnMatchedStatusTocomplete(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateUserBetUnMatchedStatusTocompleteforCutting" +
            "User", ReplyAction="http://tempuri.org/IUserServices/UpdateUserBetUnMatchedStatusTocompleteforCutting" +
            "UserResponse")]
        void UpdateUserBetUnMatchedStatusTocompleteforCuttingUser(long ID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/UpdateUserBetUnMatchedStatusTocompleteforCutting" +
            "User", ReplyAction="http://tempuri.org/IUserServices/UpdateUserBetUnMatchedStatusTocompleteforCutting" +
            "UserResponse")]
        System.IAsyncResult BeginUpdateUserBetUnMatchedStatusTocompleteforCuttingUser(long ID, string Password, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateUserBetUnMatchedStatusTocompleteforCuttingUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetMarketsOpenedbyUser", ReplyAction="http://tempuri.org/IUserServices/GetMarketsOpenedbyUserResponse")]
        string GetMarketsOpenedbyUser(int userID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetMarketsOpenedbyUser", ReplyAction="http://tempuri.org/IUserServices/GetMarketsOpenedbyUserResponse")]
        System.IAsyncResult BeginGetMarketsOpenedbyUser(int userID, System.AsyncCallback callback, object asyncState);
        
        string EndGetMarketsOpenedbyUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/SetMarketBookOpenbyUSer", ReplyAction="http://tempuri.org/IUserServices/SetMarketBookOpenbyUSerResponse")]
        void SetMarketBookOpenbyUSer(int userID, string MarketBookID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/SetMarketBookOpenbyUSer", ReplyAction="http://tempuri.org/IUserServices/SetMarketBookOpenbyUSerResponse")]
        System.IAsyncResult BeginSetMarketBookOpenbyUSer(int userID, string MarketBookID, System.AsyncCallback callback, object asyncState);
        
        void EndSetMarketBookOpenbyUSer(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/SetMarketBookOpenbyUSerandGet", ReplyAction="http://tempuri.org/IUserServices/SetMarketBookOpenbyUSerandGetResponse")]
        string SetMarketBookOpenbyUSerandGet(int userID, string MarketBookID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/SetMarketBookOpenbyUSerandGet", ReplyAction="http://tempuri.org/IUserServices/SetMarketBookOpenbyUSerandGetResponse")]
        System.IAsyncResult BeginSetMarketBookOpenbyUSerandGet(int userID, string MarketBookID, System.AsyncCallback callback, object asyncState);
        
        string EndSetMarketBookOpenbyUSerandGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/SetMarketBookOpenbyUSerandGet0", ReplyAction="http://tempuri.org/IUserServices/SetMarketBookOpenbyUSerandGet0Response")]
        string SetMarketBookOpenbyUSerandGet0(int userID, string MarketBookID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/SetMarketBookOpenbyUSerandGet0", ReplyAction="http://tempuri.org/IUserServices/SetMarketBookOpenbyUSerandGet0Response")]
        System.IAsyncResult BeginSetMarketBookOpenbyUSerandGet0(int userID, string MarketBookID, System.AsyncCallback callback, object asyncState);
        
        string EndSetMarketBookOpenbyUSerandGet0(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/SetMarketBookOpenbyUSerandGet1", ReplyAction="http://tempuri.org/IUserServices/SetMarketBookOpenbyUSerandGet1Response")]
        string SetMarketBookOpenbyUSerandGet1(int userID, string MarketBookID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/SetMarketBookOpenbyUSerandGet1", ReplyAction="http://tempuri.org/IUserServices/SetMarketBookOpenbyUSerandGet1Response")]
        System.IAsyncResult BeginSetMarketBookOpenbyUSerandGet1(int userID, string MarketBookID, System.AsyncCallback callback, object asyncState);
        
        string EndSetMarketBookOpenbyUSerandGet1(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/SetMarketBookOpenbyUSerandGet2", ReplyAction="http://tempuri.org/IUserServices/SetMarketBookOpenbyUSerandGet2Response")]
        string SetMarketBookOpenbyUSerandGet2(int userID, string MarketBookID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/SetMarketBookOpenbyUSerandGet2", ReplyAction="http://tempuri.org/IUserServices/SetMarketBookOpenbyUSerandGet2Response")]
        System.IAsyncResult BeginSetMarketBookOpenbyUSerandGet2(int userID, string MarketBookID, System.AsyncCallback callback, object asyncState);
        
        string EndSetMarketBookOpenbyUSerandGet2(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/SetMarketBookClosedbyUser", ReplyAction="http://tempuri.org/IUserServices/SetMarketBookClosedbyUserResponse")]
        void SetMarketBookClosedbyUser(int userID, string MarketBookID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/SetMarketBookClosedbyUser", ReplyAction="http://tempuri.org/IUserServices/SetMarketBookClosedbyUserResponse")]
        System.IAsyncResult BeginSetMarketBookClosedbyUser(int userID, string MarketBookID, System.AsyncCallback callback, object asyncState);
        
        void EndSetMarketBookClosedbyUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/SetMarketClosedAllUsers", ReplyAction="http://tempuri.org/IUserServices/SetMarketClosedAllUsersResponse")]
        void SetMarketClosedAllUsers(string MarketbookID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/SetMarketClosedAllUsers", ReplyAction="http://tempuri.org/IUserServices/SetMarketClosedAllUsersResponse")]
        System.IAsyncResult BeginSetMarketClosedAllUsers(string MarketbookID, System.AsyncCallback callback, object asyncState);
        
        void EndSetMarketClosedAllUsers(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetSelectionNamesbyMarketID", ReplyAction="http://tempuri.org/IUserServices/GetSelectionNamesbyMarketIDResponse")]
        globaltraders.UserServiceReference.SP_MarketCatalogueSelections_Get_Result[] GetSelectionNamesbyMarketID(string MarketID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetSelectionNamesbyMarketID", ReplyAction="http://tempuri.org/IUserServices/GetSelectionNamesbyMarketIDResponse")]
        System.IAsyncResult BeginGetSelectionNamesbyMarketID(string MarketID, System.AsyncCallback callback, object asyncState);
        
        globaltraders.UserServiceReference.SP_MarketCatalogueSelections_Get_Result[] EndGetSelectionNamesbyMarketID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetAccountsDatabyUserIDandDateRange", ReplyAction="http://tempuri.org/IUserServices/GetAccountsDatabyUserIDandDateRangeResponse")]
        string GetAccountsDatabyUserIDandDateRange(int userID, string From, string To, bool isCreditAmount, string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetAccountsDatabyUserIDandDateRange", ReplyAction="http://tempuri.org/IUserServices/GetAccountsDatabyUserIDandDateRangeResponse")]
        System.IAsyncResult BeginGetAccountsDatabyUserIDandDateRange(int userID, string From, string To, bool isCreditAmount, string Password, System.AsyncCallback callback, object asyncState);
        
        string EndGetAccountsDatabyUserIDandDateRange(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetAccountsDatabyCreatedByID", ReplyAction="http://tempuri.org/IUserServices/GetAccountsDatabyCreatedByIDResponse")]
        string GetAccountsDatabyCreatedByID(int userID, bool isCreditAmount, string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetAccountsDatabyCreatedByID", ReplyAction="http://tempuri.org/IUserServices/GetAccountsDatabyCreatedByIDResponse")]
        System.IAsyncResult BeginGetAccountsDatabyCreatedByID(int userID, bool isCreditAmount, string Password, System.AsyncCallback callback, object asyncState);
        
        string EndGetAccountsDatabyCreatedByID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetAccountsDatabyCreatedByIDForSuper", ReplyAction="http://tempuri.org/IUserServices/GetAccountsDatabyCreatedByIDForSuperResponse")]
        string GetAccountsDatabyCreatedByIDForSuper(int userID, bool isCreditAmount, string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetAccountsDatabyCreatedByIDForSuper", ReplyAction="http://tempuri.org/IUserServices/GetAccountsDatabyCreatedByIDForSuperResponse")]
        System.IAsyncResult BeginGetAccountsDatabyCreatedByIDForSuper(int userID, bool isCreditAmount, string Password, System.AsyncCallback callback, object asyncState);
        
        string EndGetAccountsDatabyCreatedByIDForSuper(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetAccountsDatabyCreatedByIDForSamiAdmin", ReplyAction="http://tempuri.org/IUserServices/GetAccountsDatabyCreatedByIDForSamiAdminResponse" +
            "")]
        string GetAccountsDatabyCreatedByIDForSamiAdmin(int userID, bool isCreditAmount, string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetAccountsDatabyCreatedByIDForSamiAdmin", ReplyAction="http://tempuri.org/IUserServices/GetAccountsDatabyCreatedByIDForSamiAdminResponse" +
            "")]
        System.IAsyncResult BeginGetAccountsDatabyCreatedByIDForSamiAdmin(int userID, bool isCreditAmount, string Password, System.AsyncCallback callback, object asyncState);
        
        string EndGetAccountsDatabyCreatedByIDForSamiAdmin(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetAccountsDataForAdmin", ReplyAction="http://tempuri.org/IUserServices/GetAccountsDataForAdminResponse")]
        string GetAccountsDataForAdmin(int UserID, bool isCreditAmount, string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetAccountsDataForAdmin", ReplyAction="http://tempuri.org/IUserServices/GetAccountsDataForAdminResponse")]
        System.IAsyncResult BeginGetAccountsDataForAdmin(int UserID, bool isCreditAmount, string Password, System.AsyncCallback callback, object asyncState);
        
        string EndGetAccountsDataForAdmin(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetProfitorLossbyUserID", ReplyAction="http://tempuri.org/IUserServices/GetProfitorLossbyUserIDResponse")]
        decimal GetProfitorLossbyUserID(int userID, bool isCreditAmount, string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetProfitorLossbyUserID", ReplyAction="http://tempuri.org/IUserServices/GetProfitorLossbyUserIDResponse")]
        System.IAsyncResult BeginGetProfitorLossbyUserID(int userID, bool isCreditAmount, string Password, System.AsyncCallback callback, object asyncState);
        
        decimal EndGetProfitorLossbyUserID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetProfitorLossforSuper", ReplyAction="http://tempuri.org/IUserServices/GetProfitorLossforSuperResponse")]
        decimal GetProfitorLossforSuper(int userID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetProfitorLossforSuper", ReplyAction="http://tempuri.org/IUserServices/GetProfitorLossforSuperResponse")]
        System.IAsyncResult BeginGetProfitorLossforSuper(int userID, string Password, System.AsyncCallback callback, object asyncState);
        
        decimal EndGetProfitorLossforSuper(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetAccountsDataForCommisionaccount", ReplyAction="http://tempuri.org/IUserServices/GetAccountsDataForCommisionaccountResponse")]
        string GetAccountsDataForCommisionaccount(string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetAccountsDataForCommisionaccount", ReplyAction="http://tempuri.org/IUserServices/GetAccountsDataForCommisionaccountResponse")]
        System.IAsyncResult BeginGetAccountsDataForCommisionaccount(string Password, System.AsyncCallback callback, object asyncState);
        
        string EndGetAccountsDataForCommisionaccount(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/DownloadAllMarketHorseRace", ReplyAction="http://tempuri.org/IUserServices/DownloadAllMarketHorseRaceResponse")]
        void DownloadAllMarketHorseRace(string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/DownloadAllMarketHorseRace", ReplyAction="http://tempuri.org/IUserServices/DownloadAllMarketHorseRaceResponse")]
        System.IAsyncResult BeginDownloadAllMarketHorseRace(string Password, System.AsyncCallback callback, object asyncState);
        
        void EndDownloadAllMarketHorseRace(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/DownloadAllMarketGrayHoundRace", ReplyAction="http://tempuri.org/IUserServices/DownloadAllMarketGrayHoundRaceResponse")]
        void DownloadAllMarketGrayHoundRace(string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/DownloadAllMarketGrayHoundRace", ReplyAction="http://tempuri.org/IUserServices/DownloadAllMarketGrayHoundRaceResponse")]
        System.IAsyncResult BeginDownloadAllMarketGrayHoundRace(string Password, System.AsyncCallback callback, object asyncState);
        
        void EndDownloadAllMarketGrayHoundRace(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateUserbetamountbyID", ReplyAction="http://tempuri.org/IUserServices/UpdateUserbetamountbyIDResponse")]
        bool UpdateUserbetamountbyID(long ID, decimal amount, bool ismatched, string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/UpdateUserbetamountbyID", ReplyAction="http://tempuri.org/IUserServices/UpdateUserbetamountbyIDResponse")]
        System.IAsyncResult BeginUpdateUserbetamountbyID(long ID, decimal amount, bool ismatched, string Password, System.AsyncCallback callback, object asyncState);
        
        bool EndUpdateUserbetamountbyID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetInPlayMatches", ReplyAction="http://tempuri.org/IUserServices/GetInPlayMatchesResponse")]
        string GetInPlayMatches(int userID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetInPlayMatches", ReplyAction="http://tempuri.org/IUserServices/GetInPlayMatchesResponse")]
        System.IAsyncResult BeginGetInPlayMatches(int userID, System.AsyncCallback callback, object asyncState);
        
        string EndGetInPlayMatches(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetInPlayMatcheswithRunners", ReplyAction="http://tempuri.org/IUserServices/GetInPlayMatcheswithRunnersResponse")]
        string GetInPlayMatcheswithRunners(int userID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetInPlayMatcheswithRunners", ReplyAction="http://tempuri.org/IUserServices/GetInPlayMatcheswithRunnersResponse")]
        System.IAsyncResult BeginGetInPlayMatcheswithRunners(int userID, System.AsyncCallback callback, object asyncState);
        
        string EndGetInPlayMatcheswithRunners(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetInPlayMatcheswithRunners1", ReplyAction="http://tempuri.org/IUserServices/GetInPlayMatcheswithRunners1Response")]
        string GetInPlayMatcheswithRunners1(int userID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUserServices/GetInPlayMatcheswithRunners1", ReplyAction="http://tempuri.org/IUserServices/GetInPlayMatcheswithRunners1Response")]
        System.IAsyncResult BeginGetInPlayMatcheswithRunners1(int userID, System.AsyncCallback callback, object asyncState);
        
        string EndGetInPlayMatcheswithRunners1(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserServicesChannel : globaltraders.UserServiceReference.IUserServices, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFancyResultPostSettingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFancyResultPostSettingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCommissionRatebyUserIDFancyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCommissionRatebyUserIDFancyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFancyResultsFromCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFancyResultsFromCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRecentMatchesFromCricketAPICompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRecentMatchesFromCricketAPICompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAccountsDatabyEventNameuserIDandDateRangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAccountsDatabyEventNameuserIDandDateRangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAccountsDatabyEventNameuserIDandDateRangeFancywithMArketNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAccountsDatabyEventNameuserIDandDateRangeFancywithMArketNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTransferAdminAmountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTransferAdminAmountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public globaltraders.UserServiceReference.SP_Users_GetTransferAdminAmount_Result Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((globaltraders.UserServiceReference.SP_Users_GetTransferAdminAmount_Result)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllPendingAmountsbyDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllPendingAmountsbyDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetBettingAllowedbyMarketIDandUserIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetBettingAllowedbyMarketIDandUserIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetBettingAllowedbyMarketIDandUserIDInplayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetBettingAllowedbyMarketIDandUserIDInplayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetReferrerRatesbyUserIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetReferrerRatesbyUserIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public globaltraders.UserServiceReference.SP_Referrers_GetReferrerRateandReferrerIDbyUserID_Result[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((globaltraders.UserServiceReference.SP_Referrers_GetReferrerRateandReferrerIDbyUserID_Result[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDistinctMarketsFromBetsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDistinctMarketsFromBetsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDistinctMarketsFromAccountsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDistinctMarketsFromAccountsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UnPostUserAccountsbyUserIDandMarketIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UnPostUserAccountsbyUserIDandMarketIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateUserBetsStatusbyMarketIDandUserIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateUserBetsStatusbyMarketIDandUserIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SetBlockedStatusofUserBMSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SetBlockedStatusofUserBMSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMatchScoreCardCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMatchScoreCardCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public globaltraders.UserServiceReference.APIResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((globaltraders.UserServiceReference.APIResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCricketMatchKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCricketMatchKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetURLsDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetURLsDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTransferAgnetCommisionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTransferAgnetCommisionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMaxBalanceTransferLimitCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMaxBalanceTransferLimitCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMaxAgentRateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMaxAgentRateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTotalAgentCommissionbyAgentIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTotalAgentCommissionbyAgentIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public decimal Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((decimal)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetToWintheTossbyeventIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetToWintheTossbyeventIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public globaltraders.UserServiceReference.SP_UserMarket_GetToWinTheTossbyEventID_Result Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((globaltraders.UserServiceReference.SP_UserMarket_GetToWinTheTossbyEventID_Result)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetToTiedMarketbyEventIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetToTiedMarketbyEventIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public globaltraders.UserServiceReference.SP_UserMarket_GetToTiedMarketbyEventID_Result Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((globaltraders.UserServiceReference.SP_UserMarket_GetToTiedMarketbyEventID_Result)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSoccergoalbyeventIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSoccergoalbyeventIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public globaltraders.UserServiceReference.SP_UserMarket_GetSoccergoalbyEventID_Result[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((globaltraders.UserServiceReference.SP_UserMarket_GetSoccergoalbyEventID_Result[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllMatchesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllMatchesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllCricketMatchesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllCricketMatchesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllSoccerMatchesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllSoccerMatchesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllTennisMatchesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllTennisMatchesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateUserbetamountbyParentIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateUserbetamountbyParentIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUserBetsbyAgentIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserBetsbyAgentIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUserBetsbySuperIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserBetsbySuperIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUserBetsbySamiAdminCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserBetsbySamiAdminCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUserBetsbyAgentIDwithZeroRefererCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserBetsbyAgentIDwithZeroRefererCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUserbetsbyUserIDandAgentIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserbetsbyUserIDandAgentIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUserbetsForAdminCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserbetsForAdminCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMarketsOpenedbyUsersofAgentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMarketsOpenedbyUsersofAgentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMarketsOpenedbyUsersForAdminCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMarketsOpenedbyUsersForAdminCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCompletedMatchedBetsbyUserIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCompletedMatchedBetsbyUserIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllUserMarketbyUserIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllUserMarketbyUserIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUserStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLastLoginTimesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLastLoginTimesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUnMatchedBetsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUnMatchedBetsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSheetNamebyMarketIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSheetNamebyMarketIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTodayHorseRacingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTodayHorseRacingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTodayHorseRacingNewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTodayHorseRacingNewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDistinctmarketopenedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDistinctmarketopenedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCommissionRatebyUserIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCommissionRatebyUserIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAccountsDatabyEventtypeuserIDandDateRangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAccountsDatabyEventtypeuserIDandDateRangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDatabyAgentIDForCommisionandDateRangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDatabyAgentIDForCommisionandDateRangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDatabyAgentIDForCommisionandDateRangeByEventtypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDatabyAgentIDForCommisionandDateRangeByEventtypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserAccountsGetCommissionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UserAccountsGetCommissionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetEventTypeNamebyMarketIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetEventTypeNamebyMarketIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllowedMarketsbyUserIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllowedMarketsbyUserIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCommissionaccountIdandBookAccountbyUserIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCommissionaccountIdandBookAccountbyUserIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public globaltraders.UserServiceReference.SP_Users_GetCommissionAccountIDandBookAccountID_Result Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((globaltraders.UserServiceReference.SP_Users_GetCommissionAccountIDandBookAccountID_Result)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetReferrerRateandIDbyUserIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetReferrerRateandIDbyUserIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public globaltraders.UserServiceReference.SP_Users_GetReferrerRateandReferrerIDbyUserID_Result Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((globaltraders.UserServiceReference.SP_Users_GetReferrerRateandReferrerIDbyUserID_Result)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetIntervalandBetPlaceTimingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetIntervalandBetPlaceTimingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetHawalaAccountIDbyUserIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetHawalaAccountIDbyUserIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCreatedbyIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCreatedbyIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMarketsforBettingAllowedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMarketsforBettingAllowedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetBetSlipKeysCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetBetSlipKeysCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetPoundRatebyUserIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetPoundRatebyUserIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public decimal Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((decimal)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMarqueeTextCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMarqueeTextCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetShowTVCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetShowTVCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetEventDetailsbyMarketBookCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetEventDetailsbyMarketBookCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public globaltraders.UserServiceReference.SP_UserMarket_GetEventDetailsbyMarketID_Result Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((globaltraders.UserServiceReference.SP_UserMarket_GetEventDetailsbyMarketID_Result)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLinevMarketsbyEventIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLinevMarketsbyEventIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class KJMarketsbyEventIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public KJMarketsbyEventIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLinevMarketsbyEventIDINCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLinevMarketsbyEventIDINCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMarketIDbyEventIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMarketIDbyEventIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetKalijutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetKalijutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFigureOddsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFigureOddsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetScoresbyEventIDandDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetScoresbyEventIDandDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMarketRulesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMarketRulesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLineandMatchOddsforAssociationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLineandMatchOddsforAssociationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLiveTVChanelsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLiveTVChanelsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetScorebyEventIDandInningsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetScorebyEventIDandInningsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetScorebyEventIDandInningsandOversCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetScorebyEventIDandInningsandOversCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InsertUserAccountsFancyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public InsertUserAccountsFancyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetIsComAllowbyUserIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetIsComAllowbyUserIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUserbyUsernameandPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserbyUsernameandPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUserbyUsernameandPasswordNewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserbyUsernameandPasswordNewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAccessRightsbyUserTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAccessRightsbyUserTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CheckifUserExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CheckifUserExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCurrentBalancebyUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCurrentBalancebyUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetStartingBalanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetStartingBalanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public decimal Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((decimal)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllCuttingUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllCuttingUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllUsersbyUserTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllUsersbyUserTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllUsersbyUserTypeNewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllUsersbyUserTypeNewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUserDetailsbyIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserDetailsbyIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMarketbyEventIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMarketbyEventIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMarketbyEventID1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMarketbyEventID1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SetDeleteStatusofUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SetDeleteStatusofUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SetBlockedStatusofUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SetBlockedStatusofUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ResetPasswordofUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ResetPasswordofUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUserMArketCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserMArketCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InsertUserMarketCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public InsertUserMarketCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InsertUserMarketKJCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public InsertUserMarketKJCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InsertUserMarketSFigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public InsertUserMarketSFigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InsertUserMarketFigureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public InsertUserMarketFigureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InsertIndainFancyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public InsertIndainFancyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUserMarketforSelectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserMarketforSelectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFavoriteEventTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFavoriteEventTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFavoriteEventsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFavoriteEventsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFavoriteCompetitionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFavoriteCompetitionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetEventTypeIDsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetEventTypeIDsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getlistuseridsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getlistuseridsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCompetitionIDsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCompetitionIDsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetEventsIDsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetEventsIDsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMarketCatalogueIDsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMarketCatalogueIDsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InsertUserBetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public InsertUserBetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InsertUserBetAdminCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public InsertUserBetAdminCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateUserBetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateUserBetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUserbetsbyUserIDandMarketIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserbetsbyUserIDandMarketIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMaxOddBackandLayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMaxOddBackandLayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public globaltraders.UserServiceReference.SP_Users_GetMaxOddBackandLay_Result Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((globaltraders.UserServiceReference.SP_Users_GetMaxOddBackandLay_Result)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMaxOddBackandLayStrCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMaxOddBackandLayStrCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUserbetsbyUserIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserbetsbyUserIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCurrentLiabalityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCurrentLiabalityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAgentRateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAgentRateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSuperNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSuperNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SetAgentRateofUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SetAgentRateofUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMarketsOpenedbyUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMarketsOpenedbyUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SetMarketBookOpenbyUSerandGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SetMarketBookOpenbyUSerandGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SetMarketBookOpenbyUSerandGet0CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SetMarketBookOpenbyUSerandGet0CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SetMarketBookOpenbyUSerandGet1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SetMarketBookOpenbyUSerandGet1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SetMarketBookOpenbyUSerandGet2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SetMarketBookOpenbyUSerandGet2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSelectionNamesbyMarketIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSelectionNamesbyMarketIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public globaltraders.UserServiceReference.SP_MarketCatalogueSelections_Get_Result[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((globaltraders.UserServiceReference.SP_MarketCatalogueSelections_Get_Result[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAccountsDatabyUserIDandDateRangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAccountsDatabyUserIDandDateRangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAccountsDatabyCreatedByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAccountsDatabyCreatedByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAccountsDatabyCreatedByIDForSuperCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAccountsDatabyCreatedByIDForSuperCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAccountsDatabyCreatedByIDForSamiAdminCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAccountsDatabyCreatedByIDForSamiAdminCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAccountsDataForAdminCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAccountsDataForAdminCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetProfitorLossbyUserIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetProfitorLossbyUserIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public decimal Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((decimal)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetProfitorLossforSuperCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetProfitorLossforSuperCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public decimal Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((decimal)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAccountsDataForCommisionaccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAccountsDataForCommisionaccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateUserbetamountbyIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateUserbetamountbyIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetInPlayMatchesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetInPlayMatchesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetInPlayMatcheswithRunnersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetInPlayMatcheswithRunnersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetInPlayMatcheswithRunners1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetInPlayMatcheswithRunners1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserServicesClient : System.ServiceModel.ClientBase<globaltraders.UserServiceReference.IUserServices>, globaltraders.UserServiceReference.IUserServices {
        
        private BeginOperationDelegate onBeginGetFancyResultPostSettingDelegate;
        
        private EndOperationDelegate onEndGetFancyResultPostSettingDelegate;
        
        private System.Threading.SendOrPostCallback onGetFancyResultPostSettingCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateFancyResultPostSettingDelegate;
        
        private EndOperationDelegate onEndUpdateFancyResultPostSettingDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateFancyResultPostSettingCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCommissionRatebyUserIDFancyDelegate;
        
        private EndOperationDelegate onEndGetCommissionRatebyUserIDFancyDelegate;
        
        private System.Threading.SendOrPostCallback onGetCommissionRatebyUserIDFancyCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateCommissionRatebyUserIDDelegate;
        
        private EndOperationDelegate onEndUpdateCommissionRatebyUserIDDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateCommissionRatebyUserIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateCricketAPIMatchKeyDelegate;
        
        private EndOperationDelegate onEndUpdateCricketAPIMatchKeyDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateCricketAPIMatchKeyCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFancyResultsFromDelegate;
        
        private EndOperationDelegate onEndGetFancyResultsFromDelegate;
        
        private System.Threading.SendOrPostCallback onGetFancyResultsFromCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateGetFancyResultsFromDelegate;
        
        private EndOperationDelegate onEndUpdateGetFancyResultsFromDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateGetFancyResultsFromCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRecentMatchesFromCricketAPIDelegate;
        
        private EndOperationDelegate onEndGetRecentMatchesFromCricketAPIDelegate;
        
        private System.Threading.SendOrPostCallback onGetRecentMatchesFromCricketAPICompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateGetDataFromForLoggingDataDelegate;
        
        private EndOperationDelegate onEndUpdateGetDataFromForLoggingDataDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateGetDataFromForLoggingDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAccountsDatabyEventNameuserIDandDateRangeDelegate;
        
        private EndOperationDelegate onEndGetAccountsDatabyEventNameuserIDandDateRangeDelegate;
        
        private System.Threading.SendOrPostCallback onGetAccountsDatabyEventNameuserIDandDateRangeCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAccountsDatabyEventNameuserIDandDateRangeFancywithMArketNameDelegate;
        
        private EndOperationDelegate onEndGetAccountsDatabyEventNameuserIDandDateRangeFancywithMArketNameDelegate;
        
        private System.Threading.SendOrPostCallback onGetAccountsDatabyEventNameuserIDandDateRangeFancywithMArketNameCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateTransferAdminAmountDelegate;
        
        private EndOperationDelegate onEndUpdateTransferAdminAmountDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateTransferAdminAmountCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTransferAdminAmountDelegate;
        
        private EndOperationDelegate onEndGetTransferAdminAmountDelegate;
        
        private System.Threading.SendOrPostCallback onGetTransferAdminAmountCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllPendingAmountsbyDateDelegate;
        
        private EndOperationDelegate onEndGetAllPendingAmountsbyDateDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllPendingAmountsbyDateCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddAmountReceviablesDelegate;
        
        private EndOperationDelegate onEndAddAmountReceviablesDelegate;
        
        private System.Threading.SendOrPostCallback onAddAmountReceviablesCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateAmountReceviablesDelegate;
        
        private EndOperationDelegate onEndUpdateAmountReceviablesDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateAmountReceviablesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetBettingAllowedbyMarketIDandUserIDDelegate;
        
        private EndOperationDelegate onEndGetBettingAllowedbyMarketIDandUserIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetBettingAllowedbyMarketIDandUserIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetBettingAllowedbyMarketIDandUserIDInplayDelegate;
        
        private EndOperationDelegate onEndGetBettingAllowedbyMarketIDandUserIDInplayDelegate;
        
        private System.Threading.SendOrPostCallback onGetBettingAllowedbyMarketIDandUserIDInplayCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddReferrerUsersDelegate;
        
        private EndOperationDelegate onEndAddReferrerUsersDelegate;
        
        private System.Threading.SendOrPostCallback onAddReferrerUsersCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeletReffererUSersDelegate;
        
        private EndOperationDelegate onEndDeletReffererUSersDelegate;
        
        private System.Threading.SendOrPostCallback onDeletReffererUSersCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetReferrerRatesbyUserIDDelegate;
        
        private EndOperationDelegate onEndGetReferrerRatesbyUserIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetReferrerRatesbyUserIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginInsertUserBetNewDelegate;
        
        private EndOperationDelegate onEndInsertUserBetNewDelegate;
        
        private System.Threading.SendOrPostCallback onInsertUserBetNewCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDistinctMarketsFromBetsDelegate;
        
        private EndOperationDelegate onEndGetDistinctMarketsFromBetsDelegate;
        
        private System.Threading.SendOrPostCallback onGetDistinctMarketsFromBetsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDistinctMarketsFromAccountsDelegate;
        
        private EndOperationDelegate onEndGetDistinctMarketsFromAccountsDelegate;
        
        private System.Threading.SendOrPostCallback onGetDistinctMarketsFromAccountsCompletedDelegate;
        
        private BeginOperationDelegate onBeginUnPostUserAccountsbyUserIDandMarketIDDelegate;
        
        private EndOperationDelegate onEndUnPostUserAccountsbyUserIDandMarketIDDelegate;
        
        private System.Threading.SendOrPostCallback onUnPostUserAccountsbyUserIDandMarketIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateUserBetsStatusbyMarketIDandUserIDDelegate;
        
        private EndOperationDelegate onEndUpdateUserBetsStatusbyMarketIDandUserIDDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateUserBetsStatusbyMarketIDandUserIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateTotalOversbyMarketDelegate;
        
        private EndOperationDelegate onEndUpdateTotalOversbyMarketDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateTotalOversbyMarketCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetBlockedStatusofUserBMSDelegate;
        
        private EndOperationDelegate onEndSetBlockedStatusofUserBMSDelegate;
        
        private System.Threading.SendOrPostCallback onSetBlockedStatusofUserBMSCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMatchScoreCardDelegate;
        
        private EndOperationDelegate onEndGetMatchScoreCardDelegate;
        
        private System.Threading.SendOrPostCallback onGetMatchScoreCardCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCricketMatchKeyDelegate;
        
        private EndOperationDelegate onEndGetCricketMatchKeyDelegate;
        
        private System.Threading.SendOrPostCallback onGetCricketMatchKeyCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateMarketsForViewDelegate;
        
        private EndOperationDelegate onEndUpdateMarketsForViewDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateMarketsForViewCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateAllMarketClosedbyUserIDDelegate;
        
        private EndOperationDelegate onEndUpdateAllMarketClosedbyUserIDDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateAllMarketClosedbyUserIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetURLsDataDelegate;
        
        private EndOperationDelegate onEndGetURLsDataDelegate;
        
        private System.Threading.SendOrPostCallback onGetURLsDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTransferAgnetCommisionDelegate;
        
        private EndOperationDelegate onEndGetTransferAgnetCommisionDelegate;
        
        private System.Threading.SendOrPostCallback onGetTransferAgnetCommisionCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateTransferAgnetCommisionDelegate;
        
        private EndOperationDelegate onEndUpdateTransferAgnetCommisionDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateTransferAgnetCommisionCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateFancySyncONorOFFDelegate;
        
        private EndOperationDelegate onEndUpdateFancySyncONorOFFDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateFancySyncONorOFFCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMaxBalanceTransferLimitDelegate;
        
        private EndOperationDelegate onEndGetMaxBalanceTransferLimitDelegate;
        
        private System.Threading.SendOrPostCallback onGetMaxBalanceTransferLimitCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateMaxBalanceTransferLimitDelegate;
        
        private EndOperationDelegate onEndUpdateMaxBalanceTransferLimitDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateMaxBalanceTransferLimitCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMaxAgentRateDelegate;
        
        private EndOperationDelegate onEndGetMaxAgentRateDelegate;
        
        private System.Threading.SendOrPostCallback onGetMaxAgentRateCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateMaxAgentRateDelegate;
        
        private EndOperationDelegate onEndUpdateMaxAgentRateDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateMaxAgentRateCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateFancySyncONorOFFbyMarketIDDelegate;
        
        private EndOperationDelegate onEndUpdateFancySyncONorOFFbyMarketIDDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateFancySyncONorOFFbyMarketIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateKJSyncONorOFFbyMarketIDDelegate;
        
        private EndOperationDelegate onEndUpdateKJSyncONorOFFbyMarketIDDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateKJSyncONorOFFbyMarketIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTotalAgentCommissionbyAgentIDDelegate;
        
        private EndOperationDelegate onEndGetTotalAgentCommissionbyAgentIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetTotalAgentCommissionbyAgentIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetToWintheTossbyeventIdDelegate;
        
        private EndOperationDelegate onEndGetToWintheTossbyeventIdDelegate;
        
        private System.Threading.SendOrPostCallback onGetToWintheTossbyeventIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetToTiedMarketbyEventIDDelegate;
        
        private EndOperationDelegate onEndGetToTiedMarketbyEventIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetToTiedMarketbyEventIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSoccergoalbyeventIdDelegate;
        
        private EndOperationDelegate onEndGetSoccergoalbyeventIdDelegate;
        
        private System.Threading.SendOrPostCallback onGetSoccergoalbyeventIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetMarketOpenedbyuserinAPPDelegate;
        
        private EndOperationDelegate onEndSetMarketOpenedbyuserinAPPDelegate;
        
        private System.Threading.SendOrPostCallback onSetMarketOpenedbyuserinAPPCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllMatchesDelegate;
        
        private EndOperationDelegate onEndGetAllMatchesDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllMatchesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllCricketMatchesDelegate;
        
        private EndOperationDelegate onEndGetAllCricketMatchesDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllCricketMatchesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllSoccerMatchesDelegate;
        
        private EndOperationDelegate onEndGetAllSoccerMatchesDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllSoccerMatchesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllTennisMatchesDelegate;
        
        private EndOperationDelegate onEndGetAllTennisMatchesDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllTennisMatchesCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateUserbetamountbyParentIDDelegate;
        
        private EndOperationDelegate onEndUpdateUserbetamountbyParentIDDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateUserbetamountbyParentIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserBetsbyAgentIDDelegate;
        
        private EndOperationDelegate onEndGetUserBetsbyAgentIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserBetsbyAgentIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserBetsbySuperIDDelegate;
        
        private EndOperationDelegate onEndGetUserBetsbySuperIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserBetsbySuperIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserBetsbySamiAdminDelegate;
        
        private EndOperationDelegate onEndGetUserBetsbySamiAdminDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserBetsbySamiAdminCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserBetsbyAgentIDwithZeroRefererDelegate;
        
        private EndOperationDelegate onEndGetUserBetsbyAgentIDwithZeroRefererDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserBetsbyAgentIDwithZeroRefererCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserbetsbyUserIDandAgentIDDelegate;
        
        private EndOperationDelegate onEndGetUserbetsbyUserIDandAgentIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserbetsbyUserIDandAgentIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserbetsForAdminDelegate;
        
        private EndOperationDelegate onEndGetUserbetsForAdminDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserbetsForAdminCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMarketsOpenedbyUsersofAgentDelegate;
        
        private EndOperationDelegate onEndGetMarketsOpenedbyUsersofAgentDelegate;
        
        private System.Threading.SendOrPostCallback onGetMarketsOpenedbyUsersofAgentCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMarketsOpenedbyUsersForAdminDelegate;
        
        private EndOperationDelegate onEndGetMarketsOpenedbyUsersForAdminDelegate;
        
        private System.Threading.SendOrPostCallback onGetMarketsOpenedbyUsersForAdminCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetLoggedinStatusDelegate;
        
        private EndOperationDelegate onEndSetLoggedinStatusDelegate;
        
        private System.Threading.SendOrPostCallback onSetLoggedinStatusCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCompletedMatchedBetsbyUserIDDelegate;
        
        private EndOperationDelegate onEndGetCompletedMatchedBetsbyUserIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetCompletedMatchedBetsbyUserIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllUserMarketbyUserIDDelegate;
        
        private EndOperationDelegate onEndGetAllUserMarketbyUserIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllUserMarketbyUserIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserStatusDelegate;
        
        private EndOperationDelegate onEndGetUserStatusDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserStatusCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLastLoginTimesDelegate;
        
        private EndOperationDelegate onEndGetLastLoginTimesDelegate;
        
        private System.Threading.SendOrPostCallback onGetLastLoginTimesCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateBetSizebyIDDelegate;
        
        private EndOperationDelegate onEndUpdateBetSizebyIDDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateBetSizebyIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUnMatchedBetsDelegate;
        
        private EndOperationDelegate onEndGetUnMatchedBetsDelegate;
        
        private System.Threading.SendOrPostCallback onGetUnMatchedBetsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSheetNamebyMarketIDDelegate;
        
        private EndOperationDelegate onEndGetSheetNamebyMarketIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetSheetNamebyMarketIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateBetLowerLimitDelegate;
        
        private EndOperationDelegate onEndUpdateBetLowerLimitDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateBetLowerLimitCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateCheckConditionforPlaceBetDelegate;
        
        private EndOperationDelegate onEndUpdateCheckConditionforPlaceBetDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateCheckConditionforPlaceBetCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTodayHorseRacingDelegate;
        
        private EndOperationDelegate onEndGetTodayHorseRacingDelegate;
        
        private System.Threading.SendOrPostCallback onGetTodayHorseRacingCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTodayHorseRacingNewDelegate;
        
        private EndOperationDelegate onEndGetTodayHorseRacingNewDelegate;
        
        private System.Threading.SendOrPostCallback onGetTodayHorseRacingNewCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDistinctmarketopenedDelegate;
        
        private EndOperationDelegate onEndGetDistinctmarketopenedDelegate;
        
        private System.Threading.SendOrPostCallback onGetDistinctmarketopenedCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateOddsDataDelegate;
        
        private EndOperationDelegate onEndUpdateOddsDataDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateOddsDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCommissionRatebyUserIDDelegate;
        
        private EndOperationDelegate onEndGetCommissionRatebyUserIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetCommissionRatebyUserIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateUserPhoneandNamebyUserIdDelegate;
        
        private EndOperationDelegate onEndUpdateUserPhoneandNamebyUserIdDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateUserPhoneandNamebyUserIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAccountsDatabyEventtypeuserIDandDateRangeDelegate;
        
        private EndOperationDelegate onEndGetAccountsDatabyEventtypeuserIDandDateRangeDelegate;
        
        private System.Threading.SendOrPostCallback onGetAccountsDatabyEventtypeuserIDandDateRangeCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDatabyAgentIDForCommisionandDateRangeDelegate;
        
        private EndOperationDelegate onEndGetDatabyAgentIDForCommisionandDateRangeDelegate;
        
        private System.Threading.SendOrPostCallback onGetDatabyAgentIDForCommisionandDateRangeCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDatabyAgentIDForCommisionandDateRangeByEventtypeDelegate;
        
        private EndOperationDelegate onEndGetDatabyAgentIDForCommisionandDateRangeByEventtypeDelegate;
        
        private System.Threading.SendOrPostCallback onGetDatabyAgentIDForCommisionandDateRangeByEventtypeCompletedDelegate;
        
        private BeginOperationDelegate onBeginUserAccountsGetCommissionDelegate;
        
        private EndOperationDelegate onEndUserAccountsGetCommissionDelegate;
        
        private System.Threading.SendOrPostCallback onUserAccountsGetCommissionCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetEventTypeNamebyMarketIDDelegate;
        
        private EndOperationDelegate onEndGetEventTypeNamebyMarketIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetEventTypeNamebyMarketIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateLiveOddbyIDDelegate;
        
        private EndOperationDelegate onEndUpdateLiveOddbyIDDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateLiveOddbyIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateUserOddbyIDDelegate;
        
        private EndOperationDelegate onEndUpdateUserOddbyIDDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateUserOddbyIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllowedMarketsbyUserIDDelegate;
        
        private EndOperationDelegate onEndGetAllowedMarketsbyUserIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllowedMarketsbyUserIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateAllowedMarketsbyUserIDDelegate;
        
        private EndOperationDelegate onEndUpdateAllowedMarketsbyUserIDDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateAllowedMarketsbyUserIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCommissionaccountIdandBookAccountbyUserIDDelegate;
        
        private EndOperationDelegate onEndGetCommissionaccountIdandBookAccountbyUserIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetCommissionaccountIdandBookAccountbyUserIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetReferrerRateandIDbyUserIDDelegate;
        
        private EndOperationDelegate onEndGetReferrerRateandIDbyUserIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetReferrerRateandIDbyUserIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateRefererRateandIDbyUserIDDelegate;
        
        private EndOperationDelegate onEndUpdateRefererRateandIDbyUserIDDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateRefererRateandIDbyUserIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateUsersAllBlockDelegate;
        
        private EndOperationDelegate onEndUpdateUsersAllBlockDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateUsersAllBlockCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateUsersAllLoggedOutDelegate;
        
        private EndOperationDelegate onEndUpdateUsersAllLoggedOutDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateUsersAllLoggedOutCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateMaxOddBackandLayDelegate;
        
        private EndOperationDelegate onEndUpdateMaxOddBackandLayDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateMaxOddBackandLayCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetIntervalandBetPlaceTimingsDelegate;
        
        private EndOperationDelegate onEndGetIntervalandBetPlaceTimingsDelegate;
        
        private System.Threading.SendOrPostCallback onGetIntervalandBetPlaceTimingsCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateIntervalandBetPlaceTimingsDelegate;
        
        private EndOperationDelegate onEndUpdateIntervalandBetPlaceTimingsDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateIntervalandBetPlaceTimingsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetHawalaAccountIDbyUserIDDelegate;
        
        private EndOperationDelegate onEndGetHawalaAccountIDbyUserIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetHawalaAccountIDbyUserIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCreatedbyIDDelegate;
        
        private EndOperationDelegate onEndGetCreatedbyIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetCreatedbyIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateHawalaIDbyUserIDDelegate;
        
        private EndOperationDelegate onEndUpdateHawalaIDbyUserIDDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateHawalaIDbyUserIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMarketsforBettingAllowedDelegate;
        
        private EndOperationDelegate onEndGetMarketsforBettingAllowedDelegate;
        
        private System.Threading.SendOrPostCallback onGetMarketsforBettingAllowedCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateMarketAllowedBettingDelegate;
        
        private EndOperationDelegate onEndUpdateMarketAllowedBettingDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateMarketAllowedBettingCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateMarketAllowedBettingForAllAgentsDelegate;
        
        private EndOperationDelegate onEndUpdateMarketAllowedBettingForAllAgentsDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateMarketAllowedBettingForAllAgentsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetBetSlipKeysDelegate;
        
        private EndOperationDelegate onEndGetBetSlipKeysDelegate;
        
        private System.Threading.SendOrPostCallback onGetBetSlipKeysCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateBetSlipKeysDelegate;
        
        private EndOperationDelegate onEndUpdateBetSlipKeysDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateBetSlipKeysCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateBettingAllowedDelegate;
        
        private EndOperationDelegate onEndUpdateBettingAllowedDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateBettingAllowedCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetPoundRatebyUserIDDelegate;
        
        private EndOperationDelegate onEndGetPoundRatebyUserIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetPoundRatebyUserIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMarqueeTextDelegate;
        
        private EndOperationDelegate onEndGetMarqueeTextDelegate;
        
        private System.Threading.SendOrPostCallback onGetMarqueeTextCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateMarqueeTextDelegate;
        
        private EndOperationDelegate onEndUpdateMarqueeTextDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateMarqueeTextCompletedDelegate;
        
        private BeginOperationDelegate onBeginSendBalanceSheettoEmailDelegate;
        
        private EndOperationDelegate onEndSendBalanceSheettoEmailDelegate;
        
        private System.Threading.SendOrPostCallback onSendBalanceSheettoEmailCompletedDelegate;
        
        private BeginOperationDelegate onBeginSendBalanceSheettoEmailAutomaticDelegate;
        
        private EndOperationDelegate onEndSendBalanceSheettoEmailAutomaticDelegate;
        
        private System.Threading.SendOrPostCallback onSendBalanceSheettoEmailAutomaticCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetShowTVDelegate;
        
        private EndOperationDelegate onEndGetShowTVDelegate;
        
        private System.Threading.SendOrPostCallback onGetShowTVCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateShowTVDelegate;
        
        private EndOperationDelegate onEndUpdateShowTVDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateShowTVCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetEventDetailsbyMarketBookDelegate;
        
        private EndOperationDelegate onEndGetEventDetailsbyMarketBookDelegate;
        
        private System.Threading.SendOrPostCallback onGetEventDetailsbyMarketBookCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLinevMarketsbyEventIDDelegate;
        
        private EndOperationDelegate onEndGetLinevMarketsbyEventIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetLinevMarketsbyEventIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginKJMarketsbyEventIDDelegate;
        
        private EndOperationDelegate onEndKJMarketsbyEventIDDelegate;
        
        private System.Threading.SendOrPostCallback onKJMarketsbyEventIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLinevMarketsbyEventIDINDelegate;
        
        private EndOperationDelegate onEndGetLinevMarketsbyEventIDINDelegate;
        
        private System.Threading.SendOrPostCallback onGetLinevMarketsbyEventIDINCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMarketIDbyEventIDDelegate;
        
        private EndOperationDelegate onEndGetMarketIDbyEventIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetMarketIDbyEventIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetKalijutDelegate;
        
        private EndOperationDelegate onEndGetKalijutDelegate;
        
        private System.Threading.SendOrPostCallback onGetKalijutCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFigureOddsDelegate;
        
        private EndOperationDelegate onEndGetFigureOddsDelegate;
        
        private System.Threading.SendOrPostCallback onGetFigureOddsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetScoresbyEventIDandDateDelegate;
        
        private EndOperationDelegate onEndGetScoresbyEventIDandDateDelegate;
        
        private System.Threading.SendOrPostCallback onGetScoresbyEventIDandDateCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMarketRulesDelegate;
        
        private EndOperationDelegate onEndGetMarketRulesDelegate;
        
        private System.Threading.SendOrPostCallback onGetMarketRulesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLineandMatchOddsforAssociationDelegate;
        
        private EndOperationDelegate onEndGetLineandMatchOddsforAssociationDelegate;
        
        private System.Threading.SendOrPostCallback onGetLineandMatchOddsforAssociationCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateAssociateEventIDDelegate;
        
        private EndOperationDelegate onEndUpdateAssociateEventIDDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateAssociateEventIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLiveTVChanelsDelegate;
        
        private EndOperationDelegate onEndGetLiveTVChanelsDelegate;
        
        private System.Threading.SendOrPostCallback onGetLiveTVChanelsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetScorebyEventIDandInningsDelegate;
        
        private EndOperationDelegate onEndGetScorebyEventIDandInningsDelegate;
        
        private System.Threading.SendOrPostCallback onGetScorebyEventIDandInningsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetScorebyEventIDandInningsandOversDelegate;
        
        private EndOperationDelegate onEndGetScorebyEventIDandInningsandOversDelegate;
        
        private System.Threading.SendOrPostCallback onGetScorebyEventIDandInningsandOversCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddScoreToBallbyBallsummaryDelegate;
        
        private EndOperationDelegate onEndAddScoreToBallbyBallsummaryDelegate;
        
        private System.Threading.SendOrPostCallback onAddScoreToBallbyBallsummaryCompletedDelegate;
        
        private BeginOperationDelegate onBeginCheckforMatchCompletedFancyDelegate;
        
        private EndOperationDelegate onEndCheckforMatchCompletedFancyDelegate;
        
        private System.Threading.SendOrPostCallback onCheckforMatchCompletedFancyCompletedDelegate;
        
        private BeginOperationDelegate onBeginCheckforMatchCompletedFancyINDelegate;
        
        private EndOperationDelegate onEndCheckforMatchCompletedFancyINDelegate;
        
        private System.Threading.SendOrPostCallback onCheckforMatchCompletedFancyINCompletedDelegate;
        
        private BeginOperationDelegate onBeginCheckforMatchCompletedFancyKJDelegate;
        
        private EndOperationDelegate onEndCheckforMatchCompletedFancyKJDelegate;
        
        private System.Threading.SendOrPostCallback onCheckforMatchCompletedFancyKJCompletedDelegate;
        
        private BeginOperationDelegate onBeginCheckforMatchCompletedSmallFigDelegate;
        
        private EndOperationDelegate onEndCheckforMatchCompletedSmallFigDelegate;
        
        private System.Threading.SendOrPostCallback onCheckforMatchCompletedSmallFigCompletedDelegate;
        
        private BeginOperationDelegate onBeginCheckforMatchCompletedFancyFigDelegate;
        
        private EndOperationDelegate onEndCheckforMatchCompletedFancyFigDelegate;
        
        private System.Threading.SendOrPostCallback onCheckforMatchCompletedFancyFigCompletedDelegate;
        
        private BeginOperationDelegate onBeginInsertUserAccountsFancyDelegate;
        
        private EndOperationDelegate onEndInsertUserAccountsFancyDelegate;
        
        private System.Threading.SendOrPostCallback onInsertUserAccountsFancyCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetIsComAllowbyUserIDDelegate;
        
        private EndOperationDelegate onEndGetIsComAllowbyUserIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetIsComAllowbyUserIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateMarketStatusbyMarketBookIDDelegate;
        
        private EndOperationDelegate onEndUpdateMarketStatusbyMarketBookIDDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateMarketStatusbyMarketBookIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserbyUsernameandPasswordDelegate;
        
        private EndOperationDelegate onEndGetUserbyUsernameandPasswordDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserbyUsernameandPasswordCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserbyUsernameandPasswordNewDelegate;
        
        private EndOperationDelegate onEndGetUserbyUsernameandPasswordNewDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserbyUsernameandPasswordNewCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateCurrentLoggedInIDbyUserIDDelegate;
        
        private EndOperationDelegate onEndUpdateCurrentLoggedInIDbyUserIDDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateCurrentLoggedInIDbyUserIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddUserActivityDelegate;
        
        private EndOperationDelegate onEndAddUserActivityDelegate;
        
        private System.Threading.SendOrPostCallback onAddUserActivityCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAccessRightsbyUserTypeDelegate;
        
        private EndOperationDelegate onEndGetAccessRightsbyUserTypeDelegate;
        
        private System.Threading.SendOrPostCallback onGetAccessRightsbyUserTypeCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddUserDelegate;
        
        private EndOperationDelegate onEndAddUserDelegate;
        
        private System.Threading.SendOrPostCallback onAddUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginCheckifUserExistsDelegate;
        
        private EndOperationDelegate onEndCheckifUserExistsDelegate;
        
        private System.Threading.SendOrPostCallback onCheckifUserExistsCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddCredittoUserDelegate;
        
        private EndOperationDelegate onEndAddCredittoUserDelegate;
        
        private System.Threading.SendOrPostCallback onAddCredittoUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddAdminAmountForSuperDelegate;
        
        private EndOperationDelegate onEndAddAdminAmountForSuperDelegate;
        
        private System.Threading.SendOrPostCallback onAddAdminAmountForSuperCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateStartBalancebyUserIDDelegate;
        
        private EndOperationDelegate onEndUpdateStartBalancebyUserIDDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateStartBalancebyUserIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateAccountsOpeningBalanceDelegate;
        
        private EndOperationDelegate onEndUpdateAccountsOpeningBalanceDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateAccountsOpeningBalanceCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCurrentBalancebyUserDelegate;
        
        private EndOperationDelegate onEndGetCurrentBalancebyUserDelegate;
        
        private System.Threading.SendOrPostCallback onGetCurrentBalancebyUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetStartingBalanceDelegate;
        
        private EndOperationDelegate onEndGetStartingBalanceDelegate;
        
        private System.Threading.SendOrPostCallback onGetStartingBalanceCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddKalijutDelegate;
        
        private EndOperationDelegate onEndAddKalijutDelegate;
        
        private System.Threading.SendOrPostCallback onAddKalijutCompletedDelegate;
        
        private BeginOperationDelegate onBeginMarketCatalogueSelectionskalijutDelegate;
        
        private EndOperationDelegate onEndMarketCatalogueSelectionskalijutDelegate;
        
        private System.Threading.SendOrPostCallback onMarketCatalogueSelectionskalijutCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateAccountBalacnebyUserDelegate;
        
        private EndOperationDelegate onEndUpdateAccountBalacnebyUserDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateAccountBalacnebyUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllCuttingUsersDelegate;
        
        private EndOperationDelegate onEndGetAllCuttingUsersDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllCuttingUsersCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllUsersbyUserTypeDelegate;
        
        private EndOperationDelegate onEndGetAllUsersbyUserTypeDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllUsersbyUserTypeCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllUsersbyUserTypeNewDelegate;
        
        private EndOperationDelegate onEndGetAllUsersbyUserTypeNewDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllUsersbyUserTypeNewCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserDetailsbyIDDelegate;
        
        private EndOperationDelegate onEndGetUserDetailsbyIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserDetailsbyIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMarketbyEventIDDelegate;
        
        private EndOperationDelegate onEndGetMarketbyEventIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetMarketbyEventIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMarketbyEventID1Delegate;
        
        private EndOperationDelegate onEndGetMarketbyEventID1Delegate;
        
        private System.Threading.SendOrPostCallback onGetMarketbyEventID1CompletedDelegate;
        
        private BeginOperationDelegate onBeginSetDeleteStatusofUserDelegate;
        
        private EndOperationDelegate onEndSetDeleteStatusofUserDelegate;
        
        private System.Threading.SendOrPostCallback onSetDeleteStatusofUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetBlockedStatusofUserDelegate;
        
        private EndOperationDelegate onEndSetBlockedStatusofUserDelegate;
        
        private System.Threading.SendOrPostCallback onSetBlockedStatusofUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginResetPasswordofUserDelegate;
        
        private EndOperationDelegate onEndResetPasswordofUserDelegate;
        
        private System.Threading.SendOrPostCallback onResetPasswordofUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserMArketDelegate;
        
        private EndOperationDelegate onEndGetUserMArketDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserMArketCompletedDelegate;
        
        private BeginOperationDelegate onBeginInsertUserMarketDelegate;
        
        private EndOperationDelegate onEndInsertUserMarketDelegate;
        
        private System.Threading.SendOrPostCallback onInsertUserMarketCompletedDelegate;
        
        private BeginOperationDelegate onBeginInsertUserMarketKJDelegate;
        
        private EndOperationDelegate onEndInsertUserMarketKJDelegate;
        
        private System.Threading.SendOrPostCallback onInsertUserMarketKJCompletedDelegate;
        
        private BeginOperationDelegate onBeginInsertUserMarketSFigDelegate;
        
        private EndOperationDelegate onEndInsertUserMarketSFigDelegate;
        
        private System.Threading.SendOrPostCallback onInsertUserMarketSFigCompletedDelegate;
        
        private BeginOperationDelegate onBeginInsertUserMarketFigureDelegate;
        
        private EndOperationDelegate onEndInsertUserMarketFigureDelegate;
        
        private System.Threading.SendOrPostCallback onInsertUserMarketFigureCompletedDelegate;
        
        private BeginOperationDelegate onBeginInsertIndainFancyDelegate;
        
        private EndOperationDelegate onEndInsertIndainFancyDelegate;
        
        private System.Threading.SendOrPostCallback onInsertIndainFancyCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserMarketforSelectionDelegate;
        
        private EndOperationDelegate onEndGetUserMarketforSelectionDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserMarketforSelectionCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFavoriteEventTypesDelegate;
        
        private EndOperationDelegate onEndGetFavoriteEventTypesDelegate;
        
        private System.Threading.SendOrPostCallback onGetFavoriteEventTypesCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddtoFavoriteEventTypesDelegate;
        
        private EndOperationDelegate onEndAddtoFavoriteEventTypesDelegate;
        
        private System.Threading.SendOrPostCallback onAddtoFavoriteEventTypesCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteFromFavoriteEventTypesDelegate;
        
        private EndOperationDelegate onEndDeleteFromFavoriteEventTypesDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteFromFavoriteEventTypesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFavoriteEventsDelegate;
        
        private EndOperationDelegate onEndGetFavoriteEventsDelegate;
        
        private System.Threading.SendOrPostCallback onGetFavoriteEventsCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddtoFavoriteEventsDelegate;
        
        private EndOperationDelegate onEndAddtoFavoriteEventsDelegate;
        
        private System.Threading.SendOrPostCallback onAddtoFavoriteEventsCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteFromFavoriteEventsDelegate;
        
        private EndOperationDelegate onEndDeleteFromFavoriteEventsDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteFromFavoriteEventsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFavoriteCompetitionsDelegate;
        
        private EndOperationDelegate onEndGetFavoriteCompetitionsDelegate;
        
        private System.Threading.SendOrPostCallback onGetFavoriteCompetitionsCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddtoFavoriteCompetitionsDelegate;
        
        private EndOperationDelegate onEndAddtoFavoriteCompetitionsDelegate;
        
        private System.Threading.SendOrPostCallback onAddtoFavoriteCompetitionsCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteFromFavoriteCompetitionsDelegate;
        
        private EndOperationDelegate onEndDeleteFromFavoriteCompetitionsDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteFromFavoriteCompetitionsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetEventTypeIDsDelegate;
        
        private EndOperationDelegate onEndGetEventTypeIDsDelegate;
        
        private System.Threading.SendOrPostCallback onGetEventTypeIDsCompletedDelegate;
        
        private BeginOperationDelegate onBegingetlistuseridsDelegate;
        
        private EndOperationDelegate onEndgetlistuseridsDelegate;
        
        private System.Threading.SendOrPostCallback ongetlistuseridsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCompetitionIDsDelegate;
        
        private EndOperationDelegate onEndGetCompetitionIDsDelegate;
        
        private System.Threading.SendOrPostCallback onGetCompetitionIDsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetEventsIDsDelegate;
        
        private EndOperationDelegate onEndGetEventsIDsDelegate;
        
        private System.Threading.SendOrPostCallback onGetEventsIDsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMarketCatalogueIDsDelegate;
        
        private EndOperationDelegate onEndGetMarketCatalogueIDsDelegate;
        
        private System.Threading.SendOrPostCallback onGetMarketCatalogueIDsCompletedDelegate;
        
        private BeginOperationDelegate onBeginInsertUserBetDelegate;
        
        private EndOperationDelegate onEndInsertUserBetDelegate;
        
        private System.Threading.SendOrPostCallback onInsertUserBetCompletedDelegate;
        
        private BeginOperationDelegate onBeginInsertUserBetAdminDelegate;
        
        private EndOperationDelegate onEndInsertUserBetAdminDelegate;
        
        private System.Threading.SendOrPostCallback onInsertUserBetAdminCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateUserBetDelegate;
        
        private EndOperationDelegate onEndUpdateUserBetDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateUserBetCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserbetsbyUserIDandMarketIDDelegate;
        
        private EndOperationDelegate onEndGetUserbetsbyUserIDandMarketIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserbetsbyUserIDandMarketIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMaxOddBackandLayDelegate;
        
        private EndOperationDelegate onEndGetMaxOddBackandLayDelegate;
        
        private System.Threading.SendOrPostCallback onGetMaxOddBackandLayCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMaxOddBackandLayStrDelegate;
        
        private EndOperationDelegate onEndGetMaxOddBackandLayStrDelegate;
        
        private System.Threading.SendOrPostCallback onGetMaxOddBackandLayStrCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserbetsbyUserIDDelegate;
        
        private EndOperationDelegate onEndGetUserbetsbyUserIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserbetsbyUserIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateUserBetMatchedDelegate;
        
        private EndOperationDelegate onEndUpdateUserBetMatchedDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateUserBetMatchedCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCurrentLiabalityDelegate;
        
        private EndOperationDelegate onEndGetCurrentLiabalityDelegate;
        
        private System.Threading.SendOrPostCallback onGetCurrentLiabalityCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAgentRateDelegate;
        
        private EndOperationDelegate onEndGetAgentRateDelegate;
        
        private System.Threading.SendOrPostCallback onGetAgentRateCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSuperNameDelegate;
        
        private EndOperationDelegate onEndGetSuperNameDelegate;
        
        private System.Threading.SendOrPostCallback onGetSuperNameCompletedDelegate;
        
        private BeginOperationDelegate onBeginCheckforMatchCompletedDelegate;
        
        private EndOperationDelegate onEndCheckforMatchCompletedDelegate;
        
        private System.Threading.SendOrPostCallback onCheckforMatchCompletedCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseAllClosedMarketsDelegate;
        
        private EndOperationDelegate onEndCloseAllClosedMarketsDelegate;
        
        private System.Threading.SendOrPostCallback onCloseAllClosedMarketsCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetAgentRateofUserDelegate;
        
        private EndOperationDelegate onEndSetAgentRateofUserDelegate;
        
        private System.Threading.SendOrPostCallback onSetAgentRateofUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateUserBetUnMatchedStatusTocompleteDelegate;
        
        private EndOperationDelegate onEndUpdateUserBetUnMatchedStatusTocompleteDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateUserBetUnMatchedStatusTocompleteCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateUserBetUnMatchedStatusTocompleteforCuttingUserDelegate;
        
        private EndOperationDelegate onEndUpdateUserBetUnMatchedStatusTocompleteforCuttingUserDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateUserBetUnMatchedStatusTocompleteforCuttingUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMarketsOpenedbyUserDelegate;
        
        private EndOperationDelegate onEndGetMarketsOpenedbyUserDelegate;
        
        private System.Threading.SendOrPostCallback onGetMarketsOpenedbyUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetMarketBookOpenbyUSerDelegate;
        
        private EndOperationDelegate onEndSetMarketBookOpenbyUSerDelegate;
        
        private System.Threading.SendOrPostCallback onSetMarketBookOpenbyUSerCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetMarketBookOpenbyUSerandGetDelegate;
        
        private EndOperationDelegate onEndSetMarketBookOpenbyUSerandGetDelegate;
        
        private System.Threading.SendOrPostCallback onSetMarketBookOpenbyUSerandGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetMarketBookOpenbyUSerandGet0Delegate;
        
        private EndOperationDelegate onEndSetMarketBookOpenbyUSerandGet0Delegate;
        
        private System.Threading.SendOrPostCallback onSetMarketBookOpenbyUSerandGet0CompletedDelegate;
        
        private BeginOperationDelegate onBeginSetMarketBookOpenbyUSerandGet1Delegate;
        
        private EndOperationDelegate onEndSetMarketBookOpenbyUSerandGet1Delegate;
        
        private System.Threading.SendOrPostCallback onSetMarketBookOpenbyUSerandGet1CompletedDelegate;
        
        private BeginOperationDelegate onBeginSetMarketBookOpenbyUSerandGet2Delegate;
        
        private EndOperationDelegate onEndSetMarketBookOpenbyUSerandGet2Delegate;
        
        private System.Threading.SendOrPostCallback onSetMarketBookOpenbyUSerandGet2CompletedDelegate;
        
        private BeginOperationDelegate onBeginSetMarketBookClosedbyUserDelegate;
        
        private EndOperationDelegate onEndSetMarketBookClosedbyUserDelegate;
        
        private System.Threading.SendOrPostCallback onSetMarketBookClosedbyUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetMarketClosedAllUsersDelegate;
        
        private EndOperationDelegate onEndSetMarketClosedAllUsersDelegate;
        
        private System.Threading.SendOrPostCallback onSetMarketClosedAllUsersCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSelectionNamesbyMarketIDDelegate;
        
        private EndOperationDelegate onEndGetSelectionNamesbyMarketIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetSelectionNamesbyMarketIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAccountsDatabyUserIDandDateRangeDelegate;
        
        private EndOperationDelegate onEndGetAccountsDatabyUserIDandDateRangeDelegate;
        
        private System.Threading.SendOrPostCallback onGetAccountsDatabyUserIDandDateRangeCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAccountsDatabyCreatedByIDDelegate;
        
        private EndOperationDelegate onEndGetAccountsDatabyCreatedByIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetAccountsDatabyCreatedByIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAccountsDatabyCreatedByIDForSuperDelegate;
        
        private EndOperationDelegate onEndGetAccountsDatabyCreatedByIDForSuperDelegate;
        
        private System.Threading.SendOrPostCallback onGetAccountsDatabyCreatedByIDForSuperCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAccountsDatabyCreatedByIDForSamiAdminDelegate;
        
        private EndOperationDelegate onEndGetAccountsDatabyCreatedByIDForSamiAdminDelegate;
        
        private System.Threading.SendOrPostCallback onGetAccountsDatabyCreatedByIDForSamiAdminCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAccountsDataForAdminDelegate;
        
        private EndOperationDelegate onEndGetAccountsDataForAdminDelegate;
        
        private System.Threading.SendOrPostCallback onGetAccountsDataForAdminCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetProfitorLossbyUserIDDelegate;
        
        private EndOperationDelegate onEndGetProfitorLossbyUserIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetProfitorLossbyUserIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetProfitorLossforSuperDelegate;
        
        private EndOperationDelegate onEndGetProfitorLossforSuperDelegate;
        
        private System.Threading.SendOrPostCallback onGetProfitorLossforSuperCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAccountsDataForCommisionaccountDelegate;
        
        private EndOperationDelegate onEndGetAccountsDataForCommisionaccountDelegate;
        
        private System.Threading.SendOrPostCallback onGetAccountsDataForCommisionaccountCompletedDelegate;
        
        private BeginOperationDelegate onBeginDownloadAllMarketHorseRaceDelegate;
        
        private EndOperationDelegate onEndDownloadAllMarketHorseRaceDelegate;
        
        private System.Threading.SendOrPostCallback onDownloadAllMarketHorseRaceCompletedDelegate;
        
        private BeginOperationDelegate onBeginDownloadAllMarketGrayHoundRaceDelegate;
        
        private EndOperationDelegate onEndDownloadAllMarketGrayHoundRaceDelegate;
        
        private System.Threading.SendOrPostCallback onDownloadAllMarketGrayHoundRaceCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateUserbetamountbyIDDelegate;
        
        private EndOperationDelegate onEndUpdateUserbetamountbyIDDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateUserbetamountbyIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetInPlayMatchesDelegate;
        
        private EndOperationDelegate onEndGetInPlayMatchesDelegate;
        
        private System.Threading.SendOrPostCallback onGetInPlayMatchesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetInPlayMatcheswithRunnersDelegate;
        
        private EndOperationDelegate onEndGetInPlayMatcheswithRunnersDelegate;
        
        private System.Threading.SendOrPostCallback onGetInPlayMatcheswithRunnersCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetInPlayMatcheswithRunners1Delegate;
        
        private EndOperationDelegate onEndGetInPlayMatcheswithRunners1Delegate;
        
        private System.Threading.SendOrPostCallback onGetInPlayMatcheswithRunners1CompletedDelegate;
        
        public UserServicesClient() {
        }
        
        public UserServicesClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserServicesClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServicesClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServicesClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<GetFancyResultPostSettingCompletedEventArgs> GetFancyResultPostSettingCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateFancyResultPostSettingCompleted;
        
        public event System.EventHandler<GetCommissionRatebyUserIDFancyCompletedEventArgs> GetCommissionRatebyUserIDFancyCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateCommissionRatebyUserIDCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateCricketAPIMatchKeyCompleted;
        
        public event System.EventHandler<GetFancyResultsFromCompletedEventArgs> GetFancyResultsFromCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateGetFancyResultsFromCompleted;
        
        public event System.EventHandler<GetRecentMatchesFromCricketAPICompletedEventArgs> GetRecentMatchesFromCricketAPICompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateGetDataFromForLoggingDataCompleted;
        
        public event System.EventHandler<GetAccountsDatabyEventNameuserIDandDateRangeCompletedEventArgs> GetAccountsDatabyEventNameuserIDandDateRangeCompleted;
        
        public event System.EventHandler<GetAccountsDatabyEventNameuserIDandDateRangeFancywithMArketNameCompletedEventArgs> GetAccountsDatabyEventNameuserIDandDateRangeFancywithMArketNameCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateTransferAdminAmountCompleted;
        
        public event System.EventHandler<GetTransferAdminAmountCompletedEventArgs> GetTransferAdminAmountCompleted;
        
        public event System.EventHandler<GetAllPendingAmountsbyDateCompletedEventArgs> GetAllPendingAmountsbyDateCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddAmountReceviablesCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateAmountReceviablesCompleted;
        
        public event System.EventHandler<GetBettingAllowedbyMarketIDandUserIDCompletedEventArgs> GetBettingAllowedbyMarketIDandUserIDCompleted;
        
        public event System.EventHandler<GetBettingAllowedbyMarketIDandUserIDInplayCompletedEventArgs> GetBettingAllowedbyMarketIDandUserIDInplayCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddReferrerUsersCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeletReffererUSersCompleted;
        
        public event System.EventHandler<GetReferrerRatesbyUserIDCompletedEventArgs> GetReferrerRatesbyUserIDCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> InsertUserBetNewCompleted;
        
        public event System.EventHandler<GetDistinctMarketsFromBetsCompletedEventArgs> GetDistinctMarketsFromBetsCompleted;
        
        public event System.EventHandler<GetDistinctMarketsFromAccountsCompletedEventArgs> GetDistinctMarketsFromAccountsCompleted;
        
        public event System.EventHandler<UnPostUserAccountsbyUserIDandMarketIDCompletedEventArgs> UnPostUserAccountsbyUserIDandMarketIDCompleted;
        
        public event System.EventHandler<UpdateUserBetsStatusbyMarketIDandUserIDCompletedEventArgs> UpdateUserBetsStatusbyMarketIDandUserIDCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateTotalOversbyMarketCompleted;
        
        public event System.EventHandler<SetBlockedStatusofUserBMSCompletedEventArgs> SetBlockedStatusofUserBMSCompleted;
        
        public event System.EventHandler<GetMatchScoreCardCompletedEventArgs> GetMatchScoreCardCompleted;
        
        public event System.EventHandler<GetCricketMatchKeyCompletedEventArgs> GetCricketMatchKeyCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateMarketsForViewCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateAllMarketClosedbyUserIDCompleted;
        
        public event System.EventHandler<GetURLsDataCompletedEventArgs> GetURLsDataCompleted;
        
        public event System.EventHandler<GetTransferAgnetCommisionCompletedEventArgs> GetTransferAgnetCommisionCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateTransferAgnetCommisionCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateFancySyncONorOFFCompleted;
        
        public event System.EventHandler<GetMaxBalanceTransferLimitCompletedEventArgs> GetMaxBalanceTransferLimitCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateMaxBalanceTransferLimitCompleted;
        
        public event System.EventHandler<GetMaxAgentRateCompletedEventArgs> GetMaxAgentRateCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateMaxAgentRateCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateFancySyncONorOFFbyMarketIDCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateKJSyncONorOFFbyMarketIDCompleted;
        
        public event System.EventHandler<GetTotalAgentCommissionbyAgentIDCompletedEventArgs> GetTotalAgentCommissionbyAgentIDCompleted;
        
        public event System.EventHandler<GetToWintheTossbyeventIdCompletedEventArgs> GetToWintheTossbyeventIdCompleted;
        
        public event System.EventHandler<GetToTiedMarketbyEventIDCompletedEventArgs> GetToTiedMarketbyEventIDCompleted;
        
        public event System.EventHandler<GetSoccergoalbyeventIdCompletedEventArgs> GetSoccergoalbyeventIdCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SetMarketOpenedbyuserinAPPCompleted;
        
        public event System.EventHandler<GetAllMatchesCompletedEventArgs> GetAllMatchesCompleted;
        
        public event System.EventHandler<GetAllCricketMatchesCompletedEventArgs> GetAllCricketMatchesCompleted;
        
        public event System.EventHandler<GetAllSoccerMatchesCompletedEventArgs> GetAllSoccerMatchesCompleted;
        
        public event System.EventHandler<GetAllTennisMatchesCompletedEventArgs> GetAllTennisMatchesCompleted;
        
        public event System.EventHandler<UpdateUserbetamountbyParentIDCompletedEventArgs> UpdateUserbetamountbyParentIDCompleted;
        
        public event System.EventHandler<GetUserBetsbyAgentIDCompletedEventArgs> GetUserBetsbyAgentIDCompleted;
        
        public event System.EventHandler<GetUserBetsbySuperIDCompletedEventArgs> GetUserBetsbySuperIDCompleted;
        
        public event System.EventHandler<GetUserBetsbySamiAdminCompletedEventArgs> GetUserBetsbySamiAdminCompleted;
        
        public event System.EventHandler<GetUserBetsbyAgentIDwithZeroRefererCompletedEventArgs> GetUserBetsbyAgentIDwithZeroRefererCompleted;
        
        public event System.EventHandler<GetUserbetsbyUserIDandAgentIDCompletedEventArgs> GetUserbetsbyUserIDandAgentIDCompleted;
        
        public event System.EventHandler<GetUserbetsForAdminCompletedEventArgs> GetUserbetsForAdminCompleted;
        
        public event System.EventHandler<GetMarketsOpenedbyUsersofAgentCompletedEventArgs> GetMarketsOpenedbyUsersofAgentCompleted;
        
        public event System.EventHandler<GetMarketsOpenedbyUsersForAdminCompletedEventArgs> GetMarketsOpenedbyUsersForAdminCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SetLoggedinStatusCompleted;
        
        public event System.EventHandler<GetCompletedMatchedBetsbyUserIDCompletedEventArgs> GetCompletedMatchedBetsbyUserIDCompleted;
        
        public event System.EventHandler<GetAllUserMarketbyUserIDCompletedEventArgs> GetAllUserMarketbyUserIDCompleted;
        
        public event System.EventHandler<GetUserStatusCompletedEventArgs> GetUserStatusCompleted;
        
        public event System.EventHandler<GetLastLoginTimesCompletedEventArgs> GetLastLoginTimesCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateBetSizebyIDCompleted;
        
        public event System.EventHandler<GetUnMatchedBetsCompletedEventArgs> GetUnMatchedBetsCompleted;
        
        public event System.EventHandler<GetSheetNamebyMarketIDCompletedEventArgs> GetSheetNamebyMarketIDCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateBetLowerLimitCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateCheckConditionforPlaceBetCompleted;
        
        public event System.EventHandler<GetTodayHorseRacingCompletedEventArgs> GetTodayHorseRacingCompleted;
        
        public event System.EventHandler<GetTodayHorseRacingNewCompletedEventArgs> GetTodayHorseRacingNewCompleted;
        
        public event System.EventHandler<GetDistinctmarketopenedCompletedEventArgs> GetDistinctmarketopenedCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateOddsDataCompleted;
        
        public event System.EventHandler<GetCommissionRatebyUserIDCompletedEventArgs> GetCommissionRatebyUserIDCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateUserPhoneandNamebyUserIdCompleted;
        
        public event System.EventHandler<GetAccountsDatabyEventtypeuserIDandDateRangeCompletedEventArgs> GetAccountsDatabyEventtypeuserIDandDateRangeCompleted;
        
        public event System.EventHandler<GetDatabyAgentIDForCommisionandDateRangeCompletedEventArgs> GetDatabyAgentIDForCommisionandDateRangeCompleted;
        
        public event System.EventHandler<GetDatabyAgentIDForCommisionandDateRangeByEventtypeCompletedEventArgs> GetDatabyAgentIDForCommisionandDateRangeByEventtypeCompleted;
        
        public event System.EventHandler<UserAccountsGetCommissionCompletedEventArgs> UserAccountsGetCommissionCompleted;
        
        public event System.EventHandler<GetEventTypeNamebyMarketIDCompletedEventArgs> GetEventTypeNamebyMarketIDCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateLiveOddbyIDCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateUserOddbyIDCompleted;
        
        public event System.EventHandler<GetAllowedMarketsbyUserIDCompletedEventArgs> GetAllowedMarketsbyUserIDCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateAllowedMarketsbyUserIDCompleted;
        
        public event System.EventHandler<GetCommissionaccountIdandBookAccountbyUserIDCompletedEventArgs> GetCommissionaccountIdandBookAccountbyUserIDCompleted;
        
        public event System.EventHandler<GetReferrerRateandIDbyUserIDCompletedEventArgs> GetReferrerRateandIDbyUserIDCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateRefererRateandIDbyUserIDCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateUsersAllBlockCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateUsersAllLoggedOutCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateMaxOddBackandLayCompleted;
        
        public event System.EventHandler<GetIntervalandBetPlaceTimingsCompletedEventArgs> GetIntervalandBetPlaceTimingsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateIntervalandBetPlaceTimingsCompleted;
        
        public event System.EventHandler<GetHawalaAccountIDbyUserIDCompletedEventArgs> GetHawalaAccountIDbyUserIDCompleted;
        
        public event System.EventHandler<GetCreatedbyIDCompletedEventArgs> GetCreatedbyIDCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateHawalaIDbyUserIDCompleted;
        
        public event System.EventHandler<GetMarketsforBettingAllowedCompletedEventArgs> GetMarketsforBettingAllowedCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateMarketAllowedBettingCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateMarketAllowedBettingForAllAgentsCompleted;
        
        public event System.EventHandler<GetBetSlipKeysCompletedEventArgs> GetBetSlipKeysCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateBetSlipKeysCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateBettingAllowedCompleted;
        
        public event System.EventHandler<GetPoundRatebyUserIDCompletedEventArgs> GetPoundRatebyUserIDCompleted;
        
        public event System.EventHandler<GetMarqueeTextCompletedEventArgs> GetMarqueeTextCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateMarqueeTextCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SendBalanceSheettoEmailCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SendBalanceSheettoEmailAutomaticCompleted;
        
        public event System.EventHandler<GetShowTVCompletedEventArgs> GetShowTVCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateShowTVCompleted;
        
        public event System.EventHandler<GetEventDetailsbyMarketBookCompletedEventArgs> GetEventDetailsbyMarketBookCompleted;
        
        public event System.EventHandler<GetLinevMarketsbyEventIDCompletedEventArgs> GetLinevMarketsbyEventIDCompleted;
        
        public event System.EventHandler<KJMarketsbyEventIDCompletedEventArgs> KJMarketsbyEventIDCompleted;
        
        public event System.EventHandler<GetLinevMarketsbyEventIDINCompletedEventArgs> GetLinevMarketsbyEventIDINCompleted;
        
        public event System.EventHandler<GetMarketIDbyEventIDCompletedEventArgs> GetMarketIDbyEventIDCompleted;
        
        public event System.EventHandler<GetKalijutCompletedEventArgs> GetKalijutCompleted;
        
        public event System.EventHandler<GetFigureOddsCompletedEventArgs> GetFigureOddsCompleted;
        
        public event System.EventHandler<GetScoresbyEventIDandDateCompletedEventArgs> GetScoresbyEventIDandDateCompleted;
        
        public event System.EventHandler<GetMarketRulesCompletedEventArgs> GetMarketRulesCompleted;
        
        public event System.EventHandler<GetLineandMatchOddsforAssociationCompletedEventArgs> GetLineandMatchOddsforAssociationCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateAssociateEventIDCompleted;
        
        public event System.EventHandler<GetLiveTVChanelsCompletedEventArgs> GetLiveTVChanelsCompleted;
        
        public event System.EventHandler<GetScorebyEventIDandInningsCompletedEventArgs> GetScorebyEventIDandInningsCompleted;
        
        public event System.EventHandler<GetScorebyEventIDandInningsandOversCompletedEventArgs> GetScorebyEventIDandInningsandOversCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddScoreToBallbyBallsummaryCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CheckforMatchCompletedFancyCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CheckforMatchCompletedFancyINCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CheckforMatchCompletedFancyKJCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CheckforMatchCompletedSmallFigCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CheckforMatchCompletedFancyFigCompleted;
        
        public event System.EventHandler<InsertUserAccountsFancyCompletedEventArgs> InsertUserAccountsFancyCompleted;
        
        public event System.EventHandler<GetIsComAllowbyUserIDCompletedEventArgs> GetIsComAllowbyUserIDCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateMarketStatusbyMarketBookIDCompleted;
        
        public event System.EventHandler<GetUserbyUsernameandPasswordCompletedEventArgs> GetUserbyUsernameandPasswordCompleted;
        
        public event System.EventHandler<GetUserbyUsernameandPasswordNewCompletedEventArgs> GetUserbyUsernameandPasswordNewCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateCurrentLoggedInIDbyUserIDCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddUserActivityCompleted;
        
        public event System.EventHandler<GetAccessRightsbyUserTypeCompletedEventArgs> GetAccessRightsbyUserTypeCompleted;
        
        public event System.EventHandler<AddUserCompletedEventArgs> AddUserCompleted;
        
        public event System.EventHandler<CheckifUserExistsCompletedEventArgs> CheckifUserExistsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddCredittoUserCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddAdminAmountForSuperCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateStartBalancebyUserIDCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateAccountsOpeningBalanceCompleted;
        
        public event System.EventHandler<GetCurrentBalancebyUserCompletedEventArgs> GetCurrentBalancebyUserCompleted;
        
        public event System.EventHandler<GetStartingBalanceCompletedEventArgs> GetStartingBalanceCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddKalijutCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> MarketCatalogueSelectionskalijutCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateAccountBalacnebyUserCompleted;
        
        public event System.EventHandler<GetAllCuttingUsersCompletedEventArgs> GetAllCuttingUsersCompleted;
        
        public event System.EventHandler<GetAllUsersbyUserTypeCompletedEventArgs> GetAllUsersbyUserTypeCompleted;
        
        public event System.EventHandler<GetAllUsersbyUserTypeNewCompletedEventArgs> GetAllUsersbyUserTypeNewCompleted;
        
        public event System.EventHandler<GetUserDetailsbyIDCompletedEventArgs> GetUserDetailsbyIDCompleted;
        
        public event System.EventHandler<GetMarketbyEventIDCompletedEventArgs> GetMarketbyEventIDCompleted;
        
        public event System.EventHandler<GetMarketbyEventID1CompletedEventArgs> GetMarketbyEventID1Completed;
        
        public event System.EventHandler<SetDeleteStatusofUserCompletedEventArgs> SetDeleteStatusofUserCompleted;
        
        public event System.EventHandler<SetBlockedStatusofUserCompletedEventArgs> SetBlockedStatusofUserCompleted;
        
        public event System.EventHandler<ResetPasswordofUserCompletedEventArgs> ResetPasswordofUserCompleted;
        
        public event System.EventHandler<GetUserMArketCompletedEventArgs> GetUserMArketCompleted;
        
        public event System.EventHandler<InsertUserMarketCompletedEventArgs> InsertUserMarketCompleted;
        
        public event System.EventHandler<InsertUserMarketKJCompletedEventArgs> InsertUserMarketKJCompleted;
        
        public event System.EventHandler<InsertUserMarketSFigCompletedEventArgs> InsertUserMarketSFigCompleted;
        
        public event System.EventHandler<InsertUserMarketFigureCompletedEventArgs> InsertUserMarketFigureCompleted;
        
        public event System.EventHandler<InsertIndainFancyCompletedEventArgs> InsertIndainFancyCompleted;
        
        public event System.EventHandler<GetUserMarketforSelectionCompletedEventArgs> GetUserMarketforSelectionCompleted;
        
        public event System.EventHandler<GetFavoriteEventTypesCompletedEventArgs> GetFavoriteEventTypesCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddtoFavoriteEventTypesCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteFromFavoriteEventTypesCompleted;
        
        public event System.EventHandler<GetFavoriteEventsCompletedEventArgs> GetFavoriteEventsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddtoFavoriteEventsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteFromFavoriteEventsCompleted;
        
        public event System.EventHandler<GetFavoriteCompetitionsCompletedEventArgs> GetFavoriteCompetitionsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddtoFavoriteCompetitionsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteFromFavoriteCompetitionsCompleted;
        
        public event System.EventHandler<GetEventTypeIDsCompletedEventArgs> GetEventTypeIDsCompleted;
        
        public event System.EventHandler<getlistuseridsCompletedEventArgs> getlistuseridsCompleted;
        
        public event System.EventHandler<GetCompetitionIDsCompletedEventArgs> GetCompetitionIDsCompleted;
        
        public event System.EventHandler<GetEventsIDsCompletedEventArgs> GetEventsIDsCompleted;
        
        public event System.EventHandler<GetMarketCatalogueIDsCompletedEventArgs> GetMarketCatalogueIDsCompleted;
        
        public event System.EventHandler<InsertUserBetCompletedEventArgs> InsertUserBetCompleted;
        
        public event System.EventHandler<InsertUserBetAdminCompletedEventArgs> InsertUserBetAdminCompleted;
        
        public event System.EventHandler<UpdateUserBetCompletedEventArgs> UpdateUserBetCompleted;
        
        public event System.EventHandler<GetUserbetsbyUserIDandMarketIDCompletedEventArgs> GetUserbetsbyUserIDandMarketIDCompleted;
        
        public event System.EventHandler<GetMaxOddBackandLayCompletedEventArgs> GetMaxOddBackandLayCompleted;
        
        public event System.EventHandler<GetMaxOddBackandLayStrCompletedEventArgs> GetMaxOddBackandLayStrCompleted;
        
        public event System.EventHandler<GetUserbetsbyUserIDCompletedEventArgs> GetUserbetsbyUserIDCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateUserBetMatchedCompleted;
        
        public event System.EventHandler<GetCurrentLiabalityCompletedEventArgs> GetCurrentLiabalityCompleted;
        
        public event System.EventHandler<GetAgentRateCompletedEventArgs> GetAgentRateCompleted;
        
        public event System.EventHandler<GetSuperNameCompletedEventArgs> GetSuperNameCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CheckforMatchCompletedCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseAllClosedMarketsCompleted;
        
        public event System.EventHandler<SetAgentRateofUserCompletedEventArgs> SetAgentRateofUserCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateUserBetUnMatchedStatusTocompleteCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateUserBetUnMatchedStatusTocompleteforCuttingUserCompleted;
        
        public event System.EventHandler<GetMarketsOpenedbyUserCompletedEventArgs> GetMarketsOpenedbyUserCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SetMarketBookOpenbyUSerCompleted;
        
        public event System.EventHandler<SetMarketBookOpenbyUSerandGetCompletedEventArgs> SetMarketBookOpenbyUSerandGetCompleted;
        
        public event System.EventHandler<SetMarketBookOpenbyUSerandGet0CompletedEventArgs> SetMarketBookOpenbyUSerandGet0Completed;
        
        public event System.EventHandler<SetMarketBookOpenbyUSerandGet1CompletedEventArgs> SetMarketBookOpenbyUSerandGet1Completed;
        
        public event System.EventHandler<SetMarketBookOpenbyUSerandGet2CompletedEventArgs> SetMarketBookOpenbyUSerandGet2Completed;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SetMarketBookClosedbyUserCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SetMarketClosedAllUsersCompleted;
        
        public event System.EventHandler<GetSelectionNamesbyMarketIDCompletedEventArgs> GetSelectionNamesbyMarketIDCompleted;
        
        public event System.EventHandler<GetAccountsDatabyUserIDandDateRangeCompletedEventArgs> GetAccountsDatabyUserIDandDateRangeCompleted;
        
        public event System.EventHandler<GetAccountsDatabyCreatedByIDCompletedEventArgs> GetAccountsDatabyCreatedByIDCompleted;
        
        public event System.EventHandler<GetAccountsDatabyCreatedByIDForSuperCompletedEventArgs> GetAccountsDatabyCreatedByIDForSuperCompleted;
        
        public event System.EventHandler<GetAccountsDatabyCreatedByIDForSamiAdminCompletedEventArgs> GetAccountsDatabyCreatedByIDForSamiAdminCompleted;
        
        public event System.EventHandler<GetAccountsDataForAdminCompletedEventArgs> GetAccountsDataForAdminCompleted;
        
        public event System.EventHandler<GetProfitorLossbyUserIDCompletedEventArgs> GetProfitorLossbyUserIDCompleted;
        
        public event System.EventHandler<GetProfitorLossforSuperCompletedEventArgs> GetProfitorLossforSuperCompleted;
        
        public event System.EventHandler<GetAccountsDataForCommisionaccountCompletedEventArgs> GetAccountsDataForCommisionaccountCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DownloadAllMarketHorseRaceCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DownloadAllMarketGrayHoundRaceCompleted;
        
        public event System.EventHandler<UpdateUserbetamountbyIDCompletedEventArgs> UpdateUserbetamountbyIDCompleted;
        
        public event System.EventHandler<GetInPlayMatchesCompletedEventArgs> GetInPlayMatchesCompleted;
        
        public event System.EventHandler<GetInPlayMatcheswithRunnersCompletedEventArgs> GetInPlayMatcheswithRunnersCompleted;
        
        public event System.EventHandler<GetInPlayMatcheswithRunners1CompletedEventArgs> GetInPlayMatcheswithRunners1Completed;
        
        public bool GetFancyResultPostSetting() {
            return base.Channel.GetFancyResultPostSetting();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetFancyResultPostSetting(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFancyResultPostSetting(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndGetFancyResultPostSetting(System.IAsyncResult result) {
            return base.Channel.EndGetFancyResultPostSetting(result);
        }
        
        private System.IAsyncResult OnBeginGetFancyResultPostSetting(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetFancyResultPostSetting(callback, asyncState);
        }
        
        private object[] OnEndGetFancyResultPostSetting(System.IAsyncResult result) {
            bool retVal = this.EndGetFancyResultPostSetting(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFancyResultPostSettingCompleted(object state) {
            if ((this.GetFancyResultPostSettingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFancyResultPostSettingCompleted(this, new GetFancyResultPostSettingCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFancyResultPostSettingAsync() {
            this.GetFancyResultPostSettingAsync(null);
        }
        
        public void GetFancyResultPostSettingAsync(object userState) {
            if ((this.onBeginGetFancyResultPostSettingDelegate == null)) {
                this.onBeginGetFancyResultPostSettingDelegate = new BeginOperationDelegate(this.OnBeginGetFancyResultPostSetting);
            }
            if ((this.onEndGetFancyResultPostSettingDelegate == null)) {
                this.onEndGetFancyResultPostSettingDelegate = new EndOperationDelegate(this.OnEndGetFancyResultPostSetting);
            }
            if ((this.onGetFancyResultPostSettingCompletedDelegate == null)) {
                this.onGetFancyResultPostSettingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFancyResultPostSettingCompleted);
            }
            base.InvokeAsync(this.onBeginGetFancyResultPostSettingDelegate, null, this.onEndGetFancyResultPostSettingDelegate, this.onGetFancyResultPostSettingCompletedDelegate, userState);
        }
        
        public void UpdateFancyResultPostSetting(bool fancyresultpost) {
            base.Channel.UpdateFancyResultPostSetting(fancyresultpost);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateFancyResultPostSetting(bool fancyresultpost, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateFancyResultPostSetting(fancyresultpost, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateFancyResultPostSetting(System.IAsyncResult result) {
            base.Channel.EndUpdateFancyResultPostSetting(result);
        }
        
        private System.IAsyncResult OnBeginUpdateFancyResultPostSetting(object[] inValues, System.AsyncCallback callback, object asyncState) {
            bool fancyresultpost = ((bool)(inValues[0]));
            return this.BeginUpdateFancyResultPostSetting(fancyresultpost, callback, asyncState);
        }
        
        private object[] OnEndUpdateFancyResultPostSetting(System.IAsyncResult result) {
            this.EndUpdateFancyResultPostSetting(result);
            return null;
        }
        
        private void OnUpdateFancyResultPostSettingCompleted(object state) {
            if ((this.UpdateFancyResultPostSettingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateFancyResultPostSettingCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateFancyResultPostSettingAsync(bool fancyresultpost) {
            this.UpdateFancyResultPostSettingAsync(fancyresultpost, null);
        }
        
        public void UpdateFancyResultPostSettingAsync(bool fancyresultpost, object userState) {
            if ((this.onBeginUpdateFancyResultPostSettingDelegate == null)) {
                this.onBeginUpdateFancyResultPostSettingDelegate = new BeginOperationDelegate(this.OnBeginUpdateFancyResultPostSetting);
            }
            if ((this.onEndUpdateFancyResultPostSettingDelegate == null)) {
                this.onEndUpdateFancyResultPostSettingDelegate = new EndOperationDelegate(this.OnEndUpdateFancyResultPostSetting);
            }
            if ((this.onUpdateFancyResultPostSettingCompletedDelegate == null)) {
                this.onUpdateFancyResultPostSettingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateFancyResultPostSettingCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateFancyResultPostSettingDelegate, new object[] {
                        fancyresultpost}, this.onEndUpdateFancyResultPostSettingDelegate, this.onUpdateFancyResultPostSettingCompletedDelegate, userState);
        }
        
        public int GetCommissionRatebyUserIDFancy(int UserID) {
            return base.Channel.GetCommissionRatebyUserIDFancy(UserID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetCommissionRatebyUserIDFancy(int UserID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCommissionRatebyUserIDFancy(UserID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndGetCommissionRatebyUserIDFancy(System.IAsyncResult result) {
            return base.Channel.EndGetCommissionRatebyUserIDFancy(result);
        }
        
        private System.IAsyncResult OnBeginGetCommissionRatebyUserIDFancy(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int UserID = ((int)(inValues[0]));
            return this.BeginGetCommissionRatebyUserIDFancy(UserID, callback, asyncState);
        }
        
        private object[] OnEndGetCommissionRatebyUserIDFancy(System.IAsyncResult result) {
            int retVal = this.EndGetCommissionRatebyUserIDFancy(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCommissionRatebyUserIDFancyCompleted(object state) {
            if ((this.GetCommissionRatebyUserIDFancyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCommissionRatebyUserIDFancyCompleted(this, new GetCommissionRatebyUserIDFancyCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCommissionRatebyUserIDFancyAsync(int UserID) {
            this.GetCommissionRatebyUserIDFancyAsync(UserID, null);
        }
        
        public void GetCommissionRatebyUserIDFancyAsync(int UserID, object userState) {
            if ((this.onBeginGetCommissionRatebyUserIDFancyDelegate == null)) {
                this.onBeginGetCommissionRatebyUserIDFancyDelegate = new BeginOperationDelegate(this.OnBeginGetCommissionRatebyUserIDFancy);
            }
            if ((this.onEndGetCommissionRatebyUserIDFancyDelegate == null)) {
                this.onEndGetCommissionRatebyUserIDFancyDelegate = new EndOperationDelegate(this.OnEndGetCommissionRatebyUserIDFancy);
            }
            if ((this.onGetCommissionRatebyUserIDFancyCompletedDelegate == null)) {
                this.onGetCommissionRatebyUserIDFancyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCommissionRatebyUserIDFancyCompleted);
            }
            base.InvokeAsync(this.onBeginGetCommissionRatebyUserIDFancyDelegate, new object[] {
                        UserID}, this.onEndGetCommissionRatebyUserIDFancyDelegate, this.onGetCommissionRatebyUserIDFancyCompletedDelegate, userState);
        }
        
        public void UpdateCommissionRatebyUserID(int UserID, int CommisionrateFancy) {
            base.Channel.UpdateCommissionRatebyUserID(UserID, CommisionrateFancy);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateCommissionRatebyUserID(int UserID, int CommisionrateFancy, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateCommissionRatebyUserID(UserID, CommisionrateFancy, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateCommissionRatebyUserID(System.IAsyncResult result) {
            base.Channel.EndUpdateCommissionRatebyUserID(result);
        }
        
        private System.IAsyncResult OnBeginUpdateCommissionRatebyUserID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int UserID = ((int)(inValues[0]));
            int CommisionrateFancy = ((int)(inValues[1]));
            return this.BeginUpdateCommissionRatebyUserID(UserID, CommisionrateFancy, callback, asyncState);
        }
        
        private object[] OnEndUpdateCommissionRatebyUserID(System.IAsyncResult result) {
            this.EndUpdateCommissionRatebyUserID(result);
            return null;
        }
        
        private void OnUpdateCommissionRatebyUserIDCompleted(object state) {
            if ((this.UpdateCommissionRatebyUserIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateCommissionRatebyUserIDCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateCommissionRatebyUserIDAsync(int UserID, int CommisionrateFancy) {
            this.UpdateCommissionRatebyUserIDAsync(UserID, CommisionrateFancy, null);
        }
        
        public void UpdateCommissionRatebyUserIDAsync(int UserID, int CommisionrateFancy, object userState) {
            if ((this.onBeginUpdateCommissionRatebyUserIDDelegate == null)) {
                this.onBeginUpdateCommissionRatebyUserIDDelegate = new BeginOperationDelegate(this.OnBeginUpdateCommissionRatebyUserID);
            }
            if ((this.onEndUpdateCommissionRatebyUserIDDelegate == null)) {
                this.onEndUpdateCommissionRatebyUserIDDelegate = new EndOperationDelegate(this.OnEndUpdateCommissionRatebyUserID);
            }
            if ((this.onUpdateCommissionRatebyUserIDCompletedDelegate == null)) {
                this.onUpdateCommissionRatebyUserIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateCommissionRatebyUserIDCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateCommissionRatebyUserIDDelegate, new object[] {
                        UserID,
                        CommisionrateFancy}, this.onEndUpdateCommissionRatebyUserIDDelegate, this.onUpdateCommissionRatebyUserIDCompletedDelegate, userState);
        }
        
        public void UpdateCricketAPIMatchKey(string EventID, string CricketAPIMatchKey) {
            base.Channel.UpdateCricketAPIMatchKey(EventID, CricketAPIMatchKey);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateCricketAPIMatchKey(string EventID, string CricketAPIMatchKey, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateCricketAPIMatchKey(EventID, CricketAPIMatchKey, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateCricketAPIMatchKey(System.IAsyncResult result) {
            base.Channel.EndUpdateCricketAPIMatchKey(result);
        }
        
        private System.IAsyncResult OnBeginUpdateCricketAPIMatchKey(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string EventID = ((string)(inValues[0]));
            string CricketAPIMatchKey = ((string)(inValues[1]));
            return this.BeginUpdateCricketAPIMatchKey(EventID, CricketAPIMatchKey, callback, asyncState);
        }
        
        private object[] OnEndUpdateCricketAPIMatchKey(System.IAsyncResult result) {
            this.EndUpdateCricketAPIMatchKey(result);
            return null;
        }
        
        private void OnUpdateCricketAPIMatchKeyCompleted(object state) {
            if ((this.UpdateCricketAPIMatchKeyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateCricketAPIMatchKeyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateCricketAPIMatchKeyAsync(string EventID, string CricketAPIMatchKey) {
            this.UpdateCricketAPIMatchKeyAsync(EventID, CricketAPIMatchKey, null);
        }
        
        public void UpdateCricketAPIMatchKeyAsync(string EventID, string CricketAPIMatchKey, object userState) {
            if ((this.onBeginUpdateCricketAPIMatchKeyDelegate == null)) {
                this.onBeginUpdateCricketAPIMatchKeyDelegate = new BeginOperationDelegate(this.OnBeginUpdateCricketAPIMatchKey);
            }
            if ((this.onEndUpdateCricketAPIMatchKeyDelegate == null)) {
                this.onEndUpdateCricketAPIMatchKeyDelegate = new EndOperationDelegate(this.OnEndUpdateCricketAPIMatchKey);
            }
            if ((this.onUpdateCricketAPIMatchKeyCompletedDelegate == null)) {
                this.onUpdateCricketAPIMatchKeyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateCricketAPIMatchKeyCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateCricketAPIMatchKeyDelegate, new object[] {
                        EventID,
                        CricketAPIMatchKey}, this.onEndUpdateCricketAPIMatchKeyDelegate, this.onUpdateCricketAPIMatchKeyCompletedDelegate, userState);
        }
        
        public string GetFancyResultsFrom() {
            return base.Channel.GetFancyResultsFrom();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetFancyResultsFrom(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFancyResultsFrom(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetFancyResultsFrom(System.IAsyncResult result) {
            return base.Channel.EndGetFancyResultsFrom(result);
        }
        
        private System.IAsyncResult OnBeginGetFancyResultsFrom(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetFancyResultsFrom(callback, asyncState);
        }
        
        private object[] OnEndGetFancyResultsFrom(System.IAsyncResult result) {
            string retVal = this.EndGetFancyResultsFrom(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFancyResultsFromCompleted(object state) {
            if ((this.GetFancyResultsFromCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFancyResultsFromCompleted(this, new GetFancyResultsFromCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFancyResultsFromAsync() {
            this.GetFancyResultsFromAsync(null);
        }
        
        public void GetFancyResultsFromAsync(object userState) {
            if ((this.onBeginGetFancyResultsFromDelegate == null)) {
                this.onBeginGetFancyResultsFromDelegate = new BeginOperationDelegate(this.OnBeginGetFancyResultsFrom);
            }
            if ((this.onEndGetFancyResultsFromDelegate == null)) {
                this.onEndGetFancyResultsFromDelegate = new EndOperationDelegate(this.OnEndGetFancyResultsFrom);
            }
            if ((this.onGetFancyResultsFromCompletedDelegate == null)) {
                this.onGetFancyResultsFromCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFancyResultsFromCompleted);
            }
            base.InvokeAsync(this.onBeginGetFancyResultsFromDelegate, null, this.onEndGetFancyResultsFromDelegate, this.onGetFancyResultsFromCompletedDelegate, userState);
        }
        
        public void UpdateGetFancyResultsFrom(string ResultsFrom) {
            base.Channel.UpdateGetFancyResultsFrom(ResultsFrom);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateGetFancyResultsFrom(string ResultsFrom, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateGetFancyResultsFrom(ResultsFrom, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateGetFancyResultsFrom(System.IAsyncResult result) {
            base.Channel.EndUpdateGetFancyResultsFrom(result);
        }
        
        private System.IAsyncResult OnBeginUpdateGetFancyResultsFrom(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ResultsFrom = ((string)(inValues[0]));
            return this.BeginUpdateGetFancyResultsFrom(ResultsFrom, callback, asyncState);
        }
        
        private object[] OnEndUpdateGetFancyResultsFrom(System.IAsyncResult result) {
            this.EndUpdateGetFancyResultsFrom(result);
            return null;
        }
        
        private void OnUpdateGetFancyResultsFromCompleted(object state) {
            if ((this.UpdateGetFancyResultsFromCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateGetFancyResultsFromCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateGetFancyResultsFromAsync(string ResultsFrom) {
            this.UpdateGetFancyResultsFromAsync(ResultsFrom, null);
        }
        
        public void UpdateGetFancyResultsFromAsync(string ResultsFrom, object userState) {
            if ((this.onBeginUpdateGetFancyResultsFromDelegate == null)) {
                this.onBeginUpdateGetFancyResultsFromDelegate = new BeginOperationDelegate(this.OnBeginUpdateGetFancyResultsFrom);
            }
            if ((this.onEndUpdateGetFancyResultsFromDelegate == null)) {
                this.onEndUpdateGetFancyResultsFromDelegate = new EndOperationDelegate(this.OnEndUpdateGetFancyResultsFrom);
            }
            if ((this.onUpdateGetFancyResultsFromCompletedDelegate == null)) {
                this.onUpdateGetFancyResultsFromCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateGetFancyResultsFromCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateGetFancyResultsFromDelegate, new object[] {
                        ResultsFrom}, this.onEndUpdateGetFancyResultsFromDelegate, this.onUpdateGetFancyResultsFromCompletedDelegate, userState);
        }
        
        public string GetRecentMatchesFromCricketAPI() {
            return base.Channel.GetRecentMatchesFromCricketAPI();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetRecentMatchesFromCricketAPI(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRecentMatchesFromCricketAPI(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetRecentMatchesFromCricketAPI(System.IAsyncResult result) {
            return base.Channel.EndGetRecentMatchesFromCricketAPI(result);
        }
        
        private System.IAsyncResult OnBeginGetRecentMatchesFromCricketAPI(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetRecentMatchesFromCricketAPI(callback, asyncState);
        }
        
        private object[] OnEndGetRecentMatchesFromCricketAPI(System.IAsyncResult result) {
            string retVal = this.EndGetRecentMatchesFromCricketAPI(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRecentMatchesFromCricketAPICompleted(object state) {
            if ((this.GetRecentMatchesFromCricketAPICompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRecentMatchesFromCricketAPICompleted(this, new GetRecentMatchesFromCricketAPICompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRecentMatchesFromCricketAPIAsync() {
            this.GetRecentMatchesFromCricketAPIAsync(null);
        }
        
        public void GetRecentMatchesFromCricketAPIAsync(object userState) {
            if ((this.onBeginGetRecentMatchesFromCricketAPIDelegate == null)) {
                this.onBeginGetRecentMatchesFromCricketAPIDelegate = new BeginOperationDelegate(this.OnBeginGetRecentMatchesFromCricketAPI);
            }
            if ((this.onEndGetRecentMatchesFromCricketAPIDelegate == null)) {
                this.onEndGetRecentMatchesFromCricketAPIDelegate = new EndOperationDelegate(this.OnEndGetRecentMatchesFromCricketAPI);
            }
            if ((this.onGetRecentMatchesFromCricketAPICompletedDelegate == null)) {
                this.onGetRecentMatchesFromCricketAPICompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRecentMatchesFromCricketAPICompleted);
            }
            base.InvokeAsync(this.onBeginGetRecentMatchesFromCricketAPIDelegate, null, this.onEndGetRecentMatchesFromCricketAPIDelegate, this.onGetRecentMatchesFromCricketAPICompletedDelegate, userState);
        }
        
        public void UpdateGetDataFromForLoggingData(string EventID, string GetDataFrom) {
            base.Channel.UpdateGetDataFromForLoggingData(EventID, GetDataFrom);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateGetDataFromForLoggingData(string EventID, string GetDataFrom, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateGetDataFromForLoggingData(EventID, GetDataFrom, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateGetDataFromForLoggingData(System.IAsyncResult result) {
            base.Channel.EndUpdateGetDataFromForLoggingData(result);
        }
        
        private System.IAsyncResult OnBeginUpdateGetDataFromForLoggingData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string EventID = ((string)(inValues[0]));
            string GetDataFrom = ((string)(inValues[1]));
            return this.BeginUpdateGetDataFromForLoggingData(EventID, GetDataFrom, callback, asyncState);
        }
        
        private object[] OnEndUpdateGetDataFromForLoggingData(System.IAsyncResult result) {
            this.EndUpdateGetDataFromForLoggingData(result);
            return null;
        }
        
        private void OnUpdateGetDataFromForLoggingDataCompleted(object state) {
            if ((this.UpdateGetDataFromForLoggingDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateGetDataFromForLoggingDataCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateGetDataFromForLoggingDataAsync(string EventID, string GetDataFrom) {
            this.UpdateGetDataFromForLoggingDataAsync(EventID, GetDataFrom, null);
        }
        
        public void UpdateGetDataFromForLoggingDataAsync(string EventID, string GetDataFrom, object userState) {
            if ((this.onBeginUpdateGetDataFromForLoggingDataDelegate == null)) {
                this.onBeginUpdateGetDataFromForLoggingDataDelegate = new BeginOperationDelegate(this.OnBeginUpdateGetDataFromForLoggingData);
            }
            if ((this.onEndUpdateGetDataFromForLoggingDataDelegate == null)) {
                this.onEndUpdateGetDataFromForLoggingDataDelegate = new EndOperationDelegate(this.OnEndUpdateGetDataFromForLoggingData);
            }
            if ((this.onUpdateGetDataFromForLoggingDataCompletedDelegate == null)) {
                this.onUpdateGetDataFromForLoggingDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateGetDataFromForLoggingDataCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateGetDataFromForLoggingDataDelegate, new object[] {
                        EventID,
                        GetDataFrom}, this.onEndUpdateGetDataFromForLoggingDataDelegate, this.onUpdateGetDataFromForLoggingDataCompletedDelegate, userState);
        }
        
        public string GetAccountsDatabyEventNameuserIDandDateRange(int UserID, string From, string To, string Password) {
            return base.Channel.GetAccountsDatabyEventNameuserIDandDateRange(UserID, From, To, Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAccountsDatabyEventNameuserIDandDateRange(int UserID, string From, string To, string Password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAccountsDatabyEventNameuserIDandDateRange(UserID, From, To, Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetAccountsDatabyEventNameuserIDandDateRange(System.IAsyncResult result) {
            return base.Channel.EndGetAccountsDatabyEventNameuserIDandDateRange(result);
        }
        
        private System.IAsyncResult OnBeginGetAccountsDatabyEventNameuserIDandDateRange(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int UserID = ((int)(inValues[0]));
            string From = ((string)(inValues[1]));
            string To = ((string)(inValues[2]));
            string Password = ((string)(inValues[3]));
            return this.BeginGetAccountsDatabyEventNameuserIDandDateRange(UserID, From, To, Password, callback, asyncState);
        }
        
        private object[] OnEndGetAccountsDatabyEventNameuserIDandDateRange(System.IAsyncResult result) {
            string retVal = this.EndGetAccountsDatabyEventNameuserIDandDateRange(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAccountsDatabyEventNameuserIDandDateRangeCompleted(object state) {
            if ((this.GetAccountsDatabyEventNameuserIDandDateRangeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAccountsDatabyEventNameuserIDandDateRangeCompleted(this, new GetAccountsDatabyEventNameuserIDandDateRangeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAccountsDatabyEventNameuserIDandDateRangeAsync(int UserID, string From, string To, string Password) {
            this.GetAccountsDatabyEventNameuserIDandDateRangeAsync(UserID, From, To, Password, null);
        }
        
        public void GetAccountsDatabyEventNameuserIDandDateRangeAsync(int UserID, string From, string To, string Password, object userState) {
            if ((this.onBeginGetAccountsDatabyEventNameuserIDandDateRangeDelegate == null)) {
                this.onBeginGetAccountsDatabyEventNameuserIDandDateRangeDelegate = new BeginOperationDelegate(this.OnBeginGetAccountsDatabyEventNameuserIDandDateRange);
            }
            if ((this.onEndGetAccountsDatabyEventNameuserIDandDateRangeDelegate == null)) {
                this.onEndGetAccountsDatabyEventNameuserIDandDateRangeDelegate = new EndOperationDelegate(this.OnEndGetAccountsDatabyEventNameuserIDandDateRange);
            }
            if ((this.onGetAccountsDatabyEventNameuserIDandDateRangeCompletedDelegate == null)) {
                this.onGetAccountsDatabyEventNameuserIDandDateRangeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAccountsDatabyEventNameuserIDandDateRangeCompleted);
            }
            base.InvokeAsync(this.onBeginGetAccountsDatabyEventNameuserIDandDateRangeDelegate, new object[] {
                        UserID,
                        From,
                        To,
                        Password}, this.onEndGetAccountsDatabyEventNameuserIDandDateRangeDelegate, this.onGetAccountsDatabyEventNameuserIDandDateRangeCompletedDelegate, userState);
        }
        
        public string GetAccountsDatabyEventNameuserIDandDateRangeFancywithMArketName(int UserID, string From, string To, string Password) {
            return base.Channel.GetAccountsDatabyEventNameuserIDandDateRangeFancywithMArketName(UserID, From, To, Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAccountsDatabyEventNameuserIDandDateRangeFancywithMArketName(int UserID, string From, string To, string Password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAccountsDatabyEventNameuserIDandDateRangeFancywithMArketName(UserID, From, To, Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetAccountsDatabyEventNameuserIDandDateRangeFancywithMArketName(System.IAsyncResult result) {
            return base.Channel.EndGetAccountsDatabyEventNameuserIDandDateRangeFancywithMArketName(result);
        }
        
        private System.IAsyncResult OnBeginGetAccountsDatabyEventNameuserIDandDateRangeFancywithMArketName(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int UserID = ((int)(inValues[0]));
            string From = ((string)(inValues[1]));
            string To = ((string)(inValues[2]));
            string Password = ((string)(inValues[3]));
            return this.BeginGetAccountsDatabyEventNameuserIDandDateRangeFancywithMArketName(UserID, From, To, Password, callback, asyncState);
        }
        
        private object[] OnEndGetAccountsDatabyEventNameuserIDandDateRangeFancywithMArketName(System.IAsyncResult result) {
            string retVal = this.EndGetAccountsDatabyEventNameuserIDandDateRangeFancywithMArketName(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAccountsDatabyEventNameuserIDandDateRangeFancywithMArketNameCompleted(object state) {
            if ((this.GetAccountsDatabyEventNameuserIDandDateRangeFancywithMArketNameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAccountsDatabyEventNameuserIDandDateRangeFancywithMArketNameCompleted(this, new GetAccountsDatabyEventNameuserIDandDateRangeFancywithMArketNameCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAccountsDatabyEventNameuserIDandDateRangeFancywithMArketNameAsync(int UserID, string From, string To, string Password) {
            this.GetAccountsDatabyEventNameuserIDandDateRangeFancywithMArketNameAsync(UserID, From, To, Password, null);
        }
        
        public void GetAccountsDatabyEventNameuserIDandDateRangeFancywithMArketNameAsync(int UserID, string From, string To, string Password, object userState) {
            if ((this.onBeginGetAccountsDatabyEventNameuserIDandDateRangeFancywithMArketNameDelegate == null)) {
                this.onBeginGetAccountsDatabyEventNameuserIDandDateRangeFancywithMArketNameDelegate = new BeginOperationDelegate(this.OnBeginGetAccountsDatabyEventNameuserIDandDateRangeFancywithMArketName);
            }
            if ((this.onEndGetAccountsDatabyEventNameuserIDandDateRangeFancywithMArketNameDelegate == null)) {
                this.onEndGetAccountsDatabyEventNameuserIDandDateRangeFancywithMArketNameDelegate = new EndOperationDelegate(this.OnEndGetAccountsDatabyEventNameuserIDandDateRangeFancywithMArketName);
            }
            if ((this.onGetAccountsDatabyEventNameuserIDandDateRangeFancywithMArketNameCompletedDelegate == null)) {
                this.onGetAccountsDatabyEventNameuserIDandDateRangeFancywithMArketNameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAccountsDatabyEventNameuserIDandDateRangeFancywithMArketNameCompleted);
            }
            base.InvokeAsync(this.onBeginGetAccountsDatabyEventNameuserIDandDateRangeFancywithMArketNameDelegate, new object[] {
                        UserID,
                        From,
                        To,
                        Password}, this.onEndGetAccountsDatabyEventNameuserIDandDateRangeFancywithMArketNameDelegate, this.onGetAccountsDatabyEventNameuserIDandDateRangeFancywithMArketNameCompletedDelegate, userState);
        }
        
        public void UpdateTransferAdminAmount(int UserID, bool TransferAdminAmount, int TransferAgentID, bool TransferAdminAmountSoccer, bool TransferAdminAmountTennis, bool TransferAdminAmountHorse, bool TransferAdminAmountGreyHound) {
            base.Channel.UpdateTransferAdminAmount(UserID, TransferAdminAmount, TransferAgentID, TransferAdminAmountSoccer, TransferAdminAmountTennis, TransferAdminAmountHorse, TransferAdminAmountGreyHound);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateTransferAdminAmount(int UserID, bool TransferAdminAmount, int TransferAgentID, bool TransferAdminAmountSoccer, bool TransferAdminAmountTennis, bool TransferAdminAmountHorse, bool TransferAdminAmountGreyHound, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateTransferAdminAmount(UserID, TransferAdminAmount, TransferAgentID, TransferAdminAmountSoccer, TransferAdminAmountTennis, TransferAdminAmountHorse, TransferAdminAmountGreyHound, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateTransferAdminAmount(System.IAsyncResult result) {
            base.Channel.EndUpdateTransferAdminAmount(result);
        }
        
        private System.IAsyncResult OnBeginUpdateTransferAdminAmount(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int UserID = ((int)(inValues[0]));
            bool TransferAdminAmount = ((bool)(inValues[1]));
            int TransferAgentID = ((int)(inValues[2]));
            bool TransferAdminAmountSoccer = ((bool)(inValues[3]));
            bool TransferAdminAmountTennis = ((bool)(inValues[4]));
            bool TransferAdminAmountHorse = ((bool)(inValues[5]));
            bool TransferAdminAmountGreyHound = ((bool)(inValues[6]));
            return this.BeginUpdateTransferAdminAmount(UserID, TransferAdminAmount, TransferAgentID, TransferAdminAmountSoccer, TransferAdminAmountTennis, TransferAdminAmountHorse, TransferAdminAmountGreyHound, callback, asyncState);
        }
        
        private object[] OnEndUpdateTransferAdminAmount(System.IAsyncResult result) {
            this.EndUpdateTransferAdminAmount(result);
            return null;
        }
        
        private void OnUpdateTransferAdminAmountCompleted(object state) {
            if ((this.UpdateTransferAdminAmountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateTransferAdminAmountCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateTransferAdminAmountAsync(int UserID, bool TransferAdminAmount, int TransferAgentID, bool TransferAdminAmountSoccer, bool TransferAdminAmountTennis, bool TransferAdminAmountHorse, bool TransferAdminAmountGreyHound) {
            this.UpdateTransferAdminAmountAsync(UserID, TransferAdminAmount, TransferAgentID, TransferAdminAmountSoccer, TransferAdminAmountTennis, TransferAdminAmountHorse, TransferAdminAmountGreyHound, null);
        }
        
        public void UpdateTransferAdminAmountAsync(int UserID, bool TransferAdminAmount, int TransferAgentID, bool TransferAdminAmountSoccer, bool TransferAdminAmountTennis, bool TransferAdminAmountHorse, bool TransferAdminAmountGreyHound, object userState) {
            if ((this.onBeginUpdateTransferAdminAmountDelegate == null)) {
                this.onBeginUpdateTransferAdminAmountDelegate = new BeginOperationDelegate(this.OnBeginUpdateTransferAdminAmount);
            }
            if ((this.onEndUpdateTransferAdminAmountDelegate == null)) {
                this.onEndUpdateTransferAdminAmountDelegate = new EndOperationDelegate(this.OnEndUpdateTransferAdminAmount);
            }
            if ((this.onUpdateTransferAdminAmountCompletedDelegate == null)) {
                this.onUpdateTransferAdminAmountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateTransferAdminAmountCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateTransferAdminAmountDelegate, new object[] {
                        UserID,
                        TransferAdminAmount,
                        TransferAgentID,
                        TransferAdminAmountSoccer,
                        TransferAdminAmountTennis,
                        TransferAdminAmountHorse,
                        TransferAdminAmountGreyHound}, this.onEndUpdateTransferAdminAmountDelegate, this.onUpdateTransferAdminAmountCompletedDelegate, userState);
        }
        
        public globaltraders.UserServiceReference.SP_Users_GetTransferAdminAmount_Result GetTransferAdminAmount(int UserID) {
            return base.Channel.GetTransferAdminAmount(UserID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetTransferAdminAmount(int UserID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTransferAdminAmount(UserID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public globaltraders.UserServiceReference.SP_Users_GetTransferAdminAmount_Result EndGetTransferAdminAmount(System.IAsyncResult result) {
            return base.Channel.EndGetTransferAdminAmount(result);
        }
        
        private System.IAsyncResult OnBeginGetTransferAdminAmount(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int UserID = ((int)(inValues[0]));
            return this.BeginGetTransferAdminAmount(UserID, callback, asyncState);
        }
        
        private object[] OnEndGetTransferAdminAmount(System.IAsyncResult result) {
            globaltraders.UserServiceReference.SP_Users_GetTransferAdminAmount_Result retVal = this.EndGetTransferAdminAmount(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTransferAdminAmountCompleted(object state) {
            if ((this.GetTransferAdminAmountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTransferAdminAmountCompleted(this, new GetTransferAdminAmountCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTransferAdminAmountAsync(int UserID) {
            this.GetTransferAdminAmountAsync(UserID, null);
        }
        
        public void GetTransferAdminAmountAsync(int UserID, object userState) {
            if ((this.onBeginGetTransferAdminAmountDelegate == null)) {
                this.onBeginGetTransferAdminAmountDelegate = new BeginOperationDelegate(this.OnBeginGetTransferAdminAmount);
            }
            if ((this.onEndGetTransferAdminAmountDelegate == null)) {
                this.onEndGetTransferAdminAmountDelegate = new EndOperationDelegate(this.OnEndGetTransferAdminAmount);
            }
            if ((this.onGetTransferAdminAmountCompletedDelegate == null)) {
                this.onGetTransferAdminAmountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTransferAdminAmountCompleted);
            }
            base.InvokeAsync(this.onBeginGetTransferAdminAmountDelegate, new object[] {
                        UserID}, this.onEndGetTransferAdminAmountDelegate, this.onGetTransferAdminAmountCompletedDelegate, userState);
        }
        
        public string GetAllPendingAmountsbyDate(System.DateTime DueDate) {
            return base.Channel.GetAllPendingAmountsbyDate(DueDate);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAllPendingAmountsbyDate(System.DateTime DueDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllPendingAmountsbyDate(DueDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetAllPendingAmountsbyDate(System.IAsyncResult result) {
            return base.Channel.EndGetAllPendingAmountsbyDate(result);
        }
        
        private System.IAsyncResult OnBeginGetAllPendingAmountsbyDate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.DateTime DueDate = ((System.DateTime)(inValues[0]));
            return this.BeginGetAllPendingAmountsbyDate(DueDate, callback, asyncState);
        }
        
        private object[] OnEndGetAllPendingAmountsbyDate(System.IAsyncResult result) {
            string retVal = this.EndGetAllPendingAmountsbyDate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllPendingAmountsbyDateCompleted(object state) {
            if ((this.GetAllPendingAmountsbyDateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllPendingAmountsbyDateCompleted(this, new GetAllPendingAmountsbyDateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllPendingAmountsbyDateAsync(System.DateTime DueDate) {
            this.GetAllPendingAmountsbyDateAsync(DueDate, null);
        }
        
        public void GetAllPendingAmountsbyDateAsync(System.DateTime DueDate, object userState) {
            if ((this.onBeginGetAllPendingAmountsbyDateDelegate == null)) {
                this.onBeginGetAllPendingAmountsbyDateDelegate = new BeginOperationDelegate(this.OnBeginGetAllPendingAmountsbyDate);
            }
            if ((this.onEndGetAllPendingAmountsbyDateDelegate == null)) {
                this.onEndGetAllPendingAmountsbyDateDelegate = new EndOperationDelegate(this.OnEndGetAllPendingAmountsbyDate);
            }
            if ((this.onGetAllPendingAmountsbyDateCompletedDelegate == null)) {
                this.onGetAllPendingAmountsbyDateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllPendingAmountsbyDateCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllPendingAmountsbyDateDelegate, new object[] {
                        DueDate}, this.onEndGetAllPendingAmountsbyDateDelegate, this.onGetAllPendingAmountsbyDateCompletedDelegate, userState);
        }
        
        public void AddAmountReceviables(int UserId, decimal Amount, System.DateTime DueDate, string Status, decimal AmountReceived) {
            base.Channel.AddAmountReceviables(UserId, Amount, DueDate, Status, AmountReceived);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddAmountReceviables(int UserId, decimal Amount, System.DateTime DueDate, string Status, decimal AmountReceived, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddAmountReceviables(UserId, Amount, DueDate, Status, AmountReceived, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndAddAmountReceviables(System.IAsyncResult result) {
            base.Channel.EndAddAmountReceviables(result);
        }
        
        private System.IAsyncResult OnBeginAddAmountReceviables(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int UserId = ((int)(inValues[0]));
            decimal Amount = ((decimal)(inValues[1]));
            System.DateTime DueDate = ((System.DateTime)(inValues[2]));
            string Status = ((string)(inValues[3]));
            decimal AmountReceived = ((decimal)(inValues[4]));
            return this.BeginAddAmountReceviables(UserId, Amount, DueDate, Status, AmountReceived, callback, asyncState);
        }
        
        private object[] OnEndAddAmountReceviables(System.IAsyncResult result) {
            this.EndAddAmountReceviables(result);
            return null;
        }
        
        private void OnAddAmountReceviablesCompleted(object state) {
            if ((this.AddAmountReceviablesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddAmountReceviablesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddAmountReceviablesAsync(int UserId, decimal Amount, System.DateTime DueDate, string Status, decimal AmountReceived) {
            this.AddAmountReceviablesAsync(UserId, Amount, DueDate, Status, AmountReceived, null);
        }
        
        public void AddAmountReceviablesAsync(int UserId, decimal Amount, System.DateTime DueDate, string Status, decimal AmountReceived, object userState) {
            if ((this.onBeginAddAmountReceviablesDelegate == null)) {
                this.onBeginAddAmountReceviablesDelegate = new BeginOperationDelegate(this.OnBeginAddAmountReceviables);
            }
            if ((this.onEndAddAmountReceviablesDelegate == null)) {
                this.onEndAddAmountReceviablesDelegate = new EndOperationDelegate(this.OnEndAddAmountReceviables);
            }
            if ((this.onAddAmountReceviablesCompletedDelegate == null)) {
                this.onAddAmountReceviablesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddAmountReceviablesCompleted);
            }
            base.InvokeAsync(this.onBeginAddAmountReceviablesDelegate, new object[] {
                        UserId,
                        Amount,
                        DueDate,
                        Status,
                        AmountReceived}, this.onEndAddAmountReceviablesDelegate, this.onAddAmountReceviablesCompletedDelegate, userState);
        }
        
        public void UpdateAmountReceviables(int ID, decimal Amount, System.DateTime DueDate, string Status) {
            base.Channel.UpdateAmountReceviables(ID, Amount, DueDate, Status);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateAmountReceviables(int ID, decimal Amount, System.DateTime DueDate, string Status, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateAmountReceviables(ID, Amount, DueDate, Status, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateAmountReceviables(System.IAsyncResult result) {
            base.Channel.EndUpdateAmountReceviables(result);
        }
        
        private System.IAsyncResult OnBeginUpdateAmountReceviables(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int ID = ((int)(inValues[0]));
            decimal Amount = ((decimal)(inValues[1]));
            System.DateTime DueDate = ((System.DateTime)(inValues[2]));
            string Status = ((string)(inValues[3]));
            return this.BeginUpdateAmountReceviables(ID, Amount, DueDate, Status, callback, asyncState);
        }
        
        private object[] OnEndUpdateAmountReceviables(System.IAsyncResult result) {
            this.EndUpdateAmountReceviables(result);
            return null;
        }
        
        private void OnUpdateAmountReceviablesCompleted(object state) {
            if ((this.UpdateAmountReceviablesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateAmountReceviablesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateAmountReceviablesAsync(int ID, decimal Amount, System.DateTime DueDate, string Status) {
            this.UpdateAmountReceviablesAsync(ID, Amount, DueDate, Status, null);
        }
        
        public void UpdateAmountReceviablesAsync(int ID, decimal Amount, System.DateTime DueDate, string Status, object userState) {
            if ((this.onBeginUpdateAmountReceviablesDelegate == null)) {
                this.onBeginUpdateAmountReceviablesDelegate = new BeginOperationDelegate(this.OnBeginUpdateAmountReceviables);
            }
            if ((this.onEndUpdateAmountReceviablesDelegate == null)) {
                this.onEndUpdateAmountReceviablesDelegate = new EndOperationDelegate(this.OnEndUpdateAmountReceviables);
            }
            if ((this.onUpdateAmountReceviablesCompletedDelegate == null)) {
                this.onUpdateAmountReceviablesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateAmountReceviablesCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateAmountReceviablesDelegate, new object[] {
                        ID,
                        Amount,
                        DueDate,
                        Status}, this.onEndUpdateAmountReceviablesDelegate, this.onUpdateAmountReceviablesCompletedDelegate, userState);
        }
        
        public bool GetBettingAllowedbyMarketIDandUserID(int UserId, string MarketBookID) {
            return base.Channel.GetBettingAllowedbyMarketIDandUserID(UserId, MarketBookID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetBettingAllowedbyMarketIDandUserID(int UserId, string MarketBookID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetBettingAllowedbyMarketIDandUserID(UserId, MarketBookID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndGetBettingAllowedbyMarketIDandUserID(System.IAsyncResult result) {
            return base.Channel.EndGetBettingAllowedbyMarketIDandUserID(result);
        }
        
        private System.IAsyncResult OnBeginGetBettingAllowedbyMarketIDandUserID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int UserId = ((int)(inValues[0]));
            string MarketBookID = ((string)(inValues[1]));
            return this.BeginGetBettingAllowedbyMarketIDandUserID(UserId, MarketBookID, callback, asyncState);
        }
        
        private object[] OnEndGetBettingAllowedbyMarketIDandUserID(System.IAsyncResult result) {
            bool retVal = this.EndGetBettingAllowedbyMarketIDandUserID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetBettingAllowedbyMarketIDandUserIDCompleted(object state) {
            if ((this.GetBettingAllowedbyMarketIDandUserIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetBettingAllowedbyMarketIDandUserIDCompleted(this, new GetBettingAllowedbyMarketIDandUserIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetBettingAllowedbyMarketIDandUserIDAsync(int UserId, string MarketBookID) {
            this.GetBettingAllowedbyMarketIDandUserIDAsync(UserId, MarketBookID, null);
        }
        
        public void GetBettingAllowedbyMarketIDandUserIDAsync(int UserId, string MarketBookID, object userState) {
            if ((this.onBeginGetBettingAllowedbyMarketIDandUserIDDelegate == null)) {
                this.onBeginGetBettingAllowedbyMarketIDandUserIDDelegate = new BeginOperationDelegate(this.OnBeginGetBettingAllowedbyMarketIDandUserID);
            }
            if ((this.onEndGetBettingAllowedbyMarketIDandUserIDDelegate == null)) {
                this.onEndGetBettingAllowedbyMarketIDandUserIDDelegate = new EndOperationDelegate(this.OnEndGetBettingAllowedbyMarketIDandUserID);
            }
            if ((this.onGetBettingAllowedbyMarketIDandUserIDCompletedDelegate == null)) {
                this.onGetBettingAllowedbyMarketIDandUserIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetBettingAllowedbyMarketIDandUserIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetBettingAllowedbyMarketIDandUserIDDelegate, new object[] {
                        UserId,
                        MarketBookID}, this.onEndGetBettingAllowedbyMarketIDandUserIDDelegate, this.onGetBettingAllowedbyMarketIDandUserIDCompletedDelegate, userState);
        }
        
        public bool GetBettingAllowedbyMarketIDandUserIDInplay(int UserId) {
            return base.Channel.GetBettingAllowedbyMarketIDandUserIDInplay(UserId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetBettingAllowedbyMarketIDandUserIDInplay(int UserId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetBettingAllowedbyMarketIDandUserIDInplay(UserId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndGetBettingAllowedbyMarketIDandUserIDInplay(System.IAsyncResult result) {
            return base.Channel.EndGetBettingAllowedbyMarketIDandUserIDInplay(result);
        }
        
        private System.IAsyncResult OnBeginGetBettingAllowedbyMarketIDandUserIDInplay(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int UserId = ((int)(inValues[0]));
            return this.BeginGetBettingAllowedbyMarketIDandUserIDInplay(UserId, callback, asyncState);
        }
        
        private object[] OnEndGetBettingAllowedbyMarketIDandUserIDInplay(System.IAsyncResult result) {
            bool retVal = this.EndGetBettingAllowedbyMarketIDandUserIDInplay(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetBettingAllowedbyMarketIDandUserIDInplayCompleted(object state) {
            if ((this.GetBettingAllowedbyMarketIDandUserIDInplayCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetBettingAllowedbyMarketIDandUserIDInplayCompleted(this, new GetBettingAllowedbyMarketIDandUserIDInplayCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetBettingAllowedbyMarketIDandUserIDInplayAsync(int UserId) {
            this.GetBettingAllowedbyMarketIDandUserIDInplayAsync(UserId, null);
        }
        
        public void GetBettingAllowedbyMarketIDandUserIDInplayAsync(int UserId, object userState) {
            if ((this.onBeginGetBettingAllowedbyMarketIDandUserIDInplayDelegate == null)) {
                this.onBeginGetBettingAllowedbyMarketIDandUserIDInplayDelegate = new BeginOperationDelegate(this.OnBeginGetBettingAllowedbyMarketIDandUserIDInplay);
            }
            if ((this.onEndGetBettingAllowedbyMarketIDandUserIDInplayDelegate == null)) {
                this.onEndGetBettingAllowedbyMarketIDandUserIDInplayDelegate = new EndOperationDelegate(this.OnEndGetBettingAllowedbyMarketIDandUserIDInplay);
            }
            if ((this.onGetBettingAllowedbyMarketIDandUserIDInplayCompletedDelegate == null)) {
                this.onGetBettingAllowedbyMarketIDandUserIDInplayCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetBettingAllowedbyMarketIDandUserIDInplayCompleted);
            }
            base.InvokeAsync(this.onBeginGetBettingAllowedbyMarketIDandUserIDInplayDelegate, new object[] {
                        UserId}, this.onEndGetBettingAllowedbyMarketIDandUserIDInplayDelegate, this.onGetBettingAllowedbyMarketIDandUserIDInplayCompletedDelegate, userState);
        }
        
        public void AddReferrerUsers(int UserID, int ReferrerID, int ReferrerRate) {
            base.Channel.AddReferrerUsers(UserID, ReferrerID, ReferrerRate);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddReferrerUsers(int UserID, int ReferrerID, int ReferrerRate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddReferrerUsers(UserID, ReferrerID, ReferrerRate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndAddReferrerUsers(System.IAsyncResult result) {
            base.Channel.EndAddReferrerUsers(result);
        }
        
        private System.IAsyncResult OnBeginAddReferrerUsers(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int UserID = ((int)(inValues[0]));
            int ReferrerID = ((int)(inValues[1]));
            int ReferrerRate = ((int)(inValues[2]));
            return this.BeginAddReferrerUsers(UserID, ReferrerID, ReferrerRate, callback, asyncState);
        }
        
        private object[] OnEndAddReferrerUsers(System.IAsyncResult result) {
            this.EndAddReferrerUsers(result);
            return null;
        }
        
        private void OnAddReferrerUsersCompleted(object state) {
            if ((this.AddReferrerUsersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddReferrerUsersCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddReferrerUsersAsync(int UserID, int ReferrerID, int ReferrerRate) {
            this.AddReferrerUsersAsync(UserID, ReferrerID, ReferrerRate, null);
        }
        
        public void AddReferrerUsersAsync(int UserID, int ReferrerID, int ReferrerRate, object userState) {
            if ((this.onBeginAddReferrerUsersDelegate == null)) {
                this.onBeginAddReferrerUsersDelegate = new BeginOperationDelegate(this.OnBeginAddReferrerUsers);
            }
            if ((this.onEndAddReferrerUsersDelegate == null)) {
                this.onEndAddReferrerUsersDelegate = new EndOperationDelegate(this.OnEndAddReferrerUsers);
            }
            if ((this.onAddReferrerUsersCompletedDelegate == null)) {
                this.onAddReferrerUsersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddReferrerUsersCompleted);
            }
            base.InvokeAsync(this.onBeginAddReferrerUsersDelegate, new object[] {
                        UserID,
                        ReferrerID,
                        ReferrerRate}, this.onEndAddReferrerUsersDelegate, this.onAddReferrerUsersCompletedDelegate, userState);
        }
        
        public void DeletReffererUSers(int UserID) {
            base.Channel.DeletReffererUSers(UserID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeletReffererUSers(int UserID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeletReffererUSers(UserID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDeletReffererUSers(System.IAsyncResult result) {
            base.Channel.EndDeletReffererUSers(result);
        }
        
        private System.IAsyncResult OnBeginDeletReffererUSers(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int UserID = ((int)(inValues[0]));
            return this.BeginDeletReffererUSers(UserID, callback, asyncState);
        }
        
        private object[] OnEndDeletReffererUSers(System.IAsyncResult result) {
            this.EndDeletReffererUSers(result);
            return null;
        }
        
        private void OnDeletReffererUSersCompleted(object state) {
            if ((this.DeletReffererUSersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeletReffererUSersCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeletReffererUSersAsync(int UserID) {
            this.DeletReffererUSersAsync(UserID, null);
        }
        
        public void DeletReffererUSersAsync(int UserID, object userState) {
            if ((this.onBeginDeletReffererUSersDelegate == null)) {
                this.onBeginDeletReffererUSersDelegate = new BeginOperationDelegate(this.OnBeginDeletReffererUSers);
            }
            if ((this.onEndDeletReffererUSersDelegate == null)) {
                this.onEndDeletReffererUSersDelegate = new EndOperationDelegate(this.OnEndDeletReffererUSers);
            }
            if ((this.onDeletReffererUSersCompletedDelegate == null)) {
                this.onDeletReffererUSersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeletReffererUSersCompleted);
            }
            base.InvokeAsync(this.onBeginDeletReffererUSersDelegate, new object[] {
                        UserID}, this.onEndDeletReffererUSersDelegate, this.onDeletReffererUSersCompletedDelegate, userState);
        }
        
        public globaltraders.UserServiceReference.SP_Referrers_GetReferrerRateandReferrerIDbyUserID_Result[] GetReferrerRatesbyUserID(int UserID) {
            return base.Channel.GetReferrerRatesbyUserID(UserID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetReferrerRatesbyUserID(int UserID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetReferrerRatesbyUserID(UserID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public globaltraders.UserServiceReference.SP_Referrers_GetReferrerRateandReferrerIDbyUserID_Result[] EndGetReferrerRatesbyUserID(System.IAsyncResult result) {
            return base.Channel.EndGetReferrerRatesbyUserID(result);
        }
        
        private System.IAsyncResult OnBeginGetReferrerRatesbyUserID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int UserID = ((int)(inValues[0]));
            return this.BeginGetReferrerRatesbyUserID(UserID, callback, asyncState);
        }
        
        private object[] OnEndGetReferrerRatesbyUserID(System.IAsyncResult result) {
            globaltraders.UserServiceReference.SP_Referrers_GetReferrerRateandReferrerIDbyUserID_Result[] retVal = this.EndGetReferrerRatesbyUserID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetReferrerRatesbyUserIDCompleted(object state) {
            if ((this.GetReferrerRatesbyUserIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetReferrerRatesbyUserIDCompleted(this, new GetReferrerRatesbyUserIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetReferrerRatesbyUserIDAsync(int UserID) {
            this.GetReferrerRatesbyUserIDAsync(UserID, null);
        }
        
        public void GetReferrerRatesbyUserIDAsync(int UserID, object userState) {
            if ((this.onBeginGetReferrerRatesbyUserIDDelegate == null)) {
                this.onBeginGetReferrerRatesbyUserIDDelegate = new BeginOperationDelegate(this.OnBeginGetReferrerRatesbyUserID);
            }
            if ((this.onEndGetReferrerRatesbyUserIDDelegate == null)) {
                this.onEndGetReferrerRatesbyUserIDDelegate = new EndOperationDelegate(this.OnEndGetReferrerRatesbyUserID);
            }
            if ((this.onGetReferrerRatesbyUserIDCompletedDelegate == null)) {
                this.onGetReferrerRatesbyUserIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetReferrerRatesbyUserIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetReferrerRatesbyUserIDDelegate, new object[] {
                        UserID}, this.onEndGetReferrerRatesbyUserIDDelegate, this.onGetReferrerRatesbyUserIDCompletedDelegate, userState);
        }
        
        public void InsertUserBetNew(
                    decimal userodd, 
                    string SelectionID, 
                    string Selectionname, 
                    string BetType, 
                    string nupdownAmount, 
                    string betslipamountlabel, 
                    decimal MaxOddBack, 
                    decimal MaxOddLay, 
                    bool CheckforMaxOddBack, 
                    bool CheckforMaxOddLay, 
                    int Clickedlocation, 
                    int UserID, 
                    string Betslipsize, 
                    string Password, 
                    string marketbookId, 
                    string Marketbookname, 
                    bool GetData) {
            base.Channel.InsertUserBetNew(userodd, SelectionID, Selectionname, BetType, nupdownAmount, betslipamountlabel, MaxOddBack, MaxOddLay, CheckforMaxOddBack, CheckforMaxOddLay, Clickedlocation, UserID, Betslipsize, Password, marketbookId, Marketbookname, GetData);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginInsertUserBetNew(
                    decimal userodd, 
                    string SelectionID, 
                    string Selectionname, 
                    string BetType, 
                    string nupdownAmount, 
                    string betslipamountlabel, 
                    decimal MaxOddBack, 
                    decimal MaxOddLay, 
                    bool CheckforMaxOddBack, 
                    bool CheckforMaxOddLay, 
                    int Clickedlocation, 
                    int UserID, 
                    string Betslipsize, 
                    string Password, 
                    string marketbookId, 
                    string Marketbookname, 
                    bool GetData, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return base.Channel.BeginInsertUserBetNew(userodd, SelectionID, Selectionname, BetType, nupdownAmount, betslipamountlabel, MaxOddBack, MaxOddLay, CheckforMaxOddBack, CheckforMaxOddLay, Clickedlocation, UserID, Betslipsize, Password, marketbookId, Marketbookname, GetData, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndInsertUserBetNew(System.IAsyncResult result) {
            base.Channel.EndInsertUserBetNew(result);
        }
        
        private System.IAsyncResult OnBeginInsertUserBetNew(object[] inValues, System.AsyncCallback callback, object asyncState) {
            decimal userodd = ((decimal)(inValues[0]));
            string SelectionID = ((string)(inValues[1]));
            string Selectionname = ((string)(inValues[2]));
            string BetType = ((string)(inValues[3]));
            string nupdownAmount = ((string)(inValues[4]));
            string betslipamountlabel = ((string)(inValues[5]));
            decimal MaxOddBack = ((decimal)(inValues[6]));
            decimal MaxOddLay = ((decimal)(inValues[7]));
            bool CheckforMaxOddBack = ((bool)(inValues[8]));
            bool CheckforMaxOddLay = ((bool)(inValues[9]));
            int Clickedlocation = ((int)(inValues[10]));
            int UserID = ((int)(inValues[11]));
            string Betslipsize = ((string)(inValues[12]));
            string Password = ((string)(inValues[13]));
            string marketbookId = ((string)(inValues[14]));
            string Marketbookname = ((string)(inValues[15]));
            bool GetData = ((bool)(inValues[16]));
            return this.BeginInsertUserBetNew(userodd, SelectionID, Selectionname, BetType, nupdownAmount, betslipamountlabel, MaxOddBack, MaxOddLay, CheckforMaxOddBack, CheckforMaxOddLay, Clickedlocation, UserID, Betslipsize, Password, marketbookId, Marketbookname, GetData, callback, asyncState);
        }
        
        private object[] OnEndInsertUserBetNew(System.IAsyncResult result) {
            this.EndInsertUserBetNew(result);
            return null;
        }
        
        private void OnInsertUserBetNewCompleted(object state) {
            if ((this.InsertUserBetNewCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InsertUserBetNewCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InsertUserBetNewAsync(
                    decimal userodd, 
                    string SelectionID, 
                    string Selectionname, 
                    string BetType, 
                    string nupdownAmount, 
                    string betslipamountlabel, 
                    decimal MaxOddBack, 
                    decimal MaxOddLay, 
                    bool CheckforMaxOddBack, 
                    bool CheckforMaxOddLay, 
                    int Clickedlocation, 
                    int UserID, 
                    string Betslipsize, 
                    string Password, 
                    string marketbookId, 
                    string Marketbookname, 
                    bool GetData) {
            this.InsertUserBetNewAsync(userodd, SelectionID, Selectionname, BetType, nupdownAmount, betslipamountlabel, MaxOddBack, MaxOddLay, CheckforMaxOddBack, CheckforMaxOddLay, Clickedlocation, UserID, Betslipsize, Password, marketbookId, Marketbookname, GetData, null);
        }
        
        public void InsertUserBetNewAsync(
                    decimal userodd, 
                    string SelectionID, 
                    string Selectionname, 
                    string BetType, 
                    string nupdownAmount, 
                    string betslipamountlabel, 
                    decimal MaxOddBack, 
                    decimal MaxOddLay, 
                    bool CheckforMaxOddBack, 
                    bool CheckforMaxOddLay, 
                    int Clickedlocation, 
                    int UserID, 
                    string Betslipsize, 
                    string Password, 
                    string marketbookId, 
                    string Marketbookname, 
                    bool GetData, 
                    object userState) {
            if ((this.onBeginInsertUserBetNewDelegate == null)) {
                this.onBeginInsertUserBetNewDelegate = new BeginOperationDelegate(this.OnBeginInsertUserBetNew);
            }
            if ((this.onEndInsertUserBetNewDelegate == null)) {
                this.onEndInsertUserBetNewDelegate = new EndOperationDelegate(this.OnEndInsertUserBetNew);
            }
            if ((this.onInsertUserBetNewCompletedDelegate == null)) {
                this.onInsertUserBetNewCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInsertUserBetNewCompleted);
            }
            base.InvokeAsync(this.onBeginInsertUserBetNewDelegate, new object[] {
                        userodd,
                        SelectionID,
                        Selectionname,
                        BetType,
                        nupdownAmount,
                        betslipamountlabel,
                        MaxOddBack,
                        MaxOddLay,
                        CheckforMaxOddBack,
                        CheckforMaxOddLay,
                        Clickedlocation,
                        UserID,
                        Betslipsize,
                        Password,
                        marketbookId,
                        Marketbookname,
                        GetData}, this.onEndInsertUserBetNewDelegate, this.onInsertUserBetNewCompletedDelegate, userState);
        }
        
        public string GetDistinctMarketsFromBets(string From, string To) {
            return base.Channel.GetDistinctMarketsFromBets(From, To);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetDistinctMarketsFromBets(string From, string To, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDistinctMarketsFromBets(From, To, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetDistinctMarketsFromBets(System.IAsyncResult result) {
            return base.Channel.EndGetDistinctMarketsFromBets(result);
        }
        
        private System.IAsyncResult OnBeginGetDistinctMarketsFromBets(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string From = ((string)(inValues[0]));
            string To = ((string)(inValues[1]));
            return this.BeginGetDistinctMarketsFromBets(From, To, callback, asyncState);
        }
        
        private object[] OnEndGetDistinctMarketsFromBets(System.IAsyncResult result) {
            string retVal = this.EndGetDistinctMarketsFromBets(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDistinctMarketsFromBetsCompleted(object state) {
            if ((this.GetDistinctMarketsFromBetsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDistinctMarketsFromBetsCompleted(this, new GetDistinctMarketsFromBetsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDistinctMarketsFromBetsAsync(string From, string To) {
            this.GetDistinctMarketsFromBetsAsync(From, To, null);
        }
        
        public void GetDistinctMarketsFromBetsAsync(string From, string To, object userState) {
            if ((this.onBeginGetDistinctMarketsFromBetsDelegate == null)) {
                this.onBeginGetDistinctMarketsFromBetsDelegate = new BeginOperationDelegate(this.OnBeginGetDistinctMarketsFromBets);
            }
            if ((this.onEndGetDistinctMarketsFromBetsDelegate == null)) {
                this.onEndGetDistinctMarketsFromBetsDelegate = new EndOperationDelegate(this.OnEndGetDistinctMarketsFromBets);
            }
            if ((this.onGetDistinctMarketsFromBetsCompletedDelegate == null)) {
                this.onGetDistinctMarketsFromBetsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDistinctMarketsFromBetsCompleted);
            }
            base.InvokeAsync(this.onBeginGetDistinctMarketsFromBetsDelegate, new object[] {
                        From,
                        To}, this.onEndGetDistinctMarketsFromBetsDelegate, this.onGetDistinctMarketsFromBetsCompletedDelegate, userState);
        }
        
        public string GetDistinctMarketsFromAccounts(string From, string To) {
            return base.Channel.GetDistinctMarketsFromAccounts(From, To);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetDistinctMarketsFromAccounts(string From, string To, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDistinctMarketsFromAccounts(From, To, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetDistinctMarketsFromAccounts(System.IAsyncResult result) {
            return base.Channel.EndGetDistinctMarketsFromAccounts(result);
        }
        
        private System.IAsyncResult OnBeginGetDistinctMarketsFromAccounts(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string From = ((string)(inValues[0]));
            string To = ((string)(inValues[1]));
            return this.BeginGetDistinctMarketsFromAccounts(From, To, callback, asyncState);
        }
        
        private object[] OnEndGetDistinctMarketsFromAccounts(System.IAsyncResult result) {
            string retVal = this.EndGetDistinctMarketsFromAccounts(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDistinctMarketsFromAccountsCompleted(object state) {
            if ((this.GetDistinctMarketsFromAccountsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDistinctMarketsFromAccountsCompleted(this, new GetDistinctMarketsFromAccountsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDistinctMarketsFromAccountsAsync(string From, string To) {
            this.GetDistinctMarketsFromAccountsAsync(From, To, null);
        }
        
        public void GetDistinctMarketsFromAccountsAsync(string From, string To, object userState) {
            if ((this.onBeginGetDistinctMarketsFromAccountsDelegate == null)) {
                this.onBeginGetDistinctMarketsFromAccountsDelegate = new BeginOperationDelegate(this.OnBeginGetDistinctMarketsFromAccounts);
            }
            if ((this.onEndGetDistinctMarketsFromAccountsDelegate == null)) {
                this.onEndGetDistinctMarketsFromAccountsDelegate = new EndOperationDelegate(this.OnEndGetDistinctMarketsFromAccounts);
            }
            if ((this.onGetDistinctMarketsFromAccountsCompletedDelegate == null)) {
                this.onGetDistinctMarketsFromAccountsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDistinctMarketsFromAccountsCompleted);
            }
            base.InvokeAsync(this.onBeginGetDistinctMarketsFromAccountsDelegate, new object[] {
                        From,
                        To}, this.onEndGetDistinctMarketsFromAccountsDelegate, this.onGetDistinctMarketsFromAccountsCompletedDelegate, userState);
        }
        
        public bool UnPostUserAccountsbyUserIDandMarketID(string MarketBookId, int UserID, string Password) {
            return base.Channel.UnPostUserAccountsbyUserIDandMarketID(MarketBookId, UserID, Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUnPostUserAccountsbyUserIDandMarketID(string MarketBookId, int UserID, string Password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUnPostUserAccountsbyUserIDandMarketID(MarketBookId, UserID, Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndUnPostUserAccountsbyUserIDandMarketID(System.IAsyncResult result) {
            return base.Channel.EndUnPostUserAccountsbyUserIDandMarketID(result);
        }
        
        private System.IAsyncResult OnBeginUnPostUserAccountsbyUserIDandMarketID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string MarketBookId = ((string)(inValues[0]));
            int UserID = ((int)(inValues[1]));
            string Password = ((string)(inValues[2]));
            return this.BeginUnPostUserAccountsbyUserIDandMarketID(MarketBookId, UserID, Password, callback, asyncState);
        }
        
        private object[] OnEndUnPostUserAccountsbyUserIDandMarketID(System.IAsyncResult result) {
            bool retVal = this.EndUnPostUserAccountsbyUserIDandMarketID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUnPostUserAccountsbyUserIDandMarketIDCompleted(object state) {
            if ((this.UnPostUserAccountsbyUserIDandMarketIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UnPostUserAccountsbyUserIDandMarketIDCompleted(this, new UnPostUserAccountsbyUserIDandMarketIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UnPostUserAccountsbyUserIDandMarketIDAsync(string MarketBookId, int UserID, string Password) {
            this.UnPostUserAccountsbyUserIDandMarketIDAsync(MarketBookId, UserID, Password, null);
        }
        
        public void UnPostUserAccountsbyUserIDandMarketIDAsync(string MarketBookId, int UserID, string Password, object userState) {
            if ((this.onBeginUnPostUserAccountsbyUserIDandMarketIDDelegate == null)) {
                this.onBeginUnPostUserAccountsbyUserIDandMarketIDDelegate = new BeginOperationDelegate(this.OnBeginUnPostUserAccountsbyUserIDandMarketID);
            }
            if ((this.onEndUnPostUserAccountsbyUserIDandMarketIDDelegate == null)) {
                this.onEndUnPostUserAccountsbyUserIDandMarketIDDelegate = new EndOperationDelegate(this.OnEndUnPostUserAccountsbyUserIDandMarketID);
            }
            if ((this.onUnPostUserAccountsbyUserIDandMarketIDCompletedDelegate == null)) {
                this.onUnPostUserAccountsbyUserIDandMarketIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUnPostUserAccountsbyUserIDandMarketIDCompleted);
            }
            base.InvokeAsync(this.onBeginUnPostUserAccountsbyUserIDandMarketIDDelegate, new object[] {
                        MarketBookId,
                        UserID,
                        Password}, this.onEndUnPostUserAccountsbyUserIDandMarketIDDelegate, this.onUnPostUserAccountsbyUserIDandMarketIDCompletedDelegate, userState);
        }
        
        public bool UpdateUserBetsStatusbyMarketIDandUserID(string MarketBookId, int UserID, string Password) {
            return base.Channel.UpdateUserBetsStatusbyMarketIDandUserID(MarketBookId, UserID, Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateUserBetsStatusbyMarketIDandUserID(string MarketBookId, int UserID, string Password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateUserBetsStatusbyMarketIDandUserID(MarketBookId, UserID, Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndUpdateUserBetsStatusbyMarketIDandUserID(System.IAsyncResult result) {
            return base.Channel.EndUpdateUserBetsStatusbyMarketIDandUserID(result);
        }
        
        private System.IAsyncResult OnBeginUpdateUserBetsStatusbyMarketIDandUserID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string MarketBookId = ((string)(inValues[0]));
            int UserID = ((int)(inValues[1]));
            string Password = ((string)(inValues[2]));
            return this.BeginUpdateUserBetsStatusbyMarketIDandUserID(MarketBookId, UserID, Password, callback, asyncState);
        }
        
        private object[] OnEndUpdateUserBetsStatusbyMarketIDandUserID(System.IAsyncResult result) {
            bool retVal = this.EndUpdateUserBetsStatusbyMarketIDandUserID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateUserBetsStatusbyMarketIDandUserIDCompleted(object state) {
            if ((this.UpdateUserBetsStatusbyMarketIDandUserIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateUserBetsStatusbyMarketIDandUserIDCompleted(this, new UpdateUserBetsStatusbyMarketIDandUserIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateUserBetsStatusbyMarketIDandUserIDAsync(string MarketBookId, int UserID, string Password) {
            this.UpdateUserBetsStatusbyMarketIDandUserIDAsync(MarketBookId, UserID, Password, null);
        }
        
        public void UpdateUserBetsStatusbyMarketIDandUserIDAsync(string MarketBookId, int UserID, string Password, object userState) {
            if ((this.onBeginUpdateUserBetsStatusbyMarketIDandUserIDDelegate == null)) {
                this.onBeginUpdateUserBetsStatusbyMarketIDandUserIDDelegate = new BeginOperationDelegate(this.OnBeginUpdateUserBetsStatusbyMarketIDandUserID);
            }
            if ((this.onEndUpdateUserBetsStatusbyMarketIDandUserIDDelegate == null)) {
                this.onEndUpdateUserBetsStatusbyMarketIDandUserIDDelegate = new EndOperationDelegate(this.OnEndUpdateUserBetsStatusbyMarketIDandUserID);
            }
            if ((this.onUpdateUserBetsStatusbyMarketIDandUserIDCompletedDelegate == null)) {
                this.onUpdateUserBetsStatusbyMarketIDandUserIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateUserBetsStatusbyMarketIDandUserIDCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateUserBetsStatusbyMarketIDandUserIDDelegate, new object[] {
                        MarketBookId,
                        UserID,
                        Password}, this.onEndUpdateUserBetsStatusbyMarketIDandUserIDDelegate, this.onUpdateUserBetsStatusbyMarketIDandUserIDCompletedDelegate, userState);
        }
        
        public void UpdateTotalOversbyMarket(string EventID, string TotalOvers) {
            base.Channel.UpdateTotalOversbyMarket(EventID, TotalOvers);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateTotalOversbyMarket(string EventID, string TotalOvers, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateTotalOversbyMarket(EventID, TotalOvers, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateTotalOversbyMarket(System.IAsyncResult result) {
            base.Channel.EndUpdateTotalOversbyMarket(result);
        }
        
        private System.IAsyncResult OnBeginUpdateTotalOversbyMarket(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string EventID = ((string)(inValues[0]));
            string TotalOvers = ((string)(inValues[1]));
            return this.BeginUpdateTotalOversbyMarket(EventID, TotalOvers, callback, asyncState);
        }
        
        private object[] OnEndUpdateTotalOversbyMarket(System.IAsyncResult result) {
            this.EndUpdateTotalOversbyMarket(result);
            return null;
        }
        
        private void OnUpdateTotalOversbyMarketCompleted(object state) {
            if ((this.UpdateTotalOversbyMarketCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateTotalOversbyMarketCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateTotalOversbyMarketAsync(string EventID, string TotalOvers) {
            this.UpdateTotalOversbyMarketAsync(EventID, TotalOvers, null);
        }
        
        public void UpdateTotalOversbyMarketAsync(string EventID, string TotalOvers, object userState) {
            if ((this.onBeginUpdateTotalOversbyMarketDelegate == null)) {
                this.onBeginUpdateTotalOversbyMarketDelegate = new BeginOperationDelegate(this.OnBeginUpdateTotalOversbyMarket);
            }
            if ((this.onEndUpdateTotalOversbyMarketDelegate == null)) {
                this.onEndUpdateTotalOversbyMarketDelegate = new EndOperationDelegate(this.OnEndUpdateTotalOversbyMarket);
            }
            if ((this.onUpdateTotalOversbyMarketCompletedDelegate == null)) {
                this.onUpdateTotalOversbyMarketCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateTotalOversbyMarketCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateTotalOversbyMarketDelegate, new object[] {
                        EventID,
                        TotalOvers}, this.onEndUpdateTotalOversbyMarketDelegate, this.onUpdateTotalOversbyMarketCompletedDelegate, userState);
        }
        
        public string SetBlockedStatusofUserBMS(int UserID, bool isBlocked, string Password) {
            return base.Channel.SetBlockedStatusofUserBMS(UserID, isBlocked, Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSetBlockedStatusofUserBMS(int UserID, bool isBlocked, string Password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetBlockedStatusofUserBMS(UserID, isBlocked, Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndSetBlockedStatusofUserBMS(System.IAsyncResult result) {
            return base.Channel.EndSetBlockedStatusofUserBMS(result);
        }
        
        private System.IAsyncResult OnBeginSetBlockedStatusofUserBMS(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int UserID = ((int)(inValues[0]));
            bool isBlocked = ((bool)(inValues[1]));
            string Password = ((string)(inValues[2]));
            return this.BeginSetBlockedStatusofUserBMS(UserID, isBlocked, Password, callback, asyncState);
        }
        
        private object[] OnEndSetBlockedStatusofUserBMS(System.IAsyncResult result) {
            string retVal = this.EndSetBlockedStatusofUserBMS(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSetBlockedStatusofUserBMSCompleted(object state) {
            if ((this.SetBlockedStatusofUserBMSCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetBlockedStatusofUserBMSCompleted(this, new SetBlockedStatusofUserBMSCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetBlockedStatusofUserBMSAsync(int UserID, bool isBlocked, string Password) {
            this.SetBlockedStatusofUserBMSAsync(UserID, isBlocked, Password, null);
        }
        
        public void SetBlockedStatusofUserBMSAsync(int UserID, bool isBlocked, string Password, object userState) {
            if ((this.onBeginSetBlockedStatusofUserBMSDelegate == null)) {
                this.onBeginSetBlockedStatusofUserBMSDelegate = new BeginOperationDelegate(this.OnBeginSetBlockedStatusofUserBMS);
            }
            if ((this.onEndSetBlockedStatusofUserBMSDelegate == null)) {
                this.onEndSetBlockedStatusofUserBMSDelegate = new EndOperationDelegate(this.OnEndSetBlockedStatusofUserBMS);
            }
            if ((this.onSetBlockedStatusofUserBMSCompletedDelegate == null)) {
                this.onSetBlockedStatusofUserBMSCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetBlockedStatusofUserBMSCompleted);
            }
            base.InvokeAsync(this.onBeginSetBlockedStatusofUserBMSDelegate, new object[] {
                        UserID,
                        isBlocked,
                        Password}, this.onEndSetBlockedStatusofUserBMSDelegate, this.onSetBlockedStatusofUserBMSCompletedDelegate, userState);
        }
        
        public globaltraders.UserServiceReference.APIResponse GetMatchScoreCard(string strMatchKey, string Password) {
            return base.Channel.GetMatchScoreCard(strMatchKey, Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetMatchScoreCard(string strMatchKey, string Password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMatchScoreCard(strMatchKey, Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public globaltraders.UserServiceReference.APIResponse EndGetMatchScoreCard(System.IAsyncResult result) {
            return base.Channel.EndGetMatchScoreCard(result);
        }
        
        private System.IAsyncResult OnBeginGetMatchScoreCard(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string strMatchKey = ((string)(inValues[0]));
            string Password = ((string)(inValues[1]));
            return this.BeginGetMatchScoreCard(strMatchKey, Password, callback, asyncState);
        }
        
        private object[] OnEndGetMatchScoreCard(System.IAsyncResult result) {
            globaltraders.UserServiceReference.APIResponse retVal = this.EndGetMatchScoreCard(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMatchScoreCardCompleted(object state) {
            if ((this.GetMatchScoreCardCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMatchScoreCardCompleted(this, new GetMatchScoreCardCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMatchScoreCardAsync(string strMatchKey, string Password) {
            this.GetMatchScoreCardAsync(strMatchKey, Password, null);
        }
        
        public void GetMatchScoreCardAsync(string strMatchKey, string Password, object userState) {
            if ((this.onBeginGetMatchScoreCardDelegate == null)) {
                this.onBeginGetMatchScoreCardDelegate = new BeginOperationDelegate(this.OnBeginGetMatchScoreCard);
            }
            if ((this.onEndGetMatchScoreCardDelegate == null)) {
                this.onEndGetMatchScoreCardDelegate = new EndOperationDelegate(this.OnEndGetMatchScoreCard);
            }
            if ((this.onGetMatchScoreCardCompletedDelegate == null)) {
                this.onGetMatchScoreCardCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMatchScoreCardCompleted);
            }
            base.InvokeAsync(this.onBeginGetMatchScoreCardDelegate, new object[] {
                        strMatchKey,
                        Password}, this.onEndGetMatchScoreCardDelegate, this.onGetMatchScoreCardCompletedDelegate, userState);
        }
        
        public string GetCricketMatchKey(string MarketCatalogueID) {
            return base.Channel.GetCricketMatchKey(MarketCatalogueID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetCricketMatchKey(string MarketCatalogueID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCricketMatchKey(MarketCatalogueID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetCricketMatchKey(System.IAsyncResult result) {
            return base.Channel.EndGetCricketMatchKey(result);
        }
        
        private System.IAsyncResult OnBeginGetCricketMatchKey(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string MarketCatalogueID = ((string)(inValues[0]));
            return this.BeginGetCricketMatchKey(MarketCatalogueID, callback, asyncState);
        }
        
        private object[] OnEndGetCricketMatchKey(System.IAsyncResult result) {
            string retVal = this.EndGetCricketMatchKey(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCricketMatchKeyCompleted(object state) {
            if ((this.GetCricketMatchKeyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCricketMatchKeyCompleted(this, new GetCricketMatchKeyCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCricketMatchKeyAsync(string MarketCatalogueID) {
            this.GetCricketMatchKeyAsync(MarketCatalogueID, null);
        }
        
        public void GetCricketMatchKeyAsync(string MarketCatalogueID, object userState) {
            if ((this.onBeginGetCricketMatchKeyDelegate == null)) {
                this.onBeginGetCricketMatchKeyDelegate = new BeginOperationDelegate(this.OnBeginGetCricketMatchKey);
            }
            if ((this.onEndGetCricketMatchKeyDelegate == null)) {
                this.onEndGetCricketMatchKeyDelegate = new EndOperationDelegate(this.OnEndGetCricketMatchKey);
            }
            if ((this.onGetCricketMatchKeyCompletedDelegate == null)) {
                this.onGetCricketMatchKeyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCricketMatchKeyCompleted);
            }
            base.InvokeAsync(this.onBeginGetCricketMatchKeyDelegate, new object[] {
                        MarketCatalogueID}, this.onEndGetCricketMatchKeyDelegate, this.onGetCricketMatchKeyCompletedDelegate, userState);
        }
        
        public void UpdateMarketsForView(int userID, bool isAllowedGrayHound, bool isAllowedHorse, bool isTennisAllowed, bool isSoccerAllowed, string Password) {
            base.Channel.UpdateMarketsForView(userID, isAllowedGrayHound, isAllowedHorse, isTennisAllowed, isSoccerAllowed, Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateMarketsForView(int userID, bool isAllowedGrayHound, bool isAllowedHorse, bool isTennisAllowed, bool isSoccerAllowed, string Password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateMarketsForView(userID, isAllowedGrayHound, isAllowedHorse, isTennisAllowed, isSoccerAllowed, Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateMarketsForView(System.IAsyncResult result) {
            base.Channel.EndUpdateMarketsForView(result);
        }
        
        private System.IAsyncResult OnBeginUpdateMarketsForView(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            bool isAllowedGrayHound = ((bool)(inValues[1]));
            bool isAllowedHorse = ((bool)(inValues[2]));
            bool isTennisAllowed = ((bool)(inValues[3]));
            bool isSoccerAllowed = ((bool)(inValues[4]));
            string Password = ((string)(inValues[5]));
            return this.BeginUpdateMarketsForView(userID, isAllowedGrayHound, isAllowedHorse, isTennisAllowed, isSoccerAllowed, Password, callback, asyncState);
        }
        
        private object[] OnEndUpdateMarketsForView(System.IAsyncResult result) {
            this.EndUpdateMarketsForView(result);
            return null;
        }
        
        private void OnUpdateMarketsForViewCompleted(object state) {
            if ((this.UpdateMarketsForViewCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateMarketsForViewCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateMarketsForViewAsync(int userID, bool isAllowedGrayHound, bool isAllowedHorse, bool isTennisAllowed, bool isSoccerAllowed, string Password) {
            this.UpdateMarketsForViewAsync(userID, isAllowedGrayHound, isAllowedHorse, isTennisAllowed, isSoccerAllowed, Password, null);
        }
        
        public void UpdateMarketsForViewAsync(int userID, bool isAllowedGrayHound, bool isAllowedHorse, bool isTennisAllowed, bool isSoccerAllowed, string Password, object userState) {
            if ((this.onBeginUpdateMarketsForViewDelegate == null)) {
                this.onBeginUpdateMarketsForViewDelegate = new BeginOperationDelegate(this.OnBeginUpdateMarketsForView);
            }
            if ((this.onEndUpdateMarketsForViewDelegate == null)) {
                this.onEndUpdateMarketsForViewDelegate = new EndOperationDelegate(this.OnEndUpdateMarketsForView);
            }
            if ((this.onUpdateMarketsForViewCompletedDelegate == null)) {
                this.onUpdateMarketsForViewCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateMarketsForViewCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateMarketsForViewDelegate, new object[] {
                        userID,
                        isAllowedGrayHound,
                        isAllowedHorse,
                        isTennisAllowed,
                        isSoccerAllowed,
                        Password}, this.onEndUpdateMarketsForViewDelegate, this.onUpdateMarketsForViewCompletedDelegate, userState);
        }
        
        public void UpdateAllMarketClosedbyUserID(int UserID) {
            base.Channel.UpdateAllMarketClosedbyUserID(UserID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateAllMarketClosedbyUserID(int UserID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateAllMarketClosedbyUserID(UserID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateAllMarketClosedbyUserID(System.IAsyncResult result) {
            base.Channel.EndUpdateAllMarketClosedbyUserID(result);
        }
        
        private System.IAsyncResult OnBeginUpdateAllMarketClosedbyUserID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int UserID = ((int)(inValues[0]));
            return this.BeginUpdateAllMarketClosedbyUserID(UserID, callback, asyncState);
        }
        
        private object[] OnEndUpdateAllMarketClosedbyUserID(System.IAsyncResult result) {
            this.EndUpdateAllMarketClosedbyUserID(result);
            return null;
        }
        
        private void OnUpdateAllMarketClosedbyUserIDCompleted(object state) {
            if ((this.UpdateAllMarketClosedbyUserIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateAllMarketClosedbyUserIDCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateAllMarketClosedbyUserIDAsync(int UserID) {
            this.UpdateAllMarketClosedbyUserIDAsync(UserID, null);
        }
        
        public void UpdateAllMarketClosedbyUserIDAsync(int UserID, object userState) {
            if ((this.onBeginUpdateAllMarketClosedbyUserIDDelegate == null)) {
                this.onBeginUpdateAllMarketClosedbyUserIDDelegate = new BeginOperationDelegate(this.OnBeginUpdateAllMarketClosedbyUserID);
            }
            if ((this.onEndUpdateAllMarketClosedbyUserIDDelegate == null)) {
                this.onEndUpdateAllMarketClosedbyUserIDDelegate = new EndOperationDelegate(this.OnEndUpdateAllMarketClosedbyUserID);
            }
            if ((this.onUpdateAllMarketClosedbyUserIDCompletedDelegate == null)) {
                this.onUpdateAllMarketClosedbyUserIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateAllMarketClosedbyUserIDCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateAllMarketClosedbyUserIDDelegate, new object[] {
                        UserID}, this.onEndUpdateAllMarketClosedbyUserIDDelegate, this.onUpdateAllMarketClosedbyUserIDCompletedDelegate, userState);
        }
        
        public string GetURLsData() {
            return base.Channel.GetURLsData();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetURLsData(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetURLsData(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetURLsData(System.IAsyncResult result) {
            return base.Channel.EndGetURLsData(result);
        }
        
        private System.IAsyncResult OnBeginGetURLsData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetURLsData(callback, asyncState);
        }
        
        private object[] OnEndGetURLsData(System.IAsyncResult result) {
            string retVal = this.EndGetURLsData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetURLsDataCompleted(object state) {
            if ((this.GetURLsDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetURLsDataCompleted(this, new GetURLsDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetURLsDataAsync() {
            this.GetURLsDataAsync(null);
        }
        
        public void GetURLsDataAsync(object userState) {
            if ((this.onBeginGetURLsDataDelegate == null)) {
                this.onBeginGetURLsDataDelegate = new BeginOperationDelegate(this.OnBeginGetURLsData);
            }
            if ((this.onEndGetURLsDataDelegate == null)) {
                this.onEndGetURLsDataDelegate = new EndOperationDelegate(this.OnEndGetURLsData);
            }
            if ((this.onGetURLsDataCompletedDelegate == null)) {
                this.onGetURLsDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetURLsDataCompleted);
            }
            base.InvokeAsync(this.onBeginGetURLsDataDelegate, null, this.onEndGetURLsDataDelegate, this.onGetURLsDataCompletedDelegate, userState);
        }
        
        public bool GetTransferAgnetCommision(int UserID) {
            return base.Channel.GetTransferAgnetCommision(UserID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetTransferAgnetCommision(int UserID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTransferAgnetCommision(UserID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndGetTransferAgnetCommision(System.IAsyncResult result) {
            return base.Channel.EndGetTransferAgnetCommision(result);
        }
        
        private System.IAsyncResult OnBeginGetTransferAgnetCommision(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int UserID = ((int)(inValues[0]));
            return this.BeginGetTransferAgnetCommision(UserID, callback, asyncState);
        }
        
        private object[] OnEndGetTransferAgnetCommision(System.IAsyncResult result) {
            bool retVal = this.EndGetTransferAgnetCommision(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTransferAgnetCommisionCompleted(object state) {
            if ((this.GetTransferAgnetCommisionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTransferAgnetCommisionCompleted(this, new GetTransferAgnetCommisionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTransferAgnetCommisionAsync(int UserID) {
            this.GetTransferAgnetCommisionAsync(UserID, null);
        }
        
        public void GetTransferAgnetCommisionAsync(int UserID, object userState) {
            if ((this.onBeginGetTransferAgnetCommisionDelegate == null)) {
                this.onBeginGetTransferAgnetCommisionDelegate = new BeginOperationDelegate(this.OnBeginGetTransferAgnetCommision);
            }
            if ((this.onEndGetTransferAgnetCommisionDelegate == null)) {
                this.onEndGetTransferAgnetCommisionDelegate = new EndOperationDelegate(this.OnEndGetTransferAgnetCommision);
            }
            if ((this.onGetTransferAgnetCommisionCompletedDelegate == null)) {
                this.onGetTransferAgnetCommisionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTransferAgnetCommisionCompleted);
            }
            base.InvokeAsync(this.onBeginGetTransferAgnetCommisionDelegate, new object[] {
                        UserID}, this.onEndGetTransferAgnetCommisionDelegate, this.onGetTransferAgnetCommisionCompletedDelegate, userState);
        }
        
        public void UpdateTransferAgnetCommision(int UserID, bool TranserAgentCommision) {
            base.Channel.UpdateTransferAgnetCommision(UserID, TranserAgentCommision);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateTransferAgnetCommision(int UserID, bool TranserAgentCommision, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateTransferAgnetCommision(UserID, TranserAgentCommision, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateTransferAgnetCommision(System.IAsyncResult result) {
            base.Channel.EndUpdateTransferAgnetCommision(result);
        }
        
        private System.IAsyncResult OnBeginUpdateTransferAgnetCommision(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int UserID = ((int)(inValues[0]));
            bool TranserAgentCommision = ((bool)(inValues[1]));
            return this.BeginUpdateTransferAgnetCommision(UserID, TranserAgentCommision, callback, asyncState);
        }
        
        private object[] OnEndUpdateTransferAgnetCommision(System.IAsyncResult result) {
            this.EndUpdateTransferAgnetCommision(result);
            return null;
        }
        
        private void OnUpdateTransferAgnetCommisionCompleted(object state) {
            if ((this.UpdateTransferAgnetCommisionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateTransferAgnetCommisionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateTransferAgnetCommisionAsync(int UserID, bool TranserAgentCommision) {
            this.UpdateTransferAgnetCommisionAsync(UserID, TranserAgentCommision, null);
        }
        
        public void UpdateTransferAgnetCommisionAsync(int UserID, bool TranserAgentCommision, object userState) {
            if ((this.onBeginUpdateTransferAgnetCommisionDelegate == null)) {
                this.onBeginUpdateTransferAgnetCommisionDelegate = new BeginOperationDelegate(this.OnBeginUpdateTransferAgnetCommision);
            }
            if ((this.onEndUpdateTransferAgnetCommisionDelegate == null)) {
                this.onEndUpdateTransferAgnetCommisionDelegate = new EndOperationDelegate(this.OnEndUpdateTransferAgnetCommision);
            }
            if ((this.onUpdateTransferAgnetCommisionCompletedDelegate == null)) {
                this.onUpdateTransferAgnetCommisionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateTransferAgnetCommisionCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateTransferAgnetCommisionDelegate, new object[] {
                        UserID,
                        TranserAgentCommision}, this.onEndUpdateTransferAgnetCommisionDelegate, this.onUpdateTransferAgnetCommisionCompletedDelegate, userState);
        }
        
        public void UpdateFancySyncONorOFF(int UserId, string EventID, bool isopenenedbyuser) {
            base.Channel.UpdateFancySyncONorOFF(UserId, EventID, isopenenedbyuser);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateFancySyncONorOFF(int UserId, string EventID, bool isopenenedbyuser, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateFancySyncONorOFF(UserId, EventID, isopenenedbyuser, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateFancySyncONorOFF(System.IAsyncResult result) {
            base.Channel.EndUpdateFancySyncONorOFF(result);
        }
        
        private System.IAsyncResult OnBeginUpdateFancySyncONorOFF(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int UserId = ((int)(inValues[0]));
            string EventID = ((string)(inValues[1]));
            bool isopenenedbyuser = ((bool)(inValues[2]));
            return this.BeginUpdateFancySyncONorOFF(UserId, EventID, isopenenedbyuser, callback, asyncState);
        }
        
        private object[] OnEndUpdateFancySyncONorOFF(System.IAsyncResult result) {
            this.EndUpdateFancySyncONorOFF(result);
            return null;
        }
        
        private void OnUpdateFancySyncONorOFFCompleted(object state) {
            if ((this.UpdateFancySyncONorOFFCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateFancySyncONorOFFCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateFancySyncONorOFFAsync(int UserId, string EventID, bool isopenenedbyuser) {
            this.UpdateFancySyncONorOFFAsync(UserId, EventID, isopenenedbyuser, null);
        }
        
        public void UpdateFancySyncONorOFFAsync(int UserId, string EventID, bool isopenenedbyuser, object userState) {
            if ((this.onBeginUpdateFancySyncONorOFFDelegate == null)) {
                this.onBeginUpdateFancySyncONorOFFDelegate = new BeginOperationDelegate(this.OnBeginUpdateFancySyncONorOFF);
            }
            if ((this.onEndUpdateFancySyncONorOFFDelegate == null)) {
                this.onEndUpdateFancySyncONorOFFDelegate = new EndOperationDelegate(this.OnEndUpdateFancySyncONorOFF);
            }
            if ((this.onUpdateFancySyncONorOFFCompletedDelegate == null)) {
                this.onUpdateFancySyncONorOFFCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateFancySyncONorOFFCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateFancySyncONorOFFDelegate, new object[] {
                        UserId,
                        EventID,
                        isopenenedbyuser}, this.onEndUpdateFancySyncONorOFFDelegate, this.onUpdateFancySyncONorOFFCompletedDelegate, userState);
        }
        
        public int GetMaxBalanceTransferLimit(int UserID) {
            return base.Channel.GetMaxBalanceTransferLimit(UserID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetMaxBalanceTransferLimit(int UserID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMaxBalanceTransferLimit(UserID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndGetMaxBalanceTransferLimit(System.IAsyncResult result) {
            return base.Channel.EndGetMaxBalanceTransferLimit(result);
        }
        
        private System.IAsyncResult OnBeginGetMaxBalanceTransferLimit(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int UserID = ((int)(inValues[0]));
            return this.BeginGetMaxBalanceTransferLimit(UserID, callback, asyncState);
        }
        
        private object[] OnEndGetMaxBalanceTransferLimit(System.IAsyncResult result) {
            int retVal = this.EndGetMaxBalanceTransferLimit(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMaxBalanceTransferLimitCompleted(object state) {
            if ((this.GetMaxBalanceTransferLimitCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMaxBalanceTransferLimitCompleted(this, new GetMaxBalanceTransferLimitCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMaxBalanceTransferLimitAsync(int UserID) {
            this.GetMaxBalanceTransferLimitAsync(UserID, null);
        }
        
        public void GetMaxBalanceTransferLimitAsync(int UserID, object userState) {
            if ((this.onBeginGetMaxBalanceTransferLimitDelegate == null)) {
                this.onBeginGetMaxBalanceTransferLimitDelegate = new BeginOperationDelegate(this.OnBeginGetMaxBalanceTransferLimit);
            }
            if ((this.onEndGetMaxBalanceTransferLimitDelegate == null)) {
                this.onEndGetMaxBalanceTransferLimitDelegate = new EndOperationDelegate(this.OnEndGetMaxBalanceTransferLimit);
            }
            if ((this.onGetMaxBalanceTransferLimitCompletedDelegate == null)) {
                this.onGetMaxBalanceTransferLimitCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMaxBalanceTransferLimitCompleted);
            }
            base.InvokeAsync(this.onBeginGetMaxBalanceTransferLimitDelegate, new object[] {
                        UserID}, this.onEndGetMaxBalanceTransferLimitDelegate, this.onGetMaxBalanceTransferLimitCompletedDelegate, userState);
        }
        
        public void UpdateMaxBalanceTransferLimit(int UserID, int MaxBalanceTransferLimit) {
            base.Channel.UpdateMaxBalanceTransferLimit(UserID, MaxBalanceTransferLimit);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateMaxBalanceTransferLimit(int UserID, int MaxBalanceTransferLimit, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateMaxBalanceTransferLimit(UserID, MaxBalanceTransferLimit, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateMaxBalanceTransferLimit(System.IAsyncResult result) {
            base.Channel.EndUpdateMaxBalanceTransferLimit(result);
        }
        
        private System.IAsyncResult OnBeginUpdateMaxBalanceTransferLimit(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int UserID = ((int)(inValues[0]));
            int MaxBalanceTransferLimit = ((int)(inValues[1]));
            return this.BeginUpdateMaxBalanceTransferLimit(UserID, MaxBalanceTransferLimit, callback, asyncState);
        }
        
        private object[] OnEndUpdateMaxBalanceTransferLimit(System.IAsyncResult result) {
            this.EndUpdateMaxBalanceTransferLimit(result);
            return null;
        }
        
        private void OnUpdateMaxBalanceTransferLimitCompleted(object state) {
            if ((this.UpdateMaxBalanceTransferLimitCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateMaxBalanceTransferLimitCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateMaxBalanceTransferLimitAsync(int UserID, int MaxBalanceTransferLimit) {
            this.UpdateMaxBalanceTransferLimitAsync(UserID, MaxBalanceTransferLimit, null);
        }
        
        public void UpdateMaxBalanceTransferLimitAsync(int UserID, int MaxBalanceTransferLimit, object userState) {
            if ((this.onBeginUpdateMaxBalanceTransferLimitDelegate == null)) {
                this.onBeginUpdateMaxBalanceTransferLimitDelegate = new BeginOperationDelegate(this.OnBeginUpdateMaxBalanceTransferLimit);
            }
            if ((this.onEndUpdateMaxBalanceTransferLimitDelegate == null)) {
                this.onEndUpdateMaxBalanceTransferLimitDelegate = new EndOperationDelegate(this.OnEndUpdateMaxBalanceTransferLimit);
            }
            if ((this.onUpdateMaxBalanceTransferLimitCompletedDelegate == null)) {
                this.onUpdateMaxBalanceTransferLimitCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateMaxBalanceTransferLimitCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateMaxBalanceTransferLimitDelegate, new object[] {
                        UserID,
                        MaxBalanceTransferLimit}, this.onEndUpdateMaxBalanceTransferLimitDelegate, this.onUpdateMaxBalanceTransferLimitCompletedDelegate, userState);
        }
        
        public int GetMaxAgentRate(int UserID) {
            return base.Channel.GetMaxAgentRate(UserID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetMaxAgentRate(int UserID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMaxAgentRate(UserID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndGetMaxAgentRate(System.IAsyncResult result) {
            return base.Channel.EndGetMaxAgentRate(result);
        }
        
        private System.IAsyncResult OnBeginGetMaxAgentRate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int UserID = ((int)(inValues[0]));
            return this.BeginGetMaxAgentRate(UserID, callback, asyncState);
        }
        
        private object[] OnEndGetMaxAgentRate(System.IAsyncResult result) {
            int retVal = this.EndGetMaxAgentRate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMaxAgentRateCompleted(object state) {
            if ((this.GetMaxAgentRateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMaxAgentRateCompleted(this, new GetMaxAgentRateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMaxAgentRateAsync(int UserID) {
            this.GetMaxAgentRateAsync(UserID, null);
        }
        
        public void GetMaxAgentRateAsync(int UserID, object userState) {
            if ((this.onBeginGetMaxAgentRateDelegate == null)) {
                this.onBeginGetMaxAgentRateDelegate = new BeginOperationDelegate(this.OnBeginGetMaxAgentRate);
            }
            if ((this.onEndGetMaxAgentRateDelegate == null)) {
                this.onEndGetMaxAgentRateDelegate = new EndOperationDelegate(this.OnEndGetMaxAgentRate);
            }
            if ((this.onGetMaxAgentRateCompletedDelegate == null)) {
                this.onGetMaxAgentRateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMaxAgentRateCompleted);
            }
            base.InvokeAsync(this.onBeginGetMaxAgentRateDelegate, new object[] {
                        UserID}, this.onEndGetMaxAgentRateDelegate, this.onGetMaxAgentRateCompletedDelegate, userState);
        }
        
        public void UpdateMaxAgentRate(int UserID, int MaxAgentRate) {
            base.Channel.UpdateMaxAgentRate(UserID, MaxAgentRate);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateMaxAgentRate(int UserID, int MaxAgentRate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateMaxAgentRate(UserID, MaxAgentRate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateMaxAgentRate(System.IAsyncResult result) {
            base.Channel.EndUpdateMaxAgentRate(result);
        }
        
        private System.IAsyncResult OnBeginUpdateMaxAgentRate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int UserID = ((int)(inValues[0]));
            int MaxAgentRate = ((int)(inValues[1]));
            return this.BeginUpdateMaxAgentRate(UserID, MaxAgentRate, callback, asyncState);
        }
        
        private object[] OnEndUpdateMaxAgentRate(System.IAsyncResult result) {
            this.EndUpdateMaxAgentRate(result);
            return null;
        }
        
        private void OnUpdateMaxAgentRateCompleted(object state) {
            if ((this.UpdateMaxAgentRateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateMaxAgentRateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateMaxAgentRateAsync(int UserID, int MaxAgentRate) {
            this.UpdateMaxAgentRateAsync(UserID, MaxAgentRate, null);
        }
        
        public void UpdateMaxAgentRateAsync(int UserID, int MaxAgentRate, object userState) {
            if ((this.onBeginUpdateMaxAgentRateDelegate == null)) {
                this.onBeginUpdateMaxAgentRateDelegate = new BeginOperationDelegate(this.OnBeginUpdateMaxAgentRate);
            }
            if ((this.onEndUpdateMaxAgentRateDelegate == null)) {
                this.onEndUpdateMaxAgentRateDelegate = new EndOperationDelegate(this.OnEndUpdateMaxAgentRate);
            }
            if ((this.onUpdateMaxAgentRateCompletedDelegate == null)) {
                this.onUpdateMaxAgentRateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateMaxAgentRateCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateMaxAgentRateDelegate, new object[] {
                        UserID,
                        MaxAgentRate}, this.onEndUpdateMaxAgentRateDelegate, this.onUpdateMaxAgentRateCompletedDelegate, userState);
        }
        
        public void UpdateFancySyncONorOFFbyMarketID(int UserId, string MarektID, bool isopenenedbyuser) {
            base.Channel.UpdateFancySyncONorOFFbyMarketID(UserId, MarektID, isopenenedbyuser);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateFancySyncONorOFFbyMarketID(int UserId, string MarektID, bool isopenenedbyuser, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateFancySyncONorOFFbyMarketID(UserId, MarektID, isopenenedbyuser, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateFancySyncONorOFFbyMarketID(System.IAsyncResult result) {
            base.Channel.EndUpdateFancySyncONorOFFbyMarketID(result);
        }
        
        private System.IAsyncResult OnBeginUpdateFancySyncONorOFFbyMarketID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int UserId = ((int)(inValues[0]));
            string MarektID = ((string)(inValues[1]));
            bool isopenenedbyuser = ((bool)(inValues[2]));
            return this.BeginUpdateFancySyncONorOFFbyMarketID(UserId, MarektID, isopenenedbyuser, callback, asyncState);
        }
        
        private object[] OnEndUpdateFancySyncONorOFFbyMarketID(System.IAsyncResult result) {
            this.EndUpdateFancySyncONorOFFbyMarketID(result);
            return null;
        }
        
        private void OnUpdateFancySyncONorOFFbyMarketIDCompleted(object state) {
            if ((this.UpdateFancySyncONorOFFbyMarketIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateFancySyncONorOFFbyMarketIDCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateFancySyncONorOFFbyMarketIDAsync(int UserId, string MarektID, bool isopenenedbyuser) {
            this.UpdateFancySyncONorOFFbyMarketIDAsync(UserId, MarektID, isopenenedbyuser, null);
        }
        
        public void UpdateFancySyncONorOFFbyMarketIDAsync(int UserId, string MarektID, bool isopenenedbyuser, object userState) {
            if ((this.onBeginUpdateFancySyncONorOFFbyMarketIDDelegate == null)) {
                this.onBeginUpdateFancySyncONorOFFbyMarketIDDelegate = new BeginOperationDelegate(this.OnBeginUpdateFancySyncONorOFFbyMarketID);
            }
            if ((this.onEndUpdateFancySyncONorOFFbyMarketIDDelegate == null)) {
                this.onEndUpdateFancySyncONorOFFbyMarketIDDelegate = new EndOperationDelegate(this.OnEndUpdateFancySyncONorOFFbyMarketID);
            }
            if ((this.onUpdateFancySyncONorOFFbyMarketIDCompletedDelegate == null)) {
                this.onUpdateFancySyncONorOFFbyMarketIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateFancySyncONorOFFbyMarketIDCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateFancySyncONorOFFbyMarketIDDelegate, new object[] {
                        UserId,
                        MarektID,
                        isopenenedbyuser}, this.onEndUpdateFancySyncONorOFFbyMarketIDDelegate, this.onUpdateFancySyncONorOFFbyMarketIDCompletedDelegate, userState);
        }
        
        public void UpdateKJSyncONorOFFbyMarketID(int UserId, string MarektID, bool isopenenedbyuser) {
            base.Channel.UpdateKJSyncONorOFFbyMarketID(UserId, MarektID, isopenenedbyuser);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateKJSyncONorOFFbyMarketID(int UserId, string MarektID, bool isopenenedbyuser, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateKJSyncONorOFFbyMarketID(UserId, MarektID, isopenenedbyuser, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateKJSyncONorOFFbyMarketID(System.IAsyncResult result) {
            base.Channel.EndUpdateKJSyncONorOFFbyMarketID(result);
        }
        
        private System.IAsyncResult OnBeginUpdateKJSyncONorOFFbyMarketID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int UserId = ((int)(inValues[0]));
            string MarektID = ((string)(inValues[1]));
            bool isopenenedbyuser = ((bool)(inValues[2]));
            return this.BeginUpdateKJSyncONorOFFbyMarketID(UserId, MarektID, isopenenedbyuser, callback, asyncState);
        }
        
        private object[] OnEndUpdateKJSyncONorOFFbyMarketID(System.IAsyncResult result) {
            this.EndUpdateKJSyncONorOFFbyMarketID(result);
            return null;
        }
        
        private void OnUpdateKJSyncONorOFFbyMarketIDCompleted(object state) {
            if ((this.UpdateKJSyncONorOFFbyMarketIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateKJSyncONorOFFbyMarketIDCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateKJSyncONorOFFbyMarketIDAsync(int UserId, string MarektID, bool isopenenedbyuser) {
            this.UpdateKJSyncONorOFFbyMarketIDAsync(UserId, MarektID, isopenenedbyuser, null);
        }
        
        public void UpdateKJSyncONorOFFbyMarketIDAsync(int UserId, string MarektID, bool isopenenedbyuser, object userState) {
            if ((this.onBeginUpdateKJSyncONorOFFbyMarketIDDelegate == null)) {
                this.onBeginUpdateKJSyncONorOFFbyMarketIDDelegate = new BeginOperationDelegate(this.OnBeginUpdateKJSyncONorOFFbyMarketID);
            }
            if ((this.onEndUpdateKJSyncONorOFFbyMarketIDDelegate == null)) {
                this.onEndUpdateKJSyncONorOFFbyMarketIDDelegate = new EndOperationDelegate(this.OnEndUpdateKJSyncONorOFFbyMarketID);
            }
            if ((this.onUpdateKJSyncONorOFFbyMarketIDCompletedDelegate == null)) {
                this.onUpdateKJSyncONorOFFbyMarketIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateKJSyncONorOFFbyMarketIDCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateKJSyncONorOFFbyMarketIDDelegate, new object[] {
                        UserId,
                        MarektID,
                        isopenenedbyuser}, this.onEndUpdateKJSyncONorOFFbyMarketIDDelegate, this.onUpdateKJSyncONorOFFbyMarketIDCompletedDelegate, userState);
        }
        
        public decimal GetTotalAgentCommissionbyAgentID(int UserId, string Password) {
            return base.Channel.GetTotalAgentCommissionbyAgentID(UserId, Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetTotalAgentCommissionbyAgentID(int UserId, string Password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTotalAgentCommissionbyAgentID(UserId, Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public decimal EndGetTotalAgentCommissionbyAgentID(System.IAsyncResult result) {
            return base.Channel.EndGetTotalAgentCommissionbyAgentID(result);
        }
        
        private System.IAsyncResult OnBeginGetTotalAgentCommissionbyAgentID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int UserId = ((int)(inValues[0]));
            string Password = ((string)(inValues[1]));
            return this.BeginGetTotalAgentCommissionbyAgentID(UserId, Password, callback, asyncState);
        }
        
        private object[] OnEndGetTotalAgentCommissionbyAgentID(System.IAsyncResult result) {
            decimal retVal = this.EndGetTotalAgentCommissionbyAgentID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTotalAgentCommissionbyAgentIDCompleted(object state) {
            if ((this.GetTotalAgentCommissionbyAgentIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTotalAgentCommissionbyAgentIDCompleted(this, new GetTotalAgentCommissionbyAgentIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTotalAgentCommissionbyAgentIDAsync(int UserId, string Password) {
            this.GetTotalAgentCommissionbyAgentIDAsync(UserId, Password, null);
        }
        
        public void GetTotalAgentCommissionbyAgentIDAsync(int UserId, string Password, object userState) {
            if ((this.onBeginGetTotalAgentCommissionbyAgentIDDelegate == null)) {
                this.onBeginGetTotalAgentCommissionbyAgentIDDelegate = new BeginOperationDelegate(this.OnBeginGetTotalAgentCommissionbyAgentID);
            }
            if ((this.onEndGetTotalAgentCommissionbyAgentIDDelegate == null)) {
                this.onEndGetTotalAgentCommissionbyAgentIDDelegate = new EndOperationDelegate(this.OnEndGetTotalAgentCommissionbyAgentID);
            }
            if ((this.onGetTotalAgentCommissionbyAgentIDCompletedDelegate == null)) {
                this.onGetTotalAgentCommissionbyAgentIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTotalAgentCommissionbyAgentIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetTotalAgentCommissionbyAgentIDDelegate, new object[] {
                        UserId,
                        Password}, this.onEndGetTotalAgentCommissionbyAgentIDDelegate, this.onGetTotalAgentCommissionbyAgentIDCompletedDelegate, userState);
        }
        
        public globaltraders.UserServiceReference.SP_UserMarket_GetToWinTheTossbyEventID_Result GetToWintheTossbyeventId(int UserId, string EventId) {
            return base.Channel.GetToWintheTossbyeventId(UserId, EventId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetToWintheTossbyeventId(int UserId, string EventId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetToWintheTossbyeventId(UserId, EventId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public globaltraders.UserServiceReference.SP_UserMarket_GetToWinTheTossbyEventID_Result EndGetToWintheTossbyeventId(System.IAsyncResult result) {
            return base.Channel.EndGetToWintheTossbyeventId(result);
        }
        
        private System.IAsyncResult OnBeginGetToWintheTossbyeventId(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int UserId = ((int)(inValues[0]));
            string EventId = ((string)(inValues[1]));
            return this.BeginGetToWintheTossbyeventId(UserId, EventId, callback, asyncState);
        }
        
        private object[] OnEndGetToWintheTossbyeventId(System.IAsyncResult result) {
            globaltraders.UserServiceReference.SP_UserMarket_GetToWinTheTossbyEventID_Result retVal = this.EndGetToWintheTossbyeventId(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetToWintheTossbyeventIdCompleted(object state) {
            if ((this.GetToWintheTossbyeventIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetToWintheTossbyeventIdCompleted(this, new GetToWintheTossbyeventIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetToWintheTossbyeventIdAsync(int UserId, string EventId) {
            this.GetToWintheTossbyeventIdAsync(UserId, EventId, null);
        }
        
        public void GetToWintheTossbyeventIdAsync(int UserId, string EventId, object userState) {
            if ((this.onBeginGetToWintheTossbyeventIdDelegate == null)) {
                this.onBeginGetToWintheTossbyeventIdDelegate = new BeginOperationDelegate(this.OnBeginGetToWintheTossbyeventId);
            }
            if ((this.onEndGetToWintheTossbyeventIdDelegate == null)) {
                this.onEndGetToWintheTossbyeventIdDelegate = new EndOperationDelegate(this.OnEndGetToWintheTossbyeventId);
            }
            if ((this.onGetToWintheTossbyeventIdCompletedDelegate == null)) {
                this.onGetToWintheTossbyeventIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetToWintheTossbyeventIdCompleted);
            }
            base.InvokeAsync(this.onBeginGetToWintheTossbyeventIdDelegate, new object[] {
                        UserId,
                        EventId}, this.onEndGetToWintheTossbyeventIdDelegate, this.onGetToWintheTossbyeventIdCompletedDelegate, userState);
        }
        
        public globaltraders.UserServiceReference.SP_UserMarket_GetToTiedMarketbyEventID_Result GetToTiedMarketbyEventID(int UserId, string EventId) {
            return base.Channel.GetToTiedMarketbyEventID(UserId, EventId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetToTiedMarketbyEventID(int UserId, string EventId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetToTiedMarketbyEventID(UserId, EventId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public globaltraders.UserServiceReference.SP_UserMarket_GetToTiedMarketbyEventID_Result EndGetToTiedMarketbyEventID(System.IAsyncResult result) {
            return base.Channel.EndGetToTiedMarketbyEventID(result);
        }
        
        private System.IAsyncResult OnBeginGetToTiedMarketbyEventID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int UserId = ((int)(inValues[0]));
            string EventId = ((string)(inValues[1]));
            return this.BeginGetToTiedMarketbyEventID(UserId, EventId, callback, asyncState);
        }
        
        private object[] OnEndGetToTiedMarketbyEventID(System.IAsyncResult result) {
            globaltraders.UserServiceReference.SP_UserMarket_GetToTiedMarketbyEventID_Result retVal = this.EndGetToTiedMarketbyEventID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetToTiedMarketbyEventIDCompleted(object state) {
            if ((this.GetToTiedMarketbyEventIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetToTiedMarketbyEventIDCompleted(this, new GetToTiedMarketbyEventIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetToTiedMarketbyEventIDAsync(int UserId, string EventId) {
            this.GetToTiedMarketbyEventIDAsync(UserId, EventId, null);
        }
        
        public void GetToTiedMarketbyEventIDAsync(int UserId, string EventId, object userState) {
            if ((this.onBeginGetToTiedMarketbyEventIDDelegate == null)) {
                this.onBeginGetToTiedMarketbyEventIDDelegate = new BeginOperationDelegate(this.OnBeginGetToTiedMarketbyEventID);
            }
            if ((this.onEndGetToTiedMarketbyEventIDDelegate == null)) {
                this.onEndGetToTiedMarketbyEventIDDelegate = new EndOperationDelegate(this.OnEndGetToTiedMarketbyEventID);
            }
            if ((this.onGetToTiedMarketbyEventIDCompletedDelegate == null)) {
                this.onGetToTiedMarketbyEventIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetToTiedMarketbyEventIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetToTiedMarketbyEventIDDelegate, new object[] {
                        UserId,
                        EventId}, this.onEndGetToTiedMarketbyEventIDDelegate, this.onGetToTiedMarketbyEventIDCompletedDelegate, userState);
        }
        
        public globaltraders.UserServiceReference.SP_UserMarket_GetSoccergoalbyEventID_Result[] GetSoccergoalbyeventId(int UserId, string EventId) {
            return base.Channel.GetSoccergoalbyeventId(UserId, EventId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetSoccergoalbyeventId(int UserId, string EventId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSoccergoalbyeventId(UserId, EventId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public globaltraders.UserServiceReference.SP_UserMarket_GetSoccergoalbyEventID_Result[] EndGetSoccergoalbyeventId(System.IAsyncResult result) {
            return base.Channel.EndGetSoccergoalbyeventId(result);
        }
        
        private System.IAsyncResult OnBeginGetSoccergoalbyeventId(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int UserId = ((int)(inValues[0]));
            string EventId = ((string)(inValues[1]));
            return this.BeginGetSoccergoalbyeventId(UserId, EventId, callback, asyncState);
        }
        
        private object[] OnEndGetSoccergoalbyeventId(System.IAsyncResult result) {
            globaltraders.UserServiceReference.SP_UserMarket_GetSoccergoalbyEventID_Result[] retVal = this.EndGetSoccergoalbyeventId(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSoccergoalbyeventIdCompleted(object state) {
            if ((this.GetSoccergoalbyeventIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSoccergoalbyeventIdCompleted(this, new GetSoccergoalbyeventIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSoccergoalbyeventIdAsync(int UserId, string EventId) {
            this.GetSoccergoalbyeventIdAsync(UserId, EventId, null);
        }
        
        public void GetSoccergoalbyeventIdAsync(int UserId, string EventId, object userState) {
            if ((this.onBeginGetSoccergoalbyeventIdDelegate == null)) {
                this.onBeginGetSoccergoalbyeventIdDelegate = new BeginOperationDelegate(this.OnBeginGetSoccergoalbyeventId);
            }
            if ((this.onEndGetSoccergoalbyeventIdDelegate == null)) {
                this.onEndGetSoccergoalbyeventIdDelegate = new EndOperationDelegate(this.OnEndGetSoccergoalbyeventId);
            }
            if ((this.onGetSoccergoalbyeventIdCompletedDelegate == null)) {
                this.onGetSoccergoalbyeventIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSoccergoalbyeventIdCompleted);
            }
            base.InvokeAsync(this.onBeginGetSoccergoalbyeventIdDelegate, new object[] {
                        UserId,
                        EventId}, this.onEndGetSoccergoalbyeventIdDelegate, this.onGetSoccergoalbyeventIdCompletedDelegate, userState);
        }
        
        public void SetMarketOpenedbyuserinAPP() {
            base.Channel.SetMarketOpenedbyuserinAPP();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSetMarketOpenedbyuserinAPP(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetMarketOpenedbyuserinAPP(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSetMarketOpenedbyuserinAPP(System.IAsyncResult result) {
            base.Channel.EndSetMarketOpenedbyuserinAPP(result);
        }
        
        private System.IAsyncResult OnBeginSetMarketOpenedbyuserinAPP(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginSetMarketOpenedbyuserinAPP(callback, asyncState);
        }
        
        private object[] OnEndSetMarketOpenedbyuserinAPP(System.IAsyncResult result) {
            this.EndSetMarketOpenedbyuserinAPP(result);
            return null;
        }
        
        private void OnSetMarketOpenedbyuserinAPPCompleted(object state) {
            if ((this.SetMarketOpenedbyuserinAPPCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetMarketOpenedbyuserinAPPCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetMarketOpenedbyuserinAPPAsync() {
            this.SetMarketOpenedbyuserinAPPAsync(null);
        }
        
        public void SetMarketOpenedbyuserinAPPAsync(object userState) {
            if ((this.onBeginSetMarketOpenedbyuserinAPPDelegate == null)) {
                this.onBeginSetMarketOpenedbyuserinAPPDelegate = new BeginOperationDelegate(this.OnBeginSetMarketOpenedbyuserinAPP);
            }
            if ((this.onEndSetMarketOpenedbyuserinAPPDelegate == null)) {
                this.onEndSetMarketOpenedbyuserinAPPDelegate = new EndOperationDelegate(this.OnEndSetMarketOpenedbyuserinAPP);
            }
            if ((this.onSetMarketOpenedbyuserinAPPCompletedDelegate == null)) {
                this.onSetMarketOpenedbyuserinAPPCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetMarketOpenedbyuserinAPPCompleted);
            }
            base.InvokeAsync(this.onBeginSetMarketOpenedbyuserinAPPDelegate, null, this.onEndSetMarketOpenedbyuserinAPPDelegate, this.onSetMarketOpenedbyuserinAPPCompletedDelegate, userState);
        }
        
        public string GetAllMatches(int userID) {
            return base.Channel.GetAllMatches(userID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAllMatches(int userID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllMatches(userID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetAllMatches(System.IAsyncResult result) {
            return base.Channel.EndGetAllMatches(result);
        }
        
        private System.IAsyncResult OnBeginGetAllMatches(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            return this.BeginGetAllMatches(userID, callback, asyncState);
        }
        
        private object[] OnEndGetAllMatches(System.IAsyncResult result) {
            string retVal = this.EndGetAllMatches(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllMatchesCompleted(object state) {
            if ((this.GetAllMatchesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllMatchesCompleted(this, new GetAllMatchesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllMatchesAsync(int userID) {
            this.GetAllMatchesAsync(userID, null);
        }
        
        public void GetAllMatchesAsync(int userID, object userState) {
            if ((this.onBeginGetAllMatchesDelegate == null)) {
                this.onBeginGetAllMatchesDelegate = new BeginOperationDelegate(this.OnBeginGetAllMatches);
            }
            if ((this.onEndGetAllMatchesDelegate == null)) {
                this.onEndGetAllMatchesDelegate = new EndOperationDelegate(this.OnEndGetAllMatches);
            }
            if ((this.onGetAllMatchesCompletedDelegate == null)) {
                this.onGetAllMatchesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllMatchesCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllMatchesDelegate, new object[] {
                        userID}, this.onEndGetAllMatchesDelegate, this.onGetAllMatchesCompletedDelegate, userState);
        }
        
        public string GetAllCricketMatches(int userID) {
            return base.Channel.GetAllCricketMatches(userID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAllCricketMatches(int userID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllCricketMatches(userID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetAllCricketMatches(System.IAsyncResult result) {
            return base.Channel.EndGetAllCricketMatches(result);
        }
        
        private System.IAsyncResult OnBeginGetAllCricketMatches(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            return this.BeginGetAllCricketMatches(userID, callback, asyncState);
        }
        
        private object[] OnEndGetAllCricketMatches(System.IAsyncResult result) {
            string retVal = this.EndGetAllCricketMatches(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllCricketMatchesCompleted(object state) {
            if ((this.GetAllCricketMatchesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllCricketMatchesCompleted(this, new GetAllCricketMatchesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllCricketMatchesAsync(int userID) {
            this.GetAllCricketMatchesAsync(userID, null);
        }
        
        public void GetAllCricketMatchesAsync(int userID, object userState) {
            if ((this.onBeginGetAllCricketMatchesDelegate == null)) {
                this.onBeginGetAllCricketMatchesDelegate = new BeginOperationDelegate(this.OnBeginGetAllCricketMatches);
            }
            if ((this.onEndGetAllCricketMatchesDelegate == null)) {
                this.onEndGetAllCricketMatchesDelegate = new EndOperationDelegate(this.OnEndGetAllCricketMatches);
            }
            if ((this.onGetAllCricketMatchesCompletedDelegate == null)) {
                this.onGetAllCricketMatchesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllCricketMatchesCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllCricketMatchesDelegate, new object[] {
                        userID}, this.onEndGetAllCricketMatchesDelegate, this.onGetAllCricketMatchesCompletedDelegate, userState);
        }
        
        public string GetAllSoccerMatches(int userID) {
            return base.Channel.GetAllSoccerMatches(userID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAllSoccerMatches(int userID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllSoccerMatches(userID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetAllSoccerMatches(System.IAsyncResult result) {
            return base.Channel.EndGetAllSoccerMatches(result);
        }
        
        private System.IAsyncResult OnBeginGetAllSoccerMatches(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            return this.BeginGetAllSoccerMatches(userID, callback, asyncState);
        }
        
        private object[] OnEndGetAllSoccerMatches(System.IAsyncResult result) {
            string retVal = this.EndGetAllSoccerMatches(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllSoccerMatchesCompleted(object state) {
            if ((this.GetAllSoccerMatchesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllSoccerMatchesCompleted(this, new GetAllSoccerMatchesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllSoccerMatchesAsync(int userID) {
            this.GetAllSoccerMatchesAsync(userID, null);
        }
        
        public void GetAllSoccerMatchesAsync(int userID, object userState) {
            if ((this.onBeginGetAllSoccerMatchesDelegate == null)) {
                this.onBeginGetAllSoccerMatchesDelegate = new BeginOperationDelegate(this.OnBeginGetAllSoccerMatches);
            }
            if ((this.onEndGetAllSoccerMatchesDelegate == null)) {
                this.onEndGetAllSoccerMatchesDelegate = new EndOperationDelegate(this.OnEndGetAllSoccerMatches);
            }
            if ((this.onGetAllSoccerMatchesCompletedDelegate == null)) {
                this.onGetAllSoccerMatchesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllSoccerMatchesCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllSoccerMatchesDelegate, new object[] {
                        userID}, this.onEndGetAllSoccerMatchesDelegate, this.onGetAllSoccerMatchesCompletedDelegate, userState);
        }
        
        public string GetAllTennisMatches(int userID) {
            return base.Channel.GetAllTennisMatches(userID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAllTennisMatches(int userID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllTennisMatches(userID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetAllTennisMatches(System.IAsyncResult result) {
            return base.Channel.EndGetAllTennisMatches(result);
        }
        
        private System.IAsyncResult OnBeginGetAllTennisMatches(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            return this.BeginGetAllTennisMatches(userID, callback, asyncState);
        }
        
        private object[] OnEndGetAllTennisMatches(System.IAsyncResult result) {
            string retVal = this.EndGetAllTennisMatches(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllTennisMatchesCompleted(object state) {
            if ((this.GetAllTennisMatchesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllTennisMatchesCompleted(this, new GetAllTennisMatchesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllTennisMatchesAsync(int userID) {
            this.GetAllTennisMatchesAsync(userID, null);
        }
        
        public void GetAllTennisMatchesAsync(int userID, object userState) {
            if ((this.onBeginGetAllTennisMatchesDelegate == null)) {
                this.onBeginGetAllTennisMatchesDelegate = new BeginOperationDelegate(this.OnBeginGetAllTennisMatches);
            }
            if ((this.onEndGetAllTennisMatchesDelegate == null)) {
                this.onEndGetAllTennisMatchesDelegate = new EndOperationDelegate(this.OnEndGetAllTennisMatches);
            }
            if ((this.onGetAllTennisMatchesCompletedDelegate == null)) {
                this.onGetAllTennisMatchesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllTennisMatchesCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllTennisMatchesDelegate, new object[] {
                        userID}, this.onEndGetAllTennisMatchesDelegate, this.onGetAllTennisMatchesCompletedDelegate, userState);
        }
        
        public bool UpdateUserbetamountbyParentID(long ID, decimal amount, string userodd, string Password) {
            return base.Channel.UpdateUserbetamountbyParentID(ID, amount, userodd, Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateUserbetamountbyParentID(long ID, decimal amount, string userodd, string Password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateUserbetamountbyParentID(ID, amount, userodd, Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndUpdateUserbetamountbyParentID(System.IAsyncResult result) {
            return base.Channel.EndUpdateUserbetamountbyParentID(result);
        }
        
        private System.IAsyncResult OnBeginUpdateUserbetamountbyParentID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long ID = ((long)(inValues[0]));
            decimal amount = ((decimal)(inValues[1]));
            string userodd = ((string)(inValues[2]));
            string Password = ((string)(inValues[3]));
            return this.BeginUpdateUserbetamountbyParentID(ID, amount, userodd, Password, callback, asyncState);
        }
        
        private object[] OnEndUpdateUserbetamountbyParentID(System.IAsyncResult result) {
            bool retVal = this.EndUpdateUserbetamountbyParentID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateUserbetamountbyParentIDCompleted(object state) {
            if ((this.UpdateUserbetamountbyParentIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateUserbetamountbyParentIDCompleted(this, new UpdateUserbetamountbyParentIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateUserbetamountbyParentIDAsync(long ID, decimal amount, string userodd, string Password) {
            this.UpdateUserbetamountbyParentIDAsync(ID, amount, userodd, Password, null);
        }
        
        public void UpdateUserbetamountbyParentIDAsync(long ID, decimal amount, string userodd, string Password, object userState) {
            if ((this.onBeginUpdateUserbetamountbyParentIDDelegate == null)) {
                this.onBeginUpdateUserbetamountbyParentIDDelegate = new BeginOperationDelegate(this.OnBeginUpdateUserbetamountbyParentID);
            }
            if ((this.onEndUpdateUserbetamountbyParentIDDelegate == null)) {
                this.onEndUpdateUserbetamountbyParentIDDelegate = new EndOperationDelegate(this.OnEndUpdateUserbetamountbyParentID);
            }
            if ((this.onUpdateUserbetamountbyParentIDCompletedDelegate == null)) {
                this.onUpdateUserbetamountbyParentIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateUserbetamountbyParentIDCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateUserbetamountbyParentIDDelegate, new object[] {
                        ID,
                        amount,
                        userodd,
                        Password}, this.onEndUpdateUserbetamountbyParentIDDelegate, this.onUpdateUserbetamountbyParentIDCompletedDelegate, userState);
        }
        
        public string GetUserBetsbyAgentID(int AgentID, string Password) {
            return base.Channel.GetUserBetsbyAgentID(AgentID, Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetUserBetsbyAgentID(int AgentID, string Password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUserBetsbyAgentID(AgentID, Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetUserBetsbyAgentID(System.IAsyncResult result) {
            return base.Channel.EndGetUserBetsbyAgentID(result);
        }
        
        private System.IAsyncResult OnBeginGetUserBetsbyAgentID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int AgentID = ((int)(inValues[0]));
            string Password = ((string)(inValues[1]));
            return this.BeginGetUserBetsbyAgentID(AgentID, Password, callback, asyncState);
        }
        
        private object[] OnEndGetUserBetsbyAgentID(System.IAsyncResult result) {
            string retVal = this.EndGetUserBetsbyAgentID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserBetsbyAgentIDCompleted(object state) {
            if ((this.GetUserBetsbyAgentIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserBetsbyAgentIDCompleted(this, new GetUserBetsbyAgentIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserBetsbyAgentIDAsync(int AgentID, string Password) {
            this.GetUserBetsbyAgentIDAsync(AgentID, Password, null);
        }
        
        public void GetUserBetsbyAgentIDAsync(int AgentID, string Password, object userState) {
            if ((this.onBeginGetUserBetsbyAgentIDDelegate == null)) {
                this.onBeginGetUserBetsbyAgentIDDelegate = new BeginOperationDelegate(this.OnBeginGetUserBetsbyAgentID);
            }
            if ((this.onEndGetUserBetsbyAgentIDDelegate == null)) {
                this.onEndGetUserBetsbyAgentIDDelegate = new EndOperationDelegate(this.OnEndGetUserBetsbyAgentID);
            }
            if ((this.onGetUserBetsbyAgentIDCompletedDelegate == null)) {
                this.onGetUserBetsbyAgentIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserBetsbyAgentIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserBetsbyAgentIDDelegate, new object[] {
                        AgentID,
                        Password}, this.onEndGetUserBetsbyAgentIDDelegate, this.onGetUserBetsbyAgentIDCompletedDelegate, userState);
        }
        
        public string GetUserBetsbySuperID(int SuperID, string Password) {
            return base.Channel.GetUserBetsbySuperID(SuperID, Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetUserBetsbySuperID(int SuperID, string Password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUserBetsbySuperID(SuperID, Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetUserBetsbySuperID(System.IAsyncResult result) {
            return base.Channel.EndGetUserBetsbySuperID(result);
        }
        
        private System.IAsyncResult OnBeginGetUserBetsbySuperID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int SuperID = ((int)(inValues[0]));
            string Password = ((string)(inValues[1]));
            return this.BeginGetUserBetsbySuperID(SuperID, Password, callback, asyncState);
        }
        
        private object[] OnEndGetUserBetsbySuperID(System.IAsyncResult result) {
            string retVal = this.EndGetUserBetsbySuperID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserBetsbySuperIDCompleted(object state) {
            if ((this.GetUserBetsbySuperIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserBetsbySuperIDCompleted(this, new GetUserBetsbySuperIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserBetsbySuperIDAsync(int SuperID, string Password) {
            this.GetUserBetsbySuperIDAsync(SuperID, Password, null);
        }
        
        public void GetUserBetsbySuperIDAsync(int SuperID, string Password, object userState) {
            if ((this.onBeginGetUserBetsbySuperIDDelegate == null)) {
                this.onBeginGetUserBetsbySuperIDDelegate = new BeginOperationDelegate(this.OnBeginGetUserBetsbySuperID);
            }
            if ((this.onEndGetUserBetsbySuperIDDelegate == null)) {
                this.onEndGetUserBetsbySuperIDDelegate = new EndOperationDelegate(this.OnEndGetUserBetsbySuperID);
            }
            if ((this.onGetUserBetsbySuperIDCompletedDelegate == null)) {
                this.onGetUserBetsbySuperIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserBetsbySuperIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserBetsbySuperIDDelegate, new object[] {
                        SuperID,
                        Password}, this.onEndGetUserBetsbySuperIDDelegate, this.onGetUserBetsbySuperIDCompletedDelegate, userState);
        }
        
        public string GetUserBetsbySamiAdmin(int SuperID, string Password) {
            return base.Channel.GetUserBetsbySamiAdmin(SuperID, Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetUserBetsbySamiAdmin(int SuperID, string Password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUserBetsbySamiAdmin(SuperID, Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetUserBetsbySamiAdmin(System.IAsyncResult result) {
            return base.Channel.EndGetUserBetsbySamiAdmin(result);
        }
        
        private System.IAsyncResult OnBeginGetUserBetsbySamiAdmin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int SuperID = ((int)(inValues[0]));
            string Password = ((string)(inValues[1]));
            return this.BeginGetUserBetsbySamiAdmin(SuperID, Password, callback, asyncState);
        }
        
        private object[] OnEndGetUserBetsbySamiAdmin(System.IAsyncResult result) {
            string retVal = this.EndGetUserBetsbySamiAdmin(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserBetsbySamiAdminCompleted(object state) {
            if ((this.GetUserBetsbySamiAdminCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserBetsbySamiAdminCompleted(this, new GetUserBetsbySamiAdminCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserBetsbySamiAdminAsync(int SuperID, string Password) {
            this.GetUserBetsbySamiAdminAsync(SuperID, Password, null);
        }
        
        public void GetUserBetsbySamiAdminAsync(int SuperID, string Password, object userState) {
            if ((this.onBeginGetUserBetsbySamiAdminDelegate == null)) {
                this.onBeginGetUserBetsbySamiAdminDelegate = new BeginOperationDelegate(this.OnBeginGetUserBetsbySamiAdmin);
            }
            if ((this.onEndGetUserBetsbySamiAdminDelegate == null)) {
                this.onEndGetUserBetsbySamiAdminDelegate = new EndOperationDelegate(this.OnEndGetUserBetsbySamiAdmin);
            }
            if ((this.onGetUserBetsbySamiAdminCompletedDelegate == null)) {
                this.onGetUserBetsbySamiAdminCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserBetsbySamiAdminCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserBetsbySamiAdminDelegate, new object[] {
                        SuperID,
                        Password}, this.onEndGetUserBetsbySamiAdminDelegate, this.onGetUserBetsbySamiAdminCompletedDelegate, userState);
        }
        
        public string GetUserBetsbyAgentIDwithZeroReferer(int AgentID, string Password) {
            return base.Channel.GetUserBetsbyAgentIDwithZeroReferer(AgentID, Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetUserBetsbyAgentIDwithZeroReferer(int AgentID, string Password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUserBetsbyAgentIDwithZeroReferer(AgentID, Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetUserBetsbyAgentIDwithZeroReferer(System.IAsyncResult result) {
            return base.Channel.EndGetUserBetsbyAgentIDwithZeroReferer(result);
        }
        
        private System.IAsyncResult OnBeginGetUserBetsbyAgentIDwithZeroReferer(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int AgentID = ((int)(inValues[0]));
            string Password = ((string)(inValues[1]));
            return this.BeginGetUserBetsbyAgentIDwithZeroReferer(AgentID, Password, callback, asyncState);
        }
        
        private object[] OnEndGetUserBetsbyAgentIDwithZeroReferer(System.IAsyncResult result) {
            string retVal = this.EndGetUserBetsbyAgentIDwithZeroReferer(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserBetsbyAgentIDwithZeroRefererCompleted(object state) {
            if ((this.GetUserBetsbyAgentIDwithZeroRefererCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserBetsbyAgentIDwithZeroRefererCompleted(this, new GetUserBetsbyAgentIDwithZeroRefererCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserBetsbyAgentIDwithZeroRefererAsync(int AgentID, string Password) {
            this.GetUserBetsbyAgentIDwithZeroRefererAsync(AgentID, Password, null);
        }
        
        public void GetUserBetsbyAgentIDwithZeroRefererAsync(int AgentID, string Password, object userState) {
            if ((this.onBeginGetUserBetsbyAgentIDwithZeroRefererDelegate == null)) {
                this.onBeginGetUserBetsbyAgentIDwithZeroRefererDelegate = new BeginOperationDelegate(this.OnBeginGetUserBetsbyAgentIDwithZeroReferer);
            }
            if ((this.onEndGetUserBetsbyAgentIDwithZeroRefererDelegate == null)) {
                this.onEndGetUserBetsbyAgentIDwithZeroRefererDelegate = new EndOperationDelegate(this.OnEndGetUserBetsbyAgentIDwithZeroReferer);
            }
            if ((this.onGetUserBetsbyAgentIDwithZeroRefererCompletedDelegate == null)) {
                this.onGetUserBetsbyAgentIDwithZeroRefererCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserBetsbyAgentIDwithZeroRefererCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserBetsbyAgentIDwithZeroRefererDelegate, new object[] {
                        AgentID,
                        Password}, this.onEndGetUserBetsbyAgentIDwithZeroRefererDelegate, this.onGetUserBetsbyAgentIDwithZeroRefererCompletedDelegate, userState);
        }
        
        public string GetUserbetsbyUserIDandAgentID(int AgentID, string Password) {
            return base.Channel.GetUserbetsbyUserIDandAgentID(AgentID, Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetUserbetsbyUserIDandAgentID(int AgentID, string Password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUserbetsbyUserIDandAgentID(AgentID, Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetUserbetsbyUserIDandAgentID(System.IAsyncResult result) {
            return base.Channel.EndGetUserbetsbyUserIDandAgentID(result);
        }
        
        private System.IAsyncResult OnBeginGetUserbetsbyUserIDandAgentID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int AgentID = ((int)(inValues[0]));
            string Password = ((string)(inValues[1]));
            return this.BeginGetUserbetsbyUserIDandAgentID(AgentID, Password, callback, asyncState);
        }
        
        private object[] OnEndGetUserbetsbyUserIDandAgentID(System.IAsyncResult result) {
            string retVal = this.EndGetUserbetsbyUserIDandAgentID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserbetsbyUserIDandAgentIDCompleted(object state) {
            if ((this.GetUserbetsbyUserIDandAgentIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserbetsbyUserIDandAgentIDCompleted(this, new GetUserbetsbyUserIDandAgentIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserbetsbyUserIDandAgentIDAsync(int AgentID, string Password) {
            this.GetUserbetsbyUserIDandAgentIDAsync(AgentID, Password, null);
        }
        
        public void GetUserbetsbyUserIDandAgentIDAsync(int AgentID, string Password, object userState) {
            if ((this.onBeginGetUserbetsbyUserIDandAgentIDDelegate == null)) {
                this.onBeginGetUserbetsbyUserIDandAgentIDDelegate = new BeginOperationDelegate(this.OnBeginGetUserbetsbyUserIDandAgentID);
            }
            if ((this.onEndGetUserbetsbyUserIDandAgentIDDelegate == null)) {
                this.onEndGetUserbetsbyUserIDandAgentIDDelegate = new EndOperationDelegate(this.OnEndGetUserbetsbyUserIDandAgentID);
            }
            if ((this.onGetUserbetsbyUserIDandAgentIDCompletedDelegate == null)) {
                this.onGetUserbetsbyUserIDandAgentIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserbetsbyUserIDandAgentIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserbetsbyUserIDandAgentIDDelegate, new object[] {
                        AgentID,
                        Password}, this.onEndGetUserbetsbyUserIDandAgentIDDelegate, this.onGetUserbetsbyUserIDandAgentIDCompletedDelegate, userState);
        }
        
        public string GetUserbetsForAdmin(string Password) {
            return base.Channel.GetUserbetsForAdmin(Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetUserbetsForAdmin(string Password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUserbetsForAdmin(Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetUserbetsForAdmin(System.IAsyncResult result) {
            return base.Channel.EndGetUserbetsForAdmin(result);
        }
        
        private System.IAsyncResult OnBeginGetUserbetsForAdmin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string Password = ((string)(inValues[0]));
            return this.BeginGetUserbetsForAdmin(Password, callback, asyncState);
        }
        
        private object[] OnEndGetUserbetsForAdmin(System.IAsyncResult result) {
            string retVal = this.EndGetUserbetsForAdmin(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserbetsForAdminCompleted(object state) {
            if ((this.GetUserbetsForAdminCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserbetsForAdminCompleted(this, new GetUserbetsForAdminCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserbetsForAdminAsync(string Password) {
            this.GetUserbetsForAdminAsync(Password, null);
        }
        
        public void GetUserbetsForAdminAsync(string Password, object userState) {
            if ((this.onBeginGetUserbetsForAdminDelegate == null)) {
                this.onBeginGetUserbetsForAdminDelegate = new BeginOperationDelegate(this.OnBeginGetUserbetsForAdmin);
            }
            if ((this.onEndGetUserbetsForAdminDelegate == null)) {
                this.onEndGetUserbetsForAdminDelegate = new EndOperationDelegate(this.OnEndGetUserbetsForAdmin);
            }
            if ((this.onGetUserbetsForAdminCompletedDelegate == null)) {
                this.onGetUserbetsForAdminCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserbetsForAdminCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserbetsForAdminDelegate, new object[] {
                        Password}, this.onEndGetUserbetsForAdminDelegate, this.onGetUserbetsForAdminCompletedDelegate, userState);
        }
        
        public string GetMarketsOpenedbyUsersofAgent(int AgentID) {
            return base.Channel.GetMarketsOpenedbyUsersofAgent(AgentID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetMarketsOpenedbyUsersofAgent(int AgentID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMarketsOpenedbyUsersofAgent(AgentID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetMarketsOpenedbyUsersofAgent(System.IAsyncResult result) {
            return base.Channel.EndGetMarketsOpenedbyUsersofAgent(result);
        }
        
        private System.IAsyncResult OnBeginGetMarketsOpenedbyUsersofAgent(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int AgentID = ((int)(inValues[0]));
            return this.BeginGetMarketsOpenedbyUsersofAgent(AgentID, callback, asyncState);
        }
        
        private object[] OnEndGetMarketsOpenedbyUsersofAgent(System.IAsyncResult result) {
            string retVal = this.EndGetMarketsOpenedbyUsersofAgent(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMarketsOpenedbyUsersofAgentCompleted(object state) {
            if ((this.GetMarketsOpenedbyUsersofAgentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMarketsOpenedbyUsersofAgentCompleted(this, new GetMarketsOpenedbyUsersofAgentCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMarketsOpenedbyUsersofAgentAsync(int AgentID) {
            this.GetMarketsOpenedbyUsersofAgentAsync(AgentID, null);
        }
        
        public void GetMarketsOpenedbyUsersofAgentAsync(int AgentID, object userState) {
            if ((this.onBeginGetMarketsOpenedbyUsersofAgentDelegate == null)) {
                this.onBeginGetMarketsOpenedbyUsersofAgentDelegate = new BeginOperationDelegate(this.OnBeginGetMarketsOpenedbyUsersofAgent);
            }
            if ((this.onEndGetMarketsOpenedbyUsersofAgentDelegate == null)) {
                this.onEndGetMarketsOpenedbyUsersofAgentDelegate = new EndOperationDelegate(this.OnEndGetMarketsOpenedbyUsersofAgent);
            }
            if ((this.onGetMarketsOpenedbyUsersofAgentCompletedDelegate == null)) {
                this.onGetMarketsOpenedbyUsersofAgentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMarketsOpenedbyUsersofAgentCompleted);
            }
            base.InvokeAsync(this.onBeginGetMarketsOpenedbyUsersofAgentDelegate, new object[] {
                        AgentID}, this.onEndGetMarketsOpenedbyUsersofAgentDelegate, this.onGetMarketsOpenedbyUsersofAgentCompletedDelegate, userState);
        }
        
        public string GetMarketsOpenedbyUsersForAdmin() {
            return base.Channel.GetMarketsOpenedbyUsersForAdmin();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetMarketsOpenedbyUsersForAdmin(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMarketsOpenedbyUsersForAdmin(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetMarketsOpenedbyUsersForAdmin(System.IAsyncResult result) {
            return base.Channel.EndGetMarketsOpenedbyUsersForAdmin(result);
        }
        
        private System.IAsyncResult OnBeginGetMarketsOpenedbyUsersForAdmin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetMarketsOpenedbyUsersForAdmin(callback, asyncState);
        }
        
        private object[] OnEndGetMarketsOpenedbyUsersForAdmin(System.IAsyncResult result) {
            string retVal = this.EndGetMarketsOpenedbyUsersForAdmin(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMarketsOpenedbyUsersForAdminCompleted(object state) {
            if ((this.GetMarketsOpenedbyUsersForAdminCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMarketsOpenedbyUsersForAdminCompleted(this, new GetMarketsOpenedbyUsersForAdminCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMarketsOpenedbyUsersForAdminAsync() {
            this.GetMarketsOpenedbyUsersForAdminAsync(null);
        }
        
        public void GetMarketsOpenedbyUsersForAdminAsync(object userState) {
            if ((this.onBeginGetMarketsOpenedbyUsersForAdminDelegate == null)) {
                this.onBeginGetMarketsOpenedbyUsersForAdminDelegate = new BeginOperationDelegate(this.OnBeginGetMarketsOpenedbyUsersForAdmin);
            }
            if ((this.onEndGetMarketsOpenedbyUsersForAdminDelegate == null)) {
                this.onEndGetMarketsOpenedbyUsersForAdminDelegate = new EndOperationDelegate(this.OnEndGetMarketsOpenedbyUsersForAdmin);
            }
            if ((this.onGetMarketsOpenedbyUsersForAdminCompletedDelegate == null)) {
                this.onGetMarketsOpenedbyUsersForAdminCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMarketsOpenedbyUsersForAdminCompleted);
            }
            base.InvokeAsync(this.onBeginGetMarketsOpenedbyUsersForAdminDelegate, null, this.onEndGetMarketsOpenedbyUsersForAdminDelegate, this.onGetMarketsOpenedbyUsersForAdminCompletedDelegate, userState);
        }
        
        public void SetLoggedinStatus(int userID, bool LoggedIn) {
            base.Channel.SetLoggedinStatus(userID, LoggedIn);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSetLoggedinStatus(int userID, bool LoggedIn, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetLoggedinStatus(userID, LoggedIn, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSetLoggedinStatus(System.IAsyncResult result) {
            base.Channel.EndSetLoggedinStatus(result);
        }
        
        private System.IAsyncResult OnBeginSetLoggedinStatus(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            bool LoggedIn = ((bool)(inValues[1]));
            return this.BeginSetLoggedinStatus(userID, LoggedIn, callback, asyncState);
        }
        
        private object[] OnEndSetLoggedinStatus(System.IAsyncResult result) {
            this.EndSetLoggedinStatus(result);
            return null;
        }
        
        private void OnSetLoggedinStatusCompleted(object state) {
            if ((this.SetLoggedinStatusCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetLoggedinStatusCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetLoggedinStatusAsync(int userID, bool LoggedIn) {
            this.SetLoggedinStatusAsync(userID, LoggedIn, null);
        }
        
        public void SetLoggedinStatusAsync(int userID, bool LoggedIn, object userState) {
            if ((this.onBeginSetLoggedinStatusDelegate == null)) {
                this.onBeginSetLoggedinStatusDelegate = new BeginOperationDelegate(this.OnBeginSetLoggedinStatus);
            }
            if ((this.onEndSetLoggedinStatusDelegate == null)) {
                this.onEndSetLoggedinStatusDelegate = new EndOperationDelegate(this.OnEndSetLoggedinStatus);
            }
            if ((this.onSetLoggedinStatusCompletedDelegate == null)) {
                this.onSetLoggedinStatusCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetLoggedinStatusCompleted);
            }
            base.InvokeAsync(this.onBeginSetLoggedinStatusDelegate, new object[] {
                        userID,
                        LoggedIn}, this.onEndSetLoggedinStatusDelegate, this.onSetLoggedinStatusCompletedDelegate, userState);
        }
        
        public string GetCompletedMatchedBetsbyUserID(int UserID, string MarketbookID) {
            return base.Channel.GetCompletedMatchedBetsbyUserID(UserID, MarketbookID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetCompletedMatchedBetsbyUserID(int UserID, string MarketbookID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCompletedMatchedBetsbyUserID(UserID, MarketbookID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetCompletedMatchedBetsbyUserID(System.IAsyncResult result) {
            return base.Channel.EndGetCompletedMatchedBetsbyUserID(result);
        }
        
        private System.IAsyncResult OnBeginGetCompletedMatchedBetsbyUserID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int UserID = ((int)(inValues[0]));
            string MarketbookID = ((string)(inValues[1]));
            return this.BeginGetCompletedMatchedBetsbyUserID(UserID, MarketbookID, callback, asyncState);
        }
        
        private object[] OnEndGetCompletedMatchedBetsbyUserID(System.IAsyncResult result) {
            string retVal = this.EndGetCompletedMatchedBetsbyUserID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCompletedMatchedBetsbyUserIDCompleted(object state) {
            if ((this.GetCompletedMatchedBetsbyUserIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCompletedMatchedBetsbyUserIDCompleted(this, new GetCompletedMatchedBetsbyUserIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCompletedMatchedBetsbyUserIDAsync(int UserID, string MarketbookID) {
            this.GetCompletedMatchedBetsbyUserIDAsync(UserID, MarketbookID, null);
        }
        
        public void GetCompletedMatchedBetsbyUserIDAsync(int UserID, string MarketbookID, object userState) {
            if ((this.onBeginGetCompletedMatchedBetsbyUserIDDelegate == null)) {
                this.onBeginGetCompletedMatchedBetsbyUserIDDelegate = new BeginOperationDelegate(this.OnBeginGetCompletedMatchedBetsbyUserID);
            }
            if ((this.onEndGetCompletedMatchedBetsbyUserIDDelegate == null)) {
                this.onEndGetCompletedMatchedBetsbyUserIDDelegate = new EndOperationDelegate(this.OnEndGetCompletedMatchedBetsbyUserID);
            }
            if ((this.onGetCompletedMatchedBetsbyUserIDCompletedDelegate == null)) {
                this.onGetCompletedMatchedBetsbyUserIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCompletedMatchedBetsbyUserIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetCompletedMatchedBetsbyUserIDDelegate, new object[] {
                        UserID,
                        MarketbookID}, this.onEndGetCompletedMatchedBetsbyUserIDDelegate, this.onGetCompletedMatchedBetsbyUserIDCompletedDelegate, userState);
        }
        
        public string GetAllUserMarketbyUserID(int userID) {
            return base.Channel.GetAllUserMarketbyUserID(userID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAllUserMarketbyUserID(int userID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllUserMarketbyUserID(userID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetAllUserMarketbyUserID(System.IAsyncResult result) {
            return base.Channel.EndGetAllUserMarketbyUserID(result);
        }
        
        private System.IAsyncResult OnBeginGetAllUserMarketbyUserID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            return this.BeginGetAllUserMarketbyUserID(userID, callback, asyncState);
        }
        
        private object[] OnEndGetAllUserMarketbyUserID(System.IAsyncResult result) {
            string retVal = this.EndGetAllUserMarketbyUserID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllUserMarketbyUserIDCompleted(object state) {
            if ((this.GetAllUserMarketbyUserIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllUserMarketbyUserIDCompleted(this, new GetAllUserMarketbyUserIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllUserMarketbyUserIDAsync(int userID) {
            this.GetAllUserMarketbyUserIDAsync(userID, null);
        }
        
        public void GetAllUserMarketbyUserIDAsync(int userID, object userState) {
            if ((this.onBeginGetAllUserMarketbyUserIDDelegate == null)) {
                this.onBeginGetAllUserMarketbyUserIDDelegate = new BeginOperationDelegate(this.OnBeginGetAllUserMarketbyUserID);
            }
            if ((this.onEndGetAllUserMarketbyUserIDDelegate == null)) {
                this.onEndGetAllUserMarketbyUserIDDelegate = new EndOperationDelegate(this.OnEndGetAllUserMarketbyUserID);
            }
            if ((this.onGetAllUserMarketbyUserIDCompletedDelegate == null)) {
                this.onGetAllUserMarketbyUserIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllUserMarketbyUserIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllUserMarketbyUserIDDelegate, new object[] {
                        userID}, this.onEndGetAllUserMarketbyUserIDDelegate, this.onGetAllUserMarketbyUserIDCompletedDelegate, userState);
        }
        
        public string GetUserStatus(int UserID) {
            return base.Channel.GetUserStatus(UserID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetUserStatus(int UserID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUserStatus(UserID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetUserStatus(System.IAsyncResult result) {
            return base.Channel.EndGetUserStatus(result);
        }
        
        private System.IAsyncResult OnBeginGetUserStatus(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int UserID = ((int)(inValues[0]));
            return this.BeginGetUserStatus(UserID, callback, asyncState);
        }
        
        private object[] OnEndGetUserStatus(System.IAsyncResult result) {
            string retVal = this.EndGetUserStatus(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserStatusCompleted(object state) {
            if ((this.GetUserStatusCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserStatusCompleted(this, new GetUserStatusCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserStatusAsync(int UserID) {
            this.GetUserStatusAsync(UserID, null);
        }
        
        public void GetUserStatusAsync(int UserID, object userState) {
            if ((this.onBeginGetUserStatusDelegate == null)) {
                this.onBeginGetUserStatusDelegate = new BeginOperationDelegate(this.OnBeginGetUserStatus);
            }
            if ((this.onEndGetUserStatusDelegate == null)) {
                this.onEndGetUserStatusDelegate = new EndOperationDelegate(this.OnEndGetUserStatus);
            }
            if ((this.onGetUserStatusCompletedDelegate == null)) {
                this.onGetUserStatusCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserStatusCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserStatusDelegate, new object[] {
                        UserID}, this.onEndGetUserStatusDelegate, this.onGetUserStatusCompletedDelegate, userState);
        }
        
        public string GetLastLoginTimes(int UserID) {
            return base.Channel.GetLastLoginTimes(UserID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetLastLoginTimes(int UserID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLastLoginTimes(UserID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetLastLoginTimes(System.IAsyncResult result) {
            return base.Channel.EndGetLastLoginTimes(result);
        }
        
        private System.IAsyncResult OnBeginGetLastLoginTimes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int UserID = ((int)(inValues[0]));
            return this.BeginGetLastLoginTimes(UserID, callback, asyncState);
        }
        
        private object[] OnEndGetLastLoginTimes(System.IAsyncResult result) {
            string retVal = this.EndGetLastLoginTimes(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLastLoginTimesCompleted(object state) {
            if ((this.GetLastLoginTimesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLastLoginTimesCompleted(this, new GetLastLoginTimesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLastLoginTimesAsync(int UserID) {
            this.GetLastLoginTimesAsync(UserID, null);
        }
        
        public void GetLastLoginTimesAsync(int UserID, object userState) {
            if ((this.onBeginGetLastLoginTimesDelegate == null)) {
                this.onBeginGetLastLoginTimesDelegate = new BeginOperationDelegate(this.OnBeginGetLastLoginTimes);
            }
            if ((this.onEndGetLastLoginTimesDelegate == null)) {
                this.onEndGetLastLoginTimesDelegate = new EndOperationDelegate(this.OnEndGetLastLoginTimes);
            }
            if ((this.onGetLastLoginTimesCompletedDelegate == null)) {
                this.onGetLastLoginTimesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLastLoginTimesCompleted);
            }
            base.InvokeAsync(this.onBeginGetLastLoginTimesDelegate, new object[] {
                        UserID}, this.onEndGetLastLoginTimesDelegate, this.onGetLastLoginTimesCompletedDelegate, userState);
        }
        
        public void UpdateBetSizebyID(long ID, string BetSize, string Password) {
            base.Channel.UpdateBetSizebyID(ID, BetSize, Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateBetSizebyID(long ID, string BetSize, string Password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateBetSizebyID(ID, BetSize, Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateBetSizebyID(System.IAsyncResult result) {
            base.Channel.EndUpdateBetSizebyID(result);
        }
        
        private System.IAsyncResult OnBeginUpdateBetSizebyID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long ID = ((long)(inValues[0]));
            string BetSize = ((string)(inValues[1]));
            string Password = ((string)(inValues[2]));
            return this.BeginUpdateBetSizebyID(ID, BetSize, Password, callback, asyncState);
        }
        
        private object[] OnEndUpdateBetSizebyID(System.IAsyncResult result) {
            this.EndUpdateBetSizebyID(result);
            return null;
        }
        
        private void OnUpdateBetSizebyIDCompleted(object state) {
            if ((this.UpdateBetSizebyIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateBetSizebyIDCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateBetSizebyIDAsync(long ID, string BetSize, string Password) {
            this.UpdateBetSizebyIDAsync(ID, BetSize, Password, null);
        }
        
        public void UpdateBetSizebyIDAsync(long ID, string BetSize, string Password, object userState) {
            if ((this.onBeginUpdateBetSizebyIDDelegate == null)) {
                this.onBeginUpdateBetSizebyIDDelegate = new BeginOperationDelegate(this.OnBeginUpdateBetSizebyID);
            }
            if ((this.onEndUpdateBetSizebyIDDelegate == null)) {
                this.onEndUpdateBetSizebyIDDelegate = new EndOperationDelegate(this.OnEndUpdateBetSizebyID);
            }
            if ((this.onUpdateBetSizebyIDCompletedDelegate == null)) {
                this.onUpdateBetSizebyIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateBetSizebyIDCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateBetSizebyIDDelegate, new object[] {
                        ID,
                        BetSize,
                        Password}, this.onEndUpdateBetSizebyIDDelegate, this.onUpdateBetSizebyIDCompletedDelegate, userState);
        }
        
        public string GetUnMatchedBets(string Password) {
            return base.Channel.GetUnMatchedBets(Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetUnMatchedBets(string Password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUnMatchedBets(Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetUnMatchedBets(System.IAsyncResult result) {
            return base.Channel.EndGetUnMatchedBets(result);
        }
        
        private System.IAsyncResult OnBeginGetUnMatchedBets(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string Password = ((string)(inValues[0]));
            return this.BeginGetUnMatchedBets(Password, callback, asyncState);
        }
        
        private object[] OnEndGetUnMatchedBets(System.IAsyncResult result) {
            string retVal = this.EndGetUnMatchedBets(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUnMatchedBetsCompleted(object state) {
            if ((this.GetUnMatchedBetsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUnMatchedBetsCompleted(this, new GetUnMatchedBetsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUnMatchedBetsAsync(string Password) {
            this.GetUnMatchedBetsAsync(Password, null);
        }
        
        public void GetUnMatchedBetsAsync(string Password, object userState) {
            if ((this.onBeginGetUnMatchedBetsDelegate == null)) {
                this.onBeginGetUnMatchedBetsDelegate = new BeginOperationDelegate(this.OnBeginGetUnMatchedBets);
            }
            if ((this.onEndGetUnMatchedBetsDelegate == null)) {
                this.onEndGetUnMatchedBetsDelegate = new EndOperationDelegate(this.OnEndGetUnMatchedBets);
            }
            if ((this.onGetUnMatchedBetsCompletedDelegate == null)) {
                this.onGetUnMatchedBetsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUnMatchedBetsCompleted);
            }
            base.InvokeAsync(this.onBeginGetUnMatchedBetsDelegate, new object[] {
                        Password}, this.onEndGetUnMatchedBetsDelegate, this.onGetUnMatchedBetsCompletedDelegate, userState);
        }
        
        public string GetSheetNamebyMarketID(string marketbookID) {
            return base.Channel.GetSheetNamebyMarketID(marketbookID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetSheetNamebyMarketID(string marketbookID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSheetNamebyMarketID(marketbookID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetSheetNamebyMarketID(System.IAsyncResult result) {
            return base.Channel.EndGetSheetNamebyMarketID(result);
        }
        
        private System.IAsyncResult OnBeginGetSheetNamebyMarketID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string marketbookID = ((string)(inValues[0]));
            return this.BeginGetSheetNamebyMarketID(marketbookID, callback, asyncState);
        }
        
        private object[] OnEndGetSheetNamebyMarketID(System.IAsyncResult result) {
            string retVal = this.EndGetSheetNamebyMarketID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSheetNamebyMarketIDCompleted(object state) {
            if ((this.GetSheetNamebyMarketIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSheetNamebyMarketIDCompleted(this, new GetSheetNamebyMarketIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSheetNamebyMarketIDAsync(string marketbookID) {
            this.GetSheetNamebyMarketIDAsync(marketbookID, null);
        }
        
        public void GetSheetNamebyMarketIDAsync(string marketbookID, object userState) {
            if ((this.onBeginGetSheetNamebyMarketIDDelegate == null)) {
                this.onBeginGetSheetNamebyMarketIDDelegate = new BeginOperationDelegate(this.OnBeginGetSheetNamebyMarketID);
            }
            if ((this.onEndGetSheetNamebyMarketIDDelegate == null)) {
                this.onEndGetSheetNamebyMarketIDDelegate = new EndOperationDelegate(this.OnEndGetSheetNamebyMarketID);
            }
            if ((this.onGetSheetNamebyMarketIDCompletedDelegate == null)) {
                this.onGetSheetNamebyMarketIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSheetNamebyMarketIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetSheetNamebyMarketIDDelegate, new object[] {
                        marketbookID}, this.onEndGetSheetNamebyMarketIDDelegate, this.onGetSheetNamebyMarketIDCompletedDelegate, userState);
        }
        
        public void UpdateBetLowerLimit(
                    int userID, 
                    decimal BetLowerLimit, 
                    decimal BetUpperLimit, 
                    bool isAllowedGrayHound, 
                    bool isAllowedHorse, 
                    decimal BetLowerLimitHorsePlace, 
                    decimal BetUpperLimitHorsePlace, 
                    decimal BetLowerLimitGrayHoundWin, 
                    decimal BetUpperLimitGrayHoundWin, 
                    decimal BetLowerLimitGrayHoundPlace, 
                    decimal BetUpperLimitGrayHoundPlace, 
                    decimal BetLowerLimitMatchOdds, 
                    decimal BetUpperLimitMatchOdds, 
                    decimal BetLowerLimitInningsRunns, 
                    decimal BetUpperLimitInningsRunns, 
                    decimal BetLowerLimitCompletedMatch, 
                    decimal BetUpperLimitCompletedMatch, 
                    bool isTennisAllowed, 
                    bool isSoccerAllowed, 
                    int CommissionRate, 
                    decimal BetLowerLimitMatchOddsSoccer, 
                    decimal BetUpperLimitMatchOddsSoccer, 
                    decimal BetLowerLimitMatchOddsTennis, 
                    decimal BetUpperLimitMatchOddsTennis, 
                    decimal BetUpperLimitTiedMatch, 
                    decimal BetLowerLimitTiedMatch, 
                    decimal BetUpperLimitWinner, 
                    decimal BetLowerLimitWinner, 
                    string Password, 
                    decimal BetUpperLimitFancy, 
                    decimal BetLowerLimitFancy) {
            base.Channel.UpdateBetLowerLimit(userID, BetLowerLimit, BetUpperLimit, isAllowedGrayHound, isAllowedHorse, BetLowerLimitHorsePlace, BetUpperLimitHorsePlace, BetLowerLimitGrayHoundWin, BetUpperLimitGrayHoundWin, BetLowerLimitGrayHoundPlace, BetUpperLimitGrayHoundPlace, BetLowerLimitMatchOdds, BetUpperLimitMatchOdds, BetLowerLimitInningsRunns, BetUpperLimitInningsRunns, BetLowerLimitCompletedMatch, BetUpperLimitCompletedMatch, isTennisAllowed, isSoccerAllowed, CommissionRate, BetLowerLimitMatchOddsSoccer, BetUpperLimitMatchOddsSoccer, BetLowerLimitMatchOddsTennis, BetUpperLimitMatchOddsTennis, BetUpperLimitTiedMatch, BetLowerLimitTiedMatch, BetUpperLimitWinner, BetLowerLimitWinner, Password, BetUpperLimitFancy, BetLowerLimitFancy);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateBetLowerLimit(
                    int userID, 
                    decimal BetLowerLimit, 
                    decimal BetUpperLimit, 
                    bool isAllowedGrayHound, 
                    bool isAllowedHorse, 
                    decimal BetLowerLimitHorsePlace, 
                    decimal BetUpperLimitHorsePlace, 
                    decimal BetLowerLimitGrayHoundWin, 
                    decimal BetUpperLimitGrayHoundWin, 
                    decimal BetLowerLimitGrayHoundPlace, 
                    decimal BetUpperLimitGrayHoundPlace, 
                    decimal BetLowerLimitMatchOdds, 
                    decimal BetUpperLimitMatchOdds, 
                    decimal BetLowerLimitInningsRunns, 
                    decimal BetUpperLimitInningsRunns, 
                    decimal BetLowerLimitCompletedMatch, 
                    decimal BetUpperLimitCompletedMatch, 
                    bool isTennisAllowed, 
                    bool isSoccerAllowed, 
                    int CommissionRate, 
                    decimal BetLowerLimitMatchOddsSoccer, 
                    decimal BetUpperLimitMatchOddsSoccer, 
                    decimal BetLowerLimitMatchOddsTennis, 
                    decimal BetUpperLimitMatchOddsTennis, 
                    decimal BetUpperLimitTiedMatch, 
                    decimal BetLowerLimitTiedMatch, 
                    decimal BetUpperLimitWinner, 
                    decimal BetLowerLimitWinner, 
                    string Password, 
                    decimal BetUpperLimitFancy, 
                    decimal BetLowerLimitFancy, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return base.Channel.BeginUpdateBetLowerLimit(userID, BetLowerLimit, BetUpperLimit, isAllowedGrayHound, isAllowedHorse, BetLowerLimitHorsePlace, BetUpperLimitHorsePlace, BetLowerLimitGrayHoundWin, BetUpperLimitGrayHoundWin, BetLowerLimitGrayHoundPlace, BetUpperLimitGrayHoundPlace, BetLowerLimitMatchOdds, BetUpperLimitMatchOdds, BetLowerLimitInningsRunns, BetUpperLimitInningsRunns, BetLowerLimitCompletedMatch, BetUpperLimitCompletedMatch, isTennisAllowed, isSoccerAllowed, CommissionRate, BetLowerLimitMatchOddsSoccer, BetUpperLimitMatchOddsSoccer, BetLowerLimitMatchOddsTennis, BetUpperLimitMatchOddsTennis, BetUpperLimitTiedMatch, BetLowerLimitTiedMatch, BetUpperLimitWinner, BetLowerLimitWinner, Password, BetUpperLimitFancy, BetLowerLimitFancy, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateBetLowerLimit(System.IAsyncResult result) {
            base.Channel.EndUpdateBetLowerLimit(result);
        }
        
        private System.IAsyncResult OnBeginUpdateBetLowerLimit(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            decimal BetLowerLimit = ((decimal)(inValues[1]));
            decimal BetUpperLimit = ((decimal)(inValues[2]));
            bool isAllowedGrayHound = ((bool)(inValues[3]));
            bool isAllowedHorse = ((bool)(inValues[4]));
            decimal BetLowerLimitHorsePlace = ((decimal)(inValues[5]));
            decimal BetUpperLimitHorsePlace = ((decimal)(inValues[6]));
            decimal BetLowerLimitGrayHoundWin = ((decimal)(inValues[7]));
            decimal BetUpperLimitGrayHoundWin = ((decimal)(inValues[8]));
            decimal BetLowerLimitGrayHoundPlace = ((decimal)(inValues[9]));
            decimal BetUpperLimitGrayHoundPlace = ((decimal)(inValues[10]));
            decimal BetLowerLimitMatchOdds = ((decimal)(inValues[11]));
            decimal BetUpperLimitMatchOdds = ((decimal)(inValues[12]));
            decimal BetLowerLimitInningsRunns = ((decimal)(inValues[13]));
            decimal BetUpperLimitInningsRunns = ((decimal)(inValues[14]));
            decimal BetLowerLimitCompletedMatch = ((decimal)(inValues[15]));
            decimal BetUpperLimitCompletedMatch = ((decimal)(inValues[16]));
            bool isTennisAllowed = ((bool)(inValues[17]));
            bool isSoccerAllowed = ((bool)(inValues[18]));
            int CommissionRate = ((int)(inValues[19]));
            decimal BetLowerLimitMatchOddsSoccer = ((decimal)(inValues[20]));
            decimal BetUpperLimitMatchOddsSoccer = ((decimal)(inValues[21]));
            decimal BetLowerLimitMatchOddsTennis = ((decimal)(inValues[22]));
            decimal BetUpperLimitMatchOddsTennis = ((decimal)(inValues[23]));
            decimal BetUpperLimitTiedMatch = ((decimal)(inValues[24]));
            decimal BetLowerLimitTiedMatch = ((decimal)(inValues[25]));
            decimal BetUpperLimitWinner = ((decimal)(inValues[26]));
            decimal BetLowerLimitWinner = ((decimal)(inValues[27]));
            string Password = ((string)(inValues[28]));
            decimal BetUpperLimitFancy = ((decimal)(inValues[29]));
            decimal BetLowerLimitFancy = ((decimal)(inValues[30]));
            return this.BeginUpdateBetLowerLimit(userID, BetLowerLimit, BetUpperLimit, isAllowedGrayHound, isAllowedHorse, BetLowerLimitHorsePlace, BetUpperLimitHorsePlace, BetLowerLimitGrayHoundWin, BetUpperLimitGrayHoundWin, BetLowerLimitGrayHoundPlace, BetUpperLimitGrayHoundPlace, BetLowerLimitMatchOdds, BetUpperLimitMatchOdds, BetLowerLimitInningsRunns, BetUpperLimitInningsRunns, BetLowerLimitCompletedMatch, BetUpperLimitCompletedMatch, isTennisAllowed, isSoccerAllowed, CommissionRate, BetLowerLimitMatchOddsSoccer, BetUpperLimitMatchOddsSoccer, BetLowerLimitMatchOddsTennis, BetUpperLimitMatchOddsTennis, BetUpperLimitTiedMatch, BetLowerLimitTiedMatch, BetUpperLimitWinner, BetLowerLimitWinner, Password, BetUpperLimitFancy, BetLowerLimitFancy, callback, asyncState);
        }
        
        private object[] OnEndUpdateBetLowerLimit(System.IAsyncResult result) {
            this.EndUpdateBetLowerLimit(result);
            return null;
        }
        
        private void OnUpdateBetLowerLimitCompleted(object state) {
            if ((this.UpdateBetLowerLimitCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateBetLowerLimitCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateBetLowerLimitAsync(
                    int userID, 
                    decimal BetLowerLimit, 
                    decimal BetUpperLimit, 
                    bool isAllowedGrayHound, 
                    bool isAllowedHorse, 
                    decimal BetLowerLimitHorsePlace, 
                    decimal BetUpperLimitHorsePlace, 
                    decimal BetLowerLimitGrayHoundWin, 
                    decimal BetUpperLimitGrayHoundWin, 
                    decimal BetLowerLimitGrayHoundPlace, 
                    decimal BetUpperLimitGrayHoundPlace, 
                    decimal BetLowerLimitMatchOdds, 
                    decimal BetUpperLimitMatchOdds, 
                    decimal BetLowerLimitInningsRunns, 
                    decimal BetUpperLimitInningsRunns, 
                    decimal BetLowerLimitCompletedMatch, 
                    decimal BetUpperLimitCompletedMatch, 
                    bool isTennisAllowed, 
                    bool isSoccerAllowed, 
                    int CommissionRate, 
                    decimal BetLowerLimitMatchOddsSoccer, 
                    decimal BetUpperLimitMatchOddsSoccer, 
                    decimal BetLowerLimitMatchOddsTennis, 
                    decimal BetUpperLimitMatchOddsTennis, 
                    decimal BetUpperLimitTiedMatch, 
                    decimal BetLowerLimitTiedMatch, 
                    decimal BetUpperLimitWinner, 
                    decimal BetLowerLimitWinner, 
                    string Password, 
                    decimal BetUpperLimitFancy, 
                    decimal BetLowerLimitFancy) {
            this.UpdateBetLowerLimitAsync(userID, BetLowerLimit, BetUpperLimit, isAllowedGrayHound, isAllowedHorse, BetLowerLimitHorsePlace, BetUpperLimitHorsePlace, BetLowerLimitGrayHoundWin, BetUpperLimitGrayHoundWin, BetLowerLimitGrayHoundPlace, BetUpperLimitGrayHoundPlace, BetLowerLimitMatchOdds, BetUpperLimitMatchOdds, BetLowerLimitInningsRunns, BetUpperLimitInningsRunns, BetLowerLimitCompletedMatch, BetUpperLimitCompletedMatch, isTennisAllowed, isSoccerAllowed, CommissionRate, BetLowerLimitMatchOddsSoccer, BetUpperLimitMatchOddsSoccer, BetLowerLimitMatchOddsTennis, BetUpperLimitMatchOddsTennis, BetUpperLimitTiedMatch, BetLowerLimitTiedMatch, BetUpperLimitWinner, BetLowerLimitWinner, Password, BetUpperLimitFancy, BetLowerLimitFancy, null);
        }
        
        public void UpdateBetLowerLimitAsync(
                    int userID, 
                    decimal BetLowerLimit, 
                    decimal BetUpperLimit, 
                    bool isAllowedGrayHound, 
                    bool isAllowedHorse, 
                    decimal BetLowerLimitHorsePlace, 
                    decimal BetUpperLimitHorsePlace, 
                    decimal BetLowerLimitGrayHoundWin, 
                    decimal BetUpperLimitGrayHoundWin, 
                    decimal BetLowerLimitGrayHoundPlace, 
                    decimal BetUpperLimitGrayHoundPlace, 
                    decimal BetLowerLimitMatchOdds, 
                    decimal BetUpperLimitMatchOdds, 
                    decimal BetLowerLimitInningsRunns, 
                    decimal BetUpperLimitInningsRunns, 
                    decimal BetLowerLimitCompletedMatch, 
                    decimal BetUpperLimitCompletedMatch, 
                    bool isTennisAllowed, 
                    bool isSoccerAllowed, 
                    int CommissionRate, 
                    decimal BetLowerLimitMatchOddsSoccer, 
                    decimal BetUpperLimitMatchOddsSoccer, 
                    decimal BetLowerLimitMatchOddsTennis, 
                    decimal BetUpperLimitMatchOddsTennis, 
                    decimal BetUpperLimitTiedMatch, 
                    decimal BetLowerLimitTiedMatch, 
                    decimal BetUpperLimitWinner, 
                    decimal BetLowerLimitWinner, 
                    string Password, 
                    decimal BetUpperLimitFancy, 
                    decimal BetLowerLimitFancy, 
                    object userState) {
            if ((this.onBeginUpdateBetLowerLimitDelegate == null)) {
                this.onBeginUpdateBetLowerLimitDelegate = new BeginOperationDelegate(this.OnBeginUpdateBetLowerLimit);
            }
            if ((this.onEndUpdateBetLowerLimitDelegate == null)) {
                this.onEndUpdateBetLowerLimitDelegate = new EndOperationDelegate(this.OnEndUpdateBetLowerLimit);
            }
            if ((this.onUpdateBetLowerLimitCompletedDelegate == null)) {
                this.onUpdateBetLowerLimitCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateBetLowerLimitCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateBetLowerLimitDelegate, new object[] {
                        userID,
                        BetLowerLimit,
                        BetUpperLimit,
                        isAllowedGrayHound,
                        isAllowedHorse,
                        BetLowerLimitHorsePlace,
                        BetUpperLimitHorsePlace,
                        BetLowerLimitGrayHoundWin,
                        BetUpperLimitGrayHoundWin,
                        BetLowerLimitGrayHoundPlace,
                        BetUpperLimitGrayHoundPlace,
                        BetLowerLimitMatchOdds,
                        BetUpperLimitMatchOdds,
                        BetLowerLimitInningsRunns,
                        BetUpperLimitInningsRunns,
                        BetLowerLimitCompletedMatch,
                        BetUpperLimitCompletedMatch,
                        isTennisAllowed,
                        isSoccerAllowed,
                        CommissionRate,
                        BetLowerLimitMatchOddsSoccer,
                        BetUpperLimitMatchOddsSoccer,
                        BetLowerLimitMatchOddsTennis,
                        BetUpperLimitMatchOddsTennis,
                        BetUpperLimitTiedMatch,
                        BetLowerLimitTiedMatch,
                        BetUpperLimitWinner,
                        BetLowerLimitWinner,
                        Password,
                        BetUpperLimitFancy,
                        BetLowerLimitFancy}, this.onEndUpdateBetLowerLimitDelegate, this.onUpdateBetLowerLimitCompletedDelegate, userState);
        }
        
        public void UpdateCheckConditionforPlaceBet(int UserID, bool CheckConditionforPlaceBet) {
            base.Channel.UpdateCheckConditionforPlaceBet(UserID, CheckConditionforPlaceBet);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateCheckConditionforPlaceBet(int UserID, bool CheckConditionforPlaceBet, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateCheckConditionforPlaceBet(UserID, CheckConditionforPlaceBet, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateCheckConditionforPlaceBet(System.IAsyncResult result) {
            base.Channel.EndUpdateCheckConditionforPlaceBet(result);
        }
        
        private System.IAsyncResult OnBeginUpdateCheckConditionforPlaceBet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int UserID = ((int)(inValues[0]));
            bool CheckConditionforPlaceBet = ((bool)(inValues[1]));
            return this.BeginUpdateCheckConditionforPlaceBet(UserID, CheckConditionforPlaceBet, callback, asyncState);
        }
        
        private object[] OnEndUpdateCheckConditionforPlaceBet(System.IAsyncResult result) {
            this.EndUpdateCheckConditionforPlaceBet(result);
            return null;
        }
        
        private void OnUpdateCheckConditionforPlaceBetCompleted(object state) {
            if ((this.UpdateCheckConditionforPlaceBetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateCheckConditionforPlaceBetCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateCheckConditionforPlaceBetAsync(int UserID, bool CheckConditionforPlaceBet) {
            this.UpdateCheckConditionforPlaceBetAsync(UserID, CheckConditionforPlaceBet, null);
        }
        
        public void UpdateCheckConditionforPlaceBetAsync(int UserID, bool CheckConditionforPlaceBet, object userState) {
            if ((this.onBeginUpdateCheckConditionforPlaceBetDelegate == null)) {
                this.onBeginUpdateCheckConditionforPlaceBetDelegate = new BeginOperationDelegate(this.OnBeginUpdateCheckConditionforPlaceBet);
            }
            if ((this.onEndUpdateCheckConditionforPlaceBetDelegate == null)) {
                this.onEndUpdateCheckConditionforPlaceBetDelegate = new EndOperationDelegate(this.OnEndUpdateCheckConditionforPlaceBet);
            }
            if ((this.onUpdateCheckConditionforPlaceBetCompletedDelegate == null)) {
                this.onUpdateCheckConditionforPlaceBetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateCheckConditionforPlaceBetCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateCheckConditionforPlaceBetDelegate, new object[] {
                        UserID,
                        CheckConditionforPlaceBet}, this.onEndUpdateCheckConditionforPlaceBetDelegate, this.onUpdateCheckConditionforPlaceBetCompletedDelegate, userState);
        }
        
        public string GetTodayHorseRacing(int UserID, string EventTypeID) {
            return base.Channel.GetTodayHorseRacing(UserID, EventTypeID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetTodayHorseRacing(int UserID, string EventTypeID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTodayHorseRacing(UserID, EventTypeID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetTodayHorseRacing(System.IAsyncResult result) {
            return base.Channel.EndGetTodayHorseRacing(result);
        }
        
        private System.IAsyncResult OnBeginGetTodayHorseRacing(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int UserID = ((int)(inValues[0]));
            string EventTypeID = ((string)(inValues[1]));
            return this.BeginGetTodayHorseRacing(UserID, EventTypeID, callback, asyncState);
        }
        
        private object[] OnEndGetTodayHorseRacing(System.IAsyncResult result) {
            string retVal = this.EndGetTodayHorseRacing(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTodayHorseRacingCompleted(object state) {
            if ((this.GetTodayHorseRacingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTodayHorseRacingCompleted(this, new GetTodayHorseRacingCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTodayHorseRacingAsync(int UserID, string EventTypeID) {
            this.GetTodayHorseRacingAsync(UserID, EventTypeID, null);
        }
        
        public void GetTodayHorseRacingAsync(int UserID, string EventTypeID, object userState) {
            if ((this.onBeginGetTodayHorseRacingDelegate == null)) {
                this.onBeginGetTodayHorseRacingDelegate = new BeginOperationDelegate(this.OnBeginGetTodayHorseRacing);
            }
            if ((this.onEndGetTodayHorseRacingDelegate == null)) {
                this.onEndGetTodayHorseRacingDelegate = new EndOperationDelegate(this.OnEndGetTodayHorseRacing);
            }
            if ((this.onGetTodayHorseRacingCompletedDelegate == null)) {
                this.onGetTodayHorseRacingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTodayHorseRacingCompleted);
            }
            base.InvokeAsync(this.onBeginGetTodayHorseRacingDelegate, new object[] {
                        UserID,
                        EventTypeID}, this.onEndGetTodayHorseRacingDelegate, this.onGetTodayHorseRacingCompletedDelegate, userState);
        }
        
        public string GetTodayHorseRacingNew(int UserID) {
            return base.Channel.GetTodayHorseRacingNew(UserID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetTodayHorseRacingNew(int UserID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTodayHorseRacingNew(UserID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetTodayHorseRacingNew(System.IAsyncResult result) {
            return base.Channel.EndGetTodayHorseRacingNew(result);
        }
        
        private System.IAsyncResult OnBeginGetTodayHorseRacingNew(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int UserID = ((int)(inValues[0]));
            return this.BeginGetTodayHorseRacingNew(UserID, callback, asyncState);
        }
        
        private object[] OnEndGetTodayHorseRacingNew(System.IAsyncResult result) {
            string retVal = this.EndGetTodayHorseRacingNew(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTodayHorseRacingNewCompleted(object state) {
            if ((this.GetTodayHorseRacingNewCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTodayHorseRacingNewCompleted(this, new GetTodayHorseRacingNewCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTodayHorseRacingNewAsync(int UserID) {
            this.GetTodayHorseRacingNewAsync(UserID, null);
        }
        
        public void GetTodayHorseRacingNewAsync(int UserID, object userState) {
            if ((this.onBeginGetTodayHorseRacingNewDelegate == null)) {
                this.onBeginGetTodayHorseRacingNewDelegate = new BeginOperationDelegate(this.OnBeginGetTodayHorseRacingNew);
            }
            if ((this.onEndGetTodayHorseRacingNewDelegate == null)) {
                this.onEndGetTodayHorseRacingNewDelegate = new EndOperationDelegate(this.OnEndGetTodayHorseRacingNew);
            }
            if ((this.onGetTodayHorseRacingNewCompletedDelegate == null)) {
                this.onGetTodayHorseRacingNewCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTodayHorseRacingNewCompleted);
            }
            base.InvokeAsync(this.onBeginGetTodayHorseRacingNewDelegate, new object[] {
                        UserID}, this.onEndGetTodayHorseRacingNewDelegate, this.onGetTodayHorseRacingNewCompletedDelegate, userState);
        }
        
        public string GetDistinctmarketopened() {
            return base.Channel.GetDistinctmarketopened();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetDistinctmarketopened(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDistinctmarketopened(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetDistinctmarketopened(System.IAsyncResult result) {
            return base.Channel.EndGetDistinctmarketopened(result);
        }
        
        private System.IAsyncResult OnBeginGetDistinctmarketopened(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetDistinctmarketopened(callback, asyncState);
        }
        
        private object[] OnEndGetDistinctmarketopened(System.IAsyncResult result) {
            string retVal = this.EndGetDistinctmarketopened(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDistinctmarketopenedCompleted(object state) {
            if ((this.GetDistinctmarketopenedCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDistinctmarketopenedCompleted(this, new GetDistinctmarketopenedCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDistinctmarketopenedAsync() {
            this.GetDistinctmarketopenedAsync(null);
        }
        
        public void GetDistinctmarketopenedAsync(object userState) {
            if ((this.onBeginGetDistinctmarketopenedDelegate == null)) {
                this.onBeginGetDistinctmarketopenedDelegate = new BeginOperationDelegate(this.OnBeginGetDistinctmarketopened);
            }
            if ((this.onEndGetDistinctmarketopenedDelegate == null)) {
                this.onEndGetDistinctmarketopenedDelegate = new EndOperationDelegate(this.OnEndGetDistinctmarketopened);
            }
            if ((this.onGetDistinctmarketopenedCompletedDelegate == null)) {
                this.onGetDistinctmarketopenedCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDistinctmarketopenedCompleted);
            }
            base.InvokeAsync(this.onBeginGetDistinctmarketopenedDelegate, null, this.onEndGetDistinctmarketopenedDelegate, this.onGetDistinctmarketopenedCompletedDelegate, userState);
        }
        
        public void UpdateOddsData(string oddsdata, string Oddtype) {
            base.Channel.UpdateOddsData(oddsdata, Oddtype);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateOddsData(string oddsdata, string Oddtype, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateOddsData(oddsdata, Oddtype, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateOddsData(System.IAsyncResult result) {
            base.Channel.EndUpdateOddsData(result);
        }
        
        private System.IAsyncResult OnBeginUpdateOddsData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string oddsdata = ((string)(inValues[0]));
            string Oddtype = ((string)(inValues[1]));
            return this.BeginUpdateOddsData(oddsdata, Oddtype, callback, asyncState);
        }
        
        private object[] OnEndUpdateOddsData(System.IAsyncResult result) {
            this.EndUpdateOddsData(result);
            return null;
        }
        
        private void OnUpdateOddsDataCompleted(object state) {
            if ((this.UpdateOddsDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateOddsDataCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateOddsDataAsync(string oddsdata, string Oddtype) {
            this.UpdateOddsDataAsync(oddsdata, Oddtype, null);
        }
        
        public void UpdateOddsDataAsync(string oddsdata, string Oddtype, object userState) {
            if ((this.onBeginUpdateOddsDataDelegate == null)) {
                this.onBeginUpdateOddsDataDelegate = new BeginOperationDelegate(this.OnBeginUpdateOddsData);
            }
            if ((this.onEndUpdateOddsDataDelegate == null)) {
                this.onEndUpdateOddsDataDelegate = new EndOperationDelegate(this.OnEndUpdateOddsData);
            }
            if ((this.onUpdateOddsDataCompletedDelegate == null)) {
                this.onUpdateOddsDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateOddsDataCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateOddsDataDelegate, new object[] {
                        oddsdata,
                        Oddtype}, this.onEndUpdateOddsDataDelegate, this.onUpdateOddsDataCompletedDelegate, userState);
        }
        
        public int GetCommissionRatebyUserID(int UserID) {
            return base.Channel.GetCommissionRatebyUserID(UserID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetCommissionRatebyUserID(int UserID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCommissionRatebyUserID(UserID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndGetCommissionRatebyUserID(System.IAsyncResult result) {
            return base.Channel.EndGetCommissionRatebyUserID(result);
        }
        
        private System.IAsyncResult OnBeginGetCommissionRatebyUserID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int UserID = ((int)(inValues[0]));
            return this.BeginGetCommissionRatebyUserID(UserID, callback, asyncState);
        }
        
        private object[] OnEndGetCommissionRatebyUserID(System.IAsyncResult result) {
            int retVal = this.EndGetCommissionRatebyUserID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCommissionRatebyUserIDCompleted(object state) {
            if ((this.GetCommissionRatebyUserIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCommissionRatebyUserIDCompleted(this, new GetCommissionRatebyUserIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCommissionRatebyUserIDAsync(int UserID) {
            this.GetCommissionRatebyUserIDAsync(UserID, null);
        }
        
        public void GetCommissionRatebyUserIDAsync(int UserID, object userState) {
            if ((this.onBeginGetCommissionRatebyUserIDDelegate == null)) {
                this.onBeginGetCommissionRatebyUserIDDelegate = new BeginOperationDelegate(this.OnBeginGetCommissionRatebyUserID);
            }
            if ((this.onEndGetCommissionRatebyUserIDDelegate == null)) {
                this.onEndGetCommissionRatebyUserIDDelegate = new EndOperationDelegate(this.OnEndGetCommissionRatebyUserID);
            }
            if ((this.onGetCommissionRatebyUserIDCompletedDelegate == null)) {
                this.onGetCommissionRatebyUserIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCommissionRatebyUserIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetCommissionRatebyUserIDDelegate, new object[] {
                        UserID}, this.onEndGetCommissionRatebyUserIDDelegate, this.onGetCommissionRatebyUserIDCompletedDelegate, userState);
        }
        
        public void UpdateUserPhoneandNamebyUserId(int userId, string Name, string Phone) {
            base.Channel.UpdateUserPhoneandNamebyUserId(userId, Name, Phone);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateUserPhoneandNamebyUserId(int userId, string Name, string Phone, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateUserPhoneandNamebyUserId(userId, Name, Phone, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateUserPhoneandNamebyUserId(System.IAsyncResult result) {
            base.Channel.EndUpdateUserPhoneandNamebyUserId(result);
        }
        
        private System.IAsyncResult OnBeginUpdateUserPhoneandNamebyUserId(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userId = ((int)(inValues[0]));
            string Name = ((string)(inValues[1]));
            string Phone = ((string)(inValues[2]));
            return this.BeginUpdateUserPhoneandNamebyUserId(userId, Name, Phone, callback, asyncState);
        }
        
        private object[] OnEndUpdateUserPhoneandNamebyUserId(System.IAsyncResult result) {
            this.EndUpdateUserPhoneandNamebyUserId(result);
            return null;
        }
        
        private void OnUpdateUserPhoneandNamebyUserIdCompleted(object state) {
            if ((this.UpdateUserPhoneandNamebyUserIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateUserPhoneandNamebyUserIdCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateUserPhoneandNamebyUserIdAsync(int userId, string Name, string Phone) {
            this.UpdateUserPhoneandNamebyUserIdAsync(userId, Name, Phone, null);
        }
        
        public void UpdateUserPhoneandNamebyUserIdAsync(int userId, string Name, string Phone, object userState) {
            if ((this.onBeginUpdateUserPhoneandNamebyUserIdDelegate == null)) {
                this.onBeginUpdateUserPhoneandNamebyUserIdDelegate = new BeginOperationDelegate(this.OnBeginUpdateUserPhoneandNamebyUserId);
            }
            if ((this.onEndUpdateUserPhoneandNamebyUserIdDelegate == null)) {
                this.onEndUpdateUserPhoneandNamebyUserIdDelegate = new EndOperationDelegate(this.OnEndUpdateUserPhoneandNamebyUserId);
            }
            if ((this.onUpdateUserPhoneandNamebyUserIdCompletedDelegate == null)) {
                this.onUpdateUserPhoneandNamebyUserIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateUserPhoneandNamebyUserIdCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateUserPhoneandNamebyUserIdDelegate, new object[] {
                        userId,
                        Name,
                        Phone}, this.onEndUpdateUserPhoneandNamebyUserIdDelegate, this.onUpdateUserPhoneandNamebyUserIdCompletedDelegate, userState);
        }
        
        public string GetAccountsDatabyEventtypeuserIDandDateRange(int UserID, string From, string To, string Password) {
            return base.Channel.GetAccountsDatabyEventtypeuserIDandDateRange(UserID, From, To, Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAccountsDatabyEventtypeuserIDandDateRange(int UserID, string From, string To, string Password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAccountsDatabyEventtypeuserIDandDateRange(UserID, From, To, Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetAccountsDatabyEventtypeuserIDandDateRange(System.IAsyncResult result) {
            return base.Channel.EndGetAccountsDatabyEventtypeuserIDandDateRange(result);
        }
        
        private System.IAsyncResult OnBeginGetAccountsDatabyEventtypeuserIDandDateRange(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int UserID = ((int)(inValues[0]));
            string From = ((string)(inValues[1]));
            string To = ((string)(inValues[2]));
            string Password = ((string)(inValues[3]));
            return this.BeginGetAccountsDatabyEventtypeuserIDandDateRange(UserID, From, To, Password, callback, asyncState);
        }
        
        private object[] OnEndGetAccountsDatabyEventtypeuserIDandDateRange(System.IAsyncResult result) {
            string retVal = this.EndGetAccountsDatabyEventtypeuserIDandDateRange(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAccountsDatabyEventtypeuserIDandDateRangeCompleted(object state) {
            if ((this.GetAccountsDatabyEventtypeuserIDandDateRangeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAccountsDatabyEventtypeuserIDandDateRangeCompleted(this, new GetAccountsDatabyEventtypeuserIDandDateRangeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAccountsDatabyEventtypeuserIDandDateRangeAsync(int UserID, string From, string To, string Password) {
            this.GetAccountsDatabyEventtypeuserIDandDateRangeAsync(UserID, From, To, Password, null);
        }
        
        public void GetAccountsDatabyEventtypeuserIDandDateRangeAsync(int UserID, string From, string To, string Password, object userState) {
            if ((this.onBeginGetAccountsDatabyEventtypeuserIDandDateRangeDelegate == null)) {
                this.onBeginGetAccountsDatabyEventtypeuserIDandDateRangeDelegate = new BeginOperationDelegate(this.OnBeginGetAccountsDatabyEventtypeuserIDandDateRange);
            }
            if ((this.onEndGetAccountsDatabyEventtypeuserIDandDateRangeDelegate == null)) {
                this.onEndGetAccountsDatabyEventtypeuserIDandDateRangeDelegate = new EndOperationDelegate(this.OnEndGetAccountsDatabyEventtypeuserIDandDateRange);
            }
            if ((this.onGetAccountsDatabyEventtypeuserIDandDateRangeCompletedDelegate == null)) {
                this.onGetAccountsDatabyEventtypeuserIDandDateRangeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAccountsDatabyEventtypeuserIDandDateRangeCompleted);
            }
            base.InvokeAsync(this.onBeginGetAccountsDatabyEventtypeuserIDandDateRangeDelegate, new object[] {
                        UserID,
                        From,
                        To,
                        Password}, this.onEndGetAccountsDatabyEventtypeuserIDandDateRangeDelegate, this.onGetAccountsDatabyEventtypeuserIDandDateRangeCompletedDelegate, userState);
        }
        
        public string GetDatabyAgentIDForCommisionandDateRange(int UserID, string From, string To, string Password) {
            return base.Channel.GetDatabyAgentIDForCommisionandDateRange(UserID, From, To, Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetDatabyAgentIDForCommisionandDateRange(int UserID, string From, string To, string Password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDatabyAgentIDForCommisionandDateRange(UserID, From, To, Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetDatabyAgentIDForCommisionandDateRange(System.IAsyncResult result) {
            return base.Channel.EndGetDatabyAgentIDForCommisionandDateRange(result);
        }
        
        private System.IAsyncResult OnBeginGetDatabyAgentIDForCommisionandDateRange(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int UserID = ((int)(inValues[0]));
            string From = ((string)(inValues[1]));
            string To = ((string)(inValues[2]));
            string Password = ((string)(inValues[3]));
            return this.BeginGetDatabyAgentIDForCommisionandDateRange(UserID, From, To, Password, callback, asyncState);
        }
        
        private object[] OnEndGetDatabyAgentIDForCommisionandDateRange(System.IAsyncResult result) {
            string retVal = this.EndGetDatabyAgentIDForCommisionandDateRange(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDatabyAgentIDForCommisionandDateRangeCompleted(object state) {
            if ((this.GetDatabyAgentIDForCommisionandDateRangeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDatabyAgentIDForCommisionandDateRangeCompleted(this, new GetDatabyAgentIDForCommisionandDateRangeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDatabyAgentIDForCommisionandDateRangeAsync(int UserID, string From, string To, string Password) {
            this.GetDatabyAgentIDForCommisionandDateRangeAsync(UserID, From, To, Password, null);
        }
        
        public void GetDatabyAgentIDForCommisionandDateRangeAsync(int UserID, string From, string To, string Password, object userState) {
            if ((this.onBeginGetDatabyAgentIDForCommisionandDateRangeDelegate == null)) {
                this.onBeginGetDatabyAgentIDForCommisionandDateRangeDelegate = new BeginOperationDelegate(this.OnBeginGetDatabyAgentIDForCommisionandDateRange);
            }
            if ((this.onEndGetDatabyAgentIDForCommisionandDateRangeDelegate == null)) {
                this.onEndGetDatabyAgentIDForCommisionandDateRangeDelegate = new EndOperationDelegate(this.OnEndGetDatabyAgentIDForCommisionandDateRange);
            }
            if ((this.onGetDatabyAgentIDForCommisionandDateRangeCompletedDelegate == null)) {
                this.onGetDatabyAgentIDForCommisionandDateRangeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDatabyAgentIDForCommisionandDateRangeCompleted);
            }
            base.InvokeAsync(this.onBeginGetDatabyAgentIDForCommisionandDateRangeDelegate, new object[] {
                        UserID,
                        From,
                        To,
                        Password}, this.onEndGetDatabyAgentIDForCommisionandDateRangeDelegate, this.onGetDatabyAgentIDForCommisionandDateRangeCompletedDelegate, userState);
        }
        
        public string GetDatabyAgentIDForCommisionandDateRangeByEventtype(int UserID, string From, string To, string Password) {
            return base.Channel.GetDatabyAgentIDForCommisionandDateRangeByEventtype(UserID, From, To, Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetDatabyAgentIDForCommisionandDateRangeByEventtype(int UserID, string From, string To, string Password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDatabyAgentIDForCommisionandDateRangeByEventtype(UserID, From, To, Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetDatabyAgentIDForCommisionandDateRangeByEventtype(System.IAsyncResult result) {
            return base.Channel.EndGetDatabyAgentIDForCommisionandDateRangeByEventtype(result);
        }
        
        private System.IAsyncResult OnBeginGetDatabyAgentIDForCommisionandDateRangeByEventtype(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int UserID = ((int)(inValues[0]));
            string From = ((string)(inValues[1]));
            string To = ((string)(inValues[2]));
            string Password = ((string)(inValues[3]));
            return this.BeginGetDatabyAgentIDForCommisionandDateRangeByEventtype(UserID, From, To, Password, callback, asyncState);
        }
        
        private object[] OnEndGetDatabyAgentIDForCommisionandDateRangeByEventtype(System.IAsyncResult result) {
            string retVal = this.EndGetDatabyAgentIDForCommisionandDateRangeByEventtype(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDatabyAgentIDForCommisionandDateRangeByEventtypeCompleted(object state) {
            if ((this.GetDatabyAgentIDForCommisionandDateRangeByEventtypeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDatabyAgentIDForCommisionandDateRangeByEventtypeCompleted(this, new GetDatabyAgentIDForCommisionandDateRangeByEventtypeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDatabyAgentIDForCommisionandDateRangeByEventtypeAsync(int UserID, string From, string To, string Password) {
            this.GetDatabyAgentIDForCommisionandDateRangeByEventtypeAsync(UserID, From, To, Password, null);
        }
        
        public void GetDatabyAgentIDForCommisionandDateRangeByEventtypeAsync(int UserID, string From, string To, string Password, object userState) {
            if ((this.onBeginGetDatabyAgentIDForCommisionandDateRangeByEventtypeDelegate == null)) {
                this.onBeginGetDatabyAgentIDForCommisionandDateRangeByEventtypeDelegate = new BeginOperationDelegate(this.OnBeginGetDatabyAgentIDForCommisionandDateRangeByEventtype);
            }
            if ((this.onEndGetDatabyAgentIDForCommisionandDateRangeByEventtypeDelegate == null)) {
                this.onEndGetDatabyAgentIDForCommisionandDateRangeByEventtypeDelegate = new EndOperationDelegate(this.OnEndGetDatabyAgentIDForCommisionandDateRangeByEventtype);
            }
            if ((this.onGetDatabyAgentIDForCommisionandDateRangeByEventtypeCompletedDelegate == null)) {
                this.onGetDatabyAgentIDForCommisionandDateRangeByEventtypeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDatabyAgentIDForCommisionandDateRangeByEventtypeCompleted);
            }
            base.InvokeAsync(this.onBeginGetDatabyAgentIDForCommisionandDateRangeByEventtypeDelegate, new object[] {
                        UserID,
                        From,
                        To,
                        Password}, this.onEndGetDatabyAgentIDForCommisionandDateRangeByEventtypeDelegate, this.onGetDatabyAgentIDForCommisionandDateRangeByEventtypeCompletedDelegate, userState);
        }
        
        public string UserAccountsGetCommission(int UserID, string From, string To, string Password) {
            return base.Channel.UserAccountsGetCommission(UserID, From, To, Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUserAccountsGetCommission(int UserID, string From, string To, string Password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUserAccountsGetCommission(UserID, From, To, Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndUserAccountsGetCommission(System.IAsyncResult result) {
            return base.Channel.EndUserAccountsGetCommission(result);
        }
        
        private System.IAsyncResult OnBeginUserAccountsGetCommission(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int UserID = ((int)(inValues[0]));
            string From = ((string)(inValues[1]));
            string To = ((string)(inValues[2]));
            string Password = ((string)(inValues[3]));
            return this.BeginUserAccountsGetCommission(UserID, From, To, Password, callback, asyncState);
        }
        
        private object[] OnEndUserAccountsGetCommission(System.IAsyncResult result) {
            string retVal = this.EndUserAccountsGetCommission(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUserAccountsGetCommissionCompleted(object state) {
            if ((this.UserAccountsGetCommissionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UserAccountsGetCommissionCompleted(this, new UserAccountsGetCommissionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UserAccountsGetCommissionAsync(int UserID, string From, string To, string Password) {
            this.UserAccountsGetCommissionAsync(UserID, From, To, Password, null);
        }
        
        public void UserAccountsGetCommissionAsync(int UserID, string From, string To, string Password, object userState) {
            if ((this.onBeginUserAccountsGetCommissionDelegate == null)) {
                this.onBeginUserAccountsGetCommissionDelegate = new BeginOperationDelegate(this.OnBeginUserAccountsGetCommission);
            }
            if ((this.onEndUserAccountsGetCommissionDelegate == null)) {
                this.onEndUserAccountsGetCommissionDelegate = new EndOperationDelegate(this.OnEndUserAccountsGetCommission);
            }
            if ((this.onUserAccountsGetCommissionCompletedDelegate == null)) {
                this.onUserAccountsGetCommissionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUserAccountsGetCommissionCompleted);
            }
            base.InvokeAsync(this.onBeginUserAccountsGetCommissionDelegate, new object[] {
                        UserID,
                        From,
                        To,
                        Password}, this.onEndUserAccountsGetCommissionDelegate, this.onUserAccountsGetCommissionCompletedDelegate, userState);
        }
        
        public string GetEventTypeNamebyMarketID(string marketBookId) {
            return base.Channel.GetEventTypeNamebyMarketID(marketBookId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetEventTypeNamebyMarketID(string marketBookId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetEventTypeNamebyMarketID(marketBookId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetEventTypeNamebyMarketID(System.IAsyncResult result) {
            return base.Channel.EndGetEventTypeNamebyMarketID(result);
        }
        
        private System.IAsyncResult OnBeginGetEventTypeNamebyMarketID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string marketBookId = ((string)(inValues[0]));
            return this.BeginGetEventTypeNamebyMarketID(marketBookId, callback, asyncState);
        }
        
        private object[] OnEndGetEventTypeNamebyMarketID(System.IAsyncResult result) {
            string retVal = this.EndGetEventTypeNamebyMarketID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetEventTypeNamebyMarketIDCompleted(object state) {
            if ((this.GetEventTypeNamebyMarketIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetEventTypeNamebyMarketIDCompleted(this, new GetEventTypeNamebyMarketIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetEventTypeNamebyMarketIDAsync(string marketBookId) {
            this.GetEventTypeNamebyMarketIDAsync(marketBookId, null);
        }
        
        public void GetEventTypeNamebyMarketIDAsync(string marketBookId, object userState) {
            if ((this.onBeginGetEventTypeNamebyMarketIDDelegate == null)) {
                this.onBeginGetEventTypeNamebyMarketIDDelegate = new BeginOperationDelegate(this.OnBeginGetEventTypeNamebyMarketID);
            }
            if ((this.onEndGetEventTypeNamebyMarketIDDelegate == null)) {
                this.onEndGetEventTypeNamebyMarketIDDelegate = new EndOperationDelegate(this.OnEndGetEventTypeNamebyMarketID);
            }
            if ((this.onGetEventTypeNamebyMarketIDCompletedDelegate == null)) {
                this.onGetEventTypeNamebyMarketIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetEventTypeNamebyMarketIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetEventTypeNamebyMarketIDDelegate, new object[] {
                        marketBookId}, this.onEndGetEventTypeNamebyMarketIDDelegate, this.onGetEventTypeNamebyMarketIDCompletedDelegate, userState);
        }
        
        public void UpdateLiveOddbyID(long ID, string liveOdd, string Password) {
            base.Channel.UpdateLiveOddbyID(ID, liveOdd, Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateLiveOddbyID(long ID, string liveOdd, string Password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateLiveOddbyID(ID, liveOdd, Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateLiveOddbyID(System.IAsyncResult result) {
            base.Channel.EndUpdateLiveOddbyID(result);
        }
        
        private System.IAsyncResult OnBeginUpdateLiveOddbyID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long ID = ((long)(inValues[0]));
            string liveOdd = ((string)(inValues[1]));
            string Password = ((string)(inValues[2]));
            return this.BeginUpdateLiveOddbyID(ID, liveOdd, Password, callback, asyncState);
        }
        
        private object[] OnEndUpdateLiveOddbyID(System.IAsyncResult result) {
            this.EndUpdateLiveOddbyID(result);
            return null;
        }
        
        private void OnUpdateLiveOddbyIDCompleted(object state) {
            if ((this.UpdateLiveOddbyIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateLiveOddbyIDCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateLiveOddbyIDAsync(long ID, string liveOdd, string Password) {
            this.UpdateLiveOddbyIDAsync(ID, liveOdd, Password, null);
        }
        
        public void UpdateLiveOddbyIDAsync(long ID, string liveOdd, string Password, object userState) {
            if ((this.onBeginUpdateLiveOddbyIDDelegate == null)) {
                this.onBeginUpdateLiveOddbyIDDelegate = new BeginOperationDelegate(this.OnBeginUpdateLiveOddbyID);
            }
            if ((this.onEndUpdateLiveOddbyIDDelegate == null)) {
                this.onEndUpdateLiveOddbyIDDelegate = new EndOperationDelegate(this.OnEndUpdateLiveOddbyID);
            }
            if ((this.onUpdateLiveOddbyIDCompletedDelegate == null)) {
                this.onUpdateLiveOddbyIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateLiveOddbyIDCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateLiveOddbyIDDelegate, new object[] {
                        ID,
                        liveOdd,
                        Password}, this.onEndUpdateLiveOddbyIDDelegate, this.onUpdateLiveOddbyIDCompletedDelegate, userState);
        }
        
        public void UpdateUserOddbyID(long ID, string UserOdd, string Password) {
            base.Channel.UpdateUserOddbyID(ID, UserOdd, Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateUserOddbyID(long ID, string UserOdd, string Password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateUserOddbyID(ID, UserOdd, Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateUserOddbyID(System.IAsyncResult result) {
            base.Channel.EndUpdateUserOddbyID(result);
        }
        
        private System.IAsyncResult OnBeginUpdateUserOddbyID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long ID = ((long)(inValues[0]));
            string UserOdd = ((string)(inValues[1]));
            string Password = ((string)(inValues[2]));
            return this.BeginUpdateUserOddbyID(ID, UserOdd, Password, callback, asyncState);
        }
        
        private object[] OnEndUpdateUserOddbyID(System.IAsyncResult result) {
            this.EndUpdateUserOddbyID(result);
            return null;
        }
        
        private void OnUpdateUserOddbyIDCompleted(object state) {
            if ((this.UpdateUserOddbyIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateUserOddbyIDCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateUserOddbyIDAsync(long ID, string UserOdd, string Password) {
            this.UpdateUserOddbyIDAsync(ID, UserOdd, Password, null);
        }
        
        public void UpdateUserOddbyIDAsync(long ID, string UserOdd, string Password, object userState) {
            if ((this.onBeginUpdateUserOddbyIDDelegate == null)) {
                this.onBeginUpdateUserOddbyIDDelegate = new BeginOperationDelegate(this.OnBeginUpdateUserOddbyID);
            }
            if ((this.onEndUpdateUserOddbyIDDelegate == null)) {
                this.onEndUpdateUserOddbyIDDelegate = new EndOperationDelegate(this.OnEndUpdateUserOddbyID);
            }
            if ((this.onUpdateUserOddbyIDCompletedDelegate == null)) {
                this.onUpdateUserOddbyIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateUserOddbyIDCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateUserOddbyIDDelegate, new object[] {
                        ID,
                        UserOdd,
                        Password}, this.onEndUpdateUserOddbyIDDelegate, this.onUpdateUserOddbyIDCompletedDelegate, userState);
        }
        
        public string GetAllowedMarketsbyUserID(int UserID) {
            return base.Channel.GetAllowedMarketsbyUserID(UserID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAllowedMarketsbyUserID(int UserID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllowedMarketsbyUserID(UserID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetAllowedMarketsbyUserID(System.IAsyncResult result) {
            return base.Channel.EndGetAllowedMarketsbyUserID(result);
        }
        
        private System.IAsyncResult OnBeginGetAllowedMarketsbyUserID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int UserID = ((int)(inValues[0]));
            return this.BeginGetAllowedMarketsbyUserID(UserID, callback, asyncState);
        }
        
        private object[] OnEndGetAllowedMarketsbyUserID(System.IAsyncResult result) {
            string retVal = this.EndGetAllowedMarketsbyUserID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllowedMarketsbyUserIDCompleted(object state) {
            if ((this.GetAllowedMarketsbyUserIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllowedMarketsbyUserIDCompleted(this, new GetAllowedMarketsbyUserIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllowedMarketsbyUserIDAsync(int UserID) {
            this.GetAllowedMarketsbyUserIDAsync(UserID, null);
        }
        
        public void GetAllowedMarketsbyUserIDAsync(int UserID, object userState) {
            if ((this.onBeginGetAllowedMarketsbyUserIDDelegate == null)) {
                this.onBeginGetAllowedMarketsbyUserIDDelegate = new BeginOperationDelegate(this.OnBeginGetAllowedMarketsbyUserID);
            }
            if ((this.onEndGetAllowedMarketsbyUserIDDelegate == null)) {
                this.onEndGetAllowedMarketsbyUserIDDelegate = new EndOperationDelegate(this.OnEndGetAllowedMarketsbyUserID);
            }
            if ((this.onGetAllowedMarketsbyUserIDCompletedDelegate == null)) {
                this.onGetAllowedMarketsbyUserIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllowedMarketsbyUserIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllowedMarketsbyUserIDDelegate, new object[] {
                        UserID}, this.onEndGetAllowedMarketsbyUserIDDelegate, this.onGetAllowedMarketsbyUserIDCompletedDelegate, userState);
        }
        
        public void UpdateAllowedMarketsbyUserID(bool isCricketMatchOddsAllowedForBet, bool isCricketTiedMatchAllowedForBet, bool isCricketCompletedMatchAllowedForBet, bool isCricketInningsRunsAllowedForBet, bool isSoccerAllowedForBet, bool isTennisAllowedForBet, bool isHorseRaceWinAllowedForBet, bool isHorseRacePlaceAllowedForBet, bool isGrayHoundRaceWinAllowedForBet, bool isGrayHoundRacePlaceAllowedForBet, int UserID, bool isWinnerMarketAllowedForBet, string Password, bool isFancyAllowed) {
            base.Channel.UpdateAllowedMarketsbyUserID(isCricketMatchOddsAllowedForBet, isCricketTiedMatchAllowedForBet, isCricketCompletedMatchAllowedForBet, isCricketInningsRunsAllowedForBet, isSoccerAllowedForBet, isTennisAllowedForBet, isHorseRaceWinAllowedForBet, isHorseRacePlaceAllowedForBet, isGrayHoundRaceWinAllowedForBet, isGrayHoundRacePlaceAllowedForBet, UserID, isWinnerMarketAllowedForBet, Password, isFancyAllowed);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateAllowedMarketsbyUserID(
                    bool isCricketMatchOddsAllowedForBet, 
                    bool isCricketTiedMatchAllowedForBet, 
                    bool isCricketCompletedMatchAllowedForBet, 
                    bool isCricketInningsRunsAllowedForBet, 
                    bool isSoccerAllowedForBet, 
                    bool isTennisAllowedForBet, 
                    bool isHorseRaceWinAllowedForBet, 
                    bool isHorseRacePlaceAllowedForBet, 
                    bool isGrayHoundRaceWinAllowedForBet, 
                    bool isGrayHoundRacePlaceAllowedForBet, 
                    int UserID, 
                    bool isWinnerMarketAllowedForBet, 
                    string Password, 
                    bool isFancyAllowed, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return base.Channel.BeginUpdateAllowedMarketsbyUserID(isCricketMatchOddsAllowedForBet, isCricketTiedMatchAllowedForBet, isCricketCompletedMatchAllowedForBet, isCricketInningsRunsAllowedForBet, isSoccerAllowedForBet, isTennisAllowedForBet, isHorseRaceWinAllowedForBet, isHorseRacePlaceAllowedForBet, isGrayHoundRaceWinAllowedForBet, isGrayHoundRacePlaceAllowedForBet, UserID, isWinnerMarketAllowedForBet, Password, isFancyAllowed, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateAllowedMarketsbyUserID(System.IAsyncResult result) {
            base.Channel.EndUpdateAllowedMarketsbyUserID(result);
        }
        
        private System.IAsyncResult OnBeginUpdateAllowedMarketsbyUserID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            bool isCricketMatchOddsAllowedForBet = ((bool)(inValues[0]));
            bool isCricketTiedMatchAllowedForBet = ((bool)(inValues[1]));
            bool isCricketCompletedMatchAllowedForBet = ((bool)(inValues[2]));
            bool isCricketInningsRunsAllowedForBet = ((bool)(inValues[3]));
            bool isSoccerAllowedForBet = ((bool)(inValues[4]));
            bool isTennisAllowedForBet = ((bool)(inValues[5]));
            bool isHorseRaceWinAllowedForBet = ((bool)(inValues[6]));
            bool isHorseRacePlaceAllowedForBet = ((bool)(inValues[7]));
            bool isGrayHoundRaceWinAllowedForBet = ((bool)(inValues[8]));
            bool isGrayHoundRacePlaceAllowedForBet = ((bool)(inValues[9]));
            int UserID = ((int)(inValues[10]));
            bool isWinnerMarketAllowedForBet = ((bool)(inValues[11]));
            string Password = ((string)(inValues[12]));
            bool isFancyAllowed = ((bool)(inValues[13]));
            return this.BeginUpdateAllowedMarketsbyUserID(isCricketMatchOddsAllowedForBet, isCricketTiedMatchAllowedForBet, isCricketCompletedMatchAllowedForBet, isCricketInningsRunsAllowedForBet, isSoccerAllowedForBet, isTennisAllowedForBet, isHorseRaceWinAllowedForBet, isHorseRacePlaceAllowedForBet, isGrayHoundRaceWinAllowedForBet, isGrayHoundRacePlaceAllowedForBet, UserID, isWinnerMarketAllowedForBet, Password, isFancyAllowed, callback, asyncState);
        }
        
        private object[] OnEndUpdateAllowedMarketsbyUserID(System.IAsyncResult result) {
            this.EndUpdateAllowedMarketsbyUserID(result);
            return null;
        }
        
        private void OnUpdateAllowedMarketsbyUserIDCompleted(object state) {
            if ((this.UpdateAllowedMarketsbyUserIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateAllowedMarketsbyUserIDCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateAllowedMarketsbyUserIDAsync(bool isCricketMatchOddsAllowedForBet, bool isCricketTiedMatchAllowedForBet, bool isCricketCompletedMatchAllowedForBet, bool isCricketInningsRunsAllowedForBet, bool isSoccerAllowedForBet, bool isTennisAllowedForBet, bool isHorseRaceWinAllowedForBet, bool isHorseRacePlaceAllowedForBet, bool isGrayHoundRaceWinAllowedForBet, bool isGrayHoundRacePlaceAllowedForBet, int UserID, bool isWinnerMarketAllowedForBet, string Password, bool isFancyAllowed) {
            this.UpdateAllowedMarketsbyUserIDAsync(isCricketMatchOddsAllowedForBet, isCricketTiedMatchAllowedForBet, isCricketCompletedMatchAllowedForBet, isCricketInningsRunsAllowedForBet, isSoccerAllowedForBet, isTennisAllowedForBet, isHorseRaceWinAllowedForBet, isHorseRacePlaceAllowedForBet, isGrayHoundRaceWinAllowedForBet, isGrayHoundRacePlaceAllowedForBet, UserID, isWinnerMarketAllowedForBet, Password, isFancyAllowed, null);
        }
        
        public void UpdateAllowedMarketsbyUserIDAsync(bool isCricketMatchOddsAllowedForBet, bool isCricketTiedMatchAllowedForBet, bool isCricketCompletedMatchAllowedForBet, bool isCricketInningsRunsAllowedForBet, bool isSoccerAllowedForBet, bool isTennisAllowedForBet, bool isHorseRaceWinAllowedForBet, bool isHorseRacePlaceAllowedForBet, bool isGrayHoundRaceWinAllowedForBet, bool isGrayHoundRacePlaceAllowedForBet, int UserID, bool isWinnerMarketAllowedForBet, string Password, bool isFancyAllowed, object userState) {
            if ((this.onBeginUpdateAllowedMarketsbyUserIDDelegate == null)) {
                this.onBeginUpdateAllowedMarketsbyUserIDDelegate = new BeginOperationDelegate(this.OnBeginUpdateAllowedMarketsbyUserID);
            }
            if ((this.onEndUpdateAllowedMarketsbyUserIDDelegate == null)) {
                this.onEndUpdateAllowedMarketsbyUserIDDelegate = new EndOperationDelegate(this.OnEndUpdateAllowedMarketsbyUserID);
            }
            if ((this.onUpdateAllowedMarketsbyUserIDCompletedDelegate == null)) {
                this.onUpdateAllowedMarketsbyUserIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateAllowedMarketsbyUserIDCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateAllowedMarketsbyUserIDDelegate, new object[] {
                        isCricketMatchOddsAllowedForBet,
                        isCricketTiedMatchAllowedForBet,
                        isCricketCompletedMatchAllowedForBet,
                        isCricketInningsRunsAllowedForBet,
                        isSoccerAllowedForBet,
                        isTennisAllowedForBet,
                        isHorseRaceWinAllowedForBet,
                        isHorseRacePlaceAllowedForBet,
                        isGrayHoundRaceWinAllowedForBet,
                        isGrayHoundRacePlaceAllowedForBet,
                        UserID,
                        isWinnerMarketAllowedForBet,
                        Password,
                        isFancyAllowed}, this.onEndUpdateAllowedMarketsbyUserIDDelegate, this.onUpdateAllowedMarketsbyUserIDCompletedDelegate, userState);
        }
        
        public globaltraders.UserServiceReference.SP_Users_GetCommissionAccountIDandBookAccountID_Result GetCommissionaccountIdandBookAccountbyUserID(int UserID) {
            return base.Channel.GetCommissionaccountIdandBookAccountbyUserID(UserID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetCommissionaccountIdandBookAccountbyUserID(int UserID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCommissionaccountIdandBookAccountbyUserID(UserID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public globaltraders.UserServiceReference.SP_Users_GetCommissionAccountIDandBookAccountID_Result EndGetCommissionaccountIdandBookAccountbyUserID(System.IAsyncResult result) {
            return base.Channel.EndGetCommissionaccountIdandBookAccountbyUserID(result);
        }
        
        private System.IAsyncResult OnBeginGetCommissionaccountIdandBookAccountbyUserID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int UserID = ((int)(inValues[0]));
            return this.BeginGetCommissionaccountIdandBookAccountbyUserID(UserID, callback, asyncState);
        }
        
        private object[] OnEndGetCommissionaccountIdandBookAccountbyUserID(System.IAsyncResult result) {
            globaltraders.UserServiceReference.SP_Users_GetCommissionAccountIDandBookAccountID_Result retVal = this.EndGetCommissionaccountIdandBookAccountbyUserID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCommissionaccountIdandBookAccountbyUserIDCompleted(object state) {
            if ((this.GetCommissionaccountIdandBookAccountbyUserIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCommissionaccountIdandBookAccountbyUserIDCompleted(this, new GetCommissionaccountIdandBookAccountbyUserIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCommissionaccountIdandBookAccountbyUserIDAsync(int UserID) {
            this.GetCommissionaccountIdandBookAccountbyUserIDAsync(UserID, null);
        }
        
        public void GetCommissionaccountIdandBookAccountbyUserIDAsync(int UserID, object userState) {
            if ((this.onBeginGetCommissionaccountIdandBookAccountbyUserIDDelegate == null)) {
                this.onBeginGetCommissionaccountIdandBookAccountbyUserIDDelegate = new BeginOperationDelegate(this.OnBeginGetCommissionaccountIdandBookAccountbyUserID);
            }
            if ((this.onEndGetCommissionaccountIdandBookAccountbyUserIDDelegate == null)) {
                this.onEndGetCommissionaccountIdandBookAccountbyUserIDDelegate = new EndOperationDelegate(this.OnEndGetCommissionaccountIdandBookAccountbyUserID);
            }
            if ((this.onGetCommissionaccountIdandBookAccountbyUserIDCompletedDelegate == null)) {
                this.onGetCommissionaccountIdandBookAccountbyUserIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCommissionaccountIdandBookAccountbyUserIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetCommissionaccountIdandBookAccountbyUserIDDelegate, new object[] {
                        UserID}, this.onEndGetCommissionaccountIdandBookAccountbyUserIDDelegate, this.onGetCommissionaccountIdandBookAccountbyUserIDCompletedDelegate, userState);
        }
        
        public globaltraders.UserServiceReference.SP_Users_GetReferrerRateandReferrerIDbyUserID_Result GetReferrerRateandIDbyUserID(int UserID) {
            return base.Channel.GetReferrerRateandIDbyUserID(UserID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetReferrerRateandIDbyUserID(int UserID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetReferrerRateandIDbyUserID(UserID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public globaltraders.UserServiceReference.SP_Users_GetReferrerRateandReferrerIDbyUserID_Result EndGetReferrerRateandIDbyUserID(System.IAsyncResult result) {
            return base.Channel.EndGetReferrerRateandIDbyUserID(result);
        }
        
        private System.IAsyncResult OnBeginGetReferrerRateandIDbyUserID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int UserID = ((int)(inValues[0]));
            return this.BeginGetReferrerRateandIDbyUserID(UserID, callback, asyncState);
        }
        
        private object[] OnEndGetReferrerRateandIDbyUserID(System.IAsyncResult result) {
            globaltraders.UserServiceReference.SP_Users_GetReferrerRateandReferrerIDbyUserID_Result retVal = this.EndGetReferrerRateandIDbyUserID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetReferrerRateandIDbyUserIDCompleted(object state) {
            if ((this.GetReferrerRateandIDbyUserIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetReferrerRateandIDbyUserIDCompleted(this, new GetReferrerRateandIDbyUserIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetReferrerRateandIDbyUserIDAsync(int UserID) {
            this.GetReferrerRateandIDbyUserIDAsync(UserID, null);
        }
        
        public void GetReferrerRateandIDbyUserIDAsync(int UserID, object userState) {
            if ((this.onBeginGetReferrerRateandIDbyUserIDDelegate == null)) {
                this.onBeginGetReferrerRateandIDbyUserIDDelegate = new BeginOperationDelegate(this.OnBeginGetReferrerRateandIDbyUserID);
            }
            if ((this.onEndGetReferrerRateandIDbyUserIDDelegate == null)) {
                this.onEndGetReferrerRateandIDbyUserIDDelegate = new EndOperationDelegate(this.OnEndGetReferrerRateandIDbyUserID);
            }
            if ((this.onGetReferrerRateandIDbyUserIDCompletedDelegate == null)) {
                this.onGetReferrerRateandIDbyUserIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetReferrerRateandIDbyUserIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetReferrerRateandIDbyUserIDDelegate, new object[] {
                        UserID}, this.onEndGetReferrerRateandIDbyUserIDDelegate, this.onGetReferrerRateandIDbyUserIDCompletedDelegate, userState);
        }
        
        public void UpdateRefererRateandIDbyUserID(int UserID, int ReffereID, int ReferrerRate) {
            base.Channel.UpdateRefererRateandIDbyUserID(UserID, ReffereID, ReferrerRate);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateRefererRateandIDbyUserID(int UserID, int ReffereID, int ReferrerRate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateRefererRateandIDbyUserID(UserID, ReffereID, ReferrerRate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateRefererRateandIDbyUserID(System.IAsyncResult result) {
            base.Channel.EndUpdateRefererRateandIDbyUserID(result);
        }
        
        private System.IAsyncResult OnBeginUpdateRefererRateandIDbyUserID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int UserID = ((int)(inValues[0]));
            int ReffereID = ((int)(inValues[1]));
            int ReferrerRate = ((int)(inValues[2]));
            return this.BeginUpdateRefererRateandIDbyUserID(UserID, ReffereID, ReferrerRate, callback, asyncState);
        }
        
        private object[] OnEndUpdateRefererRateandIDbyUserID(System.IAsyncResult result) {
            this.EndUpdateRefererRateandIDbyUserID(result);
            return null;
        }
        
        private void OnUpdateRefererRateandIDbyUserIDCompleted(object state) {
            if ((this.UpdateRefererRateandIDbyUserIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateRefererRateandIDbyUserIDCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateRefererRateandIDbyUserIDAsync(int UserID, int ReffereID, int ReferrerRate) {
            this.UpdateRefererRateandIDbyUserIDAsync(UserID, ReffereID, ReferrerRate, null);
        }
        
        public void UpdateRefererRateandIDbyUserIDAsync(int UserID, int ReffereID, int ReferrerRate, object userState) {
            if ((this.onBeginUpdateRefererRateandIDbyUserIDDelegate == null)) {
                this.onBeginUpdateRefererRateandIDbyUserIDDelegate = new BeginOperationDelegate(this.OnBeginUpdateRefererRateandIDbyUserID);
            }
            if ((this.onEndUpdateRefererRateandIDbyUserIDDelegate == null)) {
                this.onEndUpdateRefererRateandIDbyUserIDDelegate = new EndOperationDelegate(this.OnEndUpdateRefererRateandIDbyUserID);
            }
            if ((this.onUpdateRefererRateandIDbyUserIDCompletedDelegate == null)) {
                this.onUpdateRefererRateandIDbyUserIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateRefererRateandIDbyUserIDCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateRefererRateandIDbyUserIDDelegate, new object[] {
                        UserID,
                        ReffereID,
                        ReferrerRate}, this.onEndUpdateRefererRateandIDbyUserIDDelegate, this.onUpdateRefererRateandIDbyUserIDCompletedDelegate, userState);
        }
        
        public void UpdateUsersAllBlock() {
            base.Channel.UpdateUsersAllBlock();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateUsersAllBlock(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateUsersAllBlock(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateUsersAllBlock(System.IAsyncResult result) {
            base.Channel.EndUpdateUsersAllBlock(result);
        }
        
        private System.IAsyncResult OnBeginUpdateUsersAllBlock(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginUpdateUsersAllBlock(callback, asyncState);
        }
        
        private object[] OnEndUpdateUsersAllBlock(System.IAsyncResult result) {
            this.EndUpdateUsersAllBlock(result);
            return null;
        }
        
        private void OnUpdateUsersAllBlockCompleted(object state) {
            if ((this.UpdateUsersAllBlockCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateUsersAllBlockCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateUsersAllBlockAsync() {
            this.UpdateUsersAllBlockAsync(null);
        }
        
        public void UpdateUsersAllBlockAsync(object userState) {
            if ((this.onBeginUpdateUsersAllBlockDelegate == null)) {
                this.onBeginUpdateUsersAllBlockDelegate = new BeginOperationDelegate(this.OnBeginUpdateUsersAllBlock);
            }
            if ((this.onEndUpdateUsersAllBlockDelegate == null)) {
                this.onEndUpdateUsersAllBlockDelegate = new EndOperationDelegate(this.OnEndUpdateUsersAllBlock);
            }
            if ((this.onUpdateUsersAllBlockCompletedDelegate == null)) {
                this.onUpdateUsersAllBlockCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateUsersAllBlockCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateUsersAllBlockDelegate, null, this.onEndUpdateUsersAllBlockDelegate, this.onUpdateUsersAllBlockCompletedDelegate, userState);
        }
        
        public void UpdateUsersAllLoggedOut() {
            base.Channel.UpdateUsersAllLoggedOut();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateUsersAllLoggedOut(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateUsersAllLoggedOut(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateUsersAllLoggedOut(System.IAsyncResult result) {
            base.Channel.EndUpdateUsersAllLoggedOut(result);
        }
        
        private System.IAsyncResult OnBeginUpdateUsersAllLoggedOut(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginUpdateUsersAllLoggedOut(callback, asyncState);
        }
        
        private object[] OnEndUpdateUsersAllLoggedOut(System.IAsyncResult result) {
            this.EndUpdateUsersAllLoggedOut(result);
            return null;
        }
        
        private void OnUpdateUsersAllLoggedOutCompleted(object state) {
            if ((this.UpdateUsersAllLoggedOutCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateUsersAllLoggedOutCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateUsersAllLoggedOutAsync() {
            this.UpdateUsersAllLoggedOutAsync(null);
        }
        
        public void UpdateUsersAllLoggedOutAsync(object userState) {
            if ((this.onBeginUpdateUsersAllLoggedOutDelegate == null)) {
                this.onBeginUpdateUsersAllLoggedOutDelegate = new BeginOperationDelegate(this.OnBeginUpdateUsersAllLoggedOut);
            }
            if ((this.onEndUpdateUsersAllLoggedOutDelegate == null)) {
                this.onEndUpdateUsersAllLoggedOutDelegate = new EndOperationDelegate(this.OnEndUpdateUsersAllLoggedOut);
            }
            if ((this.onUpdateUsersAllLoggedOutCompletedDelegate == null)) {
                this.onUpdateUsersAllLoggedOutCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateUsersAllLoggedOutCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateUsersAllLoggedOutDelegate, null, this.onEndUpdateUsersAllLoggedOutDelegate, this.onUpdateUsersAllLoggedOutCompletedDelegate, userState);
        }
        
        public void UpdateMaxOddBackandLay(int UserID, decimal MaxOddBack, bool CheckForMaxOddBack, decimal MaxOddLay, bool CheckForMaxOddLay) {
            base.Channel.UpdateMaxOddBackandLay(UserID, MaxOddBack, CheckForMaxOddBack, MaxOddLay, CheckForMaxOddLay);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateMaxOddBackandLay(int UserID, decimal MaxOddBack, bool CheckForMaxOddBack, decimal MaxOddLay, bool CheckForMaxOddLay, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateMaxOddBackandLay(UserID, MaxOddBack, CheckForMaxOddBack, MaxOddLay, CheckForMaxOddLay, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateMaxOddBackandLay(System.IAsyncResult result) {
            base.Channel.EndUpdateMaxOddBackandLay(result);
        }
        
        private System.IAsyncResult OnBeginUpdateMaxOddBackandLay(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int UserID = ((int)(inValues[0]));
            decimal MaxOddBack = ((decimal)(inValues[1]));
            bool CheckForMaxOddBack = ((bool)(inValues[2]));
            decimal MaxOddLay = ((decimal)(inValues[3]));
            bool CheckForMaxOddLay = ((bool)(inValues[4]));
            return this.BeginUpdateMaxOddBackandLay(UserID, MaxOddBack, CheckForMaxOddBack, MaxOddLay, CheckForMaxOddLay, callback, asyncState);
        }
        
        private object[] OnEndUpdateMaxOddBackandLay(System.IAsyncResult result) {
            this.EndUpdateMaxOddBackandLay(result);
            return null;
        }
        
        private void OnUpdateMaxOddBackandLayCompleted(object state) {
            if ((this.UpdateMaxOddBackandLayCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateMaxOddBackandLayCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateMaxOddBackandLayAsync(int UserID, decimal MaxOddBack, bool CheckForMaxOddBack, decimal MaxOddLay, bool CheckForMaxOddLay) {
            this.UpdateMaxOddBackandLayAsync(UserID, MaxOddBack, CheckForMaxOddBack, MaxOddLay, CheckForMaxOddLay, null);
        }
        
        public void UpdateMaxOddBackandLayAsync(int UserID, decimal MaxOddBack, bool CheckForMaxOddBack, decimal MaxOddLay, bool CheckForMaxOddLay, object userState) {
            if ((this.onBeginUpdateMaxOddBackandLayDelegate == null)) {
                this.onBeginUpdateMaxOddBackandLayDelegate = new BeginOperationDelegate(this.OnBeginUpdateMaxOddBackandLay);
            }
            if ((this.onEndUpdateMaxOddBackandLayDelegate == null)) {
                this.onEndUpdateMaxOddBackandLayDelegate = new EndOperationDelegate(this.OnEndUpdateMaxOddBackandLay);
            }
            if ((this.onUpdateMaxOddBackandLayCompletedDelegate == null)) {
                this.onUpdateMaxOddBackandLayCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateMaxOddBackandLayCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateMaxOddBackandLayDelegate, new object[] {
                        UserID,
                        MaxOddBack,
                        CheckForMaxOddBack,
                        MaxOddLay,
                        CheckForMaxOddLay}, this.onEndUpdateMaxOddBackandLayDelegate, this.onUpdateMaxOddBackandLayCompletedDelegate, userState);
        }
        
        public string GetIntervalandBetPlaceTimings(int UserID) {
            return base.Channel.GetIntervalandBetPlaceTimings(UserID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetIntervalandBetPlaceTimings(int UserID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetIntervalandBetPlaceTimings(UserID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetIntervalandBetPlaceTimings(System.IAsyncResult result) {
            return base.Channel.EndGetIntervalandBetPlaceTimings(result);
        }
        
        private System.IAsyncResult OnBeginGetIntervalandBetPlaceTimings(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int UserID = ((int)(inValues[0]));
            return this.BeginGetIntervalandBetPlaceTimings(UserID, callback, asyncState);
        }
        
        private object[] OnEndGetIntervalandBetPlaceTimings(System.IAsyncResult result) {
            string retVal = this.EndGetIntervalandBetPlaceTimings(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetIntervalandBetPlaceTimingsCompleted(object state) {
            if ((this.GetIntervalandBetPlaceTimingsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetIntervalandBetPlaceTimingsCompleted(this, new GetIntervalandBetPlaceTimingsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetIntervalandBetPlaceTimingsAsync(int UserID) {
            this.GetIntervalandBetPlaceTimingsAsync(UserID, null);
        }
        
        public void GetIntervalandBetPlaceTimingsAsync(int UserID, object userState) {
            if ((this.onBeginGetIntervalandBetPlaceTimingsDelegate == null)) {
                this.onBeginGetIntervalandBetPlaceTimingsDelegate = new BeginOperationDelegate(this.OnBeginGetIntervalandBetPlaceTimings);
            }
            if ((this.onEndGetIntervalandBetPlaceTimingsDelegate == null)) {
                this.onEndGetIntervalandBetPlaceTimingsDelegate = new EndOperationDelegate(this.OnEndGetIntervalandBetPlaceTimings);
            }
            if ((this.onGetIntervalandBetPlaceTimingsCompletedDelegate == null)) {
                this.onGetIntervalandBetPlaceTimingsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetIntervalandBetPlaceTimingsCompleted);
            }
            base.InvokeAsync(this.onBeginGetIntervalandBetPlaceTimingsDelegate, new object[] {
                        UserID}, this.onEndGetIntervalandBetPlaceTimingsDelegate, this.onGetIntervalandBetPlaceTimingsCompletedDelegate, userState);
        }
        
        public void UpdateIntervalandBetPlaceTimings(
                    int HorseRaceTimerInterval, 
                    int HorseRaceBetPlaceWait, 
                    int GrayHoundTimerInterval, 
                    int GrayHoundBetPlaceWait, 
                    int CricketMatchOddsTimerInterval, 
                    int CricketMatchOddsBetPlaceWait, 
                    int CompletedMatchTimerInterval, 
                    int CompletedMatchBetPlaceWait, 
                    int TiedMatchTimerInterval, 
                    int TiedMatchBetPlaceWait, 
                    int InningsRunsTimerInterval, 
                    int InningsRunsBetPlaceWait, 
                    int WinnerTimerInterval, 
                    int WinnerBetPlaceWait, 
                    int TennisTimerInterval, 
                    int TennisBetPlaceWait, 
                    int SoccerTimerInterval, 
                    int SoccerBetPlaceWait, 
                    decimal PoundRate, 
                    int userID, 
                    int FancyTimerInterval, 
                    int FancyBetPlaceWait, 
                    int RaceMinutesBeforeStart, 
                    int CancelBetTime) {
            base.Channel.UpdateIntervalandBetPlaceTimings(HorseRaceTimerInterval, HorseRaceBetPlaceWait, GrayHoundTimerInterval, GrayHoundBetPlaceWait, CricketMatchOddsTimerInterval, CricketMatchOddsBetPlaceWait, CompletedMatchTimerInterval, CompletedMatchBetPlaceWait, TiedMatchTimerInterval, TiedMatchBetPlaceWait, InningsRunsTimerInterval, InningsRunsBetPlaceWait, WinnerTimerInterval, WinnerBetPlaceWait, TennisTimerInterval, TennisBetPlaceWait, SoccerTimerInterval, SoccerBetPlaceWait, PoundRate, userID, FancyTimerInterval, FancyBetPlaceWait, RaceMinutesBeforeStart, CancelBetTime);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateIntervalandBetPlaceTimings(
                    int HorseRaceTimerInterval, 
                    int HorseRaceBetPlaceWait, 
                    int GrayHoundTimerInterval, 
                    int GrayHoundBetPlaceWait, 
                    int CricketMatchOddsTimerInterval, 
                    int CricketMatchOddsBetPlaceWait, 
                    int CompletedMatchTimerInterval, 
                    int CompletedMatchBetPlaceWait, 
                    int TiedMatchTimerInterval, 
                    int TiedMatchBetPlaceWait, 
                    int InningsRunsTimerInterval, 
                    int InningsRunsBetPlaceWait, 
                    int WinnerTimerInterval, 
                    int WinnerBetPlaceWait, 
                    int TennisTimerInterval, 
                    int TennisBetPlaceWait, 
                    int SoccerTimerInterval, 
                    int SoccerBetPlaceWait, 
                    decimal PoundRate, 
                    int userID, 
                    int FancyTimerInterval, 
                    int FancyBetPlaceWait, 
                    int RaceMinutesBeforeStart, 
                    int CancelBetTime, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return base.Channel.BeginUpdateIntervalandBetPlaceTimings(HorseRaceTimerInterval, HorseRaceBetPlaceWait, GrayHoundTimerInterval, GrayHoundBetPlaceWait, CricketMatchOddsTimerInterval, CricketMatchOddsBetPlaceWait, CompletedMatchTimerInterval, CompletedMatchBetPlaceWait, TiedMatchTimerInterval, TiedMatchBetPlaceWait, InningsRunsTimerInterval, InningsRunsBetPlaceWait, WinnerTimerInterval, WinnerBetPlaceWait, TennisTimerInterval, TennisBetPlaceWait, SoccerTimerInterval, SoccerBetPlaceWait, PoundRate, userID, FancyTimerInterval, FancyBetPlaceWait, RaceMinutesBeforeStart, CancelBetTime, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateIntervalandBetPlaceTimings(System.IAsyncResult result) {
            base.Channel.EndUpdateIntervalandBetPlaceTimings(result);
        }
        
        private System.IAsyncResult OnBeginUpdateIntervalandBetPlaceTimings(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int HorseRaceTimerInterval = ((int)(inValues[0]));
            int HorseRaceBetPlaceWait = ((int)(inValues[1]));
            int GrayHoundTimerInterval = ((int)(inValues[2]));
            int GrayHoundBetPlaceWait = ((int)(inValues[3]));
            int CricketMatchOddsTimerInterval = ((int)(inValues[4]));
            int CricketMatchOddsBetPlaceWait = ((int)(inValues[5]));
            int CompletedMatchTimerInterval = ((int)(inValues[6]));
            int CompletedMatchBetPlaceWait = ((int)(inValues[7]));
            int TiedMatchTimerInterval = ((int)(inValues[8]));
            int TiedMatchBetPlaceWait = ((int)(inValues[9]));
            int InningsRunsTimerInterval = ((int)(inValues[10]));
            int InningsRunsBetPlaceWait = ((int)(inValues[11]));
            int WinnerTimerInterval = ((int)(inValues[12]));
            int WinnerBetPlaceWait = ((int)(inValues[13]));
            int TennisTimerInterval = ((int)(inValues[14]));
            int TennisBetPlaceWait = ((int)(inValues[15]));
            int SoccerTimerInterval = ((int)(inValues[16]));
            int SoccerBetPlaceWait = ((int)(inValues[17]));
            decimal PoundRate = ((decimal)(inValues[18]));
            int userID = ((int)(inValues[19]));
            int FancyTimerInterval = ((int)(inValues[20]));
            int FancyBetPlaceWait = ((int)(inValues[21]));
            int RaceMinutesBeforeStart = ((int)(inValues[22]));
            int CancelBetTime = ((int)(inValues[23]));
            return this.BeginUpdateIntervalandBetPlaceTimings(HorseRaceTimerInterval, HorseRaceBetPlaceWait, GrayHoundTimerInterval, GrayHoundBetPlaceWait, CricketMatchOddsTimerInterval, CricketMatchOddsBetPlaceWait, CompletedMatchTimerInterval, CompletedMatchBetPlaceWait, TiedMatchTimerInterval, TiedMatchBetPlaceWait, InningsRunsTimerInterval, InningsRunsBetPlaceWait, WinnerTimerInterval, WinnerBetPlaceWait, TennisTimerInterval, TennisBetPlaceWait, SoccerTimerInterval, SoccerBetPlaceWait, PoundRate, userID, FancyTimerInterval, FancyBetPlaceWait, RaceMinutesBeforeStart, CancelBetTime, callback, asyncState);
        }
        
        private object[] OnEndUpdateIntervalandBetPlaceTimings(System.IAsyncResult result) {
            this.EndUpdateIntervalandBetPlaceTimings(result);
            return null;
        }
        
        private void OnUpdateIntervalandBetPlaceTimingsCompleted(object state) {
            if ((this.UpdateIntervalandBetPlaceTimingsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateIntervalandBetPlaceTimingsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateIntervalandBetPlaceTimingsAsync(
                    int HorseRaceTimerInterval, 
                    int HorseRaceBetPlaceWait, 
                    int GrayHoundTimerInterval, 
                    int GrayHoundBetPlaceWait, 
                    int CricketMatchOddsTimerInterval, 
                    int CricketMatchOddsBetPlaceWait, 
                    int CompletedMatchTimerInterval, 
                    int CompletedMatchBetPlaceWait, 
                    int TiedMatchTimerInterval, 
                    int TiedMatchBetPlaceWait, 
                    int InningsRunsTimerInterval, 
                    int InningsRunsBetPlaceWait, 
                    int WinnerTimerInterval, 
                    int WinnerBetPlaceWait, 
                    int TennisTimerInterval, 
                    int TennisBetPlaceWait, 
                    int SoccerTimerInterval, 
                    int SoccerBetPlaceWait, 
                    decimal PoundRate, 
                    int userID, 
                    int FancyTimerInterval, 
                    int FancyBetPlaceWait, 
                    int RaceMinutesBeforeStart, 
                    int CancelBetTime) {
            this.UpdateIntervalandBetPlaceTimingsAsync(HorseRaceTimerInterval, HorseRaceBetPlaceWait, GrayHoundTimerInterval, GrayHoundBetPlaceWait, CricketMatchOddsTimerInterval, CricketMatchOddsBetPlaceWait, CompletedMatchTimerInterval, CompletedMatchBetPlaceWait, TiedMatchTimerInterval, TiedMatchBetPlaceWait, InningsRunsTimerInterval, InningsRunsBetPlaceWait, WinnerTimerInterval, WinnerBetPlaceWait, TennisTimerInterval, TennisBetPlaceWait, SoccerTimerInterval, SoccerBetPlaceWait, PoundRate, userID, FancyTimerInterval, FancyBetPlaceWait, RaceMinutesBeforeStart, CancelBetTime, null);
        }
        
        public void UpdateIntervalandBetPlaceTimingsAsync(
                    int HorseRaceTimerInterval, 
                    int HorseRaceBetPlaceWait, 
                    int GrayHoundTimerInterval, 
                    int GrayHoundBetPlaceWait, 
                    int CricketMatchOddsTimerInterval, 
                    int CricketMatchOddsBetPlaceWait, 
                    int CompletedMatchTimerInterval, 
                    int CompletedMatchBetPlaceWait, 
                    int TiedMatchTimerInterval, 
                    int TiedMatchBetPlaceWait, 
                    int InningsRunsTimerInterval, 
                    int InningsRunsBetPlaceWait, 
                    int WinnerTimerInterval, 
                    int WinnerBetPlaceWait, 
                    int TennisTimerInterval, 
                    int TennisBetPlaceWait, 
                    int SoccerTimerInterval, 
                    int SoccerBetPlaceWait, 
                    decimal PoundRate, 
                    int userID, 
                    int FancyTimerInterval, 
                    int FancyBetPlaceWait, 
                    int RaceMinutesBeforeStart, 
                    int CancelBetTime, 
                    object userState) {
            if ((this.onBeginUpdateIntervalandBetPlaceTimingsDelegate == null)) {
                this.onBeginUpdateIntervalandBetPlaceTimingsDelegate = new BeginOperationDelegate(this.OnBeginUpdateIntervalandBetPlaceTimings);
            }
            if ((this.onEndUpdateIntervalandBetPlaceTimingsDelegate == null)) {
                this.onEndUpdateIntervalandBetPlaceTimingsDelegate = new EndOperationDelegate(this.OnEndUpdateIntervalandBetPlaceTimings);
            }
            if ((this.onUpdateIntervalandBetPlaceTimingsCompletedDelegate == null)) {
                this.onUpdateIntervalandBetPlaceTimingsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateIntervalandBetPlaceTimingsCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateIntervalandBetPlaceTimingsDelegate, new object[] {
                        HorseRaceTimerInterval,
                        HorseRaceBetPlaceWait,
                        GrayHoundTimerInterval,
                        GrayHoundBetPlaceWait,
                        CricketMatchOddsTimerInterval,
                        CricketMatchOddsBetPlaceWait,
                        CompletedMatchTimerInterval,
                        CompletedMatchBetPlaceWait,
                        TiedMatchTimerInterval,
                        TiedMatchBetPlaceWait,
                        InningsRunsTimerInterval,
                        InningsRunsBetPlaceWait,
                        WinnerTimerInterval,
                        WinnerBetPlaceWait,
                        TennisTimerInterval,
                        TennisBetPlaceWait,
                        SoccerTimerInterval,
                        SoccerBetPlaceWait,
                        PoundRate,
                        userID,
                        FancyTimerInterval,
                        FancyBetPlaceWait,
                        RaceMinutesBeforeStart,
                        CancelBetTime}, this.onEndUpdateIntervalandBetPlaceTimingsDelegate, this.onUpdateIntervalandBetPlaceTimingsCompletedDelegate, userState);
        }
        
        public int GetHawalaAccountIDbyUserID(int UserID) {
            return base.Channel.GetHawalaAccountIDbyUserID(UserID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetHawalaAccountIDbyUserID(int UserID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetHawalaAccountIDbyUserID(UserID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndGetHawalaAccountIDbyUserID(System.IAsyncResult result) {
            return base.Channel.EndGetHawalaAccountIDbyUserID(result);
        }
        
        private System.IAsyncResult OnBeginGetHawalaAccountIDbyUserID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int UserID = ((int)(inValues[0]));
            return this.BeginGetHawalaAccountIDbyUserID(UserID, callback, asyncState);
        }
        
        private object[] OnEndGetHawalaAccountIDbyUserID(System.IAsyncResult result) {
            int retVal = this.EndGetHawalaAccountIDbyUserID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetHawalaAccountIDbyUserIDCompleted(object state) {
            if ((this.GetHawalaAccountIDbyUserIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetHawalaAccountIDbyUserIDCompleted(this, new GetHawalaAccountIDbyUserIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetHawalaAccountIDbyUserIDAsync(int UserID) {
            this.GetHawalaAccountIDbyUserIDAsync(UserID, null);
        }
        
        public void GetHawalaAccountIDbyUserIDAsync(int UserID, object userState) {
            if ((this.onBeginGetHawalaAccountIDbyUserIDDelegate == null)) {
                this.onBeginGetHawalaAccountIDbyUserIDDelegate = new BeginOperationDelegate(this.OnBeginGetHawalaAccountIDbyUserID);
            }
            if ((this.onEndGetHawalaAccountIDbyUserIDDelegate == null)) {
                this.onEndGetHawalaAccountIDbyUserIDDelegate = new EndOperationDelegate(this.OnEndGetHawalaAccountIDbyUserID);
            }
            if ((this.onGetHawalaAccountIDbyUserIDCompletedDelegate == null)) {
                this.onGetHawalaAccountIDbyUserIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetHawalaAccountIDbyUserIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetHawalaAccountIDbyUserIDDelegate, new object[] {
                        UserID}, this.onEndGetHawalaAccountIDbyUserIDDelegate, this.onGetHawalaAccountIDbyUserIDCompletedDelegate, userState);
        }
        
        public int GetCreatedbyID(int UserID) {
            return base.Channel.GetCreatedbyID(UserID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetCreatedbyID(int UserID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCreatedbyID(UserID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndGetCreatedbyID(System.IAsyncResult result) {
            return base.Channel.EndGetCreatedbyID(result);
        }
        
        private System.IAsyncResult OnBeginGetCreatedbyID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int UserID = ((int)(inValues[0]));
            return this.BeginGetCreatedbyID(UserID, callback, asyncState);
        }
        
        private object[] OnEndGetCreatedbyID(System.IAsyncResult result) {
            int retVal = this.EndGetCreatedbyID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCreatedbyIDCompleted(object state) {
            if ((this.GetCreatedbyIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCreatedbyIDCompleted(this, new GetCreatedbyIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCreatedbyIDAsync(int UserID) {
            this.GetCreatedbyIDAsync(UserID, null);
        }
        
        public void GetCreatedbyIDAsync(int UserID, object userState) {
            if ((this.onBeginGetCreatedbyIDDelegate == null)) {
                this.onBeginGetCreatedbyIDDelegate = new BeginOperationDelegate(this.OnBeginGetCreatedbyID);
            }
            if ((this.onEndGetCreatedbyIDDelegate == null)) {
                this.onEndGetCreatedbyIDDelegate = new EndOperationDelegate(this.OnEndGetCreatedbyID);
            }
            if ((this.onGetCreatedbyIDCompletedDelegate == null)) {
                this.onGetCreatedbyIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCreatedbyIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetCreatedbyIDDelegate, new object[] {
                        UserID}, this.onEndGetCreatedbyIDDelegate, this.onGetCreatedbyIDCompletedDelegate, userState);
        }
        
        public void UpdateHawalaIDbyUserID(int userID, int ParentID) {
            base.Channel.UpdateHawalaIDbyUserID(userID, ParentID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateHawalaIDbyUserID(int userID, int ParentID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateHawalaIDbyUserID(userID, ParentID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateHawalaIDbyUserID(System.IAsyncResult result) {
            base.Channel.EndUpdateHawalaIDbyUserID(result);
        }
        
        private System.IAsyncResult OnBeginUpdateHawalaIDbyUserID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            int ParentID = ((int)(inValues[1]));
            return this.BeginUpdateHawalaIDbyUserID(userID, ParentID, callback, asyncState);
        }
        
        private object[] OnEndUpdateHawalaIDbyUserID(System.IAsyncResult result) {
            this.EndUpdateHawalaIDbyUserID(result);
            return null;
        }
        
        private void OnUpdateHawalaIDbyUserIDCompleted(object state) {
            if ((this.UpdateHawalaIDbyUserIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateHawalaIDbyUserIDCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateHawalaIDbyUserIDAsync(int userID, int ParentID) {
            this.UpdateHawalaIDbyUserIDAsync(userID, ParentID, null);
        }
        
        public void UpdateHawalaIDbyUserIDAsync(int userID, int ParentID, object userState) {
            if ((this.onBeginUpdateHawalaIDbyUserIDDelegate == null)) {
                this.onBeginUpdateHawalaIDbyUserIDDelegate = new BeginOperationDelegate(this.OnBeginUpdateHawalaIDbyUserID);
            }
            if ((this.onEndUpdateHawalaIDbyUserIDDelegate == null)) {
                this.onEndUpdateHawalaIDbyUserIDDelegate = new EndOperationDelegate(this.OnEndUpdateHawalaIDbyUserID);
            }
            if ((this.onUpdateHawalaIDbyUserIDCompletedDelegate == null)) {
                this.onUpdateHawalaIDbyUserIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateHawalaIDbyUserIDCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateHawalaIDbyUserIDDelegate, new object[] {
                        userID,
                        ParentID}, this.onEndUpdateHawalaIDbyUserIDDelegate, this.onUpdateHawalaIDbyUserIDCompletedDelegate, userState);
        }
        
        public string GetMarketsforBettingAllowed(int userID) {
            return base.Channel.GetMarketsforBettingAllowed(userID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetMarketsforBettingAllowed(int userID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMarketsforBettingAllowed(userID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetMarketsforBettingAllowed(System.IAsyncResult result) {
            return base.Channel.EndGetMarketsforBettingAllowed(result);
        }
        
        private System.IAsyncResult OnBeginGetMarketsforBettingAllowed(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            return this.BeginGetMarketsforBettingAllowed(userID, callback, asyncState);
        }
        
        private object[] OnEndGetMarketsforBettingAllowed(System.IAsyncResult result) {
            string retVal = this.EndGetMarketsforBettingAllowed(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMarketsforBettingAllowedCompleted(object state) {
            if ((this.GetMarketsforBettingAllowedCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMarketsforBettingAllowedCompleted(this, new GetMarketsforBettingAllowedCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMarketsforBettingAllowedAsync(int userID) {
            this.GetMarketsforBettingAllowedAsync(userID, null);
        }
        
        public void GetMarketsforBettingAllowedAsync(int userID, object userState) {
            if ((this.onBeginGetMarketsforBettingAllowedDelegate == null)) {
                this.onBeginGetMarketsforBettingAllowedDelegate = new BeginOperationDelegate(this.OnBeginGetMarketsforBettingAllowed);
            }
            if ((this.onEndGetMarketsforBettingAllowedDelegate == null)) {
                this.onEndGetMarketsforBettingAllowedDelegate = new EndOperationDelegate(this.OnEndGetMarketsforBettingAllowed);
            }
            if ((this.onGetMarketsforBettingAllowedCompletedDelegate == null)) {
                this.onGetMarketsforBettingAllowedCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMarketsforBettingAllowedCompleted);
            }
            base.InvokeAsync(this.onBeginGetMarketsforBettingAllowedDelegate, new object[] {
                        userID}, this.onEndGetMarketsforBettingAllowedDelegate, this.onGetMarketsforBettingAllowedCompletedDelegate, userState);
        }
        
        public void UpdateMarketAllowedBetting(int UserId, string MarketbookId, bool AllowedBetting) {
            base.Channel.UpdateMarketAllowedBetting(UserId, MarketbookId, AllowedBetting);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateMarketAllowedBetting(int UserId, string MarketbookId, bool AllowedBetting, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateMarketAllowedBetting(UserId, MarketbookId, AllowedBetting, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateMarketAllowedBetting(System.IAsyncResult result) {
            base.Channel.EndUpdateMarketAllowedBetting(result);
        }
        
        private System.IAsyncResult OnBeginUpdateMarketAllowedBetting(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int UserId = ((int)(inValues[0]));
            string MarketbookId = ((string)(inValues[1]));
            bool AllowedBetting = ((bool)(inValues[2]));
            return this.BeginUpdateMarketAllowedBetting(UserId, MarketbookId, AllowedBetting, callback, asyncState);
        }
        
        private object[] OnEndUpdateMarketAllowedBetting(System.IAsyncResult result) {
            this.EndUpdateMarketAllowedBetting(result);
            return null;
        }
        
        private void OnUpdateMarketAllowedBettingCompleted(object state) {
            if ((this.UpdateMarketAllowedBettingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateMarketAllowedBettingCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateMarketAllowedBettingAsync(int UserId, string MarketbookId, bool AllowedBetting) {
            this.UpdateMarketAllowedBettingAsync(UserId, MarketbookId, AllowedBetting, null);
        }
        
        public void UpdateMarketAllowedBettingAsync(int UserId, string MarketbookId, bool AllowedBetting, object userState) {
            if ((this.onBeginUpdateMarketAllowedBettingDelegate == null)) {
                this.onBeginUpdateMarketAllowedBettingDelegate = new BeginOperationDelegate(this.OnBeginUpdateMarketAllowedBetting);
            }
            if ((this.onEndUpdateMarketAllowedBettingDelegate == null)) {
                this.onEndUpdateMarketAllowedBettingDelegate = new EndOperationDelegate(this.OnEndUpdateMarketAllowedBetting);
            }
            if ((this.onUpdateMarketAllowedBettingCompletedDelegate == null)) {
                this.onUpdateMarketAllowedBettingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateMarketAllowedBettingCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateMarketAllowedBettingDelegate, new object[] {
                        UserId,
                        MarketbookId,
                        AllowedBetting}, this.onEndUpdateMarketAllowedBettingDelegate, this.onUpdateMarketAllowedBettingCompletedDelegate, userState);
        }
        
        public void UpdateMarketAllowedBettingForAllAgents(int[] UserIds, globaltraders.UserServiceReference.SP_UserMarket_GetMarketForAllowedBetting_Result[] lstMarkets) {
            base.Channel.UpdateMarketAllowedBettingForAllAgents(UserIds, lstMarkets);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateMarketAllowedBettingForAllAgents(int[] UserIds, globaltraders.UserServiceReference.SP_UserMarket_GetMarketForAllowedBetting_Result[] lstMarkets, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateMarketAllowedBettingForAllAgents(UserIds, lstMarkets, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateMarketAllowedBettingForAllAgents(System.IAsyncResult result) {
            base.Channel.EndUpdateMarketAllowedBettingForAllAgents(result);
        }
        
        private System.IAsyncResult OnBeginUpdateMarketAllowedBettingForAllAgents(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int[] UserIds = ((int[])(inValues[0]));
            globaltraders.UserServiceReference.SP_UserMarket_GetMarketForAllowedBetting_Result[] lstMarkets = ((globaltraders.UserServiceReference.SP_UserMarket_GetMarketForAllowedBetting_Result[])(inValues[1]));
            return this.BeginUpdateMarketAllowedBettingForAllAgents(UserIds, lstMarkets, callback, asyncState);
        }
        
        private object[] OnEndUpdateMarketAllowedBettingForAllAgents(System.IAsyncResult result) {
            this.EndUpdateMarketAllowedBettingForAllAgents(result);
            return null;
        }
        
        private void OnUpdateMarketAllowedBettingForAllAgentsCompleted(object state) {
            if ((this.UpdateMarketAllowedBettingForAllAgentsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateMarketAllowedBettingForAllAgentsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateMarketAllowedBettingForAllAgentsAsync(int[] UserIds, globaltraders.UserServiceReference.SP_UserMarket_GetMarketForAllowedBetting_Result[] lstMarkets) {
            this.UpdateMarketAllowedBettingForAllAgentsAsync(UserIds, lstMarkets, null);
        }
        
        public void UpdateMarketAllowedBettingForAllAgentsAsync(int[] UserIds, globaltraders.UserServiceReference.SP_UserMarket_GetMarketForAllowedBetting_Result[] lstMarkets, object userState) {
            if ((this.onBeginUpdateMarketAllowedBettingForAllAgentsDelegate == null)) {
                this.onBeginUpdateMarketAllowedBettingForAllAgentsDelegate = new BeginOperationDelegate(this.OnBeginUpdateMarketAllowedBettingForAllAgents);
            }
            if ((this.onEndUpdateMarketAllowedBettingForAllAgentsDelegate == null)) {
                this.onEndUpdateMarketAllowedBettingForAllAgentsDelegate = new EndOperationDelegate(this.OnEndUpdateMarketAllowedBettingForAllAgents);
            }
            if ((this.onUpdateMarketAllowedBettingForAllAgentsCompletedDelegate == null)) {
                this.onUpdateMarketAllowedBettingForAllAgentsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateMarketAllowedBettingForAllAgentsCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateMarketAllowedBettingForAllAgentsDelegate, new object[] {
                        UserIds,
                        lstMarkets}, this.onEndUpdateMarketAllowedBettingForAllAgentsDelegate, this.onUpdateMarketAllowedBettingForAllAgentsCompletedDelegate, userState);
        }
        
        public string GetBetSlipKeys(int UserID) {
            return base.Channel.GetBetSlipKeys(UserID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetBetSlipKeys(int UserID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetBetSlipKeys(UserID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetBetSlipKeys(System.IAsyncResult result) {
            return base.Channel.EndGetBetSlipKeys(result);
        }
        
        private System.IAsyncResult OnBeginGetBetSlipKeys(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int UserID = ((int)(inValues[0]));
            return this.BeginGetBetSlipKeys(UserID, callback, asyncState);
        }
        
        private object[] OnEndGetBetSlipKeys(System.IAsyncResult result) {
            string retVal = this.EndGetBetSlipKeys(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetBetSlipKeysCompleted(object state) {
            if ((this.GetBetSlipKeysCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetBetSlipKeysCompleted(this, new GetBetSlipKeysCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetBetSlipKeysAsync(int UserID) {
            this.GetBetSlipKeysAsync(UserID, null);
        }
        
        public void GetBetSlipKeysAsync(int UserID, object userState) {
            if ((this.onBeginGetBetSlipKeysDelegate == null)) {
                this.onBeginGetBetSlipKeysDelegate = new BeginOperationDelegate(this.OnBeginGetBetSlipKeys);
            }
            if ((this.onEndGetBetSlipKeysDelegate == null)) {
                this.onEndGetBetSlipKeysDelegate = new EndOperationDelegate(this.OnEndGetBetSlipKeys);
            }
            if ((this.onGetBetSlipKeysCompletedDelegate == null)) {
                this.onGetBetSlipKeysCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetBetSlipKeysCompleted);
            }
            base.InvokeAsync(this.onBeginGetBetSlipKeysDelegate, new object[] {
                        UserID}, this.onEndGetBetSlipKeysDelegate, this.onGetBetSlipKeysCompletedDelegate, userState);
        }
        
        public void UpdateBetSlipKeys(
                    int UserID, 
                    string SimpleBtn1, 
                    string SimpleBtn2, 
                    string SimpleBtn3, 
                    string SimpleBtn4, 
                    string SimpleBtn5, 
                    string SimpleBtn6, 
                    string SimpleBtn7, 
                    string SimpleBtn8, 
                    string SimpleBtn9, 
                    string SimpleBtn10, 
                    string SimpleBtn11, 
                    string SimpleBtn12, 
                    string MutipleBtn1, 
                    string MutipleBtn2, 
                    string MutipleBtn3, 
                    string MutipleBtn4, 
                    string MutipleBtn5, 
                    string MutipleBtn6, 
                    string MutipleBtn7, 
                    string MutipleBtn8, 
                    string MutipleBtn9, 
                    string MutipleBtn10, 
                    string MutipleBtn11, 
                    string MutipleBtn12) {
            base.Channel.UpdateBetSlipKeys(UserID, SimpleBtn1, SimpleBtn2, SimpleBtn3, SimpleBtn4, SimpleBtn5, SimpleBtn6, SimpleBtn7, SimpleBtn8, SimpleBtn9, SimpleBtn10, SimpleBtn11, SimpleBtn12, MutipleBtn1, MutipleBtn2, MutipleBtn3, MutipleBtn4, MutipleBtn5, MutipleBtn6, MutipleBtn7, MutipleBtn8, MutipleBtn9, MutipleBtn10, MutipleBtn11, MutipleBtn12);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateBetSlipKeys(
                    int UserID, 
                    string SimpleBtn1, 
                    string SimpleBtn2, 
                    string SimpleBtn3, 
                    string SimpleBtn4, 
                    string SimpleBtn5, 
                    string SimpleBtn6, 
                    string SimpleBtn7, 
                    string SimpleBtn8, 
                    string SimpleBtn9, 
                    string SimpleBtn10, 
                    string SimpleBtn11, 
                    string SimpleBtn12, 
                    string MutipleBtn1, 
                    string MutipleBtn2, 
                    string MutipleBtn3, 
                    string MutipleBtn4, 
                    string MutipleBtn5, 
                    string MutipleBtn6, 
                    string MutipleBtn7, 
                    string MutipleBtn8, 
                    string MutipleBtn9, 
                    string MutipleBtn10, 
                    string MutipleBtn11, 
                    string MutipleBtn12, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return base.Channel.BeginUpdateBetSlipKeys(UserID, SimpleBtn1, SimpleBtn2, SimpleBtn3, SimpleBtn4, SimpleBtn5, SimpleBtn6, SimpleBtn7, SimpleBtn8, SimpleBtn9, SimpleBtn10, SimpleBtn11, SimpleBtn12, MutipleBtn1, MutipleBtn2, MutipleBtn3, MutipleBtn4, MutipleBtn5, MutipleBtn6, MutipleBtn7, MutipleBtn8, MutipleBtn9, MutipleBtn10, MutipleBtn11, MutipleBtn12, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateBetSlipKeys(System.IAsyncResult result) {
            base.Channel.EndUpdateBetSlipKeys(result);
        }
        
        private System.IAsyncResult OnBeginUpdateBetSlipKeys(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int UserID = ((int)(inValues[0]));
            string SimpleBtn1 = ((string)(inValues[1]));
            string SimpleBtn2 = ((string)(inValues[2]));
            string SimpleBtn3 = ((string)(inValues[3]));
            string SimpleBtn4 = ((string)(inValues[4]));
            string SimpleBtn5 = ((string)(inValues[5]));
            string SimpleBtn6 = ((string)(inValues[6]));
            string SimpleBtn7 = ((string)(inValues[7]));
            string SimpleBtn8 = ((string)(inValues[8]));
            string SimpleBtn9 = ((string)(inValues[9]));
            string SimpleBtn10 = ((string)(inValues[10]));
            string SimpleBtn11 = ((string)(inValues[11]));
            string SimpleBtn12 = ((string)(inValues[12]));
            string MutipleBtn1 = ((string)(inValues[13]));
            string MutipleBtn2 = ((string)(inValues[14]));
            string MutipleBtn3 = ((string)(inValues[15]));
            string MutipleBtn4 = ((string)(inValues[16]));
            string MutipleBtn5 = ((string)(inValues[17]));
            string MutipleBtn6 = ((string)(inValues[18]));
            string MutipleBtn7 = ((string)(inValues[19]));
            string MutipleBtn8 = ((string)(inValues[20]));
            string MutipleBtn9 = ((string)(inValues[21]));
            string MutipleBtn10 = ((string)(inValues[22]));
            string MutipleBtn11 = ((string)(inValues[23]));
            string MutipleBtn12 = ((string)(inValues[24]));
            return this.BeginUpdateBetSlipKeys(UserID, SimpleBtn1, SimpleBtn2, SimpleBtn3, SimpleBtn4, SimpleBtn5, SimpleBtn6, SimpleBtn7, SimpleBtn8, SimpleBtn9, SimpleBtn10, SimpleBtn11, SimpleBtn12, MutipleBtn1, MutipleBtn2, MutipleBtn3, MutipleBtn4, MutipleBtn5, MutipleBtn6, MutipleBtn7, MutipleBtn8, MutipleBtn9, MutipleBtn10, MutipleBtn11, MutipleBtn12, callback, asyncState);
        }
        
        private object[] OnEndUpdateBetSlipKeys(System.IAsyncResult result) {
            this.EndUpdateBetSlipKeys(result);
            return null;
        }
        
        private void OnUpdateBetSlipKeysCompleted(object state) {
            if ((this.UpdateBetSlipKeysCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateBetSlipKeysCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateBetSlipKeysAsync(
                    int UserID, 
                    string SimpleBtn1, 
                    string SimpleBtn2, 
                    string SimpleBtn3, 
                    string SimpleBtn4, 
                    string SimpleBtn5, 
                    string SimpleBtn6, 
                    string SimpleBtn7, 
                    string SimpleBtn8, 
                    string SimpleBtn9, 
                    string SimpleBtn10, 
                    string SimpleBtn11, 
                    string SimpleBtn12, 
                    string MutipleBtn1, 
                    string MutipleBtn2, 
                    string MutipleBtn3, 
                    string MutipleBtn4, 
                    string MutipleBtn5, 
                    string MutipleBtn6, 
                    string MutipleBtn7, 
                    string MutipleBtn8, 
                    string MutipleBtn9, 
                    string MutipleBtn10, 
                    string MutipleBtn11, 
                    string MutipleBtn12) {
            this.UpdateBetSlipKeysAsync(UserID, SimpleBtn1, SimpleBtn2, SimpleBtn3, SimpleBtn4, SimpleBtn5, SimpleBtn6, SimpleBtn7, SimpleBtn8, SimpleBtn9, SimpleBtn10, SimpleBtn11, SimpleBtn12, MutipleBtn1, MutipleBtn2, MutipleBtn3, MutipleBtn4, MutipleBtn5, MutipleBtn6, MutipleBtn7, MutipleBtn8, MutipleBtn9, MutipleBtn10, MutipleBtn11, MutipleBtn12, null);
        }
        
        public void UpdateBetSlipKeysAsync(
                    int UserID, 
                    string SimpleBtn1, 
                    string SimpleBtn2, 
                    string SimpleBtn3, 
                    string SimpleBtn4, 
                    string SimpleBtn5, 
                    string SimpleBtn6, 
                    string SimpleBtn7, 
                    string SimpleBtn8, 
                    string SimpleBtn9, 
                    string SimpleBtn10, 
                    string SimpleBtn11, 
                    string SimpleBtn12, 
                    string MutipleBtn1, 
                    string MutipleBtn2, 
                    string MutipleBtn3, 
                    string MutipleBtn4, 
                    string MutipleBtn5, 
                    string MutipleBtn6, 
                    string MutipleBtn7, 
                    string MutipleBtn8, 
                    string MutipleBtn9, 
                    string MutipleBtn10, 
                    string MutipleBtn11, 
                    string MutipleBtn12, 
                    object userState) {
            if ((this.onBeginUpdateBetSlipKeysDelegate == null)) {
                this.onBeginUpdateBetSlipKeysDelegate = new BeginOperationDelegate(this.OnBeginUpdateBetSlipKeys);
            }
            if ((this.onEndUpdateBetSlipKeysDelegate == null)) {
                this.onEndUpdateBetSlipKeysDelegate = new EndOperationDelegate(this.OnEndUpdateBetSlipKeys);
            }
            if ((this.onUpdateBetSlipKeysCompletedDelegate == null)) {
                this.onUpdateBetSlipKeysCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateBetSlipKeysCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateBetSlipKeysDelegate, new object[] {
                        UserID,
                        SimpleBtn1,
                        SimpleBtn2,
                        SimpleBtn3,
                        SimpleBtn4,
                        SimpleBtn5,
                        SimpleBtn6,
                        SimpleBtn7,
                        SimpleBtn8,
                        SimpleBtn9,
                        SimpleBtn10,
                        SimpleBtn11,
                        SimpleBtn12,
                        MutipleBtn1,
                        MutipleBtn2,
                        MutipleBtn3,
                        MutipleBtn4,
                        MutipleBtn5,
                        MutipleBtn6,
                        MutipleBtn7,
                        MutipleBtn8,
                        MutipleBtn9,
                        MutipleBtn10,
                        MutipleBtn11,
                        MutipleBtn12}, this.onEndUpdateBetSlipKeysDelegate, this.onUpdateBetSlipKeysCompletedDelegate, userState);
        }
        
        public void UpdateBettingAllowed(string EventID, string BettingAllowed) {
            base.Channel.UpdateBettingAllowed(EventID, BettingAllowed);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateBettingAllowed(string EventID, string BettingAllowed, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateBettingAllowed(EventID, BettingAllowed, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateBettingAllowed(System.IAsyncResult result) {
            base.Channel.EndUpdateBettingAllowed(result);
        }
        
        private System.IAsyncResult OnBeginUpdateBettingAllowed(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string EventID = ((string)(inValues[0]));
            string BettingAllowed = ((string)(inValues[1]));
            return this.BeginUpdateBettingAllowed(EventID, BettingAllowed, callback, asyncState);
        }
        
        private object[] OnEndUpdateBettingAllowed(System.IAsyncResult result) {
            this.EndUpdateBettingAllowed(result);
            return null;
        }
        
        private void OnUpdateBettingAllowedCompleted(object state) {
            if ((this.UpdateBettingAllowedCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateBettingAllowedCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateBettingAllowedAsync(string EventID, string BettingAllowed) {
            this.UpdateBettingAllowedAsync(EventID, BettingAllowed, null);
        }
        
        public void UpdateBettingAllowedAsync(string EventID, string BettingAllowed, object userState) {
            if ((this.onBeginUpdateBettingAllowedDelegate == null)) {
                this.onBeginUpdateBettingAllowedDelegate = new BeginOperationDelegate(this.OnBeginUpdateBettingAllowed);
            }
            if ((this.onEndUpdateBettingAllowedDelegate == null)) {
                this.onEndUpdateBettingAllowedDelegate = new EndOperationDelegate(this.OnEndUpdateBettingAllowed);
            }
            if ((this.onUpdateBettingAllowedCompletedDelegate == null)) {
                this.onUpdateBettingAllowedCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateBettingAllowedCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateBettingAllowedDelegate, new object[] {
                        EventID,
                        BettingAllowed}, this.onEndUpdateBettingAllowedDelegate, this.onUpdateBettingAllowedCompletedDelegate, userState);
        }
        
        public decimal GetPoundRatebyUserID(int UserID) {
            return base.Channel.GetPoundRatebyUserID(UserID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetPoundRatebyUserID(int UserID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetPoundRatebyUserID(UserID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public decimal EndGetPoundRatebyUserID(System.IAsyncResult result) {
            return base.Channel.EndGetPoundRatebyUserID(result);
        }
        
        private System.IAsyncResult OnBeginGetPoundRatebyUserID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int UserID = ((int)(inValues[0]));
            return this.BeginGetPoundRatebyUserID(UserID, callback, asyncState);
        }
        
        private object[] OnEndGetPoundRatebyUserID(System.IAsyncResult result) {
            decimal retVal = this.EndGetPoundRatebyUserID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetPoundRatebyUserIDCompleted(object state) {
            if ((this.GetPoundRatebyUserIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetPoundRatebyUserIDCompleted(this, new GetPoundRatebyUserIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetPoundRatebyUserIDAsync(int UserID) {
            this.GetPoundRatebyUserIDAsync(UserID, null);
        }
        
        public void GetPoundRatebyUserIDAsync(int UserID, object userState) {
            if ((this.onBeginGetPoundRatebyUserIDDelegate == null)) {
                this.onBeginGetPoundRatebyUserIDDelegate = new BeginOperationDelegate(this.OnBeginGetPoundRatebyUserID);
            }
            if ((this.onEndGetPoundRatebyUserIDDelegate == null)) {
                this.onEndGetPoundRatebyUserIDDelegate = new EndOperationDelegate(this.OnEndGetPoundRatebyUserID);
            }
            if ((this.onGetPoundRatebyUserIDCompletedDelegate == null)) {
                this.onGetPoundRatebyUserIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetPoundRatebyUserIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetPoundRatebyUserIDDelegate, new object[] {
                        UserID}, this.onEndGetPoundRatebyUserIDDelegate, this.onGetPoundRatebyUserIDCompletedDelegate, userState);
        }
        
        public string GetMarqueeText() {
            return base.Channel.GetMarqueeText();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetMarqueeText(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMarqueeText(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetMarqueeText(System.IAsyncResult result) {
            return base.Channel.EndGetMarqueeText(result);
        }
        
        private System.IAsyncResult OnBeginGetMarqueeText(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetMarqueeText(callback, asyncState);
        }
        
        private object[] OnEndGetMarqueeText(System.IAsyncResult result) {
            string retVal = this.EndGetMarqueeText(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMarqueeTextCompleted(object state) {
            if ((this.GetMarqueeTextCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMarqueeTextCompleted(this, new GetMarqueeTextCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMarqueeTextAsync() {
            this.GetMarqueeTextAsync(null);
        }
        
        public void GetMarqueeTextAsync(object userState) {
            if ((this.onBeginGetMarqueeTextDelegate == null)) {
                this.onBeginGetMarqueeTextDelegate = new BeginOperationDelegate(this.OnBeginGetMarqueeText);
            }
            if ((this.onEndGetMarqueeTextDelegate == null)) {
                this.onEndGetMarqueeTextDelegate = new EndOperationDelegate(this.OnEndGetMarqueeText);
            }
            if ((this.onGetMarqueeTextCompletedDelegate == null)) {
                this.onGetMarqueeTextCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMarqueeTextCompleted);
            }
            base.InvokeAsync(this.onBeginGetMarqueeTextDelegate, null, this.onEndGetMarqueeTextDelegate, this.onGetMarqueeTextCompletedDelegate, userState);
        }
        
        public void UpdateMarqueeText(string marqueetext) {
            base.Channel.UpdateMarqueeText(marqueetext);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateMarqueeText(string marqueetext, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateMarqueeText(marqueetext, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateMarqueeText(System.IAsyncResult result) {
            base.Channel.EndUpdateMarqueeText(result);
        }
        
        private System.IAsyncResult OnBeginUpdateMarqueeText(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string marqueetext = ((string)(inValues[0]));
            return this.BeginUpdateMarqueeText(marqueetext, callback, asyncState);
        }
        
        private object[] OnEndUpdateMarqueeText(System.IAsyncResult result) {
            this.EndUpdateMarqueeText(result);
            return null;
        }
        
        private void OnUpdateMarqueeTextCompleted(object state) {
            if ((this.UpdateMarqueeTextCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateMarqueeTextCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateMarqueeTextAsync(string marqueetext) {
            this.UpdateMarqueeTextAsync(marqueetext, null);
        }
        
        public void UpdateMarqueeTextAsync(string marqueetext, object userState) {
            if ((this.onBeginUpdateMarqueeTextDelegate == null)) {
                this.onBeginUpdateMarqueeTextDelegate = new BeginOperationDelegate(this.OnBeginUpdateMarqueeText);
            }
            if ((this.onEndUpdateMarqueeTextDelegate == null)) {
                this.onEndUpdateMarqueeTextDelegate = new EndOperationDelegate(this.OnEndUpdateMarqueeText);
            }
            if ((this.onUpdateMarqueeTextCompletedDelegate == null)) {
                this.onUpdateMarqueeTextCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateMarqueeTextCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateMarqueeTextDelegate, new object[] {
                        marqueetext}, this.onEndUpdateMarqueeTextDelegate, this.onUpdateMarqueeTextCompletedDelegate, userState);
        }
        
        public void SendBalanceSheettoEmail(string Password) {
            base.Channel.SendBalanceSheettoEmail(Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSendBalanceSheettoEmail(string Password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSendBalanceSheettoEmail(Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSendBalanceSheettoEmail(System.IAsyncResult result) {
            base.Channel.EndSendBalanceSheettoEmail(result);
        }
        
        private System.IAsyncResult OnBeginSendBalanceSheettoEmail(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string Password = ((string)(inValues[0]));
            return this.BeginSendBalanceSheettoEmail(Password, callback, asyncState);
        }
        
        private object[] OnEndSendBalanceSheettoEmail(System.IAsyncResult result) {
            this.EndSendBalanceSheettoEmail(result);
            return null;
        }
        
        private void OnSendBalanceSheettoEmailCompleted(object state) {
            if ((this.SendBalanceSheettoEmailCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendBalanceSheettoEmailCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendBalanceSheettoEmailAsync(string Password) {
            this.SendBalanceSheettoEmailAsync(Password, null);
        }
        
        public void SendBalanceSheettoEmailAsync(string Password, object userState) {
            if ((this.onBeginSendBalanceSheettoEmailDelegate == null)) {
                this.onBeginSendBalanceSheettoEmailDelegate = new BeginOperationDelegate(this.OnBeginSendBalanceSheettoEmail);
            }
            if ((this.onEndSendBalanceSheettoEmailDelegate == null)) {
                this.onEndSendBalanceSheettoEmailDelegate = new EndOperationDelegate(this.OnEndSendBalanceSheettoEmail);
            }
            if ((this.onSendBalanceSheettoEmailCompletedDelegate == null)) {
                this.onSendBalanceSheettoEmailCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendBalanceSheettoEmailCompleted);
            }
            base.InvokeAsync(this.onBeginSendBalanceSheettoEmailDelegate, new object[] {
                        Password}, this.onEndSendBalanceSheettoEmailDelegate, this.onSendBalanceSheettoEmailCompletedDelegate, userState);
        }
        
        public void SendBalanceSheettoEmailAutomatic(string Password) {
            base.Channel.SendBalanceSheettoEmailAutomatic(Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSendBalanceSheettoEmailAutomatic(string Password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSendBalanceSheettoEmailAutomatic(Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSendBalanceSheettoEmailAutomatic(System.IAsyncResult result) {
            base.Channel.EndSendBalanceSheettoEmailAutomatic(result);
        }
        
        private System.IAsyncResult OnBeginSendBalanceSheettoEmailAutomatic(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string Password = ((string)(inValues[0]));
            return this.BeginSendBalanceSheettoEmailAutomatic(Password, callback, asyncState);
        }
        
        private object[] OnEndSendBalanceSheettoEmailAutomatic(System.IAsyncResult result) {
            this.EndSendBalanceSheettoEmailAutomatic(result);
            return null;
        }
        
        private void OnSendBalanceSheettoEmailAutomaticCompleted(object state) {
            if ((this.SendBalanceSheettoEmailAutomaticCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendBalanceSheettoEmailAutomaticCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendBalanceSheettoEmailAutomaticAsync(string Password) {
            this.SendBalanceSheettoEmailAutomaticAsync(Password, null);
        }
        
        public void SendBalanceSheettoEmailAutomaticAsync(string Password, object userState) {
            if ((this.onBeginSendBalanceSheettoEmailAutomaticDelegate == null)) {
                this.onBeginSendBalanceSheettoEmailAutomaticDelegate = new BeginOperationDelegate(this.OnBeginSendBalanceSheettoEmailAutomatic);
            }
            if ((this.onEndSendBalanceSheettoEmailAutomaticDelegate == null)) {
                this.onEndSendBalanceSheettoEmailAutomaticDelegate = new EndOperationDelegate(this.OnEndSendBalanceSheettoEmailAutomatic);
            }
            if ((this.onSendBalanceSheettoEmailAutomaticCompletedDelegate == null)) {
                this.onSendBalanceSheettoEmailAutomaticCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendBalanceSheettoEmailAutomaticCompleted);
            }
            base.InvokeAsync(this.onBeginSendBalanceSheettoEmailAutomaticDelegate, new object[] {
                        Password}, this.onEndSendBalanceSheettoEmailAutomaticDelegate, this.onSendBalanceSheettoEmailAutomaticCompletedDelegate, userState);
        }
        
        public bool GetShowTV(int userID) {
            return base.Channel.GetShowTV(userID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetShowTV(int userID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetShowTV(userID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndGetShowTV(System.IAsyncResult result) {
            return base.Channel.EndGetShowTV(result);
        }
        
        private System.IAsyncResult OnBeginGetShowTV(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            return this.BeginGetShowTV(userID, callback, asyncState);
        }
        
        private object[] OnEndGetShowTV(System.IAsyncResult result) {
            bool retVal = this.EndGetShowTV(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetShowTVCompleted(object state) {
            if ((this.GetShowTVCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetShowTVCompleted(this, new GetShowTVCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetShowTVAsync(int userID) {
            this.GetShowTVAsync(userID, null);
        }
        
        public void GetShowTVAsync(int userID, object userState) {
            if ((this.onBeginGetShowTVDelegate == null)) {
                this.onBeginGetShowTVDelegate = new BeginOperationDelegate(this.OnBeginGetShowTV);
            }
            if ((this.onEndGetShowTVDelegate == null)) {
                this.onEndGetShowTVDelegate = new EndOperationDelegate(this.OnEndGetShowTV);
            }
            if ((this.onGetShowTVCompletedDelegate == null)) {
                this.onGetShowTVCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetShowTVCompleted);
            }
            base.InvokeAsync(this.onBeginGetShowTVDelegate, new object[] {
                        userID}, this.onEndGetShowTVDelegate, this.onGetShowTVCompletedDelegate, userState);
        }
        
        public void UpdateShowTV(int userID, bool ShowTV) {
            base.Channel.UpdateShowTV(userID, ShowTV);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateShowTV(int userID, bool ShowTV, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateShowTV(userID, ShowTV, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateShowTV(System.IAsyncResult result) {
            base.Channel.EndUpdateShowTV(result);
        }
        
        private System.IAsyncResult OnBeginUpdateShowTV(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            bool ShowTV = ((bool)(inValues[1]));
            return this.BeginUpdateShowTV(userID, ShowTV, callback, asyncState);
        }
        
        private object[] OnEndUpdateShowTV(System.IAsyncResult result) {
            this.EndUpdateShowTV(result);
            return null;
        }
        
        private void OnUpdateShowTVCompleted(object state) {
            if ((this.UpdateShowTVCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateShowTVCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateShowTVAsync(int userID, bool ShowTV) {
            this.UpdateShowTVAsync(userID, ShowTV, null);
        }
        
        public void UpdateShowTVAsync(int userID, bool ShowTV, object userState) {
            if ((this.onBeginUpdateShowTVDelegate == null)) {
                this.onBeginUpdateShowTVDelegate = new BeginOperationDelegate(this.OnBeginUpdateShowTV);
            }
            if ((this.onEndUpdateShowTVDelegate == null)) {
                this.onEndUpdateShowTVDelegate = new EndOperationDelegate(this.OnEndUpdateShowTV);
            }
            if ((this.onUpdateShowTVCompletedDelegate == null)) {
                this.onUpdateShowTVCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateShowTVCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateShowTVDelegate, new object[] {
                        userID,
                        ShowTV}, this.onEndUpdateShowTVDelegate, this.onUpdateShowTVCompletedDelegate, userState);
        }
        
        public globaltraders.UserServiceReference.SP_UserMarket_GetEventDetailsbyMarketID_Result GetEventDetailsbyMarketBook(string MarketbookID) {
            return base.Channel.GetEventDetailsbyMarketBook(MarketbookID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetEventDetailsbyMarketBook(string MarketbookID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetEventDetailsbyMarketBook(MarketbookID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public globaltraders.UserServiceReference.SP_UserMarket_GetEventDetailsbyMarketID_Result EndGetEventDetailsbyMarketBook(System.IAsyncResult result) {
            return base.Channel.EndGetEventDetailsbyMarketBook(result);
        }
        
        private System.IAsyncResult OnBeginGetEventDetailsbyMarketBook(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string MarketbookID = ((string)(inValues[0]));
            return this.BeginGetEventDetailsbyMarketBook(MarketbookID, callback, asyncState);
        }
        
        private object[] OnEndGetEventDetailsbyMarketBook(System.IAsyncResult result) {
            globaltraders.UserServiceReference.SP_UserMarket_GetEventDetailsbyMarketID_Result retVal = this.EndGetEventDetailsbyMarketBook(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetEventDetailsbyMarketBookCompleted(object state) {
            if ((this.GetEventDetailsbyMarketBookCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetEventDetailsbyMarketBookCompleted(this, new GetEventDetailsbyMarketBookCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetEventDetailsbyMarketBookAsync(string MarketbookID) {
            this.GetEventDetailsbyMarketBookAsync(MarketbookID, null);
        }
        
        public void GetEventDetailsbyMarketBookAsync(string MarketbookID, object userState) {
            if ((this.onBeginGetEventDetailsbyMarketBookDelegate == null)) {
                this.onBeginGetEventDetailsbyMarketBookDelegate = new BeginOperationDelegate(this.OnBeginGetEventDetailsbyMarketBook);
            }
            if ((this.onEndGetEventDetailsbyMarketBookDelegate == null)) {
                this.onEndGetEventDetailsbyMarketBookDelegate = new EndOperationDelegate(this.OnEndGetEventDetailsbyMarketBook);
            }
            if ((this.onGetEventDetailsbyMarketBookCompletedDelegate == null)) {
                this.onGetEventDetailsbyMarketBookCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetEventDetailsbyMarketBookCompleted);
            }
            base.InvokeAsync(this.onBeginGetEventDetailsbyMarketBookDelegate, new object[] {
                        MarketbookID}, this.onEndGetEventDetailsbyMarketBookDelegate, this.onGetEventDetailsbyMarketBookCompletedDelegate, userState);
        }
        
        public string GetLinevMarketsbyEventID(string EventID, System.DateTime EventOpenDate, int UserID) {
            return base.Channel.GetLinevMarketsbyEventID(EventID, EventOpenDate, UserID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetLinevMarketsbyEventID(string EventID, System.DateTime EventOpenDate, int UserID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLinevMarketsbyEventID(EventID, EventOpenDate, UserID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetLinevMarketsbyEventID(System.IAsyncResult result) {
            return base.Channel.EndGetLinevMarketsbyEventID(result);
        }
        
        private System.IAsyncResult OnBeginGetLinevMarketsbyEventID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string EventID = ((string)(inValues[0]));
            System.DateTime EventOpenDate = ((System.DateTime)(inValues[1]));
            int UserID = ((int)(inValues[2]));
            return this.BeginGetLinevMarketsbyEventID(EventID, EventOpenDate, UserID, callback, asyncState);
        }
        
        private object[] OnEndGetLinevMarketsbyEventID(System.IAsyncResult result) {
            string retVal = this.EndGetLinevMarketsbyEventID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLinevMarketsbyEventIDCompleted(object state) {
            if ((this.GetLinevMarketsbyEventIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLinevMarketsbyEventIDCompleted(this, new GetLinevMarketsbyEventIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLinevMarketsbyEventIDAsync(string EventID, System.DateTime EventOpenDate, int UserID) {
            this.GetLinevMarketsbyEventIDAsync(EventID, EventOpenDate, UserID, null);
        }
        
        public void GetLinevMarketsbyEventIDAsync(string EventID, System.DateTime EventOpenDate, int UserID, object userState) {
            if ((this.onBeginGetLinevMarketsbyEventIDDelegate == null)) {
                this.onBeginGetLinevMarketsbyEventIDDelegate = new BeginOperationDelegate(this.OnBeginGetLinevMarketsbyEventID);
            }
            if ((this.onEndGetLinevMarketsbyEventIDDelegate == null)) {
                this.onEndGetLinevMarketsbyEventIDDelegate = new EndOperationDelegate(this.OnEndGetLinevMarketsbyEventID);
            }
            if ((this.onGetLinevMarketsbyEventIDCompletedDelegate == null)) {
                this.onGetLinevMarketsbyEventIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLinevMarketsbyEventIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetLinevMarketsbyEventIDDelegate, new object[] {
                        EventID,
                        EventOpenDate,
                        UserID}, this.onEndGetLinevMarketsbyEventIDDelegate, this.onGetLinevMarketsbyEventIDCompletedDelegate, userState);
        }
        
        public string KJMarketsbyEventID(string EventID, int UserID) {
            return base.Channel.KJMarketsbyEventID(EventID, UserID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginKJMarketsbyEventID(string EventID, int UserID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginKJMarketsbyEventID(EventID, UserID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndKJMarketsbyEventID(System.IAsyncResult result) {
            return base.Channel.EndKJMarketsbyEventID(result);
        }
        
        private System.IAsyncResult OnBeginKJMarketsbyEventID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string EventID = ((string)(inValues[0]));
            int UserID = ((int)(inValues[1]));
            return this.BeginKJMarketsbyEventID(EventID, UserID, callback, asyncState);
        }
        
        private object[] OnEndKJMarketsbyEventID(System.IAsyncResult result) {
            string retVal = this.EndKJMarketsbyEventID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnKJMarketsbyEventIDCompleted(object state) {
            if ((this.KJMarketsbyEventIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.KJMarketsbyEventIDCompleted(this, new KJMarketsbyEventIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void KJMarketsbyEventIDAsync(string EventID, int UserID) {
            this.KJMarketsbyEventIDAsync(EventID, UserID, null);
        }
        
        public void KJMarketsbyEventIDAsync(string EventID, int UserID, object userState) {
            if ((this.onBeginKJMarketsbyEventIDDelegate == null)) {
                this.onBeginKJMarketsbyEventIDDelegate = new BeginOperationDelegate(this.OnBeginKJMarketsbyEventID);
            }
            if ((this.onEndKJMarketsbyEventIDDelegate == null)) {
                this.onEndKJMarketsbyEventIDDelegate = new EndOperationDelegate(this.OnEndKJMarketsbyEventID);
            }
            if ((this.onKJMarketsbyEventIDCompletedDelegate == null)) {
                this.onKJMarketsbyEventIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnKJMarketsbyEventIDCompleted);
            }
            base.InvokeAsync(this.onBeginKJMarketsbyEventIDDelegate, new object[] {
                        EventID,
                        UserID}, this.onEndKJMarketsbyEventIDDelegate, this.onKJMarketsbyEventIDCompletedDelegate, userState);
        }
        
        public string GetLinevMarketsbyEventIDIN(string EventID, System.DateTime EventOpenDate, int UserID) {
            return base.Channel.GetLinevMarketsbyEventIDIN(EventID, EventOpenDate, UserID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetLinevMarketsbyEventIDIN(string EventID, System.DateTime EventOpenDate, int UserID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLinevMarketsbyEventIDIN(EventID, EventOpenDate, UserID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetLinevMarketsbyEventIDIN(System.IAsyncResult result) {
            return base.Channel.EndGetLinevMarketsbyEventIDIN(result);
        }
        
        private System.IAsyncResult OnBeginGetLinevMarketsbyEventIDIN(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string EventID = ((string)(inValues[0]));
            System.DateTime EventOpenDate = ((System.DateTime)(inValues[1]));
            int UserID = ((int)(inValues[2]));
            return this.BeginGetLinevMarketsbyEventIDIN(EventID, EventOpenDate, UserID, callback, asyncState);
        }
        
        private object[] OnEndGetLinevMarketsbyEventIDIN(System.IAsyncResult result) {
            string retVal = this.EndGetLinevMarketsbyEventIDIN(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLinevMarketsbyEventIDINCompleted(object state) {
            if ((this.GetLinevMarketsbyEventIDINCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLinevMarketsbyEventIDINCompleted(this, new GetLinevMarketsbyEventIDINCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLinevMarketsbyEventIDINAsync(string EventID, System.DateTime EventOpenDate, int UserID) {
            this.GetLinevMarketsbyEventIDINAsync(EventID, EventOpenDate, UserID, null);
        }
        
        public void GetLinevMarketsbyEventIDINAsync(string EventID, System.DateTime EventOpenDate, int UserID, object userState) {
            if ((this.onBeginGetLinevMarketsbyEventIDINDelegate == null)) {
                this.onBeginGetLinevMarketsbyEventIDINDelegate = new BeginOperationDelegate(this.OnBeginGetLinevMarketsbyEventIDIN);
            }
            if ((this.onEndGetLinevMarketsbyEventIDINDelegate == null)) {
                this.onEndGetLinevMarketsbyEventIDINDelegate = new EndOperationDelegate(this.OnEndGetLinevMarketsbyEventIDIN);
            }
            if ((this.onGetLinevMarketsbyEventIDINCompletedDelegate == null)) {
                this.onGetLinevMarketsbyEventIDINCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLinevMarketsbyEventIDINCompleted);
            }
            base.InvokeAsync(this.onBeginGetLinevMarketsbyEventIDINDelegate, new object[] {
                        EventID,
                        EventOpenDate,
                        UserID}, this.onEndGetLinevMarketsbyEventIDINDelegate, this.onGetLinevMarketsbyEventIDINCompletedDelegate, userState);
        }
        
        public string GetMarketIDbyEventID(string EventID) {
            return base.Channel.GetMarketIDbyEventID(EventID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetMarketIDbyEventID(string EventID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMarketIDbyEventID(EventID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetMarketIDbyEventID(System.IAsyncResult result) {
            return base.Channel.EndGetMarketIDbyEventID(result);
        }
        
        private System.IAsyncResult OnBeginGetMarketIDbyEventID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string EventID = ((string)(inValues[0]));
            return this.BeginGetMarketIDbyEventID(EventID, callback, asyncState);
        }
        
        private object[] OnEndGetMarketIDbyEventID(System.IAsyncResult result) {
            string retVal = this.EndGetMarketIDbyEventID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMarketIDbyEventIDCompleted(object state) {
            if ((this.GetMarketIDbyEventIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMarketIDbyEventIDCompleted(this, new GetMarketIDbyEventIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMarketIDbyEventIDAsync(string EventID) {
            this.GetMarketIDbyEventIDAsync(EventID, null);
        }
        
        public void GetMarketIDbyEventIDAsync(string EventID, object userState) {
            if ((this.onBeginGetMarketIDbyEventIDDelegate == null)) {
                this.onBeginGetMarketIDbyEventIDDelegate = new BeginOperationDelegate(this.OnBeginGetMarketIDbyEventID);
            }
            if ((this.onEndGetMarketIDbyEventIDDelegate == null)) {
                this.onEndGetMarketIDbyEventIDDelegate = new EndOperationDelegate(this.OnEndGetMarketIDbyEventID);
            }
            if ((this.onGetMarketIDbyEventIDCompletedDelegate == null)) {
                this.onGetMarketIDbyEventIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMarketIDbyEventIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetMarketIDbyEventIDDelegate, new object[] {
                        EventID}, this.onEndGetMarketIDbyEventIDDelegate, this.onGetMarketIDbyEventIDCompletedDelegate, userState);
        }
        
        public string GetKalijut() {
            return base.Channel.GetKalijut();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetKalijut(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetKalijut(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetKalijut(System.IAsyncResult result) {
            return base.Channel.EndGetKalijut(result);
        }
        
        private System.IAsyncResult OnBeginGetKalijut(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetKalijut(callback, asyncState);
        }
        
        private object[] OnEndGetKalijut(System.IAsyncResult result) {
            string retVal = this.EndGetKalijut(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetKalijutCompleted(object state) {
            if ((this.GetKalijutCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetKalijutCompleted(this, new GetKalijutCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetKalijutAsync() {
            this.GetKalijutAsync(null);
        }
        
        public void GetKalijutAsync(object userState) {
            if ((this.onBeginGetKalijutDelegate == null)) {
                this.onBeginGetKalijutDelegate = new BeginOperationDelegate(this.OnBeginGetKalijut);
            }
            if ((this.onEndGetKalijutDelegate == null)) {
                this.onEndGetKalijutDelegate = new EndOperationDelegate(this.OnEndGetKalijut);
            }
            if ((this.onGetKalijutCompletedDelegate == null)) {
                this.onGetKalijutCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetKalijutCompleted);
            }
            base.InvokeAsync(this.onBeginGetKalijutDelegate, null, this.onEndGetKalijutDelegate, this.onGetKalijutCompletedDelegate, userState);
        }
        
        public string GetFigureOdds() {
            return base.Channel.GetFigureOdds();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetFigureOdds(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFigureOdds(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetFigureOdds(System.IAsyncResult result) {
            return base.Channel.EndGetFigureOdds(result);
        }
        
        private System.IAsyncResult OnBeginGetFigureOdds(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetFigureOdds(callback, asyncState);
        }
        
        private object[] OnEndGetFigureOdds(System.IAsyncResult result) {
            string retVal = this.EndGetFigureOdds(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFigureOddsCompleted(object state) {
            if ((this.GetFigureOddsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFigureOddsCompleted(this, new GetFigureOddsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFigureOddsAsync() {
            this.GetFigureOddsAsync(null);
        }
        
        public void GetFigureOddsAsync(object userState) {
            if ((this.onBeginGetFigureOddsDelegate == null)) {
                this.onBeginGetFigureOddsDelegate = new BeginOperationDelegate(this.OnBeginGetFigureOdds);
            }
            if ((this.onEndGetFigureOddsDelegate == null)) {
                this.onEndGetFigureOddsDelegate = new EndOperationDelegate(this.OnEndGetFigureOdds);
            }
            if ((this.onGetFigureOddsCompletedDelegate == null)) {
                this.onGetFigureOddsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFigureOddsCompleted);
            }
            base.InvokeAsync(this.onBeginGetFigureOddsDelegate, null, this.onEndGetFigureOddsDelegate, this.onGetFigureOddsCompletedDelegate, userState);
        }
        
        public string GetScoresbyEventIDandDate(string EventId, System.DateTime EventOpenDate) {
            return base.Channel.GetScoresbyEventIDandDate(EventId, EventOpenDate);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetScoresbyEventIDandDate(string EventId, System.DateTime EventOpenDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetScoresbyEventIDandDate(EventId, EventOpenDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetScoresbyEventIDandDate(System.IAsyncResult result) {
            return base.Channel.EndGetScoresbyEventIDandDate(result);
        }
        
        private System.IAsyncResult OnBeginGetScoresbyEventIDandDate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string EventId = ((string)(inValues[0]));
            System.DateTime EventOpenDate = ((System.DateTime)(inValues[1]));
            return this.BeginGetScoresbyEventIDandDate(EventId, EventOpenDate, callback, asyncState);
        }
        
        private object[] OnEndGetScoresbyEventIDandDate(System.IAsyncResult result) {
            string retVal = this.EndGetScoresbyEventIDandDate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetScoresbyEventIDandDateCompleted(object state) {
            if ((this.GetScoresbyEventIDandDateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetScoresbyEventIDandDateCompleted(this, new GetScoresbyEventIDandDateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetScoresbyEventIDandDateAsync(string EventId, System.DateTime EventOpenDate) {
            this.GetScoresbyEventIDandDateAsync(EventId, EventOpenDate, null);
        }
        
        public void GetScoresbyEventIDandDateAsync(string EventId, System.DateTime EventOpenDate, object userState) {
            if ((this.onBeginGetScoresbyEventIDandDateDelegate == null)) {
                this.onBeginGetScoresbyEventIDandDateDelegate = new BeginOperationDelegate(this.OnBeginGetScoresbyEventIDandDate);
            }
            if ((this.onEndGetScoresbyEventIDandDateDelegate == null)) {
                this.onEndGetScoresbyEventIDandDateDelegate = new EndOperationDelegate(this.OnEndGetScoresbyEventIDandDate);
            }
            if ((this.onGetScoresbyEventIDandDateCompletedDelegate == null)) {
                this.onGetScoresbyEventIDandDateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetScoresbyEventIDandDateCompleted);
            }
            base.InvokeAsync(this.onBeginGetScoresbyEventIDandDateDelegate, new object[] {
                        EventId,
                        EventOpenDate}, this.onEndGetScoresbyEventIDandDateDelegate, this.onGetScoresbyEventIDandDateCompletedDelegate, userState);
        }
        
        public string GetMarketRules() {
            return base.Channel.GetMarketRules();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetMarketRules(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMarketRules(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetMarketRules(System.IAsyncResult result) {
            return base.Channel.EndGetMarketRules(result);
        }
        
        private System.IAsyncResult OnBeginGetMarketRules(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetMarketRules(callback, asyncState);
        }
        
        private object[] OnEndGetMarketRules(System.IAsyncResult result) {
            string retVal = this.EndGetMarketRules(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMarketRulesCompleted(object state) {
            if ((this.GetMarketRulesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMarketRulesCompleted(this, new GetMarketRulesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMarketRulesAsync() {
            this.GetMarketRulesAsync(null);
        }
        
        public void GetMarketRulesAsync(object userState) {
            if ((this.onBeginGetMarketRulesDelegate == null)) {
                this.onBeginGetMarketRulesDelegate = new BeginOperationDelegate(this.OnBeginGetMarketRules);
            }
            if ((this.onEndGetMarketRulesDelegate == null)) {
                this.onEndGetMarketRulesDelegate = new EndOperationDelegate(this.OnEndGetMarketRules);
            }
            if ((this.onGetMarketRulesCompletedDelegate == null)) {
                this.onGetMarketRulesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMarketRulesCompleted);
            }
            base.InvokeAsync(this.onBeginGetMarketRulesDelegate, null, this.onEndGetMarketRulesDelegate, this.onGetMarketRulesCompletedDelegate, userState);
        }
        
        public string GetLineandMatchOddsforAssociation() {
            return base.Channel.GetLineandMatchOddsforAssociation();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetLineandMatchOddsforAssociation(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLineandMatchOddsforAssociation(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetLineandMatchOddsforAssociation(System.IAsyncResult result) {
            return base.Channel.EndGetLineandMatchOddsforAssociation(result);
        }
        
        private System.IAsyncResult OnBeginGetLineandMatchOddsforAssociation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetLineandMatchOddsforAssociation(callback, asyncState);
        }
        
        private object[] OnEndGetLineandMatchOddsforAssociation(System.IAsyncResult result) {
            string retVal = this.EndGetLineandMatchOddsforAssociation(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLineandMatchOddsforAssociationCompleted(object state) {
            if ((this.GetLineandMatchOddsforAssociationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLineandMatchOddsforAssociationCompleted(this, new GetLineandMatchOddsforAssociationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLineandMatchOddsforAssociationAsync() {
            this.GetLineandMatchOddsforAssociationAsync(null);
        }
        
        public void GetLineandMatchOddsforAssociationAsync(object userState) {
            if ((this.onBeginGetLineandMatchOddsforAssociationDelegate == null)) {
                this.onBeginGetLineandMatchOddsforAssociationDelegate = new BeginOperationDelegate(this.OnBeginGetLineandMatchOddsforAssociation);
            }
            if ((this.onEndGetLineandMatchOddsforAssociationDelegate == null)) {
                this.onEndGetLineandMatchOddsforAssociationDelegate = new EndOperationDelegate(this.OnEndGetLineandMatchOddsforAssociation);
            }
            if ((this.onGetLineandMatchOddsforAssociationCompletedDelegate == null)) {
                this.onGetLineandMatchOddsforAssociationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLineandMatchOddsforAssociationCompleted);
            }
            base.InvokeAsync(this.onBeginGetLineandMatchOddsforAssociationDelegate, null, this.onEndGetLineandMatchOddsforAssociationDelegate, this.onGetLineandMatchOddsforAssociationCompletedDelegate, userState);
        }
        
        public void UpdateAssociateEventID(string associateventID, string EventID) {
            base.Channel.UpdateAssociateEventID(associateventID, EventID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateAssociateEventID(string associateventID, string EventID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateAssociateEventID(associateventID, EventID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateAssociateEventID(System.IAsyncResult result) {
            base.Channel.EndUpdateAssociateEventID(result);
        }
        
        private System.IAsyncResult OnBeginUpdateAssociateEventID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string associateventID = ((string)(inValues[0]));
            string EventID = ((string)(inValues[1]));
            return this.BeginUpdateAssociateEventID(associateventID, EventID, callback, asyncState);
        }
        
        private object[] OnEndUpdateAssociateEventID(System.IAsyncResult result) {
            this.EndUpdateAssociateEventID(result);
            return null;
        }
        
        private void OnUpdateAssociateEventIDCompleted(object state) {
            if ((this.UpdateAssociateEventIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateAssociateEventIDCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateAssociateEventIDAsync(string associateventID, string EventID) {
            this.UpdateAssociateEventIDAsync(associateventID, EventID, null);
        }
        
        public void UpdateAssociateEventIDAsync(string associateventID, string EventID, object userState) {
            if ((this.onBeginUpdateAssociateEventIDDelegate == null)) {
                this.onBeginUpdateAssociateEventIDDelegate = new BeginOperationDelegate(this.OnBeginUpdateAssociateEventID);
            }
            if ((this.onEndUpdateAssociateEventIDDelegate == null)) {
                this.onEndUpdateAssociateEventIDDelegate = new EndOperationDelegate(this.OnEndUpdateAssociateEventID);
            }
            if ((this.onUpdateAssociateEventIDCompletedDelegate == null)) {
                this.onUpdateAssociateEventIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateAssociateEventIDCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateAssociateEventIDDelegate, new object[] {
                        associateventID,
                        EventID}, this.onEndUpdateAssociateEventIDDelegate, this.onUpdateAssociateEventIDCompletedDelegate, userState);
        }
        
        public string GetLiveTVChanels(string Passkey) {
            return base.Channel.GetLiveTVChanels(Passkey);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetLiveTVChanels(string Passkey, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLiveTVChanels(Passkey, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetLiveTVChanels(System.IAsyncResult result) {
            return base.Channel.EndGetLiveTVChanels(result);
        }
        
        private System.IAsyncResult OnBeginGetLiveTVChanels(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string Passkey = ((string)(inValues[0]));
            return this.BeginGetLiveTVChanels(Passkey, callback, asyncState);
        }
        
        private object[] OnEndGetLiveTVChanels(System.IAsyncResult result) {
            string retVal = this.EndGetLiveTVChanels(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLiveTVChanelsCompleted(object state) {
            if ((this.GetLiveTVChanelsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLiveTVChanelsCompleted(this, new GetLiveTVChanelsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLiveTVChanelsAsync(string Passkey) {
            this.GetLiveTVChanelsAsync(Passkey, null);
        }
        
        public void GetLiveTVChanelsAsync(string Passkey, object userState) {
            if ((this.onBeginGetLiveTVChanelsDelegate == null)) {
                this.onBeginGetLiveTVChanelsDelegate = new BeginOperationDelegate(this.OnBeginGetLiveTVChanels);
            }
            if ((this.onEndGetLiveTVChanelsDelegate == null)) {
                this.onEndGetLiveTVChanelsDelegate = new EndOperationDelegate(this.OnEndGetLiveTVChanels);
            }
            if ((this.onGetLiveTVChanelsCompletedDelegate == null)) {
                this.onGetLiveTVChanelsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLiveTVChanelsCompleted);
            }
            base.InvokeAsync(this.onBeginGetLiveTVChanelsDelegate, new object[] {
                        Passkey}, this.onEndGetLiveTVChanelsDelegate, this.onGetLiveTVChanelsCompletedDelegate, userState);
        }
        
        public string GetScorebyEventIDandInnings(string EventID, System.DateTime EventOpenDate, int Innings) {
            return base.Channel.GetScorebyEventIDandInnings(EventID, EventOpenDate, Innings);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetScorebyEventIDandInnings(string EventID, System.DateTime EventOpenDate, int Innings, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetScorebyEventIDandInnings(EventID, EventOpenDate, Innings, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetScorebyEventIDandInnings(System.IAsyncResult result) {
            return base.Channel.EndGetScorebyEventIDandInnings(result);
        }
        
        private System.IAsyncResult OnBeginGetScorebyEventIDandInnings(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string EventID = ((string)(inValues[0]));
            System.DateTime EventOpenDate = ((System.DateTime)(inValues[1]));
            int Innings = ((int)(inValues[2]));
            return this.BeginGetScorebyEventIDandInnings(EventID, EventOpenDate, Innings, callback, asyncState);
        }
        
        private object[] OnEndGetScorebyEventIDandInnings(System.IAsyncResult result) {
            string retVal = this.EndGetScorebyEventIDandInnings(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetScorebyEventIDandInningsCompleted(object state) {
            if ((this.GetScorebyEventIDandInningsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetScorebyEventIDandInningsCompleted(this, new GetScorebyEventIDandInningsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetScorebyEventIDandInningsAsync(string EventID, System.DateTime EventOpenDate, int Innings) {
            this.GetScorebyEventIDandInningsAsync(EventID, EventOpenDate, Innings, null);
        }
        
        public void GetScorebyEventIDandInningsAsync(string EventID, System.DateTime EventOpenDate, int Innings, object userState) {
            if ((this.onBeginGetScorebyEventIDandInningsDelegate == null)) {
                this.onBeginGetScorebyEventIDandInningsDelegate = new BeginOperationDelegate(this.OnBeginGetScorebyEventIDandInnings);
            }
            if ((this.onEndGetScorebyEventIDandInningsDelegate == null)) {
                this.onEndGetScorebyEventIDandInningsDelegate = new EndOperationDelegate(this.OnEndGetScorebyEventIDandInnings);
            }
            if ((this.onGetScorebyEventIDandInningsCompletedDelegate == null)) {
                this.onGetScorebyEventIDandInningsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetScorebyEventIDandInningsCompleted);
            }
            base.InvokeAsync(this.onBeginGetScorebyEventIDandInningsDelegate, new object[] {
                        EventID,
                        EventOpenDate,
                        Innings}, this.onEndGetScorebyEventIDandInningsDelegate, this.onGetScorebyEventIDandInningsCompletedDelegate, userState);
        }
        
        public string GetScorebyEventIDandInningsandOvers(string EventID, System.DateTime EventOpenDate, int Innings, int Overs) {
            return base.Channel.GetScorebyEventIDandInningsandOvers(EventID, EventOpenDate, Innings, Overs);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetScorebyEventIDandInningsandOvers(string EventID, System.DateTime EventOpenDate, int Innings, int Overs, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetScorebyEventIDandInningsandOvers(EventID, EventOpenDate, Innings, Overs, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetScorebyEventIDandInningsandOvers(System.IAsyncResult result) {
            return base.Channel.EndGetScorebyEventIDandInningsandOvers(result);
        }
        
        private System.IAsyncResult OnBeginGetScorebyEventIDandInningsandOvers(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string EventID = ((string)(inValues[0]));
            System.DateTime EventOpenDate = ((System.DateTime)(inValues[1]));
            int Innings = ((int)(inValues[2]));
            int Overs = ((int)(inValues[3]));
            return this.BeginGetScorebyEventIDandInningsandOvers(EventID, EventOpenDate, Innings, Overs, callback, asyncState);
        }
        
        private object[] OnEndGetScorebyEventIDandInningsandOvers(System.IAsyncResult result) {
            string retVal = this.EndGetScorebyEventIDandInningsandOvers(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetScorebyEventIDandInningsandOversCompleted(object state) {
            if ((this.GetScorebyEventIDandInningsandOversCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetScorebyEventIDandInningsandOversCompleted(this, new GetScorebyEventIDandInningsandOversCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetScorebyEventIDandInningsandOversAsync(string EventID, System.DateTime EventOpenDate, int Innings, int Overs) {
            this.GetScorebyEventIDandInningsandOversAsync(EventID, EventOpenDate, Innings, Overs, null);
        }
        
        public void GetScorebyEventIDandInningsandOversAsync(string EventID, System.DateTime EventOpenDate, int Innings, int Overs, object userState) {
            if ((this.onBeginGetScorebyEventIDandInningsandOversDelegate == null)) {
                this.onBeginGetScorebyEventIDandInningsandOversDelegate = new BeginOperationDelegate(this.OnBeginGetScorebyEventIDandInningsandOvers);
            }
            if ((this.onEndGetScorebyEventIDandInningsandOversDelegate == null)) {
                this.onEndGetScorebyEventIDandInningsandOversDelegate = new EndOperationDelegate(this.OnEndGetScorebyEventIDandInningsandOvers);
            }
            if ((this.onGetScorebyEventIDandInningsandOversCompletedDelegate == null)) {
                this.onGetScorebyEventIDandInningsandOversCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetScorebyEventIDandInningsandOversCompleted);
            }
            base.InvokeAsync(this.onBeginGetScorebyEventIDandInningsandOversDelegate, new object[] {
                        EventID,
                        EventOpenDate,
                        Innings,
                        Overs}, this.onEndGetScorebyEventIDandInningsandOversDelegate, this.onGetScorebyEventIDandInningsandOversCompletedDelegate, userState);
        }
        
        public void AddScoreToBallbyBallsummary(string EventID, string MarketCatalogueID, double over, int score, int innings, System.DateTime EventOpenDate, int wickets, string teamname, string matchstatus) {
            base.Channel.AddScoreToBallbyBallsummary(EventID, MarketCatalogueID, over, score, innings, EventOpenDate, wickets, teamname, matchstatus);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddScoreToBallbyBallsummary(string EventID, string MarketCatalogueID, double over, int score, int innings, System.DateTime EventOpenDate, int wickets, string teamname, string matchstatus, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddScoreToBallbyBallsummary(EventID, MarketCatalogueID, over, score, innings, EventOpenDate, wickets, teamname, matchstatus, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndAddScoreToBallbyBallsummary(System.IAsyncResult result) {
            base.Channel.EndAddScoreToBallbyBallsummary(result);
        }
        
        private System.IAsyncResult OnBeginAddScoreToBallbyBallsummary(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string EventID = ((string)(inValues[0]));
            string MarketCatalogueID = ((string)(inValues[1]));
            double over = ((double)(inValues[2]));
            int score = ((int)(inValues[3]));
            int innings = ((int)(inValues[4]));
            System.DateTime EventOpenDate = ((System.DateTime)(inValues[5]));
            int wickets = ((int)(inValues[6]));
            string teamname = ((string)(inValues[7]));
            string matchstatus = ((string)(inValues[8]));
            return this.BeginAddScoreToBallbyBallsummary(EventID, MarketCatalogueID, over, score, innings, EventOpenDate, wickets, teamname, matchstatus, callback, asyncState);
        }
        
        private object[] OnEndAddScoreToBallbyBallsummary(System.IAsyncResult result) {
            this.EndAddScoreToBallbyBallsummary(result);
            return null;
        }
        
        private void OnAddScoreToBallbyBallsummaryCompleted(object state) {
            if ((this.AddScoreToBallbyBallsummaryCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddScoreToBallbyBallsummaryCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddScoreToBallbyBallsummaryAsync(string EventID, string MarketCatalogueID, double over, int score, int innings, System.DateTime EventOpenDate, int wickets, string teamname, string matchstatus) {
            this.AddScoreToBallbyBallsummaryAsync(EventID, MarketCatalogueID, over, score, innings, EventOpenDate, wickets, teamname, matchstatus, null);
        }
        
        public void AddScoreToBallbyBallsummaryAsync(string EventID, string MarketCatalogueID, double over, int score, int innings, System.DateTime EventOpenDate, int wickets, string teamname, string matchstatus, object userState) {
            if ((this.onBeginAddScoreToBallbyBallsummaryDelegate == null)) {
                this.onBeginAddScoreToBallbyBallsummaryDelegate = new BeginOperationDelegate(this.OnBeginAddScoreToBallbyBallsummary);
            }
            if ((this.onEndAddScoreToBallbyBallsummaryDelegate == null)) {
                this.onEndAddScoreToBallbyBallsummaryDelegate = new EndOperationDelegate(this.OnEndAddScoreToBallbyBallsummary);
            }
            if ((this.onAddScoreToBallbyBallsummaryCompletedDelegate == null)) {
                this.onAddScoreToBallbyBallsummaryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddScoreToBallbyBallsummaryCompleted);
            }
            base.InvokeAsync(this.onBeginAddScoreToBallbyBallsummaryDelegate, new object[] {
                        EventID,
                        MarketCatalogueID,
                        over,
                        score,
                        innings,
                        EventOpenDate,
                        wickets,
                        teamname,
                        matchstatus}, this.onEndAddScoreToBallbyBallsummaryDelegate, this.onAddScoreToBallbyBallsummaryCompletedDelegate, userState);
        }
        
        public void CheckforMatchCompletedFancy(string MarketBookID, int ScoreforThisOver) {
            base.Channel.CheckforMatchCompletedFancy(MarketBookID, ScoreforThisOver);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCheckforMatchCompletedFancy(string MarketBookID, int ScoreforThisOver, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCheckforMatchCompletedFancy(MarketBookID, ScoreforThisOver, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndCheckforMatchCompletedFancy(System.IAsyncResult result) {
            base.Channel.EndCheckforMatchCompletedFancy(result);
        }
        
        private System.IAsyncResult OnBeginCheckforMatchCompletedFancy(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string MarketBookID = ((string)(inValues[0]));
            int ScoreforThisOver = ((int)(inValues[1]));
            return this.BeginCheckforMatchCompletedFancy(MarketBookID, ScoreforThisOver, callback, asyncState);
        }
        
        private object[] OnEndCheckforMatchCompletedFancy(System.IAsyncResult result) {
            this.EndCheckforMatchCompletedFancy(result);
            return null;
        }
        
        private void OnCheckforMatchCompletedFancyCompleted(object state) {
            if ((this.CheckforMatchCompletedFancyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CheckforMatchCompletedFancyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CheckforMatchCompletedFancyAsync(string MarketBookID, int ScoreforThisOver) {
            this.CheckforMatchCompletedFancyAsync(MarketBookID, ScoreforThisOver, null);
        }
        
        public void CheckforMatchCompletedFancyAsync(string MarketBookID, int ScoreforThisOver, object userState) {
            if ((this.onBeginCheckforMatchCompletedFancyDelegate == null)) {
                this.onBeginCheckforMatchCompletedFancyDelegate = new BeginOperationDelegate(this.OnBeginCheckforMatchCompletedFancy);
            }
            if ((this.onEndCheckforMatchCompletedFancyDelegate == null)) {
                this.onEndCheckforMatchCompletedFancyDelegate = new EndOperationDelegate(this.OnEndCheckforMatchCompletedFancy);
            }
            if ((this.onCheckforMatchCompletedFancyCompletedDelegate == null)) {
                this.onCheckforMatchCompletedFancyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCheckforMatchCompletedFancyCompleted);
            }
            base.InvokeAsync(this.onBeginCheckforMatchCompletedFancyDelegate, new object[] {
                        MarketBookID,
                        ScoreforThisOver}, this.onEndCheckforMatchCompletedFancyDelegate, this.onCheckforMatchCompletedFancyCompletedDelegate, userState);
        }
        
        public void CheckforMatchCompletedFancyIN(string MarketBookID, string Marketname, int ScoreforThisOver) {
            base.Channel.CheckforMatchCompletedFancyIN(MarketBookID, Marketname, ScoreforThisOver);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCheckforMatchCompletedFancyIN(string MarketBookID, string Marketname, int ScoreforThisOver, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCheckforMatchCompletedFancyIN(MarketBookID, Marketname, ScoreforThisOver, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndCheckforMatchCompletedFancyIN(System.IAsyncResult result) {
            base.Channel.EndCheckforMatchCompletedFancyIN(result);
        }
        
        private System.IAsyncResult OnBeginCheckforMatchCompletedFancyIN(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string MarketBookID = ((string)(inValues[0]));
            string Marketname = ((string)(inValues[1]));
            int ScoreforThisOver = ((int)(inValues[2]));
            return this.BeginCheckforMatchCompletedFancyIN(MarketBookID, Marketname, ScoreforThisOver, callback, asyncState);
        }
        
        private object[] OnEndCheckforMatchCompletedFancyIN(System.IAsyncResult result) {
            this.EndCheckforMatchCompletedFancyIN(result);
            return null;
        }
        
        private void OnCheckforMatchCompletedFancyINCompleted(object state) {
            if ((this.CheckforMatchCompletedFancyINCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CheckforMatchCompletedFancyINCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CheckforMatchCompletedFancyINAsync(string MarketBookID, string Marketname, int ScoreforThisOver) {
            this.CheckforMatchCompletedFancyINAsync(MarketBookID, Marketname, ScoreforThisOver, null);
        }
        
        public void CheckforMatchCompletedFancyINAsync(string MarketBookID, string Marketname, int ScoreforThisOver, object userState) {
            if ((this.onBeginCheckforMatchCompletedFancyINDelegate == null)) {
                this.onBeginCheckforMatchCompletedFancyINDelegate = new BeginOperationDelegate(this.OnBeginCheckforMatchCompletedFancyIN);
            }
            if ((this.onEndCheckforMatchCompletedFancyINDelegate == null)) {
                this.onEndCheckforMatchCompletedFancyINDelegate = new EndOperationDelegate(this.OnEndCheckforMatchCompletedFancyIN);
            }
            if ((this.onCheckforMatchCompletedFancyINCompletedDelegate == null)) {
                this.onCheckforMatchCompletedFancyINCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCheckforMatchCompletedFancyINCompleted);
            }
            base.InvokeAsync(this.onBeginCheckforMatchCompletedFancyINDelegate, new object[] {
                        MarketBookID,
                        Marketname,
                        ScoreforThisOver}, this.onEndCheckforMatchCompletedFancyINDelegate, this.onCheckforMatchCompletedFancyINCompletedDelegate, userState);
        }
        
        public void CheckforMatchCompletedFancyKJ(string MarketBookID, int selectionID, int ScoreforThisOver) {
            base.Channel.CheckforMatchCompletedFancyKJ(MarketBookID, selectionID, ScoreforThisOver);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCheckforMatchCompletedFancyKJ(string MarketBookID, int selectionID, int ScoreforThisOver, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCheckforMatchCompletedFancyKJ(MarketBookID, selectionID, ScoreforThisOver, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndCheckforMatchCompletedFancyKJ(System.IAsyncResult result) {
            base.Channel.EndCheckforMatchCompletedFancyKJ(result);
        }
        
        private System.IAsyncResult OnBeginCheckforMatchCompletedFancyKJ(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string MarketBookID = ((string)(inValues[0]));
            int selectionID = ((int)(inValues[1]));
            int ScoreforThisOver = ((int)(inValues[2]));
            return this.BeginCheckforMatchCompletedFancyKJ(MarketBookID, selectionID, ScoreforThisOver, callback, asyncState);
        }
        
        private object[] OnEndCheckforMatchCompletedFancyKJ(System.IAsyncResult result) {
            this.EndCheckforMatchCompletedFancyKJ(result);
            return null;
        }
        
        private void OnCheckforMatchCompletedFancyKJCompleted(object state) {
            if ((this.CheckforMatchCompletedFancyKJCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CheckforMatchCompletedFancyKJCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CheckforMatchCompletedFancyKJAsync(string MarketBookID, int selectionID, int ScoreforThisOver) {
            this.CheckforMatchCompletedFancyKJAsync(MarketBookID, selectionID, ScoreforThisOver, null);
        }
        
        public void CheckforMatchCompletedFancyKJAsync(string MarketBookID, int selectionID, int ScoreforThisOver, object userState) {
            if ((this.onBeginCheckforMatchCompletedFancyKJDelegate == null)) {
                this.onBeginCheckforMatchCompletedFancyKJDelegate = new BeginOperationDelegate(this.OnBeginCheckforMatchCompletedFancyKJ);
            }
            if ((this.onEndCheckforMatchCompletedFancyKJDelegate == null)) {
                this.onEndCheckforMatchCompletedFancyKJDelegate = new EndOperationDelegate(this.OnEndCheckforMatchCompletedFancyKJ);
            }
            if ((this.onCheckforMatchCompletedFancyKJCompletedDelegate == null)) {
                this.onCheckforMatchCompletedFancyKJCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCheckforMatchCompletedFancyKJCompleted);
            }
            base.InvokeAsync(this.onBeginCheckforMatchCompletedFancyKJDelegate, new object[] {
                        MarketBookID,
                        selectionID,
                        ScoreforThisOver}, this.onEndCheckforMatchCompletedFancyKJDelegate, this.onCheckforMatchCompletedFancyKJCompletedDelegate, userState);
        }
        
        public void CheckforMatchCompletedSmallFig(string MarketBookID, int selectionID, int ScoreforThisOver) {
            base.Channel.CheckforMatchCompletedSmallFig(MarketBookID, selectionID, ScoreforThisOver);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCheckforMatchCompletedSmallFig(string MarketBookID, int selectionID, int ScoreforThisOver, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCheckforMatchCompletedSmallFig(MarketBookID, selectionID, ScoreforThisOver, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndCheckforMatchCompletedSmallFig(System.IAsyncResult result) {
            base.Channel.EndCheckforMatchCompletedSmallFig(result);
        }
        
        private System.IAsyncResult OnBeginCheckforMatchCompletedSmallFig(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string MarketBookID = ((string)(inValues[0]));
            int selectionID = ((int)(inValues[1]));
            int ScoreforThisOver = ((int)(inValues[2]));
            return this.BeginCheckforMatchCompletedSmallFig(MarketBookID, selectionID, ScoreforThisOver, callback, asyncState);
        }
        
        private object[] OnEndCheckforMatchCompletedSmallFig(System.IAsyncResult result) {
            this.EndCheckforMatchCompletedSmallFig(result);
            return null;
        }
        
        private void OnCheckforMatchCompletedSmallFigCompleted(object state) {
            if ((this.CheckforMatchCompletedSmallFigCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CheckforMatchCompletedSmallFigCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CheckforMatchCompletedSmallFigAsync(string MarketBookID, int selectionID, int ScoreforThisOver) {
            this.CheckforMatchCompletedSmallFigAsync(MarketBookID, selectionID, ScoreforThisOver, null);
        }
        
        public void CheckforMatchCompletedSmallFigAsync(string MarketBookID, int selectionID, int ScoreforThisOver, object userState) {
            if ((this.onBeginCheckforMatchCompletedSmallFigDelegate == null)) {
                this.onBeginCheckforMatchCompletedSmallFigDelegate = new BeginOperationDelegate(this.OnBeginCheckforMatchCompletedSmallFig);
            }
            if ((this.onEndCheckforMatchCompletedSmallFigDelegate == null)) {
                this.onEndCheckforMatchCompletedSmallFigDelegate = new EndOperationDelegate(this.OnEndCheckforMatchCompletedSmallFig);
            }
            if ((this.onCheckforMatchCompletedSmallFigCompletedDelegate == null)) {
                this.onCheckforMatchCompletedSmallFigCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCheckforMatchCompletedSmallFigCompleted);
            }
            base.InvokeAsync(this.onBeginCheckforMatchCompletedSmallFigDelegate, new object[] {
                        MarketBookID,
                        selectionID,
                        ScoreforThisOver}, this.onEndCheckforMatchCompletedSmallFigDelegate, this.onCheckforMatchCompletedSmallFigCompletedDelegate, userState);
        }
        
        public void CheckforMatchCompletedFancyFig(string MarketBookID, int selectionID, int ScoreforThisOver) {
            base.Channel.CheckforMatchCompletedFancyFig(MarketBookID, selectionID, ScoreforThisOver);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCheckforMatchCompletedFancyFig(string MarketBookID, int selectionID, int ScoreforThisOver, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCheckforMatchCompletedFancyFig(MarketBookID, selectionID, ScoreforThisOver, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndCheckforMatchCompletedFancyFig(System.IAsyncResult result) {
            base.Channel.EndCheckforMatchCompletedFancyFig(result);
        }
        
        private System.IAsyncResult OnBeginCheckforMatchCompletedFancyFig(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string MarketBookID = ((string)(inValues[0]));
            int selectionID = ((int)(inValues[1]));
            int ScoreforThisOver = ((int)(inValues[2]));
            return this.BeginCheckforMatchCompletedFancyFig(MarketBookID, selectionID, ScoreforThisOver, callback, asyncState);
        }
        
        private object[] OnEndCheckforMatchCompletedFancyFig(System.IAsyncResult result) {
            this.EndCheckforMatchCompletedFancyFig(result);
            return null;
        }
        
        private void OnCheckforMatchCompletedFancyFigCompleted(object state) {
            if ((this.CheckforMatchCompletedFancyFigCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CheckforMatchCompletedFancyFigCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CheckforMatchCompletedFancyFigAsync(string MarketBookID, int selectionID, int ScoreforThisOver) {
            this.CheckforMatchCompletedFancyFigAsync(MarketBookID, selectionID, ScoreforThisOver, null);
        }
        
        public void CheckforMatchCompletedFancyFigAsync(string MarketBookID, int selectionID, int ScoreforThisOver, object userState) {
            if ((this.onBeginCheckforMatchCompletedFancyFigDelegate == null)) {
                this.onBeginCheckforMatchCompletedFancyFigDelegate = new BeginOperationDelegate(this.OnBeginCheckforMatchCompletedFancyFig);
            }
            if ((this.onEndCheckforMatchCompletedFancyFigDelegate == null)) {
                this.onEndCheckforMatchCompletedFancyFigDelegate = new EndOperationDelegate(this.OnEndCheckforMatchCompletedFancyFig);
            }
            if ((this.onCheckforMatchCompletedFancyFigCompletedDelegate == null)) {
                this.onCheckforMatchCompletedFancyFigCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCheckforMatchCompletedFancyFigCompleted);
            }
            base.InvokeAsync(this.onBeginCheckforMatchCompletedFancyFigDelegate, new object[] {
                        MarketBookID,
                        selectionID,
                        ScoreforThisOver}, this.onEndCheckforMatchCompletedFancyFigDelegate, this.onCheckforMatchCompletedFancyFigCompletedDelegate, userState);
        }
        
        public bool InsertUserAccountsFancy(ExternalAPI.TO.MarketBook[] marketbookstatus, int userID, string Password, int ScoreforThisOver) {
            return base.Channel.InsertUserAccountsFancy(marketbookstatus, userID, Password, ScoreforThisOver);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginInsertUserAccountsFancy(ExternalAPI.TO.MarketBook[] marketbookstatus, int userID, string Password, int ScoreforThisOver, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInsertUserAccountsFancy(marketbookstatus, userID, Password, ScoreforThisOver, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndInsertUserAccountsFancy(System.IAsyncResult result) {
            return base.Channel.EndInsertUserAccountsFancy(result);
        }
        
        private System.IAsyncResult OnBeginInsertUserAccountsFancy(object[] inValues, System.AsyncCallback callback, object asyncState) {
            ExternalAPI.TO.MarketBook[] marketbookstatus = ((ExternalAPI.TO.MarketBook[])(inValues[0]));
            int userID = ((int)(inValues[1]));
            string Password = ((string)(inValues[2]));
            int ScoreforThisOver = ((int)(inValues[3]));
            return this.BeginInsertUserAccountsFancy(marketbookstatus, userID, Password, ScoreforThisOver, callback, asyncState);
        }
        
        private object[] OnEndInsertUserAccountsFancy(System.IAsyncResult result) {
            bool retVal = this.EndInsertUserAccountsFancy(result);
            return new object[] {
                    retVal};
        }
        
        private void OnInsertUserAccountsFancyCompleted(object state) {
            if ((this.InsertUserAccountsFancyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InsertUserAccountsFancyCompleted(this, new InsertUserAccountsFancyCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InsertUserAccountsFancyAsync(ExternalAPI.TO.MarketBook[] marketbookstatus, int userID, string Password, int ScoreforThisOver) {
            this.InsertUserAccountsFancyAsync(marketbookstatus, userID, Password, ScoreforThisOver, null);
        }
        
        public void InsertUserAccountsFancyAsync(ExternalAPI.TO.MarketBook[] marketbookstatus, int userID, string Password, int ScoreforThisOver, object userState) {
            if ((this.onBeginInsertUserAccountsFancyDelegate == null)) {
                this.onBeginInsertUserAccountsFancyDelegate = new BeginOperationDelegate(this.OnBeginInsertUserAccountsFancy);
            }
            if ((this.onEndInsertUserAccountsFancyDelegate == null)) {
                this.onEndInsertUserAccountsFancyDelegate = new EndOperationDelegate(this.OnEndInsertUserAccountsFancy);
            }
            if ((this.onInsertUserAccountsFancyCompletedDelegate == null)) {
                this.onInsertUserAccountsFancyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInsertUserAccountsFancyCompleted);
            }
            base.InvokeAsync(this.onBeginInsertUserAccountsFancyDelegate, new object[] {
                        marketbookstatus,
                        userID,
                        Password,
                        ScoreforThisOver}, this.onEndInsertUserAccountsFancyDelegate, this.onInsertUserAccountsFancyCompletedDelegate, userState);
        }
        
        public bool GetIsComAllowbyUserID(int userID) {
            return base.Channel.GetIsComAllowbyUserID(userID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetIsComAllowbyUserID(int userID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetIsComAllowbyUserID(userID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndGetIsComAllowbyUserID(System.IAsyncResult result) {
            return base.Channel.EndGetIsComAllowbyUserID(result);
        }
        
        private System.IAsyncResult OnBeginGetIsComAllowbyUserID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            return this.BeginGetIsComAllowbyUserID(userID, callback, asyncState);
        }
        
        private object[] OnEndGetIsComAllowbyUserID(System.IAsyncResult result) {
            bool retVal = this.EndGetIsComAllowbyUserID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetIsComAllowbyUserIDCompleted(object state) {
            if ((this.GetIsComAllowbyUserIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetIsComAllowbyUserIDCompleted(this, new GetIsComAllowbyUserIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetIsComAllowbyUserIDAsync(int userID) {
            this.GetIsComAllowbyUserIDAsync(userID, null);
        }
        
        public void GetIsComAllowbyUserIDAsync(int userID, object userState) {
            if ((this.onBeginGetIsComAllowbyUserIDDelegate == null)) {
                this.onBeginGetIsComAllowbyUserIDDelegate = new BeginOperationDelegate(this.OnBeginGetIsComAllowbyUserID);
            }
            if ((this.onEndGetIsComAllowbyUserIDDelegate == null)) {
                this.onEndGetIsComAllowbyUserIDDelegate = new EndOperationDelegate(this.OnEndGetIsComAllowbyUserID);
            }
            if ((this.onGetIsComAllowbyUserIDCompletedDelegate == null)) {
                this.onGetIsComAllowbyUserIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetIsComAllowbyUserIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetIsComAllowbyUserIDDelegate, new object[] {
                        userID}, this.onEndGetIsComAllowbyUserIDDelegate, this.onGetIsComAllowbyUserIDCompletedDelegate, userState);
        }
        
        public void UpdateMarketStatusbyMarketBookID(string MarketBookID, string MarketStatus) {
            base.Channel.UpdateMarketStatusbyMarketBookID(MarketBookID, MarketStatus);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateMarketStatusbyMarketBookID(string MarketBookID, string MarketStatus, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateMarketStatusbyMarketBookID(MarketBookID, MarketStatus, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateMarketStatusbyMarketBookID(System.IAsyncResult result) {
            base.Channel.EndUpdateMarketStatusbyMarketBookID(result);
        }
        
        private System.IAsyncResult OnBeginUpdateMarketStatusbyMarketBookID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string MarketBookID = ((string)(inValues[0]));
            string MarketStatus = ((string)(inValues[1]));
            return this.BeginUpdateMarketStatusbyMarketBookID(MarketBookID, MarketStatus, callback, asyncState);
        }
        
        private object[] OnEndUpdateMarketStatusbyMarketBookID(System.IAsyncResult result) {
            this.EndUpdateMarketStatusbyMarketBookID(result);
            return null;
        }
        
        private void OnUpdateMarketStatusbyMarketBookIDCompleted(object state) {
            if ((this.UpdateMarketStatusbyMarketBookIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateMarketStatusbyMarketBookIDCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateMarketStatusbyMarketBookIDAsync(string MarketBookID, string MarketStatus) {
            this.UpdateMarketStatusbyMarketBookIDAsync(MarketBookID, MarketStatus, null);
        }
        
        public void UpdateMarketStatusbyMarketBookIDAsync(string MarketBookID, string MarketStatus, object userState) {
            if ((this.onBeginUpdateMarketStatusbyMarketBookIDDelegate == null)) {
                this.onBeginUpdateMarketStatusbyMarketBookIDDelegate = new BeginOperationDelegate(this.OnBeginUpdateMarketStatusbyMarketBookID);
            }
            if ((this.onEndUpdateMarketStatusbyMarketBookIDDelegate == null)) {
                this.onEndUpdateMarketStatusbyMarketBookIDDelegate = new EndOperationDelegate(this.OnEndUpdateMarketStatusbyMarketBookID);
            }
            if ((this.onUpdateMarketStatusbyMarketBookIDCompletedDelegate == null)) {
                this.onUpdateMarketStatusbyMarketBookIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateMarketStatusbyMarketBookIDCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateMarketStatusbyMarketBookIDDelegate, new object[] {
                        MarketBookID,
                        MarketStatus}, this.onEndUpdateMarketStatusbyMarketBookIDDelegate, this.onUpdateMarketStatusbyMarketBookIDCompletedDelegate, userState);
        }
        
        public string GetUserbyUsernameandPassword(string username, string password) {
            return base.Channel.GetUserbyUsernameandPassword(username, password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetUserbyUsernameandPassword(string username, string password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUserbyUsernameandPassword(username, password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetUserbyUsernameandPassword(System.IAsyncResult result) {
            return base.Channel.EndGetUserbyUsernameandPassword(result);
        }
        
        private System.IAsyncResult OnBeginGetUserbyUsernameandPassword(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string username = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            return this.BeginGetUserbyUsernameandPassword(username, password, callback, asyncState);
        }
        
        private object[] OnEndGetUserbyUsernameandPassword(System.IAsyncResult result) {
            string retVal = this.EndGetUserbyUsernameandPassword(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserbyUsernameandPasswordCompleted(object state) {
            if ((this.GetUserbyUsernameandPasswordCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserbyUsernameandPasswordCompleted(this, new GetUserbyUsernameandPasswordCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserbyUsernameandPasswordAsync(string username, string password) {
            this.GetUserbyUsernameandPasswordAsync(username, password, null);
        }
        
        public void GetUserbyUsernameandPasswordAsync(string username, string password, object userState) {
            if ((this.onBeginGetUserbyUsernameandPasswordDelegate == null)) {
                this.onBeginGetUserbyUsernameandPasswordDelegate = new BeginOperationDelegate(this.OnBeginGetUserbyUsernameandPassword);
            }
            if ((this.onEndGetUserbyUsernameandPasswordDelegate == null)) {
                this.onEndGetUserbyUsernameandPasswordDelegate = new EndOperationDelegate(this.OnEndGetUserbyUsernameandPassword);
            }
            if ((this.onGetUserbyUsernameandPasswordCompletedDelegate == null)) {
                this.onGetUserbyUsernameandPasswordCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserbyUsernameandPasswordCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserbyUsernameandPasswordDelegate, new object[] {
                        username,
                        password}, this.onEndGetUserbyUsernameandPasswordDelegate, this.onGetUserbyUsernameandPasswordCompletedDelegate, userState);
        }
        
        public string GetUserbyUsernameandPasswordNew(string username, string password) {
            return base.Channel.GetUserbyUsernameandPasswordNew(username, password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetUserbyUsernameandPasswordNew(string username, string password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUserbyUsernameandPasswordNew(username, password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetUserbyUsernameandPasswordNew(System.IAsyncResult result) {
            return base.Channel.EndGetUserbyUsernameandPasswordNew(result);
        }
        
        private System.IAsyncResult OnBeginGetUserbyUsernameandPasswordNew(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string username = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            return this.BeginGetUserbyUsernameandPasswordNew(username, password, callback, asyncState);
        }
        
        private object[] OnEndGetUserbyUsernameandPasswordNew(System.IAsyncResult result) {
            string retVal = this.EndGetUserbyUsernameandPasswordNew(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserbyUsernameandPasswordNewCompleted(object state) {
            if ((this.GetUserbyUsernameandPasswordNewCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserbyUsernameandPasswordNewCompleted(this, new GetUserbyUsernameandPasswordNewCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserbyUsernameandPasswordNewAsync(string username, string password) {
            this.GetUserbyUsernameandPasswordNewAsync(username, password, null);
        }
        
        public void GetUserbyUsernameandPasswordNewAsync(string username, string password, object userState) {
            if ((this.onBeginGetUserbyUsernameandPasswordNewDelegate == null)) {
                this.onBeginGetUserbyUsernameandPasswordNewDelegate = new BeginOperationDelegate(this.OnBeginGetUserbyUsernameandPasswordNew);
            }
            if ((this.onEndGetUserbyUsernameandPasswordNewDelegate == null)) {
                this.onEndGetUserbyUsernameandPasswordNewDelegate = new EndOperationDelegate(this.OnEndGetUserbyUsernameandPasswordNew);
            }
            if ((this.onGetUserbyUsernameandPasswordNewCompletedDelegate == null)) {
                this.onGetUserbyUsernameandPasswordNewCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserbyUsernameandPasswordNewCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserbyUsernameandPasswordNewDelegate, new object[] {
                        username,
                        password}, this.onEndGetUserbyUsernameandPasswordNewDelegate, this.onGetUserbyUsernameandPasswordNewCompletedDelegate, userState);
        }
        
        public void UpdateCurrentLoggedInIDbyUserID(int userID) {
            base.Channel.UpdateCurrentLoggedInIDbyUserID(userID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateCurrentLoggedInIDbyUserID(int userID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateCurrentLoggedInIDbyUserID(userID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateCurrentLoggedInIDbyUserID(System.IAsyncResult result) {
            base.Channel.EndUpdateCurrentLoggedInIDbyUserID(result);
        }
        
        private System.IAsyncResult OnBeginUpdateCurrentLoggedInIDbyUserID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            return this.BeginUpdateCurrentLoggedInIDbyUserID(userID, callback, asyncState);
        }
        
        private object[] OnEndUpdateCurrentLoggedInIDbyUserID(System.IAsyncResult result) {
            this.EndUpdateCurrentLoggedInIDbyUserID(result);
            return null;
        }
        
        private void OnUpdateCurrentLoggedInIDbyUserIDCompleted(object state) {
            if ((this.UpdateCurrentLoggedInIDbyUserIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateCurrentLoggedInIDbyUserIDCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateCurrentLoggedInIDbyUserIDAsync(int userID) {
            this.UpdateCurrentLoggedInIDbyUserIDAsync(userID, null);
        }
        
        public void UpdateCurrentLoggedInIDbyUserIDAsync(int userID, object userState) {
            if ((this.onBeginUpdateCurrentLoggedInIDbyUserIDDelegate == null)) {
                this.onBeginUpdateCurrentLoggedInIDbyUserIDDelegate = new BeginOperationDelegate(this.OnBeginUpdateCurrentLoggedInIDbyUserID);
            }
            if ((this.onEndUpdateCurrentLoggedInIDbyUserIDDelegate == null)) {
                this.onEndUpdateCurrentLoggedInIDbyUserIDDelegate = new EndOperationDelegate(this.OnEndUpdateCurrentLoggedInIDbyUserID);
            }
            if ((this.onUpdateCurrentLoggedInIDbyUserIDCompletedDelegate == null)) {
                this.onUpdateCurrentLoggedInIDbyUserIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateCurrentLoggedInIDbyUserIDCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateCurrentLoggedInIDbyUserIDDelegate, new object[] {
                        userID}, this.onEndUpdateCurrentLoggedInIDbyUserIDDelegate, this.onUpdateCurrentLoggedInIDbyUserIDCompletedDelegate, userState);
        }
        
        public void AddUserActivity(string Activityname, System.DateTime ActivityTime, string IPAddress, string Location, string Deviceinfo, int userID) {
            base.Channel.AddUserActivity(Activityname, ActivityTime, IPAddress, Location, Deviceinfo, userID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddUserActivity(string Activityname, System.DateTime ActivityTime, string IPAddress, string Location, string Deviceinfo, int userID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddUserActivity(Activityname, ActivityTime, IPAddress, Location, Deviceinfo, userID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndAddUserActivity(System.IAsyncResult result) {
            base.Channel.EndAddUserActivity(result);
        }
        
        private System.IAsyncResult OnBeginAddUserActivity(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string Activityname = ((string)(inValues[0]));
            System.DateTime ActivityTime = ((System.DateTime)(inValues[1]));
            string IPAddress = ((string)(inValues[2]));
            string Location = ((string)(inValues[3]));
            string Deviceinfo = ((string)(inValues[4]));
            int userID = ((int)(inValues[5]));
            return this.BeginAddUserActivity(Activityname, ActivityTime, IPAddress, Location, Deviceinfo, userID, callback, asyncState);
        }
        
        private object[] OnEndAddUserActivity(System.IAsyncResult result) {
            this.EndAddUserActivity(result);
            return null;
        }
        
        private void OnAddUserActivityCompleted(object state) {
            if ((this.AddUserActivityCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddUserActivityCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddUserActivityAsync(string Activityname, System.DateTime ActivityTime, string IPAddress, string Location, string Deviceinfo, int userID) {
            this.AddUserActivityAsync(Activityname, ActivityTime, IPAddress, Location, Deviceinfo, userID, null);
        }
        
        public void AddUserActivityAsync(string Activityname, System.DateTime ActivityTime, string IPAddress, string Location, string Deviceinfo, int userID, object userState) {
            if ((this.onBeginAddUserActivityDelegate == null)) {
                this.onBeginAddUserActivityDelegate = new BeginOperationDelegate(this.OnBeginAddUserActivity);
            }
            if ((this.onEndAddUserActivityDelegate == null)) {
                this.onEndAddUserActivityDelegate = new EndOperationDelegate(this.OnEndAddUserActivity);
            }
            if ((this.onAddUserActivityCompletedDelegate == null)) {
                this.onAddUserActivityCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddUserActivityCompleted);
            }
            base.InvokeAsync(this.onBeginAddUserActivityDelegate, new object[] {
                        Activityname,
                        ActivityTime,
                        IPAddress,
                        Location,
                        Deviceinfo,
                        userID}, this.onEndAddUserActivityDelegate, this.onAddUserActivityCompletedDelegate, userState);
        }
        
        public string GetAccessRightsbyUserType(int UserTypeID, string Password) {
            return base.Channel.GetAccessRightsbyUserType(UserTypeID, Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAccessRightsbyUserType(int UserTypeID, string Password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAccessRightsbyUserType(UserTypeID, Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetAccessRightsbyUserType(System.IAsyncResult result) {
            return base.Channel.EndGetAccessRightsbyUserType(result);
        }
        
        private System.IAsyncResult OnBeginGetAccessRightsbyUserType(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int UserTypeID = ((int)(inValues[0]));
            string Password = ((string)(inValues[1]));
            return this.BeginGetAccessRightsbyUserType(UserTypeID, Password, callback, asyncState);
        }
        
        private object[] OnEndGetAccessRightsbyUserType(System.IAsyncResult result) {
            string retVal = this.EndGetAccessRightsbyUserType(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAccessRightsbyUserTypeCompleted(object state) {
            if ((this.GetAccessRightsbyUserTypeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAccessRightsbyUserTypeCompleted(this, new GetAccessRightsbyUserTypeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAccessRightsbyUserTypeAsync(int UserTypeID, string Password) {
            this.GetAccessRightsbyUserTypeAsync(UserTypeID, Password, null);
        }
        
        public void GetAccessRightsbyUserTypeAsync(int UserTypeID, string Password, object userState) {
            if ((this.onBeginGetAccessRightsbyUserTypeDelegate == null)) {
                this.onBeginGetAccessRightsbyUserTypeDelegate = new BeginOperationDelegate(this.OnBeginGetAccessRightsbyUserType);
            }
            if ((this.onEndGetAccessRightsbyUserTypeDelegate == null)) {
                this.onEndGetAccessRightsbyUserTypeDelegate = new EndOperationDelegate(this.OnEndGetAccessRightsbyUserType);
            }
            if ((this.onGetAccessRightsbyUserTypeCompletedDelegate == null)) {
                this.onGetAccessRightsbyUserTypeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAccessRightsbyUserTypeCompleted);
            }
            base.InvokeAsync(this.onBeginGetAccessRightsbyUserTypeDelegate, new object[] {
                        UserTypeID,
                        Password}, this.onEndGetAccessRightsbyUserTypeDelegate, this.onGetAccessRightsbyUserTypeCompletedDelegate, userState);
        }
        
        public string AddUser(
                    string Name, 
                    string Phonenumber, 
                    string EmailAddress, 
                    string username, 
                    string Password, 
                    string Location, 
                    decimal Accountbalance, 
                    int usertypeID, 
                    int createdByID, 
                    string RatePercent, 
                    decimal BetLowerLimit, 
                    decimal BetUpperLimit, 
                    bool CheckConditionsforPlacingBet, 
                    decimal BetLowerLimitHorsePlace, 
                    decimal BetUpperLimitHorsePlace, 
                    decimal BetLowerLimitGrayHoundWin, 
                    decimal BetUpperLimitGrayHoundWin, 
                    decimal BetLowerLimitGrayHoundPlace, 
                    decimal BetUpperLimitGrayHoundPlace, 
                    decimal BetLowerLimitMatchOdds, 
                    decimal BetUpperLimitMatchOdds, 
                    decimal BetLowerLimitInningsRunns, 
                    decimal BetUpperLimitInningsRunns, 
                    decimal BetLowerLimitCompletedMatch, 
                    decimal BetUpperLimitCompletedMatch, 
                    decimal BetLowerLimitMatchOddsSoccer, 
                    decimal BetUpperLimitMatchOddsSoccer, 
                    decimal BetLowerLimitMatchOddsTennis, 
                    decimal BetUpperLimitMatchOddsTennis, 
                    decimal BetUpperLimitTiedMatch, 
                    decimal BetLowerLimitTiedMatch, 
                    decimal BetUpperLimitWinner, 
                    decimal BetLowerLimitWinner, 
                    string Passwordforvalidate, 
                    decimal BetUpperLimitFancy, 
                    decimal BetLowerLimitFancy) {
            return base.Channel.AddUser(Name, Phonenumber, EmailAddress, username, Password, Location, Accountbalance, usertypeID, createdByID, RatePercent, BetLowerLimit, BetUpperLimit, CheckConditionsforPlacingBet, BetLowerLimitHorsePlace, BetUpperLimitHorsePlace, BetLowerLimitGrayHoundWin, BetUpperLimitGrayHoundWin, BetLowerLimitGrayHoundPlace, BetUpperLimitGrayHoundPlace, BetLowerLimitMatchOdds, BetUpperLimitMatchOdds, BetLowerLimitInningsRunns, BetUpperLimitInningsRunns, BetLowerLimitCompletedMatch, BetUpperLimitCompletedMatch, BetLowerLimitMatchOddsSoccer, BetUpperLimitMatchOddsSoccer, BetLowerLimitMatchOddsTennis, BetUpperLimitMatchOddsTennis, BetUpperLimitTiedMatch, BetLowerLimitTiedMatch, BetUpperLimitWinner, BetLowerLimitWinner, Passwordforvalidate, BetUpperLimitFancy, BetLowerLimitFancy);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddUser(
                    string Name, 
                    string Phonenumber, 
                    string EmailAddress, 
                    string username, 
                    string Password, 
                    string Location, 
                    decimal Accountbalance, 
                    int usertypeID, 
                    int createdByID, 
                    string RatePercent, 
                    decimal BetLowerLimit, 
                    decimal BetUpperLimit, 
                    bool CheckConditionsforPlacingBet, 
                    decimal BetLowerLimitHorsePlace, 
                    decimal BetUpperLimitHorsePlace, 
                    decimal BetLowerLimitGrayHoundWin, 
                    decimal BetUpperLimitGrayHoundWin, 
                    decimal BetLowerLimitGrayHoundPlace, 
                    decimal BetUpperLimitGrayHoundPlace, 
                    decimal BetLowerLimitMatchOdds, 
                    decimal BetUpperLimitMatchOdds, 
                    decimal BetLowerLimitInningsRunns, 
                    decimal BetUpperLimitInningsRunns, 
                    decimal BetLowerLimitCompletedMatch, 
                    decimal BetUpperLimitCompletedMatch, 
                    decimal BetLowerLimitMatchOddsSoccer, 
                    decimal BetUpperLimitMatchOddsSoccer, 
                    decimal BetLowerLimitMatchOddsTennis, 
                    decimal BetUpperLimitMatchOddsTennis, 
                    decimal BetUpperLimitTiedMatch, 
                    decimal BetLowerLimitTiedMatch, 
                    decimal BetUpperLimitWinner, 
                    decimal BetLowerLimitWinner, 
                    string Passwordforvalidate, 
                    decimal BetUpperLimitFancy, 
                    decimal BetLowerLimitFancy, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return base.Channel.BeginAddUser(Name, Phonenumber, EmailAddress, username, Password, Location, Accountbalance, usertypeID, createdByID, RatePercent, BetLowerLimit, BetUpperLimit, CheckConditionsforPlacingBet, BetLowerLimitHorsePlace, BetUpperLimitHorsePlace, BetLowerLimitGrayHoundWin, BetUpperLimitGrayHoundWin, BetLowerLimitGrayHoundPlace, BetUpperLimitGrayHoundPlace, BetLowerLimitMatchOdds, BetUpperLimitMatchOdds, BetLowerLimitInningsRunns, BetUpperLimitInningsRunns, BetLowerLimitCompletedMatch, BetUpperLimitCompletedMatch, BetLowerLimitMatchOddsSoccer, BetUpperLimitMatchOddsSoccer, BetLowerLimitMatchOddsTennis, BetUpperLimitMatchOddsTennis, BetUpperLimitTiedMatch, BetLowerLimitTiedMatch, BetUpperLimitWinner, BetLowerLimitWinner, Passwordforvalidate, BetUpperLimitFancy, BetLowerLimitFancy, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndAddUser(System.IAsyncResult result) {
            return base.Channel.EndAddUser(result);
        }
        
        private System.IAsyncResult OnBeginAddUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string Name = ((string)(inValues[0]));
            string Phonenumber = ((string)(inValues[1]));
            string EmailAddress = ((string)(inValues[2]));
            string username = ((string)(inValues[3]));
            string Password = ((string)(inValues[4]));
            string Location = ((string)(inValues[5]));
            decimal Accountbalance = ((decimal)(inValues[6]));
            int usertypeID = ((int)(inValues[7]));
            int createdByID = ((int)(inValues[8]));
            string RatePercent = ((string)(inValues[9]));
            decimal BetLowerLimit = ((decimal)(inValues[10]));
            decimal BetUpperLimit = ((decimal)(inValues[11]));
            bool CheckConditionsforPlacingBet = ((bool)(inValues[12]));
            decimal BetLowerLimitHorsePlace = ((decimal)(inValues[13]));
            decimal BetUpperLimitHorsePlace = ((decimal)(inValues[14]));
            decimal BetLowerLimitGrayHoundWin = ((decimal)(inValues[15]));
            decimal BetUpperLimitGrayHoundWin = ((decimal)(inValues[16]));
            decimal BetLowerLimitGrayHoundPlace = ((decimal)(inValues[17]));
            decimal BetUpperLimitGrayHoundPlace = ((decimal)(inValues[18]));
            decimal BetLowerLimitMatchOdds = ((decimal)(inValues[19]));
            decimal BetUpperLimitMatchOdds = ((decimal)(inValues[20]));
            decimal BetLowerLimitInningsRunns = ((decimal)(inValues[21]));
            decimal BetUpperLimitInningsRunns = ((decimal)(inValues[22]));
            decimal BetLowerLimitCompletedMatch = ((decimal)(inValues[23]));
            decimal BetUpperLimitCompletedMatch = ((decimal)(inValues[24]));
            decimal BetLowerLimitMatchOddsSoccer = ((decimal)(inValues[25]));
            decimal BetUpperLimitMatchOddsSoccer = ((decimal)(inValues[26]));
            decimal BetLowerLimitMatchOddsTennis = ((decimal)(inValues[27]));
            decimal BetUpperLimitMatchOddsTennis = ((decimal)(inValues[28]));
            decimal BetUpperLimitTiedMatch = ((decimal)(inValues[29]));
            decimal BetLowerLimitTiedMatch = ((decimal)(inValues[30]));
            decimal BetUpperLimitWinner = ((decimal)(inValues[31]));
            decimal BetLowerLimitWinner = ((decimal)(inValues[32]));
            string Passwordforvalidate = ((string)(inValues[33]));
            decimal BetUpperLimitFancy = ((decimal)(inValues[34]));
            decimal BetLowerLimitFancy = ((decimal)(inValues[35]));
            return this.BeginAddUser(Name, Phonenumber, EmailAddress, username, Password, Location, Accountbalance, usertypeID, createdByID, RatePercent, BetLowerLimit, BetUpperLimit, CheckConditionsforPlacingBet, BetLowerLimitHorsePlace, BetUpperLimitHorsePlace, BetLowerLimitGrayHoundWin, BetUpperLimitGrayHoundWin, BetLowerLimitGrayHoundPlace, BetUpperLimitGrayHoundPlace, BetLowerLimitMatchOdds, BetUpperLimitMatchOdds, BetLowerLimitInningsRunns, BetUpperLimitInningsRunns, BetLowerLimitCompletedMatch, BetUpperLimitCompletedMatch, BetLowerLimitMatchOddsSoccer, BetUpperLimitMatchOddsSoccer, BetLowerLimitMatchOddsTennis, BetUpperLimitMatchOddsTennis, BetUpperLimitTiedMatch, BetLowerLimitTiedMatch, BetUpperLimitWinner, BetLowerLimitWinner, Passwordforvalidate, BetUpperLimitFancy, BetLowerLimitFancy, callback, asyncState);
        }
        
        private object[] OnEndAddUser(System.IAsyncResult result) {
            string retVal = this.EndAddUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddUserCompleted(object state) {
            if ((this.AddUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddUserCompleted(this, new AddUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddUserAsync(
                    string Name, 
                    string Phonenumber, 
                    string EmailAddress, 
                    string username, 
                    string Password, 
                    string Location, 
                    decimal Accountbalance, 
                    int usertypeID, 
                    int createdByID, 
                    string RatePercent, 
                    decimal BetLowerLimit, 
                    decimal BetUpperLimit, 
                    bool CheckConditionsforPlacingBet, 
                    decimal BetLowerLimitHorsePlace, 
                    decimal BetUpperLimitHorsePlace, 
                    decimal BetLowerLimitGrayHoundWin, 
                    decimal BetUpperLimitGrayHoundWin, 
                    decimal BetLowerLimitGrayHoundPlace, 
                    decimal BetUpperLimitGrayHoundPlace, 
                    decimal BetLowerLimitMatchOdds, 
                    decimal BetUpperLimitMatchOdds, 
                    decimal BetLowerLimitInningsRunns, 
                    decimal BetUpperLimitInningsRunns, 
                    decimal BetLowerLimitCompletedMatch, 
                    decimal BetUpperLimitCompletedMatch, 
                    decimal BetLowerLimitMatchOddsSoccer, 
                    decimal BetUpperLimitMatchOddsSoccer, 
                    decimal BetLowerLimitMatchOddsTennis, 
                    decimal BetUpperLimitMatchOddsTennis, 
                    decimal BetUpperLimitTiedMatch, 
                    decimal BetLowerLimitTiedMatch, 
                    decimal BetUpperLimitWinner, 
                    decimal BetLowerLimitWinner, 
                    string Passwordforvalidate, 
                    decimal BetUpperLimitFancy, 
                    decimal BetLowerLimitFancy) {
            this.AddUserAsync(Name, Phonenumber, EmailAddress, username, Password, Location, Accountbalance, usertypeID, createdByID, RatePercent, BetLowerLimit, BetUpperLimit, CheckConditionsforPlacingBet, BetLowerLimitHorsePlace, BetUpperLimitHorsePlace, BetLowerLimitGrayHoundWin, BetUpperLimitGrayHoundWin, BetLowerLimitGrayHoundPlace, BetUpperLimitGrayHoundPlace, BetLowerLimitMatchOdds, BetUpperLimitMatchOdds, BetLowerLimitInningsRunns, BetUpperLimitInningsRunns, BetLowerLimitCompletedMatch, BetUpperLimitCompletedMatch, BetLowerLimitMatchOddsSoccer, BetUpperLimitMatchOddsSoccer, BetLowerLimitMatchOddsTennis, BetUpperLimitMatchOddsTennis, BetUpperLimitTiedMatch, BetLowerLimitTiedMatch, BetUpperLimitWinner, BetLowerLimitWinner, Passwordforvalidate, BetUpperLimitFancy, BetLowerLimitFancy, null);
        }
        
        public void AddUserAsync(
                    string Name, 
                    string Phonenumber, 
                    string EmailAddress, 
                    string username, 
                    string Password, 
                    string Location, 
                    decimal Accountbalance, 
                    int usertypeID, 
                    int createdByID, 
                    string RatePercent, 
                    decimal BetLowerLimit, 
                    decimal BetUpperLimit, 
                    bool CheckConditionsforPlacingBet, 
                    decimal BetLowerLimitHorsePlace, 
                    decimal BetUpperLimitHorsePlace, 
                    decimal BetLowerLimitGrayHoundWin, 
                    decimal BetUpperLimitGrayHoundWin, 
                    decimal BetLowerLimitGrayHoundPlace, 
                    decimal BetUpperLimitGrayHoundPlace, 
                    decimal BetLowerLimitMatchOdds, 
                    decimal BetUpperLimitMatchOdds, 
                    decimal BetLowerLimitInningsRunns, 
                    decimal BetUpperLimitInningsRunns, 
                    decimal BetLowerLimitCompletedMatch, 
                    decimal BetUpperLimitCompletedMatch, 
                    decimal BetLowerLimitMatchOddsSoccer, 
                    decimal BetUpperLimitMatchOddsSoccer, 
                    decimal BetLowerLimitMatchOddsTennis, 
                    decimal BetUpperLimitMatchOddsTennis, 
                    decimal BetUpperLimitTiedMatch, 
                    decimal BetLowerLimitTiedMatch, 
                    decimal BetUpperLimitWinner, 
                    decimal BetLowerLimitWinner, 
                    string Passwordforvalidate, 
                    decimal BetUpperLimitFancy, 
                    decimal BetLowerLimitFancy, 
                    object userState) {
            if ((this.onBeginAddUserDelegate == null)) {
                this.onBeginAddUserDelegate = new BeginOperationDelegate(this.OnBeginAddUser);
            }
            if ((this.onEndAddUserDelegate == null)) {
                this.onEndAddUserDelegate = new EndOperationDelegate(this.OnEndAddUser);
            }
            if ((this.onAddUserCompletedDelegate == null)) {
                this.onAddUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddUserCompleted);
            }
            base.InvokeAsync(this.onBeginAddUserDelegate, new object[] {
                        Name,
                        Phonenumber,
                        EmailAddress,
                        username,
                        Password,
                        Location,
                        Accountbalance,
                        usertypeID,
                        createdByID,
                        RatePercent,
                        BetLowerLimit,
                        BetUpperLimit,
                        CheckConditionsforPlacingBet,
                        BetLowerLimitHorsePlace,
                        BetUpperLimitHorsePlace,
                        BetLowerLimitGrayHoundWin,
                        BetUpperLimitGrayHoundWin,
                        BetLowerLimitGrayHoundPlace,
                        BetUpperLimitGrayHoundPlace,
                        BetLowerLimitMatchOdds,
                        BetUpperLimitMatchOdds,
                        BetLowerLimitInningsRunns,
                        BetUpperLimitInningsRunns,
                        BetLowerLimitCompletedMatch,
                        BetUpperLimitCompletedMatch,
                        BetLowerLimitMatchOddsSoccer,
                        BetUpperLimitMatchOddsSoccer,
                        BetLowerLimitMatchOddsTennis,
                        BetUpperLimitMatchOddsTennis,
                        BetUpperLimitTiedMatch,
                        BetLowerLimitTiedMatch,
                        BetUpperLimitWinner,
                        BetLowerLimitWinner,
                        Passwordforvalidate,
                        BetUpperLimitFancy,
                        BetLowerLimitFancy}, this.onEndAddUserDelegate, this.onAddUserCompletedDelegate, userState);
        }
        
        public string CheckifUserExists(string username) {
            return base.Channel.CheckifUserExists(username);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCheckifUserExists(string username, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCheckifUserExists(username, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndCheckifUserExists(System.IAsyncResult result) {
            return base.Channel.EndCheckifUserExists(result);
        }
        
        private System.IAsyncResult OnBeginCheckifUserExists(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string username = ((string)(inValues[0]));
            return this.BeginCheckifUserExists(username, callback, asyncState);
        }
        
        private object[] OnEndCheckifUserExists(System.IAsyncResult result) {
            string retVal = this.EndCheckifUserExists(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCheckifUserExistsCompleted(object state) {
            if ((this.CheckifUserExistsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CheckifUserExistsCompleted(this, new CheckifUserExistsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CheckifUserExistsAsync(string username) {
            this.CheckifUserExistsAsync(username, null);
        }
        
        public void CheckifUserExistsAsync(string username, object userState) {
            if ((this.onBeginCheckifUserExistsDelegate == null)) {
                this.onBeginCheckifUserExistsDelegate = new BeginOperationDelegate(this.OnBeginCheckifUserExists);
            }
            if ((this.onEndCheckifUserExistsDelegate == null)) {
                this.onEndCheckifUserExistsDelegate = new EndOperationDelegate(this.OnEndCheckifUserExists);
            }
            if ((this.onCheckifUserExistsCompletedDelegate == null)) {
                this.onCheckifUserExistsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCheckifUserExistsCompleted);
            }
            base.InvokeAsync(this.onBeginCheckifUserExistsDelegate, new object[] {
                        username}, this.onEndCheckifUserExistsDelegate, this.onCheckifUserExistsCompletedDelegate, userState);
        }
        
        public void AddCredittoUser(decimal Amount, int userID, int AddedbyID, System.DateTime addedtime, decimal Amountremoved, bool AddtoUserAccounts, string AccountsTitle, bool isCreditAmount, string Password) {
            base.Channel.AddCredittoUser(Amount, userID, AddedbyID, addedtime, Amountremoved, AddtoUserAccounts, AccountsTitle, isCreditAmount, Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddCredittoUser(decimal Amount, int userID, int AddedbyID, System.DateTime addedtime, decimal Amountremoved, bool AddtoUserAccounts, string AccountsTitle, bool isCreditAmount, string Password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddCredittoUser(Amount, userID, AddedbyID, addedtime, Amountremoved, AddtoUserAccounts, AccountsTitle, isCreditAmount, Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndAddCredittoUser(System.IAsyncResult result) {
            base.Channel.EndAddCredittoUser(result);
        }
        
        private System.IAsyncResult OnBeginAddCredittoUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            decimal Amount = ((decimal)(inValues[0]));
            int userID = ((int)(inValues[1]));
            int AddedbyID = ((int)(inValues[2]));
            System.DateTime addedtime = ((System.DateTime)(inValues[3]));
            decimal Amountremoved = ((decimal)(inValues[4]));
            bool AddtoUserAccounts = ((bool)(inValues[5]));
            string AccountsTitle = ((string)(inValues[6]));
            bool isCreditAmount = ((bool)(inValues[7]));
            string Password = ((string)(inValues[8]));
            return this.BeginAddCredittoUser(Amount, userID, AddedbyID, addedtime, Amountremoved, AddtoUserAccounts, AccountsTitle, isCreditAmount, Password, callback, asyncState);
        }
        
        private object[] OnEndAddCredittoUser(System.IAsyncResult result) {
            this.EndAddCredittoUser(result);
            return null;
        }
        
        private void OnAddCredittoUserCompleted(object state) {
            if ((this.AddCredittoUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddCredittoUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddCredittoUserAsync(decimal Amount, int userID, int AddedbyID, System.DateTime addedtime, decimal Amountremoved, bool AddtoUserAccounts, string AccountsTitle, bool isCreditAmount, string Password) {
            this.AddCredittoUserAsync(Amount, userID, AddedbyID, addedtime, Amountremoved, AddtoUserAccounts, AccountsTitle, isCreditAmount, Password, null);
        }
        
        public void AddCredittoUserAsync(decimal Amount, int userID, int AddedbyID, System.DateTime addedtime, decimal Amountremoved, bool AddtoUserAccounts, string AccountsTitle, bool isCreditAmount, string Password, object userState) {
            if ((this.onBeginAddCredittoUserDelegate == null)) {
                this.onBeginAddCredittoUserDelegate = new BeginOperationDelegate(this.OnBeginAddCredittoUser);
            }
            if ((this.onEndAddCredittoUserDelegate == null)) {
                this.onEndAddCredittoUserDelegate = new EndOperationDelegate(this.OnEndAddCredittoUser);
            }
            if ((this.onAddCredittoUserCompletedDelegate == null)) {
                this.onAddCredittoUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddCredittoUserCompleted);
            }
            base.InvokeAsync(this.onBeginAddCredittoUserDelegate, new object[] {
                        Amount,
                        userID,
                        AddedbyID,
                        addedtime,
                        Amountremoved,
                        AddtoUserAccounts,
                        AccountsTitle,
                        isCreditAmount,
                        Password}, this.onEndAddCredittoUserDelegate, this.onAddCredittoUserCompletedDelegate, userState);
        }
        
        public void AddAdminAmountForSuper(string AccountsTitle, string debit, string Credit, int userID, string marketid, System.DateTime addedtime, string Password) {
            base.Channel.AddAdminAmountForSuper(AccountsTitle, debit, Credit, userID, marketid, addedtime, Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddAdminAmountForSuper(string AccountsTitle, string debit, string Credit, int userID, string marketid, System.DateTime addedtime, string Password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddAdminAmountForSuper(AccountsTitle, debit, Credit, userID, marketid, addedtime, Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndAddAdminAmountForSuper(System.IAsyncResult result) {
            base.Channel.EndAddAdminAmountForSuper(result);
        }
        
        private System.IAsyncResult OnBeginAddAdminAmountForSuper(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string AccountsTitle = ((string)(inValues[0]));
            string debit = ((string)(inValues[1]));
            string Credit = ((string)(inValues[2]));
            int userID = ((int)(inValues[3]));
            string marketid = ((string)(inValues[4]));
            System.DateTime addedtime = ((System.DateTime)(inValues[5]));
            string Password = ((string)(inValues[6]));
            return this.BeginAddAdminAmountForSuper(AccountsTitle, debit, Credit, userID, marketid, addedtime, Password, callback, asyncState);
        }
        
        private object[] OnEndAddAdminAmountForSuper(System.IAsyncResult result) {
            this.EndAddAdminAmountForSuper(result);
            return null;
        }
        
        private void OnAddAdminAmountForSuperCompleted(object state) {
            if ((this.AddAdminAmountForSuperCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddAdminAmountForSuperCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddAdminAmountForSuperAsync(string AccountsTitle, string debit, string Credit, int userID, string marketid, System.DateTime addedtime, string Password) {
            this.AddAdminAmountForSuperAsync(AccountsTitle, debit, Credit, userID, marketid, addedtime, Password, null);
        }
        
        public void AddAdminAmountForSuperAsync(string AccountsTitle, string debit, string Credit, int userID, string marketid, System.DateTime addedtime, string Password, object userState) {
            if ((this.onBeginAddAdminAmountForSuperDelegate == null)) {
                this.onBeginAddAdminAmountForSuperDelegate = new BeginOperationDelegate(this.OnBeginAddAdminAmountForSuper);
            }
            if ((this.onEndAddAdminAmountForSuperDelegate == null)) {
                this.onEndAddAdminAmountForSuperDelegate = new EndOperationDelegate(this.OnEndAddAdminAmountForSuper);
            }
            if ((this.onAddAdminAmountForSuperCompletedDelegate == null)) {
                this.onAddAdminAmountForSuperCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddAdminAmountForSuperCompleted);
            }
            base.InvokeAsync(this.onBeginAddAdminAmountForSuperDelegate, new object[] {
                        AccountsTitle,
                        debit,
                        Credit,
                        userID,
                        marketid,
                        addedtime,
                        Password}, this.onEndAddAdminAmountForSuperDelegate, this.onAddAdminAmountForSuperCompletedDelegate, userState);
        }
        
        public void UpdateStartBalancebyUserID(int userID, decimal newBalance, string Password) {
            base.Channel.UpdateStartBalancebyUserID(userID, newBalance, Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateStartBalancebyUserID(int userID, decimal newBalance, string Password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateStartBalancebyUserID(userID, newBalance, Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateStartBalancebyUserID(System.IAsyncResult result) {
            base.Channel.EndUpdateStartBalancebyUserID(result);
        }
        
        private System.IAsyncResult OnBeginUpdateStartBalancebyUserID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            decimal newBalance = ((decimal)(inValues[1]));
            string Password = ((string)(inValues[2]));
            return this.BeginUpdateStartBalancebyUserID(userID, newBalance, Password, callback, asyncState);
        }
        
        private object[] OnEndUpdateStartBalancebyUserID(System.IAsyncResult result) {
            this.EndUpdateStartBalancebyUserID(result);
            return null;
        }
        
        private void OnUpdateStartBalancebyUserIDCompleted(object state) {
            if ((this.UpdateStartBalancebyUserIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateStartBalancebyUserIDCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateStartBalancebyUserIDAsync(int userID, decimal newBalance, string Password) {
            this.UpdateStartBalancebyUserIDAsync(userID, newBalance, Password, null);
        }
        
        public void UpdateStartBalancebyUserIDAsync(int userID, decimal newBalance, string Password, object userState) {
            if ((this.onBeginUpdateStartBalancebyUserIDDelegate == null)) {
                this.onBeginUpdateStartBalancebyUserIDDelegate = new BeginOperationDelegate(this.OnBeginUpdateStartBalancebyUserID);
            }
            if ((this.onEndUpdateStartBalancebyUserIDDelegate == null)) {
                this.onEndUpdateStartBalancebyUserIDDelegate = new EndOperationDelegate(this.OnEndUpdateStartBalancebyUserID);
            }
            if ((this.onUpdateStartBalancebyUserIDCompletedDelegate == null)) {
                this.onUpdateStartBalancebyUserIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateStartBalancebyUserIDCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateStartBalancebyUserIDDelegate, new object[] {
                        userID,
                        newBalance,
                        Password}, this.onEndUpdateStartBalancebyUserIDDelegate, this.onUpdateStartBalancebyUserIDCompletedDelegate, userState);
        }
        
        public void UpdateAccountsOpeningBalance(int userID, decimal Balance, string Password) {
            base.Channel.UpdateAccountsOpeningBalance(userID, Balance, Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateAccountsOpeningBalance(int userID, decimal Balance, string Password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateAccountsOpeningBalance(userID, Balance, Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateAccountsOpeningBalance(System.IAsyncResult result) {
            base.Channel.EndUpdateAccountsOpeningBalance(result);
        }
        
        private System.IAsyncResult OnBeginUpdateAccountsOpeningBalance(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            decimal Balance = ((decimal)(inValues[1]));
            string Password = ((string)(inValues[2]));
            return this.BeginUpdateAccountsOpeningBalance(userID, Balance, Password, callback, asyncState);
        }
        
        private object[] OnEndUpdateAccountsOpeningBalance(System.IAsyncResult result) {
            this.EndUpdateAccountsOpeningBalance(result);
            return null;
        }
        
        private void OnUpdateAccountsOpeningBalanceCompleted(object state) {
            if ((this.UpdateAccountsOpeningBalanceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateAccountsOpeningBalanceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateAccountsOpeningBalanceAsync(int userID, decimal Balance, string Password) {
            this.UpdateAccountsOpeningBalanceAsync(userID, Balance, Password, null);
        }
        
        public void UpdateAccountsOpeningBalanceAsync(int userID, decimal Balance, string Password, object userState) {
            if ((this.onBeginUpdateAccountsOpeningBalanceDelegate == null)) {
                this.onBeginUpdateAccountsOpeningBalanceDelegate = new BeginOperationDelegate(this.OnBeginUpdateAccountsOpeningBalance);
            }
            if ((this.onEndUpdateAccountsOpeningBalanceDelegate == null)) {
                this.onEndUpdateAccountsOpeningBalanceDelegate = new EndOperationDelegate(this.OnEndUpdateAccountsOpeningBalance);
            }
            if ((this.onUpdateAccountsOpeningBalanceCompletedDelegate == null)) {
                this.onUpdateAccountsOpeningBalanceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateAccountsOpeningBalanceCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateAccountsOpeningBalanceDelegate, new object[] {
                        userID,
                        Balance,
                        Password}, this.onEndUpdateAccountsOpeningBalanceDelegate, this.onUpdateAccountsOpeningBalanceCompletedDelegate, userState);
        }
        
        public string GetCurrentBalancebyUser(int userid, string Password) {
            return base.Channel.GetCurrentBalancebyUser(userid, Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetCurrentBalancebyUser(int userid, string Password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCurrentBalancebyUser(userid, Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetCurrentBalancebyUser(System.IAsyncResult result) {
            return base.Channel.EndGetCurrentBalancebyUser(result);
        }
        
        private System.IAsyncResult OnBeginGetCurrentBalancebyUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userid = ((int)(inValues[0]));
            string Password = ((string)(inValues[1]));
            return this.BeginGetCurrentBalancebyUser(userid, Password, callback, asyncState);
        }
        
        private object[] OnEndGetCurrentBalancebyUser(System.IAsyncResult result) {
            string retVal = this.EndGetCurrentBalancebyUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCurrentBalancebyUserCompleted(object state) {
            if ((this.GetCurrentBalancebyUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCurrentBalancebyUserCompleted(this, new GetCurrentBalancebyUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCurrentBalancebyUserAsync(int userid, string Password) {
            this.GetCurrentBalancebyUserAsync(userid, Password, null);
        }
        
        public void GetCurrentBalancebyUserAsync(int userid, string Password, object userState) {
            if ((this.onBeginGetCurrentBalancebyUserDelegate == null)) {
                this.onBeginGetCurrentBalancebyUserDelegate = new BeginOperationDelegate(this.OnBeginGetCurrentBalancebyUser);
            }
            if ((this.onEndGetCurrentBalancebyUserDelegate == null)) {
                this.onEndGetCurrentBalancebyUserDelegate = new EndOperationDelegate(this.OnEndGetCurrentBalancebyUser);
            }
            if ((this.onGetCurrentBalancebyUserCompletedDelegate == null)) {
                this.onGetCurrentBalancebyUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCurrentBalancebyUserCompleted);
            }
            base.InvokeAsync(this.onBeginGetCurrentBalancebyUserDelegate, new object[] {
                        userid,
                        Password}, this.onEndGetCurrentBalancebyUserDelegate, this.onGetCurrentBalancebyUserCompletedDelegate, userState);
        }
        
        public decimal GetStartingBalance(int UserID, string Password) {
            return base.Channel.GetStartingBalance(UserID, Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetStartingBalance(int UserID, string Password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetStartingBalance(UserID, Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public decimal EndGetStartingBalance(System.IAsyncResult result) {
            return base.Channel.EndGetStartingBalance(result);
        }
        
        private System.IAsyncResult OnBeginGetStartingBalance(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int UserID = ((int)(inValues[0]));
            string Password = ((string)(inValues[1]));
            return this.BeginGetStartingBalance(UserID, Password, callback, asyncState);
        }
        
        private object[] OnEndGetStartingBalance(System.IAsyncResult result) {
            decimal retVal = this.EndGetStartingBalance(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetStartingBalanceCompleted(object state) {
            if ((this.GetStartingBalanceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetStartingBalanceCompleted(this, new GetStartingBalanceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetStartingBalanceAsync(int UserID, string Password) {
            this.GetStartingBalanceAsync(UserID, Password, null);
        }
        
        public void GetStartingBalanceAsync(int UserID, string Password, object userState) {
            if ((this.onBeginGetStartingBalanceDelegate == null)) {
                this.onBeginGetStartingBalanceDelegate = new BeginOperationDelegate(this.OnBeginGetStartingBalance);
            }
            if ((this.onEndGetStartingBalanceDelegate == null)) {
                this.onEndGetStartingBalanceDelegate = new EndOperationDelegate(this.OnEndGetStartingBalance);
            }
            if ((this.onGetStartingBalanceCompletedDelegate == null)) {
                this.onGetStartingBalanceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetStartingBalanceCompleted);
            }
            base.InvokeAsync(this.onBeginGetStartingBalanceDelegate, new object[] {
                        UserID,
                        Password}, this.onEndGetStartingBalanceDelegate, this.onGetStartingBalanceCompletedDelegate, userState);
        }
        
        public void AddKalijut(System.Nullable<int> userID, string eventTypeID, string competitonID, string eventID, string marketCatalogue, System.Nullable<int> updatedbyID, string eventTypeName, string competitionName, string eventName, string marketCatalogueName, System.Nullable<System.DateTime> eventOpenDate, string sheetName, string associateEventID) {
            base.Channel.AddKalijut(userID, eventTypeID, competitonID, eventID, marketCatalogue, updatedbyID, eventTypeName, competitionName, eventName, marketCatalogueName, eventOpenDate, sheetName, associateEventID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddKalijut(System.Nullable<int> userID, string eventTypeID, string competitonID, string eventID, string marketCatalogue, System.Nullable<int> updatedbyID, string eventTypeName, string competitionName, string eventName, string marketCatalogueName, System.Nullable<System.DateTime> eventOpenDate, string sheetName, string associateEventID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddKalijut(userID, eventTypeID, competitonID, eventID, marketCatalogue, updatedbyID, eventTypeName, competitionName, eventName, marketCatalogueName, eventOpenDate, sheetName, associateEventID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndAddKalijut(System.IAsyncResult result) {
            base.Channel.EndAddKalijut(result);
        }
        
        private System.IAsyncResult OnBeginAddKalijut(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Nullable<int> userID = ((System.Nullable<int>)(inValues[0]));
            string eventTypeID = ((string)(inValues[1]));
            string competitonID = ((string)(inValues[2]));
            string eventID = ((string)(inValues[3]));
            string marketCatalogue = ((string)(inValues[4]));
            System.Nullable<int> updatedbyID = ((System.Nullable<int>)(inValues[5]));
            string eventTypeName = ((string)(inValues[6]));
            string competitionName = ((string)(inValues[7]));
            string eventName = ((string)(inValues[8]));
            string marketCatalogueName = ((string)(inValues[9]));
            System.Nullable<System.DateTime> eventOpenDate = ((System.Nullable<System.DateTime>)(inValues[10]));
            string sheetName = ((string)(inValues[11]));
            string associateEventID = ((string)(inValues[12]));
            return this.BeginAddKalijut(userID, eventTypeID, competitonID, eventID, marketCatalogue, updatedbyID, eventTypeName, competitionName, eventName, marketCatalogueName, eventOpenDate, sheetName, associateEventID, callback, asyncState);
        }
        
        private object[] OnEndAddKalijut(System.IAsyncResult result) {
            this.EndAddKalijut(result);
            return null;
        }
        
        private void OnAddKalijutCompleted(object state) {
            if ((this.AddKalijutCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddKalijutCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddKalijutAsync(System.Nullable<int> userID, string eventTypeID, string competitonID, string eventID, string marketCatalogue, System.Nullable<int> updatedbyID, string eventTypeName, string competitionName, string eventName, string marketCatalogueName, System.Nullable<System.DateTime> eventOpenDate, string sheetName, string associateEventID) {
            this.AddKalijutAsync(userID, eventTypeID, competitonID, eventID, marketCatalogue, updatedbyID, eventTypeName, competitionName, eventName, marketCatalogueName, eventOpenDate, sheetName, associateEventID, null);
        }
        
        public void AddKalijutAsync(System.Nullable<int> userID, string eventTypeID, string competitonID, string eventID, string marketCatalogue, System.Nullable<int> updatedbyID, string eventTypeName, string competitionName, string eventName, string marketCatalogueName, System.Nullable<System.DateTime> eventOpenDate, string sheetName, string associateEventID, object userState) {
            if ((this.onBeginAddKalijutDelegate == null)) {
                this.onBeginAddKalijutDelegate = new BeginOperationDelegate(this.OnBeginAddKalijut);
            }
            if ((this.onEndAddKalijutDelegate == null)) {
                this.onEndAddKalijutDelegate = new EndOperationDelegate(this.OnEndAddKalijut);
            }
            if ((this.onAddKalijutCompletedDelegate == null)) {
                this.onAddKalijutCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddKalijutCompleted);
            }
            base.InvokeAsync(this.onBeginAddKalijutDelegate, new object[] {
                        userID,
                        eventTypeID,
                        competitonID,
                        eventID,
                        marketCatalogue,
                        updatedbyID,
                        eventTypeName,
                        competitionName,
                        eventName,
                        marketCatalogueName,
                        eventOpenDate,
                        sheetName,
                        associateEventID}, this.onEndAddKalijutDelegate, this.onAddKalijutCompletedDelegate, userState);
        }
        
        public void MarketCatalogueSelectionskalijut(string marketCatalogueID, string selectionID, string selectionName, string jockeyName, string wearing, string wearingDesc, string clothnumber, string stallDraw) {
            base.Channel.MarketCatalogueSelectionskalijut(marketCatalogueID, selectionID, selectionName, jockeyName, wearing, wearingDesc, clothnumber, stallDraw);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginMarketCatalogueSelectionskalijut(string marketCatalogueID, string selectionID, string selectionName, string jockeyName, string wearing, string wearingDesc, string clothnumber, string stallDraw, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginMarketCatalogueSelectionskalijut(marketCatalogueID, selectionID, selectionName, jockeyName, wearing, wearingDesc, clothnumber, stallDraw, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndMarketCatalogueSelectionskalijut(System.IAsyncResult result) {
            base.Channel.EndMarketCatalogueSelectionskalijut(result);
        }
        
        private System.IAsyncResult OnBeginMarketCatalogueSelectionskalijut(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string marketCatalogueID = ((string)(inValues[0]));
            string selectionID = ((string)(inValues[1]));
            string selectionName = ((string)(inValues[2]));
            string jockeyName = ((string)(inValues[3]));
            string wearing = ((string)(inValues[4]));
            string wearingDesc = ((string)(inValues[5]));
            string clothnumber = ((string)(inValues[6]));
            string stallDraw = ((string)(inValues[7]));
            return this.BeginMarketCatalogueSelectionskalijut(marketCatalogueID, selectionID, selectionName, jockeyName, wearing, wearingDesc, clothnumber, stallDraw, callback, asyncState);
        }
        
        private object[] OnEndMarketCatalogueSelectionskalijut(System.IAsyncResult result) {
            this.EndMarketCatalogueSelectionskalijut(result);
            return null;
        }
        
        private void OnMarketCatalogueSelectionskalijutCompleted(object state) {
            if ((this.MarketCatalogueSelectionskalijutCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.MarketCatalogueSelectionskalijutCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void MarketCatalogueSelectionskalijutAsync(string marketCatalogueID, string selectionID, string selectionName, string jockeyName, string wearing, string wearingDesc, string clothnumber, string stallDraw) {
            this.MarketCatalogueSelectionskalijutAsync(marketCatalogueID, selectionID, selectionName, jockeyName, wearing, wearingDesc, clothnumber, stallDraw, null);
        }
        
        public void MarketCatalogueSelectionskalijutAsync(string marketCatalogueID, string selectionID, string selectionName, string jockeyName, string wearing, string wearingDesc, string clothnumber, string stallDraw, object userState) {
            if ((this.onBeginMarketCatalogueSelectionskalijutDelegate == null)) {
                this.onBeginMarketCatalogueSelectionskalijutDelegate = new BeginOperationDelegate(this.OnBeginMarketCatalogueSelectionskalijut);
            }
            if ((this.onEndMarketCatalogueSelectionskalijutDelegate == null)) {
                this.onEndMarketCatalogueSelectionskalijutDelegate = new EndOperationDelegate(this.OnEndMarketCatalogueSelectionskalijut);
            }
            if ((this.onMarketCatalogueSelectionskalijutCompletedDelegate == null)) {
                this.onMarketCatalogueSelectionskalijutCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMarketCatalogueSelectionskalijutCompleted);
            }
            base.InvokeAsync(this.onBeginMarketCatalogueSelectionskalijutDelegate, new object[] {
                        marketCatalogueID,
                        selectionID,
                        selectionName,
                        jockeyName,
                        wearing,
                        wearingDesc,
                        clothnumber,
                        stallDraw}, this.onEndMarketCatalogueSelectionskalijutDelegate, this.onMarketCatalogueSelectionskalijutCompletedDelegate, userState);
        }
        
        public void UpdateAccountBalacnebyUser(int userid, decimal AccountBalance, string Password) {
            base.Channel.UpdateAccountBalacnebyUser(userid, AccountBalance, Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateAccountBalacnebyUser(int userid, decimal AccountBalance, string Password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateAccountBalacnebyUser(userid, AccountBalance, Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateAccountBalacnebyUser(System.IAsyncResult result) {
            base.Channel.EndUpdateAccountBalacnebyUser(result);
        }
        
        private System.IAsyncResult OnBeginUpdateAccountBalacnebyUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userid = ((int)(inValues[0]));
            decimal AccountBalance = ((decimal)(inValues[1]));
            string Password = ((string)(inValues[2]));
            return this.BeginUpdateAccountBalacnebyUser(userid, AccountBalance, Password, callback, asyncState);
        }
        
        private object[] OnEndUpdateAccountBalacnebyUser(System.IAsyncResult result) {
            this.EndUpdateAccountBalacnebyUser(result);
            return null;
        }
        
        private void OnUpdateAccountBalacnebyUserCompleted(object state) {
            if ((this.UpdateAccountBalacnebyUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateAccountBalacnebyUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateAccountBalacnebyUserAsync(int userid, decimal AccountBalance, string Password) {
            this.UpdateAccountBalacnebyUserAsync(userid, AccountBalance, Password, null);
        }
        
        public void UpdateAccountBalacnebyUserAsync(int userid, decimal AccountBalance, string Password, object userState) {
            if ((this.onBeginUpdateAccountBalacnebyUserDelegate == null)) {
                this.onBeginUpdateAccountBalacnebyUserDelegate = new BeginOperationDelegate(this.OnBeginUpdateAccountBalacnebyUser);
            }
            if ((this.onEndUpdateAccountBalacnebyUserDelegate == null)) {
                this.onEndUpdateAccountBalacnebyUserDelegate = new EndOperationDelegate(this.OnEndUpdateAccountBalacnebyUser);
            }
            if ((this.onUpdateAccountBalacnebyUserCompletedDelegate == null)) {
                this.onUpdateAccountBalacnebyUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateAccountBalacnebyUserCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateAccountBalacnebyUserDelegate, new object[] {
                        userid,
                        AccountBalance,
                        Password}, this.onEndUpdateAccountBalacnebyUserDelegate, this.onUpdateAccountBalacnebyUserCompletedDelegate, userState);
        }
        
        public string GetAllCuttingUsers(string Passwordforvalidate) {
            return base.Channel.GetAllCuttingUsers(Passwordforvalidate);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAllCuttingUsers(string Passwordforvalidate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllCuttingUsers(Passwordforvalidate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetAllCuttingUsers(System.IAsyncResult result) {
            return base.Channel.EndGetAllCuttingUsers(result);
        }
        
        private System.IAsyncResult OnBeginGetAllCuttingUsers(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string Passwordforvalidate = ((string)(inValues[0]));
            return this.BeginGetAllCuttingUsers(Passwordforvalidate, callback, asyncState);
        }
        
        private object[] OnEndGetAllCuttingUsers(System.IAsyncResult result) {
            string retVal = this.EndGetAllCuttingUsers(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllCuttingUsersCompleted(object state) {
            if ((this.GetAllCuttingUsersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllCuttingUsersCompleted(this, new GetAllCuttingUsersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllCuttingUsersAsync(string Passwordforvalidate) {
            this.GetAllCuttingUsersAsync(Passwordforvalidate, null);
        }
        
        public void GetAllCuttingUsersAsync(string Passwordforvalidate, object userState) {
            if ((this.onBeginGetAllCuttingUsersDelegate == null)) {
                this.onBeginGetAllCuttingUsersDelegate = new BeginOperationDelegate(this.OnBeginGetAllCuttingUsers);
            }
            if ((this.onEndGetAllCuttingUsersDelegate == null)) {
                this.onEndGetAllCuttingUsersDelegate = new EndOperationDelegate(this.OnEndGetAllCuttingUsers);
            }
            if ((this.onGetAllCuttingUsersCompletedDelegate == null)) {
                this.onGetAllCuttingUsersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllCuttingUsersCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllCuttingUsersDelegate, new object[] {
                        Passwordforvalidate}, this.onEndGetAllCuttingUsersDelegate, this.onGetAllCuttingUsersCompletedDelegate, userState);
        }
        
        public string GetAllUsersbyUserType(int userID, int usertypeID, string Password) {
            return base.Channel.GetAllUsersbyUserType(userID, usertypeID, Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAllUsersbyUserType(int userID, int usertypeID, string Password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllUsersbyUserType(userID, usertypeID, Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetAllUsersbyUserType(System.IAsyncResult result) {
            return base.Channel.EndGetAllUsersbyUserType(result);
        }
        
        private System.IAsyncResult OnBeginGetAllUsersbyUserType(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            int usertypeID = ((int)(inValues[1]));
            string Password = ((string)(inValues[2]));
            return this.BeginGetAllUsersbyUserType(userID, usertypeID, Password, callback, asyncState);
        }
        
        private object[] OnEndGetAllUsersbyUserType(System.IAsyncResult result) {
            string retVal = this.EndGetAllUsersbyUserType(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllUsersbyUserTypeCompleted(object state) {
            if ((this.GetAllUsersbyUserTypeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllUsersbyUserTypeCompleted(this, new GetAllUsersbyUserTypeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllUsersbyUserTypeAsync(int userID, int usertypeID, string Password) {
            this.GetAllUsersbyUserTypeAsync(userID, usertypeID, Password, null);
        }
        
        public void GetAllUsersbyUserTypeAsync(int userID, int usertypeID, string Password, object userState) {
            if ((this.onBeginGetAllUsersbyUserTypeDelegate == null)) {
                this.onBeginGetAllUsersbyUserTypeDelegate = new BeginOperationDelegate(this.OnBeginGetAllUsersbyUserType);
            }
            if ((this.onEndGetAllUsersbyUserTypeDelegate == null)) {
                this.onEndGetAllUsersbyUserTypeDelegate = new EndOperationDelegate(this.OnEndGetAllUsersbyUserType);
            }
            if ((this.onGetAllUsersbyUserTypeCompletedDelegate == null)) {
                this.onGetAllUsersbyUserTypeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllUsersbyUserTypeCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllUsersbyUserTypeDelegate, new object[] {
                        userID,
                        usertypeID,
                        Password}, this.onEndGetAllUsersbyUserTypeDelegate, this.onGetAllUsersbyUserTypeCompletedDelegate, userState);
        }
        
        public string GetAllUsersbyUserTypeNew(int userID, int usertypeID, string Password) {
            return base.Channel.GetAllUsersbyUserTypeNew(userID, usertypeID, Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAllUsersbyUserTypeNew(int userID, int usertypeID, string Password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllUsersbyUserTypeNew(userID, usertypeID, Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetAllUsersbyUserTypeNew(System.IAsyncResult result) {
            return base.Channel.EndGetAllUsersbyUserTypeNew(result);
        }
        
        private System.IAsyncResult OnBeginGetAllUsersbyUserTypeNew(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            int usertypeID = ((int)(inValues[1]));
            string Password = ((string)(inValues[2]));
            return this.BeginGetAllUsersbyUserTypeNew(userID, usertypeID, Password, callback, asyncState);
        }
        
        private object[] OnEndGetAllUsersbyUserTypeNew(System.IAsyncResult result) {
            string retVal = this.EndGetAllUsersbyUserTypeNew(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllUsersbyUserTypeNewCompleted(object state) {
            if ((this.GetAllUsersbyUserTypeNewCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllUsersbyUserTypeNewCompleted(this, new GetAllUsersbyUserTypeNewCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllUsersbyUserTypeNewAsync(int userID, int usertypeID, string Password) {
            this.GetAllUsersbyUserTypeNewAsync(userID, usertypeID, Password, null);
        }
        
        public void GetAllUsersbyUserTypeNewAsync(int userID, int usertypeID, string Password, object userState) {
            if ((this.onBeginGetAllUsersbyUserTypeNewDelegate == null)) {
                this.onBeginGetAllUsersbyUserTypeNewDelegate = new BeginOperationDelegate(this.OnBeginGetAllUsersbyUserTypeNew);
            }
            if ((this.onEndGetAllUsersbyUserTypeNewDelegate == null)) {
                this.onEndGetAllUsersbyUserTypeNewDelegate = new EndOperationDelegate(this.OnEndGetAllUsersbyUserTypeNew);
            }
            if ((this.onGetAllUsersbyUserTypeNewCompletedDelegate == null)) {
                this.onGetAllUsersbyUserTypeNewCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllUsersbyUserTypeNewCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllUsersbyUserTypeNewDelegate, new object[] {
                        userID,
                        usertypeID,
                        Password}, this.onEndGetAllUsersbyUserTypeNewDelegate, this.onGetAllUsersbyUserTypeNewCompletedDelegate, userState);
        }
        
        public string GetUserDetailsbyID(int userID, string Password) {
            return base.Channel.GetUserDetailsbyID(userID, Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetUserDetailsbyID(int userID, string Password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUserDetailsbyID(userID, Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetUserDetailsbyID(System.IAsyncResult result) {
            return base.Channel.EndGetUserDetailsbyID(result);
        }
        
        private System.IAsyncResult OnBeginGetUserDetailsbyID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            string Password = ((string)(inValues[1]));
            return this.BeginGetUserDetailsbyID(userID, Password, callback, asyncState);
        }
        
        private object[] OnEndGetUserDetailsbyID(System.IAsyncResult result) {
            string retVal = this.EndGetUserDetailsbyID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserDetailsbyIDCompleted(object state) {
            if ((this.GetUserDetailsbyIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserDetailsbyIDCompleted(this, new GetUserDetailsbyIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserDetailsbyIDAsync(int userID, string Password) {
            this.GetUserDetailsbyIDAsync(userID, Password, null);
        }
        
        public void GetUserDetailsbyIDAsync(int userID, string Password, object userState) {
            if ((this.onBeginGetUserDetailsbyIDDelegate == null)) {
                this.onBeginGetUserDetailsbyIDDelegate = new BeginOperationDelegate(this.OnBeginGetUserDetailsbyID);
            }
            if ((this.onEndGetUserDetailsbyIDDelegate == null)) {
                this.onEndGetUserDetailsbyIDDelegate = new EndOperationDelegate(this.OnEndGetUserDetailsbyID);
            }
            if ((this.onGetUserDetailsbyIDCompletedDelegate == null)) {
                this.onGetUserDetailsbyIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserDetailsbyIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserDetailsbyIDDelegate, new object[] {
                        userID,
                        Password}, this.onEndGetUserDetailsbyIDDelegate, this.onGetUserDetailsbyIDCompletedDelegate, userState);
        }
        
        public string GetMarketbyEventID(string EventID) {
            return base.Channel.GetMarketbyEventID(EventID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetMarketbyEventID(string EventID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMarketbyEventID(EventID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetMarketbyEventID(System.IAsyncResult result) {
            return base.Channel.EndGetMarketbyEventID(result);
        }
        
        private System.IAsyncResult OnBeginGetMarketbyEventID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string EventID = ((string)(inValues[0]));
            return this.BeginGetMarketbyEventID(EventID, callback, asyncState);
        }
        
        private object[] OnEndGetMarketbyEventID(System.IAsyncResult result) {
            string retVal = this.EndGetMarketbyEventID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMarketbyEventIDCompleted(object state) {
            if ((this.GetMarketbyEventIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMarketbyEventIDCompleted(this, new GetMarketbyEventIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMarketbyEventIDAsync(string EventID) {
            this.GetMarketbyEventIDAsync(EventID, null);
        }
        
        public void GetMarketbyEventIDAsync(string EventID, object userState) {
            if ((this.onBeginGetMarketbyEventIDDelegate == null)) {
                this.onBeginGetMarketbyEventIDDelegate = new BeginOperationDelegate(this.OnBeginGetMarketbyEventID);
            }
            if ((this.onEndGetMarketbyEventIDDelegate == null)) {
                this.onEndGetMarketbyEventIDDelegate = new EndOperationDelegate(this.OnEndGetMarketbyEventID);
            }
            if ((this.onGetMarketbyEventIDCompletedDelegate == null)) {
                this.onGetMarketbyEventIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMarketbyEventIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetMarketbyEventIDDelegate, new object[] {
                        EventID}, this.onEndGetMarketbyEventIDDelegate, this.onGetMarketbyEventIDCompletedDelegate, userState);
        }
        
        public string GetMarketbyEventID1(string EventID) {
            return base.Channel.GetMarketbyEventID1(EventID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetMarketbyEventID1(string EventID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMarketbyEventID1(EventID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetMarketbyEventID1(System.IAsyncResult result) {
            return base.Channel.EndGetMarketbyEventID1(result);
        }
        
        private System.IAsyncResult OnBeginGetMarketbyEventID1(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string EventID = ((string)(inValues[0]));
            return this.BeginGetMarketbyEventID1(EventID, callback, asyncState);
        }
        
        private object[] OnEndGetMarketbyEventID1(System.IAsyncResult result) {
            string retVal = this.EndGetMarketbyEventID1(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMarketbyEventID1Completed(object state) {
            if ((this.GetMarketbyEventID1Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMarketbyEventID1Completed(this, new GetMarketbyEventID1CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMarketbyEventID1Async(string EventID) {
            this.GetMarketbyEventID1Async(EventID, null);
        }
        
        public void GetMarketbyEventID1Async(string EventID, object userState) {
            if ((this.onBeginGetMarketbyEventID1Delegate == null)) {
                this.onBeginGetMarketbyEventID1Delegate = new BeginOperationDelegate(this.OnBeginGetMarketbyEventID1);
            }
            if ((this.onEndGetMarketbyEventID1Delegate == null)) {
                this.onEndGetMarketbyEventID1Delegate = new EndOperationDelegate(this.OnEndGetMarketbyEventID1);
            }
            if ((this.onGetMarketbyEventID1CompletedDelegate == null)) {
                this.onGetMarketbyEventID1CompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMarketbyEventID1Completed);
            }
            base.InvokeAsync(this.onBeginGetMarketbyEventID1Delegate, new object[] {
                        EventID}, this.onEndGetMarketbyEventID1Delegate, this.onGetMarketbyEventID1CompletedDelegate, userState);
        }
        
        public string SetDeleteStatusofUser(int UserID, bool isDeleted, string Password) {
            return base.Channel.SetDeleteStatusofUser(UserID, isDeleted, Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSetDeleteStatusofUser(int UserID, bool isDeleted, string Password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetDeleteStatusofUser(UserID, isDeleted, Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndSetDeleteStatusofUser(System.IAsyncResult result) {
            return base.Channel.EndSetDeleteStatusofUser(result);
        }
        
        private System.IAsyncResult OnBeginSetDeleteStatusofUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int UserID = ((int)(inValues[0]));
            bool isDeleted = ((bool)(inValues[1]));
            string Password = ((string)(inValues[2]));
            return this.BeginSetDeleteStatusofUser(UserID, isDeleted, Password, callback, asyncState);
        }
        
        private object[] OnEndSetDeleteStatusofUser(System.IAsyncResult result) {
            string retVal = this.EndSetDeleteStatusofUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSetDeleteStatusofUserCompleted(object state) {
            if ((this.SetDeleteStatusofUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetDeleteStatusofUserCompleted(this, new SetDeleteStatusofUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetDeleteStatusofUserAsync(int UserID, bool isDeleted, string Password) {
            this.SetDeleteStatusofUserAsync(UserID, isDeleted, Password, null);
        }
        
        public void SetDeleteStatusofUserAsync(int UserID, bool isDeleted, string Password, object userState) {
            if ((this.onBeginSetDeleteStatusofUserDelegate == null)) {
                this.onBeginSetDeleteStatusofUserDelegate = new BeginOperationDelegate(this.OnBeginSetDeleteStatusofUser);
            }
            if ((this.onEndSetDeleteStatusofUserDelegate == null)) {
                this.onEndSetDeleteStatusofUserDelegate = new EndOperationDelegate(this.OnEndSetDeleteStatusofUser);
            }
            if ((this.onSetDeleteStatusofUserCompletedDelegate == null)) {
                this.onSetDeleteStatusofUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetDeleteStatusofUserCompleted);
            }
            base.InvokeAsync(this.onBeginSetDeleteStatusofUserDelegate, new object[] {
                        UserID,
                        isDeleted,
                        Password}, this.onEndSetDeleteStatusofUserDelegate, this.onSetDeleteStatusofUserCompletedDelegate, userState);
        }
        
        public string SetBlockedStatusofUser(int UserID, bool isBlocked, string Password) {
            return base.Channel.SetBlockedStatusofUser(UserID, isBlocked, Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSetBlockedStatusofUser(int UserID, bool isBlocked, string Password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetBlockedStatusofUser(UserID, isBlocked, Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndSetBlockedStatusofUser(System.IAsyncResult result) {
            return base.Channel.EndSetBlockedStatusofUser(result);
        }
        
        private System.IAsyncResult OnBeginSetBlockedStatusofUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int UserID = ((int)(inValues[0]));
            bool isBlocked = ((bool)(inValues[1]));
            string Password = ((string)(inValues[2]));
            return this.BeginSetBlockedStatusofUser(UserID, isBlocked, Password, callback, asyncState);
        }
        
        private object[] OnEndSetBlockedStatusofUser(System.IAsyncResult result) {
            string retVal = this.EndSetBlockedStatusofUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSetBlockedStatusofUserCompleted(object state) {
            if ((this.SetBlockedStatusofUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetBlockedStatusofUserCompleted(this, new SetBlockedStatusofUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetBlockedStatusofUserAsync(int UserID, bool isBlocked, string Password) {
            this.SetBlockedStatusofUserAsync(UserID, isBlocked, Password, null);
        }
        
        public void SetBlockedStatusofUserAsync(int UserID, bool isBlocked, string Password, object userState) {
            if ((this.onBeginSetBlockedStatusofUserDelegate == null)) {
                this.onBeginSetBlockedStatusofUserDelegate = new BeginOperationDelegate(this.OnBeginSetBlockedStatusofUser);
            }
            if ((this.onEndSetBlockedStatusofUserDelegate == null)) {
                this.onEndSetBlockedStatusofUserDelegate = new EndOperationDelegate(this.OnEndSetBlockedStatusofUser);
            }
            if ((this.onSetBlockedStatusofUserCompletedDelegate == null)) {
                this.onSetBlockedStatusofUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetBlockedStatusofUserCompleted);
            }
            base.InvokeAsync(this.onBeginSetBlockedStatusofUserDelegate, new object[] {
                        UserID,
                        isBlocked,
                        Password}, this.onEndSetBlockedStatusofUserDelegate, this.onSetBlockedStatusofUserCompletedDelegate, userState);
        }
        
        public string ResetPasswordofUser(int UserID, string Password, int Updatedby, System.DateTime updatedtime, string Passwordforvalidate) {
            return base.Channel.ResetPasswordofUser(UserID, Password, Updatedby, updatedtime, Passwordforvalidate);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginResetPasswordofUser(int UserID, string Password, int Updatedby, System.DateTime updatedtime, string Passwordforvalidate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginResetPasswordofUser(UserID, Password, Updatedby, updatedtime, Passwordforvalidate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndResetPasswordofUser(System.IAsyncResult result) {
            return base.Channel.EndResetPasswordofUser(result);
        }
        
        private System.IAsyncResult OnBeginResetPasswordofUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int UserID = ((int)(inValues[0]));
            string Password = ((string)(inValues[1]));
            int Updatedby = ((int)(inValues[2]));
            System.DateTime updatedtime = ((System.DateTime)(inValues[3]));
            string Passwordforvalidate = ((string)(inValues[4]));
            return this.BeginResetPasswordofUser(UserID, Password, Updatedby, updatedtime, Passwordforvalidate, callback, asyncState);
        }
        
        private object[] OnEndResetPasswordofUser(System.IAsyncResult result) {
            string retVal = this.EndResetPasswordofUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnResetPasswordofUserCompleted(object state) {
            if ((this.ResetPasswordofUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ResetPasswordofUserCompleted(this, new ResetPasswordofUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ResetPasswordofUserAsync(int UserID, string Password, int Updatedby, System.DateTime updatedtime, string Passwordforvalidate) {
            this.ResetPasswordofUserAsync(UserID, Password, Updatedby, updatedtime, Passwordforvalidate, null);
        }
        
        public void ResetPasswordofUserAsync(int UserID, string Password, int Updatedby, System.DateTime updatedtime, string Passwordforvalidate, object userState) {
            if ((this.onBeginResetPasswordofUserDelegate == null)) {
                this.onBeginResetPasswordofUserDelegate = new BeginOperationDelegate(this.OnBeginResetPasswordofUser);
            }
            if ((this.onEndResetPasswordofUserDelegate == null)) {
                this.onEndResetPasswordofUserDelegate = new EndOperationDelegate(this.OnEndResetPasswordofUser);
            }
            if ((this.onResetPasswordofUserCompletedDelegate == null)) {
                this.onResetPasswordofUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnResetPasswordofUserCompleted);
            }
            base.InvokeAsync(this.onBeginResetPasswordofUserDelegate, new object[] {
                        UserID,
                        Password,
                        Updatedby,
                        updatedtime,
                        Passwordforvalidate}, this.onEndResetPasswordofUserDelegate, this.onResetPasswordofUserCompletedDelegate, userState);
        }
        
        public string GetUserMArket(int userID) {
            return base.Channel.GetUserMArket(userID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetUserMArket(int userID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUserMArket(userID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetUserMArket(System.IAsyncResult result) {
            return base.Channel.EndGetUserMArket(result);
        }
        
        private System.IAsyncResult OnBeginGetUserMArket(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            return this.BeginGetUserMArket(userID, callback, asyncState);
        }
        
        private object[] OnEndGetUserMArket(System.IAsyncResult result) {
            string retVal = this.EndGetUserMArket(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserMArketCompleted(object state) {
            if ((this.GetUserMArketCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserMArketCompleted(this, new GetUserMArketCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserMArketAsync(int userID) {
            this.GetUserMArketAsync(userID, null);
        }
        
        public void GetUserMArketAsync(int userID, object userState) {
            if ((this.onBeginGetUserMArketDelegate == null)) {
                this.onBeginGetUserMArketDelegate = new BeginOperationDelegate(this.OnBeginGetUserMArket);
            }
            if ((this.onEndGetUserMArketDelegate == null)) {
                this.onEndGetUserMArketDelegate = new EndOperationDelegate(this.OnEndGetUserMArket);
            }
            if ((this.onGetUserMArketCompletedDelegate == null)) {
                this.onGetUserMArketCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserMArketCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserMArketDelegate, new object[] {
                        userID}, this.onEndGetUserMArketDelegate, this.onGetUserMArketCompletedDelegate, userState);
        }
        
        public string InsertUserMarket(string[] allmarketitems, int userID, int UpdatedbyID, bool DeleteOldMarkets) {
            return base.Channel.InsertUserMarket(allmarketitems, userID, UpdatedbyID, DeleteOldMarkets);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginInsertUserMarket(string[] allmarketitems, int userID, int UpdatedbyID, bool DeleteOldMarkets, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInsertUserMarket(allmarketitems, userID, UpdatedbyID, DeleteOldMarkets, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndInsertUserMarket(System.IAsyncResult result) {
            return base.Channel.EndInsertUserMarket(result);
        }
        
        private System.IAsyncResult OnBeginInsertUserMarket(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string[] allmarketitems = ((string[])(inValues[0]));
            int userID = ((int)(inValues[1]));
            int UpdatedbyID = ((int)(inValues[2]));
            bool DeleteOldMarkets = ((bool)(inValues[3]));
            return this.BeginInsertUserMarket(allmarketitems, userID, UpdatedbyID, DeleteOldMarkets, callback, asyncState);
        }
        
        private object[] OnEndInsertUserMarket(System.IAsyncResult result) {
            string retVal = this.EndInsertUserMarket(result);
            return new object[] {
                    retVal};
        }
        
        private void OnInsertUserMarketCompleted(object state) {
            if ((this.InsertUserMarketCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InsertUserMarketCompleted(this, new InsertUserMarketCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InsertUserMarketAsync(string[] allmarketitems, int userID, int UpdatedbyID, bool DeleteOldMarkets) {
            this.InsertUserMarketAsync(allmarketitems, userID, UpdatedbyID, DeleteOldMarkets, null);
        }
        
        public void InsertUserMarketAsync(string[] allmarketitems, int userID, int UpdatedbyID, bool DeleteOldMarkets, object userState) {
            if ((this.onBeginInsertUserMarketDelegate == null)) {
                this.onBeginInsertUserMarketDelegate = new BeginOperationDelegate(this.OnBeginInsertUserMarket);
            }
            if ((this.onEndInsertUserMarketDelegate == null)) {
                this.onEndInsertUserMarketDelegate = new EndOperationDelegate(this.OnEndInsertUserMarket);
            }
            if ((this.onInsertUserMarketCompletedDelegate == null)) {
                this.onInsertUserMarketCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInsertUserMarketCompleted);
            }
            base.InvokeAsync(this.onBeginInsertUserMarketDelegate, new object[] {
                        allmarketitems,
                        userID,
                        UpdatedbyID,
                        DeleteOldMarkets}, this.onEndInsertUserMarketDelegate, this.onInsertUserMarketCompletedDelegate, userState);
        }
        
        public string InsertUserMarketKJ(string[] kalijutt, string[] KaliCatelogIDs, string[] selections, int[] userIDs, string EventID, int UpdatedbyID) {
            return base.Channel.InsertUserMarketKJ(kalijutt, KaliCatelogIDs, selections, userIDs, EventID, UpdatedbyID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginInsertUserMarketKJ(string[] kalijutt, string[] KaliCatelogIDs, string[] selections, int[] userIDs, string EventID, int UpdatedbyID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInsertUserMarketKJ(kalijutt, KaliCatelogIDs, selections, userIDs, EventID, UpdatedbyID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndInsertUserMarketKJ(System.IAsyncResult result) {
            return base.Channel.EndInsertUserMarketKJ(result);
        }
        
        private System.IAsyncResult OnBeginInsertUserMarketKJ(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string[] kalijutt = ((string[])(inValues[0]));
            string[] KaliCatelogIDs = ((string[])(inValues[1]));
            string[] selections = ((string[])(inValues[2]));
            int[] userIDs = ((int[])(inValues[3]));
            string EventID = ((string)(inValues[4]));
            int UpdatedbyID = ((int)(inValues[5]));
            return this.BeginInsertUserMarketKJ(kalijutt, KaliCatelogIDs, selections, userIDs, EventID, UpdatedbyID, callback, asyncState);
        }
        
        private object[] OnEndInsertUserMarketKJ(System.IAsyncResult result) {
            string retVal = this.EndInsertUserMarketKJ(result);
            return new object[] {
                    retVal};
        }
        
        private void OnInsertUserMarketKJCompleted(object state) {
            if ((this.InsertUserMarketKJCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InsertUserMarketKJCompleted(this, new InsertUserMarketKJCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InsertUserMarketKJAsync(string[] kalijutt, string[] KaliCatelogIDs, string[] selections, int[] userIDs, string EventID, int UpdatedbyID) {
            this.InsertUserMarketKJAsync(kalijutt, KaliCatelogIDs, selections, userIDs, EventID, UpdatedbyID, null);
        }
        
        public void InsertUserMarketKJAsync(string[] kalijutt, string[] KaliCatelogIDs, string[] selections, int[] userIDs, string EventID, int UpdatedbyID, object userState) {
            if ((this.onBeginInsertUserMarketKJDelegate == null)) {
                this.onBeginInsertUserMarketKJDelegate = new BeginOperationDelegate(this.OnBeginInsertUserMarketKJ);
            }
            if ((this.onEndInsertUserMarketKJDelegate == null)) {
                this.onEndInsertUserMarketKJDelegate = new EndOperationDelegate(this.OnEndInsertUserMarketKJ);
            }
            if ((this.onInsertUserMarketKJCompletedDelegate == null)) {
                this.onInsertUserMarketKJCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInsertUserMarketKJCompleted);
            }
            base.InvokeAsync(this.onBeginInsertUserMarketKJDelegate, new object[] {
                        kalijutt,
                        KaliCatelogIDs,
                        selections,
                        userIDs,
                        EventID,
                        UpdatedbyID}, this.onEndInsertUserMarketKJDelegate, this.onInsertUserMarketKJCompletedDelegate, userState);
        }
        
        public string InsertUserMarketSFig(string[] SmallFig, string[] smallFigCatelogIDs, string[] selections, int[] userIDs, string EventID, int UpdatedbyID) {
            return base.Channel.InsertUserMarketSFig(SmallFig, smallFigCatelogIDs, selections, userIDs, EventID, UpdatedbyID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginInsertUserMarketSFig(string[] SmallFig, string[] smallFigCatelogIDs, string[] selections, int[] userIDs, string EventID, int UpdatedbyID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInsertUserMarketSFig(SmallFig, smallFigCatelogIDs, selections, userIDs, EventID, UpdatedbyID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndInsertUserMarketSFig(System.IAsyncResult result) {
            return base.Channel.EndInsertUserMarketSFig(result);
        }
        
        private System.IAsyncResult OnBeginInsertUserMarketSFig(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string[] SmallFig = ((string[])(inValues[0]));
            string[] smallFigCatelogIDs = ((string[])(inValues[1]));
            string[] selections = ((string[])(inValues[2]));
            int[] userIDs = ((int[])(inValues[3]));
            string EventID = ((string)(inValues[4]));
            int UpdatedbyID = ((int)(inValues[5]));
            return this.BeginInsertUserMarketSFig(SmallFig, smallFigCatelogIDs, selections, userIDs, EventID, UpdatedbyID, callback, asyncState);
        }
        
        private object[] OnEndInsertUserMarketSFig(System.IAsyncResult result) {
            string retVal = this.EndInsertUserMarketSFig(result);
            return new object[] {
                    retVal};
        }
        
        private void OnInsertUserMarketSFigCompleted(object state) {
            if ((this.InsertUserMarketSFigCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InsertUserMarketSFigCompleted(this, new InsertUserMarketSFigCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InsertUserMarketSFigAsync(string[] SmallFig, string[] smallFigCatelogIDs, string[] selections, int[] userIDs, string EventID, int UpdatedbyID) {
            this.InsertUserMarketSFigAsync(SmallFig, smallFigCatelogIDs, selections, userIDs, EventID, UpdatedbyID, null);
        }
        
        public void InsertUserMarketSFigAsync(string[] SmallFig, string[] smallFigCatelogIDs, string[] selections, int[] userIDs, string EventID, int UpdatedbyID, object userState) {
            if ((this.onBeginInsertUserMarketSFigDelegate == null)) {
                this.onBeginInsertUserMarketSFigDelegate = new BeginOperationDelegate(this.OnBeginInsertUserMarketSFig);
            }
            if ((this.onEndInsertUserMarketSFigDelegate == null)) {
                this.onEndInsertUserMarketSFigDelegate = new EndOperationDelegate(this.OnEndInsertUserMarketSFig);
            }
            if ((this.onInsertUserMarketSFigCompletedDelegate == null)) {
                this.onInsertUserMarketSFigCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInsertUserMarketSFigCompleted);
            }
            base.InvokeAsync(this.onBeginInsertUserMarketSFigDelegate, new object[] {
                        SmallFig,
                        smallFigCatelogIDs,
                        selections,
                        userIDs,
                        EventID,
                        UpdatedbyID}, this.onEndInsertUserMarketSFigDelegate, this.onInsertUserMarketSFigCompletedDelegate, userState);
        }
        
        public string InsertUserMarketFigure(string[] Figure, string[] FigureCatelogIDs, string[] Figureselections, string[] FigureselectionsName, int[] userIDs, string EventID, int UpdatedbyID) {
            return base.Channel.InsertUserMarketFigure(Figure, FigureCatelogIDs, Figureselections, FigureselectionsName, userIDs, EventID, UpdatedbyID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginInsertUserMarketFigure(string[] Figure, string[] FigureCatelogIDs, string[] Figureselections, string[] FigureselectionsName, int[] userIDs, string EventID, int UpdatedbyID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInsertUserMarketFigure(Figure, FigureCatelogIDs, Figureselections, FigureselectionsName, userIDs, EventID, UpdatedbyID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndInsertUserMarketFigure(System.IAsyncResult result) {
            return base.Channel.EndInsertUserMarketFigure(result);
        }
        
        private System.IAsyncResult OnBeginInsertUserMarketFigure(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string[] Figure = ((string[])(inValues[0]));
            string[] FigureCatelogIDs = ((string[])(inValues[1]));
            string[] Figureselections = ((string[])(inValues[2]));
            string[] FigureselectionsName = ((string[])(inValues[3]));
            int[] userIDs = ((int[])(inValues[4]));
            string EventID = ((string)(inValues[5]));
            int UpdatedbyID = ((int)(inValues[6]));
            return this.BeginInsertUserMarketFigure(Figure, FigureCatelogIDs, Figureselections, FigureselectionsName, userIDs, EventID, UpdatedbyID, callback, asyncState);
        }
        
        private object[] OnEndInsertUserMarketFigure(System.IAsyncResult result) {
            string retVal = this.EndInsertUserMarketFigure(result);
            return new object[] {
                    retVal};
        }
        
        private void OnInsertUserMarketFigureCompleted(object state) {
            if ((this.InsertUserMarketFigureCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InsertUserMarketFigureCompleted(this, new InsertUserMarketFigureCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InsertUserMarketFigureAsync(string[] Figure, string[] FigureCatelogIDs, string[] Figureselections, string[] FigureselectionsName, int[] userIDs, string EventID, int UpdatedbyID) {
            this.InsertUserMarketFigureAsync(Figure, FigureCatelogIDs, Figureselections, FigureselectionsName, userIDs, EventID, UpdatedbyID, null);
        }
        
        public void InsertUserMarketFigureAsync(string[] Figure, string[] FigureCatelogIDs, string[] Figureselections, string[] FigureselectionsName, int[] userIDs, string EventID, int UpdatedbyID, object userState) {
            if ((this.onBeginInsertUserMarketFigureDelegate == null)) {
                this.onBeginInsertUserMarketFigureDelegate = new BeginOperationDelegate(this.OnBeginInsertUserMarketFigure);
            }
            if ((this.onEndInsertUserMarketFigureDelegate == null)) {
                this.onEndInsertUserMarketFigureDelegate = new EndOperationDelegate(this.OnEndInsertUserMarketFigure);
            }
            if ((this.onInsertUserMarketFigureCompletedDelegate == null)) {
                this.onInsertUserMarketFigureCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInsertUserMarketFigureCompleted);
            }
            base.InvokeAsync(this.onBeginInsertUserMarketFigureDelegate, new object[] {
                        Figure,
                        FigureCatelogIDs,
                        Figureselections,
                        FigureselectionsName,
                        userIDs,
                        EventID,
                        UpdatedbyID}, this.onEndInsertUserMarketFigureDelegate, this.onInsertUserMarketFigureCompletedDelegate, userState);
        }
        
        public string InsertIndainFancy(ExternalAPI.TO.MarketBookForindianFancy[] allmarkets, ExternalAPI.TO.RunnerForIndianFancy[] runners, int[] userIDs, string EventID, string Password) {
            return base.Channel.InsertIndainFancy(allmarkets, runners, userIDs, EventID, Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginInsertIndainFancy(ExternalAPI.TO.MarketBookForindianFancy[] allmarkets, ExternalAPI.TO.RunnerForIndianFancy[] runners, int[] userIDs, string EventID, string Password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInsertIndainFancy(allmarkets, runners, userIDs, EventID, Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndInsertIndainFancy(System.IAsyncResult result) {
            return base.Channel.EndInsertIndainFancy(result);
        }
        
        private System.IAsyncResult OnBeginInsertIndainFancy(object[] inValues, System.AsyncCallback callback, object asyncState) {
            ExternalAPI.TO.MarketBookForindianFancy[] allmarkets = ((ExternalAPI.TO.MarketBookForindianFancy[])(inValues[0]));
            ExternalAPI.TO.RunnerForIndianFancy[] runners = ((ExternalAPI.TO.RunnerForIndianFancy[])(inValues[1]));
            int[] userIDs = ((int[])(inValues[2]));
            string EventID = ((string)(inValues[3]));
            string Password = ((string)(inValues[4]));
            return this.BeginInsertIndainFancy(allmarkets, runners, userIDs, EventID, Password, callback, asyncState);
        }
        
        private object[] OnEndInsertIndainFancy(System.IAsyncResult result) {
            string retVal = this.EndInsertIndainFancy(result);
            return new object[] {
                    retVal};
        }
        
        private void OnInsertIndainFancyCompleted(object state) {
            if ((this.InsertIndainFancyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InsertIndainFancyCompleted(this, new InsertIndainFancyCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InsertIndainFancyAsync(ExternalAPI.TO.MarketBookForindianFancy[] allmarkets, ExternalAPI.TO.RunnerForIndianFancy[] runners, int[] userIDs, string EventID, string Password) {
            this.InsertIndainFancyAsync(allmarkets, runners, userIDs, EventID, Password, null);
        }
        
        public void InsertIndainFancyAsync(ExternalAPI.TO.MarketBookForindianFancy[] allmarkets, ExternalAPI.TO.RunnerForIndianFancy[] runners, int[] userIDs, string EventID, string Password, object userState) {
            if ((this.onBeginInsertIndainFancyDelegate == null)) {
                this.onBeginInsertIndainFancyDelegate = new BeginOperationDelegate(this.OnBeginInsertIndainFancy);
            }
            if ((this.onEndInsertIndainFancyDelegate == null)) {
                this.onEndInsertIndainFancyDelegate = new EndOperationDelegate(this.OnEndInsertIndainFancy);
            }
            if ((this.onInsertIndainFancyCompletedDelegate == null)) {
                this.onInsertIndainFancyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInsertIndainFancyCompleted);
            }
            base.InvokeAsync(this.onBeginInsertIndainFancyDelegate, new object[] {
                        allmarkets,
                        runners,
                        userIDs,
                        EventID,
                        Password}, this.onEndInsertIndainFancyDelegate, this.onInsertIndainFancyCompletedDelegate, userState);
        }
        
        public string GetUserMarketforSelection(int UserID) {
            return base.Channel.GetUserMarketforSelection(UserID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetUserMarketforSelection(int UserID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUserMarketforSelection(UserID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetUserMarketforSelection(System.IAsyncResult result) {
            return base.Channel.EndGetUserMarketforSelection(result);
        }
        
        private System.IAsyncResult OnBeginGetUserMarketforSelection(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int UserID = ((int)(inValues[0]));
            return this.BeginGetUserMarketforSelection(UserID, callback, asyncState);
        }
        
        private object[] OnEndGetUserMarketforSelection(System.IAsyncResult result) {
            string retVal = this.EndGetUserMarketforSelection(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserMarketforSelectionCompleted(object state) {
            if ((this.GetUserMarketforSelectionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserMarketforSelectionCompleted(this, new GetUserMarketforSelectionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserMarketforSelectionAsync(int UserID) {
            this.GetUserMarketforSelectionAsync(UserID, null);
        }
        
        public void GetUserMarketforSelectionAsync(int UserID, object userState) {
            if ((this.onBeginGetUserMarketforSelectionDelegate == null)) {
                this.onBeginGetUserMarketforSelectionDelegate = new BeginOperationDelegate(this.OnBeginGetUserMarketforSelection);
            }
            if ((this.onEndGetUserMarketforSelectionDelegate == null)) {
                this.onEndGetUserMarketforSelectionDelegate = new EndOperationDelegate(this.OnEndGetUserMarketforSelection);
            }
            if ((this.onGetUserMarketforSelectionCompletedDelegate == null)) {
                this.onGetUserMarketforSelectionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserMarketforSelectionCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserMarketforSelectionDelegate, new object[] {
                        UserID}, this.onEndGetUserMarketforSelectionDelegate, this.onGetUserMarketforSelectionCompletedDelegate, userState);
        }
        
        public string GetFavoriteEventTypes(int userID) {
            return base.Channel.GetFavoriteEventTypes(userID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetFavoriteEventTypes(int userID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFavoriteEventTypes(userID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetFavoriteEventTypes(System.IAsyncResult result) {
            return base.Channel.EndGetFavoriteEventTypes(result);
        }
        
        private System.IAsyncResult OnBeginGetFavoriteEventTypes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            return this.BeginGetFavoriteEventTypes(userID, callback, asyncState);
        }
        
        private object[] OnEndGetFavoriteEventTypes(System.IAsyncResult result) {
            string retVal = this.EndGetFavoriteEventTypes(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFavoriteEventTypesCompleted(object state) {
            if ((this.GetFavoriteEventTypesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFavoriteEventTypesCompleted(this, new GetFavoriteEventTypesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFavoriteEventTypesAsync(int userID) {
            this.GetFavoriteEventTypesAsync(userID, null);
        }
        
        public void GetFavoriteEventTypesAsync(int userID, object userState) {
            if ((this.onBeginGetFavoriteEventTypesDelegate == null)) {
                this.onBeginGetFavoriteEventTypesDelegate = new BeginOperationDelegate(this.OnBeginGetFavoriteEventTypes);
            }
            if ((this.onEndGetFavoriteEventTypesDelegate == null)) {
                this.onEndGetFavoriteEventTypesDelegate = new EndOperationDelegate(this.OnEndGetFavoriteEventTypes);
            }
            if ((this.onGetFavoriteEventTypesCompletedDelegate == null)) {
                this.onGetFavoriteEventTypesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFavoriteEventTypesCompleted);
            }
            base.InvokeAsync(this.onBeginGetFavoriteEventTypesDelegate, new object[] {
                        userID}, this.onEndGetFavoriteEventTypesDelegate, this.onGetFavoriteEventTypesCompletedDelegate, userState);
        }
        
        public void AddtoFavoriteEventTypes(string EventTypeID, int userID) {
            base.Channel.AddtoFavoriteEventTypes(EventTypeID, userID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddtoFavoriteEventTypes(string EventTypeID, int userID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddtoFavoriteEventTypes(EventTypeID, userID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndAddtoFavoriteEventTypes(System.IAsyncResult result) {
            base.Channel.EndAddtoFavoriteEventTypes(result);
        }
        
        private System.IAsyncResult OnBeginAddtoFavoriteEventTypes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string EventTypeID = ((string)(inValues[0]));
            int userID = ((int)(inValues[1]));
            return this.BeginAddtoFavoriteEventTypes(EventTypeID, userID, callback, asyncState);
        }
        
        private object[] OnEndAddtoFavoriteEventTypes(System.IAsyncResult result) {
            this.EndAddtoFavoriteEventTypes(result);
            return null;
        }
        
        private void OnAddtoFavoriteEventTypesCompleted(object state) {
            if ((this.AddtoFavoriteEventTypesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddtoFavoriteEventTypesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddtoFavoriteEventTypesAsync(string EventTypeID, int userID) {
            this.AddtoFavoriteEventTypesAsync(EventTypeID, userID, null);
        }
        
        public void AddtoFavoriteEventTypesAsync(string EventTypeID, int userID, object userState) {
            if ((this.onBeginAddtoFavoriteEventTypesDelegate == null)) {
                this.onBeginAddtoFavoriteEventTypesDelegate = new BeginOperationDelegate(this.OnBeginAddtoFavoriteEventTypes);
            }
            if ((this.onEndAddtoFavoriteEventTypesDelegate == null)) {
                this.onEndAddtoFavoriteEventTypesDelegate = new EndOperationDelegate(this.OnEndAddtoFavoriteEventTypes);
            }
            if ((this.onAddtoFavoriteEventTypesCompletedDelegate == null)) {
                this.onAddtoFavoriteEventTypesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddtoFavoriteEventTypesCompleted);
            }
            base.InvokeAsync(this.onBeginAddtoFavoriteEventTypesDelegate, new object[] {
                        EventTypeID,
                        userID}, this.onEndAddtoFavoriteEventTypesDelegate, this.onAddtoFavoriteEventTypesCompletedDelegate, userState);
        }
        
        public void DeleteFromFavoriteEventTypes(string EventTypeID, int userID) {
            base.Channel.DeleteFromFavoriteEventTypes(EventTypeID, userID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteFromFavoriteEventTypes(string EventTypeID, int userID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteFromFavoriteEventTypes(EventTypeID, userID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDeleteFromFavoriteEventTypes(System.IAsyncResult result) {
            base.Channel.EndDeleteFromFavoriteEventTypes(result);
        }
        
        private System.IAsyncResult OnBeginDeleteFromFavoriteEventTypes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string EventTypeID = ((string)(inValues[0]));
            int userID = ((int)(inValues[1]));
            return this.BeginDeleteFromFavoriteEventTypes(EventTypeID, userID, callback, asyncState);
        }
        
        private object[] OnEndDeleteFromFavoriteEventTypes(System.IAsyncResult result) {
            this.EndDeleteFromFavoriteEventTypes(result);
            return null;
        }
        
        private void OnDeleteFromFavoriteEventTypesCompleted(object state) {
            if ((this.DeleteFromFavoriteEventTypesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteFromFavoriteEventTypesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteFromFavoriteEventTypesAsync(string EventTypeID, int userID) {
            this.DeleteFromFavoriteEventTypesAsync(EventTypeID, userID, null);
        }
        
        public void DeleteFromFavoriteEventTypesAsync(string EventTypeID, int userID, object userState) {
            if ((this.onBeginDeleteFromFavoriteEventTypesDelegate == null)) {
                this.onBeginDeleteFromFavoriteEventTypesDelegate = new BeginOperationDelegate(this.OnBeginDeleteFromFavoriteEventTypes);
            }
            if ((this.onEndDeleteFromFavoriteEventTypesDelegate == null)) {
                this.onEndDeleteFromFavoriteEventTypesDelegate = new EndOperationDelegate(this.OnEndDeleteFromFavoriteEventTypes);
            }
            if ((this.onDeleteFromFavoriteEventTypesCompletedDelegate == null)) {
                this.onDeleteFromFavoriteEventTypesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteFromFavoriteEventTypesCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteFromFavoriteEventTypesDelegate, new object[] {
                        EventTypeID,
                        userID}, this.onEndDeleteFromFavoriteEventTypesDelegate, this.onDeleteFromFavoriteEventTypesCompletedDelegate, userState);
        }
        
        public string GetFavoriteEvents(int userID) {
            return base.Channel.GetFavoriteEvents(userID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetFavoriteEvents(int userID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFavoriteEvents(userID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetFavoriteEvents(System.IAsyncResult result) {
            return base.Channel.EndGetFavoriteEvents(result);
        }
        
        private System.IAsyncResult OnBeginGetFavoriteEvents(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            return this.BeginGetFavoriteEvents(userID, callback, asyncState);
        }
        
        private object[] OnEndGetFavoriteEvents(System.IAsyncResult result) {
            string retVal = this.EndGetFavoriteEvents(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFavoriteEventsCompleted(object state) {
            if ((this.GetFavoriteEventsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFavoriteEventsCompleted(this, new GetFavoriteEventsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFavoriteEventsAsync(int userID) {
            this.GetFavoriteEventsAsync(userID, null);
        }
        
        public void GetFavoriteEventsAsync(int userID, object userState) {
            if ((this.onBeginGetFavoriteEventsDelegate == null)) {
                this.onBeginGetFavoriteEventsDelegate = new BeginOperationDelegate(this.OnBeginGetFavoriteEvents);
            }
            if ((this.onEndGetFavoriteEventsDelegate == null)) {
                this.onEndGetFavoriteEventsDelegate = new EndOperationDelegate(this.OnEndGetFavoriteEvents);
            }
            if ((this.onGetFavoriteEventsCompletedDelegate == null)) {
                this.onGetFavoriteEventsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFavoriteEventsCompleted);
            }
            base.InvokeAsync(this.onBeginGetFavoriteEventsDelegate, new object[] {
                        userID}, this.onEndGetFavoriteEventsDelegate, this.onGetFavoriteEventsCompletedDelegate, userState);
        }
        
        public void AddtoFavoriteEvents(string EventID, int userID) {
            base.Channel.AddtoFavoriteEvents(EventID, userID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddtoFavoriteEvents(string EventID, int userID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddtoFavoriteEvents(EventID, userID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndAddtoFavoriteEvents(System.IAsyncResult result) {
            base.Channel.EndAddtoFavoriteEvents(result);
        }
        
        private System.IAsyncResult OnBeginAddtoFavoriteEvents(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string EventID = ((string)(inValues[0]));
            int userID = ((int)(inValues[1]));
            return this.BeginAddtoFavoriteEvents(EventID, userID, callback, asyncState);
        }
        
        private object[] OnEndAddtoFavoriteEvents(System.IAsyncResult result) {
            this.EndAddtoFavoriteEvents(result);
            return null;
        }
        
        private void OnAddtoFavoriteEventsCompleted(object state) {
            if ((this.AddtoFavoriteEventsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddtoFavoriteEventsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddtoFavoriteEventsAsync(string EventID, int userID) {
            this.AddtoFavoriteEventsAsync(EventID, userID, null);
        }
        
        public void AddtoFavoriteEventsAsync(string EventID, int userID, object userState) {
            if ((this.onBeginAddtoFavoriteEventsDelegate == null)) {
                this.onBeginAddtoFavoriteEventsDelegate = new BeginOperationDelegate(this.OnBeginAddtoFavoriteEvents);
            }
            if ((this.onEndAddtoFavoriteEventsDelegate == null)) {
                this.onEndAddtoFavoriteEventsDelegate = new EndOperationDelegate(this.OnEndAddtoFavoriteEvents);
            }
            if ((this.onAddtoFavoriteEventsCompletedDelegate == null)) {
                this.onAddtoFavoriteEventsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddtoFavoriteEventsCompleted);
            }
            base.InvokeAsync(this.onBeginAddtoFavoriteEventsDelegate, new object[] {
                        EventID,
                        userID}, this.onEndAddtoFavoriteEventsDelegate, this.onAddtoFavoriteEventsCompletedDelegate, userState);
        }
        
        public void DeleteFromFavoriteEvents(string EventID, int userID) {
            base.Channel.DeleteFromFavoriteEvents(EventID, userID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteFromFavoriteEvents(string EventID, int userID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteFromFavoriteEvents(EventID, userID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDeleteFromFavoriteEvents(System.IAsyncResult result) {
            base.Channel.EndDeleteFromFavoriteEvents(result);
        }
        
        private System.IAsyncResult OnBeginDeleteFromFavoriteEvents(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string EventID = ((string)(inValues[0]));
            int userID = ((int)(inValues[1]));
            return this.BeginDeleteFromFavoriteEvents(EventID, userID, callback, asyncState);
        }
        
        private object[] OnEndDeleteFromFavoriteEvents(System.IAsyncResult result) {
            this.EndDeleteFromFavoriteEvents(result);
            return null;
        }
        
        private void OnDeleteFromFavoriteEventsCompleted(object state) {
            if ((this.DeleteFromFavoriteEventsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteFromFavoriteEventsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteFromFavoriteEventsAsync(string EventID, int userID) {
            this.DeleteFromFavoriteEventsAsync(EventID, userID, null);
        }
        
        public void DeleteFromFavoriteEventsAsync(string EventID, int userID, object userState) {
            if ((this.onBeginDeleteFromFavoriteEventsDelegate == null)) {
                this.onBeginDeleteFromFavoriteEventsDelegate = new BeginOperationDelegate(this.OnBeginDeleteFromFavoriteEvents);
            }
            if ((this.onEndDeleteFromFavoriteEventsDelegate == null)) {
                this.onEndDeleteFromFavoriteEventsDelegate = new EndOperationDelegate(this.OnEndDeleteFromFavoriteEvents);
            }
            if ((this.onDeleteFromFavoriteEventsCompletedDelegate == null)) {
                this.onDeleteFromFavoriteEventsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteFromFavoriteEventsCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteFromFavoriteEventsDelegate, new object[] {
                        EventID,
                        userID}, this.onEndDeleteFromFavoriteEventsDelegate, this.onDeleteFromFavoriteEventsCompletedDelegate, userState);
        }
        
        public string GetFavoriteCompetitions(int userID) {
            return base.Channel.GetFavoriteCompetitions(userID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetFavoriteCompetitions(int userID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFavoriteCompetitions(userID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetFavoriteCompetitions(System.IAsyncResult result) {
            return base.Channel.EndGetFavoriteCompetitions(result);
        }
        
        private System.IAsyncResult OnBeginGetFavoriteCompetitions(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            return this.BeginGetFavoriteCompetitions(userID, callback, asyncState);
        }
        
        private object[] OnEndGetFavoriteCompetitions(System.IAsyncResult result) {
            string retVal = this.EndGetFavoriteCompetitions(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFavoriteCompetitionsCompleted(object state) {
            if ((this.GetFavoriteCompetitionsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFavoriteCompetitionsCompleted(this, new GetFavoriteCompetitionsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFavoriteCompetitionsAsync(int userID) {
            this.GetFavoriteCompetitionsAsync(userID, null);
        }
        
        public void GetFavoriteCompetitionsAsync(int userID, object userState) {
            if ((this.onBeginGetFavoriteCompetitionsDelegate == null)) {
                this.onBeginGetFavoriteCompetitionsDelegate = new BeginOperationDelegate(this.OnBeginGetFavoriteCompetitions);
            }
            if ((this.onEndGetFavoriteCompetitionsDelegate == null)) {
                this.onEndGetFavoriteCompetitionsDelegate = new EndOperationDelegate(this.OnEndGetFavoriteCompetitions);
            }
            if ((this.onGetFavoriteCompetitionsCompletedDelegate == null)) {
                this.onGetFavoriteCompetitionsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFavoriteCompetitionsCompleted);
            }
            base.InvokeAsync(this.onBeginGetFavoriteCompetitionsDelegate, new object[] {
                        userID}, this.onEndGetFavoriteCompetitionsDelegate, this.onGetFavoriteCompetitionsCompletedDelegate, userState);
        }
        
        public void AddtoFavoriteCompetitions(string EventID, int userID) {
            base.Channel.AddtoFavoriteCompetitions(EventID, userID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddtoFavoriteCompetitions(string EventID, int userID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddtoFavoriteCompetitions(EventID, userID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndAddtoFavoriteCompetitions(System.IAsyncResult result) {
            base.Channel.EndAddtoFavoriteCompetitions(result);
        }
        
        private System.IAsyncResult OnBeginAddtoFavoriteCompetitions(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string EventID = ((string)(inValues[0]));
            int userID = ((int)(inValues[1]));
            return this.BeginAddtoFavoriteCompetitions(EventID, userID, callback, asyncState);
        }
        
        private object[] OnEndAddtoFavoriteCompetitions(System.IAsyncResult result) {
            this.EndAddtoFavoriteCompetitions(result);
            return null;
        }
        
        private void OnAddtoFavoriteCompetitionsCompleted(object state) {
            if ((this.AddtoFavoriteCompetitionsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddtoFavoriteCompetitionsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddtoFavoriteCompetitionsAsync(string EventID, int userID) {
            this.AddtoFavoriteCompetitionsAsync(EventID, userID, null);
        }
        
        public void AddtoFavoriteCompetitionsAsync(string EventID, int userID, object userState) {
            if ((this.onBeginAddtoFavoriteCompetitionsDelegate == null)) {
                this.onBeginAddtoFavoriteCompetitionsDelegate = new BeginOperationDelegate(this.OnBeginAddtoFavoriteCompetitions);
            }
            if ((this.onEndAddtoFavoriteCompetitionsDelegate == null)) {
                this.onEndAddtoFavoriteCompetitionsDelegate = new EndOperationDelegate(this.OnEndAddtoFavoriteCompetitions);
            }
            if ((this.onAddtoFavoriteCompetitionsCompletedDelegate == null)) {
                this.onAddtoFavoriteCompetitionsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddtoFavoriteCompetitionsCompleted);
            }
            base.InvokeAsync(this.onBeginAddtoFavoriteCompetitionsDelegate, new object[] {
                        EventID,
                        userID}, this.onEndAddtoFavoriteCompetitionsDelegate, this.onAddtoFavoriteCompetitionsCompletedDelegate, userState);
        }
        
        public void DeleteFromFavoriteCompetitions(string EventID, int userID) {
            base.Channel.DeleteFromFavoriteCompetitions(EventID, userID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteFromFavoriteCompetitions(string EventID, int userID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteFromFavoriteCompetitions(EventID, userID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDeleteFromFavoriteCompetitions(System.IAsyncResult result) {
            base.Channel.EndDeleteFromFavoriteCompetitions(result);
        }
        
        private System.IAsyncResult OnBeginDeleteFromFavoriteCompetitions(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string EventID = ((string)(inValues[0]));
            int userID = ((int)(inValues[1]));
            return this.BeginDeleteFromFavoriteCompetitions(EventID, userID, callback, asyncState);
        }
        
        private object[] OnEndDeleteFromFavoriteCompetitions(System.IAsyncResult result) {
            this.EndDeleteFromFavoriteCompetitions(result);
            return null;
        }
        
        private void OnDeleteFromFavoriteCompetitionsCompleted(object state) {
            if ((this.DeleteFromFavoriteCompetitionsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteFromFavoriteCompetitionsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteFromFavoriteCompetitionsAsync(string EventID, int userID) {
            this.DeleteFromFavoriteCompetitionsAsync(EventID, userID, null);
        }
        
        public void DeleteFromFavoriteCompetitionsAsync(string EventID, int userID, object userState) {
            if ((this.onBeginDeleteFromFavoriteCompetitionsDelegate == null)) {
                this.onBeginDeleteFromFavoriteCompetitionsDelegate = new BeginOperationDelegate(this.OnBeginDeleteFromFavoriteCompetitions);
            }
            if ((this.onEndDeleteFromFavoriteCompetitionsDelegate == null)) {
                this.onEndDeleteFromFavoriteCompetitionsDelegate = new EndOperationDelegate(this.OnEndDeleteFromFavoriteCompetitions);
            }
            if ((this.onDeleteFromFavoriteCompetitionsCompletedDelegate == null)) {
                this.onDeleteFromFavoriteCompetitionsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteFromFavoriteCompetitionsCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteFromFavoriteCompetitionsDelegate, new object[] {
                        EventID,
                        userID}, this.onEndDeleteFromFavoriteCompetitionsDelegate, this.onDeleteFromFavoriteCompetitionsCompletedDelegate, userState);
        }
        
        public string GetEventTypeIDs(int userID) {
            return base.Channel.GetEventTypeIDs(userID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetEventTypeIDs(int userID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetEventTypeIDs(userID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetEventTypeIDs(System.IAsyncResult result) {
            return base.Channel.EndGetEventTypeIDs(result);
        }
        
        private System.IAsyncResult OnBeginGetEventTypeIDs(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            return this.BeginGetEventTypeIDs(userID, callback, asyncState);
        }
        
        private object[] OnEndGetEventTypeIDs(System.IAsyncResult result) {
            string retVal = this.EndGetEventTypeIDs(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetEventTypeIDsCompleted(object state) {
            if ((this.GetEventTypeIDsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetEventTypeIDsCompleted(this, new GetEventTypeIDsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetEventTypeIDsAsync(int userID) {
            this.GetEventTypeIDsAsync(userID, null);
        }
        
        public void GetEventTypeIDsAsync(int userID, object userState) {
            if ((this.onBeginGetEventTypeIDsDelegate == null)) {
                this.onBeginGetEventTypeIDsDelegate = new BeginOperationDelegate(this.OnBeginGetEventTypeIDs);
            }
            if ((this.onEndGetEventTypeIDsDelegate == null)) {
                this.onEndGetEventTypeIDsDelegate = new EndOperationDelegate(this.OnEndGetEventTypeIDs);
            }
            if ((this.onGetEventTypeIDsCompletedDelegate == null)) {
                this.onGetEventTypeIDsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetEventTypeIDsCompleted);
            }
            base.InvokeAsync(this.onBeginGetEventTypeIDsDelegate, new object[] {
                        userID}, this.onEndGetEventTypeIDsDelegate, this.onGetEventTypeIDsCompletedDelegate, userState);
        }
        
        public string getlistuserids(int createdid) {
            return base.Channel.getlistuserids(createdid);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult Begingetlistuserids(int createdid, System.AsyncCallback callback, object asyncState) {
            return base.Channel.Begingetlistuserids(createdid, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string Endgetlistuserids(System.IAsyncResult result) {
            return base.Channel.Endgetlistuserids(result);
        }
        
        private System.IAsyncResult OnBegingetlistuserids(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int createdid = ((int)(inValues[0]));
            return this.Begingetlistuserids(createdid, callback, asyncState);
        }
        
        private object[] OnEndgetlistuserids(System.IAsyncResult result) {
            string retVal = this.Endgetlistuserids(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetlistuseridsCompleted(object state) {
            if ((this.getlistuseridsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getlistuseridsCompleted(this, new getlistuseridsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getlistuseridsAsync(int createdid) {
            this.getlistuseridsAsync(createdid, null);
        }
        
        public void getlistuseridsAsync(int createdid, object userState) {
            if ((this.onBegingetlistuseridsDelegate == null)) {
                this.onBegingetlistuseridsDelegate = new BeginOperationDelegate(this.OnBegingetlistuserids);
            }
            if ((this.onEndgetlistuseridsDelegate == null)) {
                this.onEndgetlistuseridsDelegate = new EndOperationDelegate(this.OnEndgetlistuserids);
            }
            if ((this.ongetlistuseridsCompletedDelegate == null)) {
                this.ongetlistuseridsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetlistuseridsCompleted);
            }
            base.InvokeAsync(this.onBegingetlistuseridsDelegate, new object[] {
                        createdid}, this.onEndgetlistuseridsDelegate, this.ongetlistuseridsCompletedDelegate, userState);
        }
        
        public string GetCompetitionIDs(string eventTypeID, int userID) {
            return base.Channel.GetCompetitionIDs(eventTypeID, userID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetCompetitionIDs(string eventTypeID, int userID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCompetitionIDs(eventTypeID, userID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetCompetitionIDs(System.IAsyncResult result) {
            return base.Channel.EndGetCompetitionIDs(result);
        }
        
        private System.IAsyncResult OnBeginGetCompetitionIDs(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string eventTypeID = ((string)(inValues[0]));
            int userID = ((int)(inValues[1]));
            return this.BeginGetCompetitionIDs(eventTypeID, userID, callback, asyncState);
        }
        
        private object[] OnEndGetCompetitionIDs(System.IAsyncResult result) {
            string retVal = this.EndGetCompetitionIDs(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCompetitionIDsCompleted(object state) {
            if ((this.GetCompetitionIDsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCompetitionIDsCompleted(this, new GetCompetitionIDsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCompetitionIDsAsync(string eventTypeID, int userID) {
            this.GetCompetitionIDsAsync(eventTypeID, userID, null);
        }
        
        public void GetCompetitionIDsAsync(string eventTypeID, int userID, object userState) {
            if ((this.onBeginGetCompetitionIDsDelegate == null)) {
                this.onBeginGetCompetitionIDsDelegate = new BeginOperationDelegate(this.OnBeginGetCompetitionIDs);
            }
            if ((this.onEndGetCompetitionIDsDelegate == null)) {
                this.onEndGetCompetitionIDsDelegate = new EndOperationDelegate(this.OnEndGetCompetitionIDs);
            }
            if ((this.onGetCompetitionIDsCompletedDelegate == null)) {
                this.onGetCompetitionIDsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCompetitionIDsCompleted);
            }
            base.InvokeAsync(this.onBeginGetCompetitionIDsDelegate, new object[] {
                        eventTypeID,
                        userID}, this.onEndGetCompetitionIDsDelegate, this.onGetCompetitionIDsCompletedDelegate, userState);
        }
        
        public string GetEventsIDs(string CompetitionID, int userID) {
            return base.Channel.GetEventsIDs(CompetitionID, userID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetEventsIDs(string CompetitionID, int userID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetEventsIDs(CompetitionID, userID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetEventsIDs(System.IAsyncResult result) {
            return base.Channel.EndGetEventsIDs(result);
        }
        
        private System.IAsyncResult OnBeginGetEventsIDs(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string CompetitionID = ((string)(inValues[0]));
            int userID = ((int)(inValues[1]));
            return this.BeginGetEventsIDs(CompetitionID, userID, callback, asyncState);
        }
        
        private object[] OnEndGetEventsIDs(System.IAsyncResult result) {
            string retVal = this.EndGetEventsIDs(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetEventsIDsCompleted(object state) {
            if ((this.GetEventsIDsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetEventsIDsCompleted(this, new GetEventsIDsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetEventsIDsAsync(string CompetitionID, int userID) {
            this.GetEventsIDsAsync(CompetitionID, userID, null);
        }
        
        public void GetEventsIDsAsync(string CompetitionID, int userID, object userState) {
            if ((this.onBeginGetEventsIDsDelegate == null)) {
                this.onBeginGetEventsIDsDelegate = new BeginOperationDelegate(this.OnBeginGetEventsIDs);
            }
            if ((this.onEndGetEventsIDsDelegate == null)) {
                this.onEndGetEventsIDsDelegate = new EndOperationDelegate(this.OnEndGetEventsIDs);
            }
            if ((this.onGetEventsIDsCompletedDelegate == null)) {
                this.onGetEventsIDsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetEventsIDsCompleted);
            }
            base.InvokeAsync(this.onBeginGetEventsIDsDelegate, new object[] {
                        CompetitionID,
                        userID}, this.onEndGetEventsIDsDelegate, this.onGetEventsIDsCompletedDelegate, userState);
        }
        
        public string GetMarketCatalogueIDs(string eventID, int userID) {
            return base.Channel.GetMarketCatalogueIDs(eventID, userID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetMarketCatalogueIDs(string eventID, int userID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMarketCatalogueIDs(eventID, userID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetMarketCatalogueIDs(System.IAsyncResult result) {
            return base.Channel.EndGetMarketCatalogueIDs(result);
        }
        
        private System.IAsyncResult OnBeginGetMarketCatalogueIDs(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string eventID = ((string)(inValues[0]));
            int userID = ((int)(inValues[1]));
            return this.BeginGetMarketCatalogueIDs(eventID, userID, callback, asyncState);
        }
        
        private object[] OnEndGetMarketCatalogueIDs(System.IAsyncResult result) {
            string retVal = this.EndGetMarketCatalogueIDs(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMarketCatalogueIDsCompleted(object state) {
            if ((this.GetMarketCatalogueIDsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMarketCatalogueIDsCompleted(this, new GetMarketCatalogueIDsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMarketCatalogueIDsAsync(string eventID, int userID) {
            this.GetMarketCatalogueIDsAsync(eventID, userID, null);
        }
        
        public void GetMarketCatalogueIDsAsync(string eventID, int userID, object userState) {
            if ((this.onBeginGetMarketCatalogueIDsDelegate == null)) {
                this.onBeginGetMarketCatalogueIDsDelegate = new BeginOperationDelegate(this.OnBeginGetMarketCatalogueIDs);
            }
            if ((this.onEndGetMarketCatalogueIDsDelegate == null)) {
                this.onEndGetMarketCatalogueIDsDelegate = new EndOperationDelegate(this.OnEndGetMarketCatalogueIDs);
            }
            if ((this.onGetMarketCatalogueIDsCompletedDelegate == null)) {
                this.onGetMarketCatalogueIDsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMarketCatalogueIDsCompleted);
            }
            base.InvokeAsync(this.onBeginGetMarketCatalogueIDsDelegate, new object[] {
                        eventID,
                        userID}, this.onEndGetMarketCatalogueIDsDelegate, this.onGetMarketCatalogueIDsCompletedDelegate, userState);
        }
        
        public string InsertUserBet(
                    string SelectionID, 
                    int userID, 
                    string UserOdd, 
                    string amount, 
                    string bettype, 
                    string LiveOdd, 
                    bool ismatched, 
                    string status, 
                    string marketbookId, 
                    System.DateTime createddate, 
                    System.DateTime updatedtime, 
                    string Selectionname, 
                    string Marketbookname, 
                    string Liability, 
                    string BetSize, 
                    decimal PendingAmount, 
                    string location, 
                    long ParentID, 
                    decimal MaxOddBack, 
                    decimal MaxOddLay, 
                    bool CheckforMaxOddBack, 
                    bool CheckforMaxOddLay, 
                    string Password) {
            return base.Channel.InsertUserBet(SelectionID, userID, UserOdd, amount, bettype, LiveOdd, ismatched, status, marketbookId, createddate, updatedtime, Selectionname, Marketbookname, Liability, BetSize, PendingAmount, location, ParentID, MaxOddBack, MaxOddLay, CheckforMaxOddBack, CheckforMaxOddLay, Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginInsertUserBet(
                    string SelectionID, 
                    int userID, 
                    string UserOdd, 
                    string amount, 
                    string bettype, 
                    string LiveOdd, 
                    bool ismatched, 
                    string status, 
                    string marketbookId, 
                    System.DateTime createddate, 
                    System.DateTime updatedtime, 
                    string Selectionname, 
                    string Marketbookname, 
                    string Liability, 
                    string BetSize, 
                    decimal PendingAmount, 
                    string location, 
                    long ParentID, 
                    decimal MaxOddBack, 
                    decimal MaxOddLay, 
                    bool CheckforMaxOddBack, 
                    bool CheckforMaxOddLay, 
                    string Password, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return base.Channel.BeginInsertUserBet(SelectionID, userID, UserOdd, amount, bettype, LiveOdd, ismatched, status, marketbookId, createddate, updatedtime, Selectionname, Marketbookname, Liability, BetSize, PendingAmount, location, ParentID, MaxOddBack, MaxOddLay, CheckforMaxOddBack, CheckforMaxOddLay, Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndInsertUserBet(System.IAsyncResult result) {
            return base.Channel.EndInsertUserBet(result);
        }
        
        private System.IAsyncResult OnBeginInsertUserBet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SelectionID = ((string)(inValues[0]));
            int userID = ((int)(inValues[1]));
            string UserOdd = ((string)(inValues[2]));
            string amount = ((string)(inValues[3]));
            string bettype = ((string)(inValues[4]));
            string LiveOdd = ((string)(inValues[5]));
            bool ismatched = ((bool)(inValues[6]));
            string status = ((string)(inValues[7]));
            string marketbookId = ((string)(inValues[8]));
            System.DateTime createddate = ((System.DateTime)(inValues[9]));
            System.DateTime updatedtime = ((System.DateTime)(inValues[10]));
            string Selectionname = ((string)(inValues[11]));
            string Marketbookname = ((string)(inValues[12]));
            string Liability = ((string)(inValues[13]));
            string BetSize = ((string)(inValues[14]));
            decimal PendingAmount = ((decimal)(inValues[15]));
            string location = ((string)(inValues[16]));
            long ParentID = ((long)(inValues[17]));
            decimal MaxOddBack = ((decimal)(inValues[18]));
            decimal MaxOddLay = ((decimal)(inValues[19]));
            bool CheckforMaxOddBack = ((bool)(inValues[20]));
            bool CheckforMaxOddLay = ((bool)(inValues[21]));
            string Password = ((string)(inValues[22]));
            return this.BeginInsertUserBet(SelectionID, userID, UserOdd, amount, bettype, LiveOdd, ismatched, status, marketbookId, createddate, updatedtime, Selectionname, Marketbookname, Liability, BetSize, PendingAmount, location, ParentID, MaxOddBack, MaxOddLay, CheckforMaxOddBack, CheckforMaxOddLay, Password, callback, asyncState);
        }
        
        private object[] OnEndInsertUserBet(System.IAsyncResult result) {
            string retVal = this.EndInsertUserBet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnInsertUserBetCompleted(object state) {
            if ((this.InsertUserBetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InsertUserBetCompleted(this, new InsertUserBetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InsertUserBetAsync(
                    string SelectionID, 
                    int userID, 
                    string UserOdd, 
                    string amount, 
                    string bettype, 
                    string LiveOdd, 
                    bool ismatched, 
                    string status, 
                    string marketbookId, 
                    System.DateTime createddate, 
                    System.DateTime updatedtime, 
                    string Selectionname, 
                    string Marketbookname, 
                    string Liability, 
                    string BetSize, 
                    decimal PendingAmount, 
                    string location, 
                    long ParentID, 
                    decimal MaxOddBack, 
                    decimal MaxOddLay, 
                    bool CheckforMaxOddBack, 
                    bool CheckforMaxOddLay, 
                    string Password) {
            this.InsertUserBetAsync(SelectionID, userID, UserOdd, amount, bettype, LiveOdd, ismatched, status, marketbookId, createddate, updatedtime, Selectionname, Marketbookname, Liability, BetSize, PendingAmount, location, ParentID, MaxOddBack, MaxOddLay, CheckforMaxOddBack, CheckforMaxOddLay, Password, null);
        }
        
        public void InsertUserBetAsync(
                    string SelectionID, 
                    int userID, 
                    string UserOdd, 
                    string amount, 
                    string bettype, 
                    string LiveOdd, 
                    bool ismatched, 
                    string status, 
                    string marketbookId, 
                    System.DateTime createddate, 
                    System.DateTime updatedtime, 
                    string Selectionname, 
                    string Marketbookname, 
                    string Liability, 
                    string BetSize, 
                    decimal PendingAmount, 
                    string location, 
                    long ParentID, 
                    decimal MaxOddBack, 
                    decimal MaxOddLay, 
                    bool CheckforMaxOddBack, 
                    bool CheckforMaxOddLay, 
                    string Password, 
                    object userState) {
            if ((this.onBeginInsertUserBetDelegate == null)) {
                this.onBeginInsertUserBetDelegate = new BeginOperationDelegate(this.OnBeginInsertUserBet);
            }
            if ((this.onEndInsertUserBetDelegate == null)) {
                this.onEndInsertUserBetDelegate = new EndOperationDelegate(this.OnEndInsertUserBet);
            }
            if ((this.onInsertUserBetCompletedDelegate == null)) {
                this.onInsertUserBetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInsertUserBetCompleted);
            }
            base.InvokeAsync(this.onBeginInsertUserBetDelegate, new object[] {
                        SelectionID,
                        userID,
                        UserOdd,
                        amount,
                        bettype,
                        LiveOdd,
                        ismatched,
                        status,
                        marketbookId,
                        createddate,
                        updatedtime,
                        Selectionname,
                        Marketbookname,
                        Liability,
                        BetSize,
                        PendingAmount,
                        location,
                        ParentID,
                        MaxOddBack,
                        MaxOddLay,
                        CheckforMaxOddBack,
                        CheckforMaxOddLay,
                        Password}, this.onEndInsertUserBetDelegate, this.onInsertUserBetCompletedDelegate, userState);
        }
        
        public string InsertUserBetAdmin(
                    string SelectionID, 
                    int userID, 
                    string UserOdd, 
                    string amount, 
                    string bettype, 
                    string LiveOdd, 
                    bool ismatched, 
                    string status, 
                    string marketbookId, 
                    System.DateTime createddate, 
                    System.DateTime updatedtime, 
                    string Selectionname, 
                    string Marketbookname, 
                    string Liability, 
                    string BetSize, 
                    decimal PendingAmount, 
                    string location, 
                    long ParentID, 
                    string Password) {
            return base.Channel.InsertUserBetAdmin(SelectionID, userID, UserOdd, amount, bettype, LiveOdd, ismatched, status, marketbookId, createddate, updatedtime, Selectionname, Marketbookname, Liability, BetSize, PendingAmount, location, ParentID, Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginInsertUserBetAdmin(
                    string SelectionID, 
                    int userID, 
                    string UserOdd, 
                    string amount, 
                    string bettype, 
                    string LiveOdd, 
                    bool ismatched, 
                    string status, 
                    string marketbookId, 
                    System.DateTime createddate, 
                    System.DateTime updatedtime, 
                    string Selectionname, 
                    string Marketbookname, 
                    string Liability, 
                    string BetSize, 
                    decimal PendingAmount, 
                    string location, 
                    long ParentID, 
                    string Password, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return base.Channel.BeginInsertUserBetAdmin(SelectionID, userID, UserOdd, amount, bettype, LiveOdd, ismatched, status, marketbookId, createddate, updatedtime, Selectionname, Marketbookname, Liability, BetSize, PendingAmount, location, ParentID, Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndInsertUserBetAdmin(System.IAsyncResult result) {
            return base.Channel.EndInsertUserBetAdmin(result);
        }
        
        private System.IAsyncResult OnBeginInsertUserBetAdmin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SelectionID = ((string)(inValues[0]));
            int userID = ((int)(inValues[1]));
            string UserOdd = ((string)(inValues[2]));
            string amount = ((string)(inValues[3]));
            string bettype = ((string)(inValues[4]));
            string LiveOdd = ((string)(inValues[5]));
            bool ismatched = ((bool)(inValues[6]));
            string status = ((string)(inValues[7]));
            string marketbookId = ((string)(inValues[8]));
            System.DateTime createddate = ((System.DateTime)(inValues[9]));
            System.DateTime updatedtime = ((System.DateTime)(inValues[10]));
            string Selectionname = ((string)(inValues[11]));
            string Marketbookname = ((string)(inValues[12]));
            string Liability = ((string)(inValues[13]));
            string BetSize = ((string)(inValues[14]));
            decimal PendingAmount = ((decimal)(inValues[15]));
            string location = ((string)(inValues[16]));
            long ParentID = ((long)(inValues[17]));
            string Password = ((string)(inValues[18]));
            return this.BeginInsertUserBetAdmin(SelectionID, userID, UserOdd, amount, bettype, LiveOdd, ismatched, status, marketbookId, createddate, updatedtime, Selectionname, Marketbookname, Liability, BetSize, PendingAmount, location, ParentID, Password, callback, asyncState);
        }
        
        private object[] OnEndInsertUserBetAdmin(System.IAsyncResult result) {
            string retVal = this.EndInsertUserBetAdmin(result);
            return new object[] {
                    retVal};
        }
        
        private void OnInsertUserBetAdminCompleted(object state) {
            if ((this.InsertUserBetAdminCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InsertUserBetAdminCompleted(this, new InsertUserBetAdminCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InsertUserBetAdminAsync(
                    string SelectionID, 
                    int userID, 
                    string UserOdd, 
                    string amount, 
                    string bettype, 
                    string LiveOdd, 
                    bool ismatched, 
                    string status, 
                    string marketbookId, 
                    System.DateTime createddate, 
                    System.DateTime updatedtime, 
                    string Selectionname, 
                    string Marketbookname, 
                    string Liability, 
                    string BetSize, 
                    decimal PendingAmount, 
                    string location, 
                    long ParentID, 
                    string Password) {
            this.InsertUserBetAdminAsync(SelectionID, userID, UserOdd, amount, bettype, LiveOdd, ismatched, status, marketbookId, createddate, updatedtime, Selectionname, Marketbookname, Liability, BetSize, PendingAmount, location, ParentID, Password, null);
        }
        
        public void InsertUserBetAdminAsync(
                    string SelectionID, 
                    int userID, 
                    string UserOdd, 
                    string amount, 
                    string bettype, 
                    string LiveOdd, 
                    bool ismatched, 
                    string status, 
                    string marketbookId, 
                    System.DateTime createddate, 
                    System.DateTime updatedtime, 
                    string Selectionname, 
                    string Marketbookname, 
                    string Liability, 
                    string BetSize, 
                    decimal PendingAmount, 
                    string location, 
                    long ParentID, 
                    string Password, 
                    object userState) {
            if ((this.onBeginInsertUserBetAdminDelegate == null)) {
                this.onBeginInsertUserBetAdminDelegate = new BeginOperationDelegate(this.OnBeginInsertUserBetAdmin);
            }
            if ((this.onEndInsertUserBetAdminDelegate == null)) {
                this.onEndInsertUserBetAdminDelegate = new EndOperationDelegate(this.OnEndInsertUserBetAdmin);
            }
            if ((this.onInsertUserBetAdminCompletedDelegate == null)) {
                this.onInsertUserBetAdminCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInsertUserBetAdminCompleted);
            }
            base.InvokeAsync(this.onBeginInsertUserBetAdminDelegate, new object[] {
                        SelectionID,
                        userID,
                        UserOdd,
                        amount,
                        bettype,
                        LiveOdd,
                        ismatched,
                        status,
                        marketbookId,
                        createddate,
                        updatedtime,
                        Selectionname,
                        Marketbookname,
                        Liability,
                        BetSize,
                        PendingAmount,
                        location,
                        ParentID,
                        Password}, this.onEndInsertUserBetAdminDelegate, this.onInsertUserBetAdminCompletedDelegate, userState);
        }
        
        public bool UpdateUserBet(long ID, int userID, string UserOdd, string amount, string bettype, string LiveOdd, bool ismatched, string status, string marketbookId, System.DateTime createddate, System.DateTime updatedtime, string Liabality, string BetSize, decimal PendingAmount, string Password) {
            return base.Channel.UpdateUserBet(ID, userID, UserOdd, amount, bettype, LiveOdd, ismatched, status, marketbookId, createddate, updatedtime, Liabality, BetSize, PendingAmount, Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateUserBet(
                    long ID, 
                    int userID, 
                    string UserOdd, 
                    string amount, 
                    string bettype, 
                    string LiveOdd, 
                    bool ismatched, 
                    string status, 
                    string marketbookId, 
                    System.DateTime createddate, 
                    System.DateTime updatedtime, 
                    string Liabality, 
                    string BetSize, 
                    decimal PendingAmount, 
                    string Password, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return base.Channel.BeginUpdateUserBet(ID, userID, UserOdd, amount, bettype, LiveOdd, ismatched, status, marketbookId, createddate, updatedtime, Liabality, BetSize, PendingAmount, Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndUpdateUserBet(System.IAsyncResult result) {
            return base.Channel.EndUpdateUserBet(result);
        }
        
        private System.IAsyncResult OnBeginUpdateUserBet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long ID = ((long)(inValues[0]));
            int userID = ((int)(inValues[1]));
            string UserOdd = ((string)(inValues[2]));
            string amount = ((string)(inValues[3]));
            string bettype = ((string)(inValues[4]));
            string LiveOdd = ((string)(inValues[5]));
            bool ismatched = ((bool)(inValues[6]));
            string status = ((string)(inValues[7]));
            string marketbookId = ((string)(inValues[8]));
            System.DateTime createddate = ((System.DateTime)(inValues[9]));
            System.DateTime updatedtime = ((System.DateTime)(inValues[10]));
            string Liabality = ((string)(inValues[11]));
            string BetSize = ((string)(inValues[12]));
            decimal PendingAmount = ((decimal)(inValues[13]));
            string Password = ((string)(inValues[14]));
            return this.BeginUpdateUserBet(ID, userID, UserOdd, amount, bettype, LiveOdd, ismatched, status, marketbookId, createddate, updatedtime, Liabality, BetSize, PendingAmount, Password, callback, asyncState);
        }
        
        private object[] OnEndUpdateUserBet(System.IAsyncResult result) {
            bool retVal = this.EndUpdateUserBet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateUserBetCompleted(object state) {
            if ((this.UpdateUserBetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateUserBetCompleted(this, new UpdateUserBetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateUserBetAsync(long ID, int userID, string UserOdd, string amount, string bettype, string LiveOdd, bool ismatched, string status, string marketbookId, System.DateTime createddate, System.DateTime updatedtime, string Liabality, string BetSize, decimal PendingAmount, string Password) {
            this.UpdateUserBetAsync(ID, userID, UserOdd, amount, bettype, LiveOdd, ismatched, status, marketbookId, createddate, updatedtime, Liabality, BetSize, PendingAmount, Password, null);
        }
        
        public void UpdateUserBetAsync(
                    long ID, 
                    int userID, 
                    string UserOdd, 
                    string amount, 
                    string bettype, 
                    string LiveOdd, 
                    bool ismatched, 
                    string status, 
                    string marketbookId, 
                    System.DateTime createddate, 
                    System.DateTime updatedtime, 
                    string Liabality, 
                    string BetSize, 
                    decimal PendingAmount, 
                    string Password, 
                    object userState) {
            if ((this.onBeginUpdateUserBetDelegate == null)) {
                this.onBeginUpdateUserBetDelegate = new BeginOperationDelegate(this.OnBeginUpdateUserBet);
            }
            if ((this.onEndUpdateUserBetDelegate == null)) {
                this.onEndUpdateUserBetDelegate = new EndOperationDelegate(this.OnEndUpdateUserBet);
            }
            if ((this.onUpdateUserBetCompletedDelegate == null)) {
                this.onUpdateUserBetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateUserBetCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateUserBetDelegate, new object[] {
                        ID,
                        userID,
                        UserOdd,
                        amount,
                        bettype,
                        LiveOdd,
                        ismatched,
                        status,
                        marketbookId,
                        createddate,
                        updatedtime,
                        Liabality,
                        BetSize,
                        PendingAmount,
                        Password}, this.onEndUpdateUserBetDelegate, this.onUpdateUserBetCompletedDelegate, userState);
        }
        
        public string GetUserbetsbyUserIDandMarketID(int UserID, string MarketID, string Password) {
            return base.Channel.GetUserbetsbyUserIDandMarketID(UserID, MarketID, Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetUserbetsbyUserIDandMarketID(int UserID, string MarketID, string Password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUserbetsbyUserIDandMarketID(UserID, MarketID, Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetUserbetsbyUserIDandMarketID(System.IAsyncResult result) {
            return base.Channel.EndGetUserbetsbyUserIDandMarketID(result);
        }
        
        private System.IAsyncResult OnBeginGetUserbetsbyUserIDandMarketID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int UserID = ((int)(inValues[0]));
            string MarketID = ((string)(inValues[1]));
            string Password = ((string)(inValues[2]));
            return this.BeginGetUserbetsbyUserIDandMarketID(UserID, MarketID, Password, callback, asyncState);
        }
        
        private object[] OnEndGetUserbetsbyUserIDandMarketID(System.IAsyncResult result) {
            string retVal = this.EndGetUserbetsbyUserIDandMarketID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserbetsbyUserIDandMarketIDCompleted(object state) {
            if ((this.GetUserbetsbyUserIDandMarketIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserbetsbyUserIDandMarketIDCompleted(this, new GetUserbetsbyUserIDandMarketIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserbetsbyUserIDandMarketIDAsync(int UserID, string MarketID, string Password) {
            this.GetUserbetsbyUserIDandMarketIDAsync(UserID, MarketID, Password, null);
        }
        
        public void GetUserbetsbyUserIDandMarketIDAsync(int UserID, string MarketID, string Password, object userState) {
            if ((this.onBeginGetUserbetsbyUserIDandMarketIDDelegate == null)) {
                this.onBeginGetUserbetsbyUserIDandMarketIDDelegate = new BeginOperationDelegate(this.OnBeginGetUserbetsbyUserIDandMarketID);
            }
            if ((this.onEndGetUserbetsbyUserIDandMarketIDDelegate == null)) {
                this.onEndGetUserbetsbyUserIDandMarketIDDelegate = new EndOperationDelegate(this.OnEndGetUserbetsbyUserIDandMarketID);
            }
            if ((this.onGetUserbetsbyUserIDandMarketIDCompletedDelegate == null)) {
                this.onGetUserbetsbyUserIDandMarketIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserbetsbyUserIDandMarketIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserbetsbyUserIDandMarketIDDelegate, new object[] {
                        UserID,
                        MarketID,
                        Password}, this.onEndGetUserbetsbyUserIDandMarketIDDelegate, this.onGetUserbetsbyUserIDandMarketIDCompletedDelegate, userState);
        }
        
        public globaltraders.UserServiceReference.SP_Users_GetMaxOddBackandLay_Result GetMaxOddBackandLay(int UserID) {
            return base.Channel.GetMaxOddBackandLay(UserID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetMaxOddBackandLay(int UserID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMaxOddBackandLay(UserID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public globaltraders.UserServiceReference.SP_Users_GetMaxOddBackandLay_Result EndGetMaxOddBackandLay(System.IAsyncResult result) {
            return base.Channel.EndGetMaxOddBackandLay(result);
        }
        
        private System.IAsyncResult OnBeginGetMaxOddBackandLay(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int UserID = ((int)(inValues[0]));
            return this.BeginGetMaxOddBackandLay(UserID, callback, asyncState);
        }
        
        private object[] OnEndGetMaxOddBackandLay(System.IAsyncResult result) {
            globaltraders.UserServiceReference.SP_Users_GetMaxOddBackandLay_Result retVal = this.EndGetMaxOddBackandLay(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMaxOddBackandLayCompleted(object state) {
            if ((this.GetMaxOddBackandLayCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMaxOddBackandLayCompleted(this, new GetMaxOddBackandLayCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMaxOddBackandLayAsync(int UserID) {
            this.GetMaxOddBackandLayAsync(UserID, null);
        }
        
        public void GetMaxOddBackandLayAsync(int UserID, object userState) {
            if ((this.onBeginGetMaxOddBackandLayDelegate == null)) {
                this.onBeginGetMaxOddBackandLayDelegate = new BeginOperationDelegate(this.OnBeginGetMaxOddBackandLay);
            }
            if ((this.onEndGetMaxOddBackandLayDelegate == null)) {
                this.onEndGetMaxOddBackandLayDelegate = new EndOperationDelegate(this.OnEndGetMaxOddBackandLay);
            }
            if ((this.onGetMaxOddBackandLayCompletedDelegate == null)) {
                this.onGetMaxOddBackandLayCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMaxOddBackandLayCompleted);
            }
            base.InvokeAsync(this.onBeginGetMaxOddBackandLayDelegate, new object[] {
                        UserID}, this.onEndGetMaxOddBackandLayDelegate, this.onGetMaxOddBackandLayCompletedDelegate, userState);
        }
        
        public string GetMaxOddBackandLayStr(int UserID) {
            return base.Channel.GetMaxOddBackandLayStr(UserID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetMaxOddBackandLayStr(int UserID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMaxOddBackandLayStr(UserID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetMaxOddBackandLayStr(System.IAsyncResult result) {
            return base.Channel.EndGetMaxOddBackandLayStr(result);
        }
        
        private System.IAsyncResult OnBeginGetMaxOddBackandLayStr(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int UserID = ((int)(inValues[0]));
            return this.BeginGetMaxOddBackandLayStr(UserID, callback, asyncState);
        }
        
        private object[] OnEndGetMaxOddBackandLayStr(System.IAsyncResult result) {
            string retVal = this.EndGetMaxOddBackandLayStr(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMaxOddBackandLayStrCompleted(object state) {
            if ((this.GetMaxOddBackandLayStrCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMaxOddBackandLayStrCompleted(this, new GetMaxOddBackandLayStrCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMaxOddBackandLayStrAsync(int UserID) {
            this.GetMaxOddBackandLayStrAsync(UserID, null);
        }
        
        public void GetMaxOddBackandLayStrAsync(int UserID, object userState) {
            if ((this.onBeginGetMaxOddBackandLayStrDelegate == null)) {
                this.onBeginGetMaxOddBackandLayStrDelegate = new BeginOperationDelegate(this.OnBeginGetMaxOddBackandLayStr);
            }
            if ((this.onEndGetMaxOddBackandLayStrDelegate == null)) {
                this.onEndGetMaxOddBackandLayStrDelegate = new EndOperationDelegate(this.OnEndGetMaxOddBackandLayStr);
            }
            if ((this.onGetMaxOddBackandLayStrCompletedDelegate == null)) {
                this.onGetMaxOddBackandLayStrCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMaxOddBackandLayStrCompleted);
            }
            base.InvokeAsync(this.onBeginGetMaxOddBackandLayStrDelegate, new object[] {
                        UserID}, this.onEndGetMaxOddBackandLayStrDelegate, this.onGetMaxOddBackandLayStrCompletedDelegate, userState);
        }
        
        public string GetUserbetsbyUserID(int UserID, string Password) {
            return base.Channel.GetUserbetsbyUserID(UserID, Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetUserbetsbyUserID(int UserID, string Password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUserbetsbyUserID(UserID, Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetUserbetsbyUserID(System.IAsyncResult result) {
            return base.Channel.EndGetUserbetsbyUserID(result);
        }
        
        private System.IAsyncResult OnBeginGetUserbetsbyUserID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int UserID = ((int)(inValues[0]));
            string Password = ((string)(inValues[1]));
            return this.BeginGetUserbetsbyUserID(UserID, Password, callback, asyncState);
        }
        
        private object[] OnEndGetUserbetsbyUserID(System.IAsyncResult result) {
            string retVal = this.EndGetUserbetsbyUserID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserbetsbyUserIDCompleted(object state) {
            if ((this.GetUserbetsbyUserIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserbetsbyUserIDCompleted(this, new GetUserbetsbyUserIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserbetsbyUserIDAsync(int UserID, string Password) {
            this.GetUserbetsbyUserIDAsync(UserID, Password, null);
        }
        
        public void GetUserbetsbyUserIDAsync(int UserID, string Password, object userState) {
            if ((this.onBeginGetUserbetsbyUserIDDelegate == null)) {
                this.onBeginGetUserbetsbyUserIDDelegate = new BeginOperationDelegate(this.OnBeginGetUserbetsbyUserID);
            }
            if ((this.onEndGetUserbetsbyUserIDDelegate == null)) {
                this.onEndGetUserbetsbyUserIDDelegate = new EndOperationDelegate(this.OnEndGetUserbetsbyUserID);
            }
            if ((this.onGetUserbetsbyUserIDCompletedDelegate == null)) {
                this.onGetUserbetsbyUserIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserbetsbyUserIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserbetsbyUserIDDelegate, new object[] {
                        UserID,
                        Password}, this.onEndGetUserbetsbyUserIDDelegate, this.onGetUserbetsbyUserIDCompletedDelegate, userState);
        }
        
        public void UpdateUserBetMatched(long[] ID, string Password) {
            base.Channel.UpdateUserBetMatched(ID, Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateUserBetMatched(long[] ID, string Password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateUserBetMatched(ID, Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateUserBetMatched(System.IAsyncResult result) {
            base.Channel.EndUpdateUserBetMatched(result);
        }
        
        private System.IAsyncResult OnBeginUpdateUserBetMatched(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long[] ID = ((long[])(inValues[0]));
            string Password = ((string)(inValues[1]));
            return this.BeginUpdateUserBetMatched(ID, Password, callback, asyncState);
        }
        
        private object[] OnEndUpdateUserBetMatched(System.IAsyncResult result) {
            this.EndUpdateUserBetMatched(result);
            return null;
        }
        
        private void OnUpdateUserBetMatchedCompleted(object state) {
            if ((this.UpdateUserBetMatchedCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateUserBetMatchedCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateUserBetMatchedAsync(long[] ID, string Password) {
            this.UpdateUserBetMatchedAsync(ID, Password, null);
        }
        
        public void UpdateUserBetMatchedAsync(long[] ID, string Password, object userState) {
            if ((this.onBeginUpdateUserBetMatchedDelegate == null)) {
                this.onBeginUpdateUserBetMatchedDelegate = new BeginOperationDelegate(this.OnBeginUpdateUserBetMatched);
            }
            if ((this.onEndUpdateUserBetMatchedDelegate == null)) {
                this.onEndUpdateUserBetMatchedDelegate = new EndOperationDelegate(this.OnEndUpdateUserBetMatched);
            }
            if ((this.onUpdateUserBetMatchedCompletedDelegate == null)) {
                this.onUpdateUserBetMatchedCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateUserBetMatchedCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateUserBetMatchedDelegate, new object[] {
                        ID,
                        Password}, this.onEndUpdateUserBetMatchedDelegate, this.onUpdateUserBetMatchedCompletedDelegate, userState);
        }
        
        public string GetCurrentLiabality(int userID) {
            return base.Channel.GetCurrentLiabality(userID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetCurrentLiabality(int userID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCurrentLiabality(userID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetCurrentLiabality(System.IAsyncResult result) {
            return base.Channel.EndGetCurrentLiabality(result);
        }
        
        private System.IAsyncResult OnBeginGetCurrentLiabality(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            return this.BeginGetCurrentLiabality(userID, callback, asyncState);
        }
        
        private object[] OnEndGetCurrentLiabality(System.IAsyncResult result) {
            string retVal = this.EndGetCurrentLiabality(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCurrentLiabalityCompleted(object state) {
            if ((this.GetCurrentLiabalityCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCurrentLiabalityCompleted(this, new GetCurrentLiabalityCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCurrentLiabalityAsync(int userID) {
            this.GetCurrentLiabalityAsync(userID, null);
        }
        
        public void GetCurrentLiabalityAsync(int userID, object userState) {
            if ((this.onBeginGetCurrentLiabalityDelegate == null)) {
                this.onBeginGetCurrentLiabalityDelegate = new BeginOperationDelegate(this.OnBeginGetCurrentLiabality);
            }
            if ((this.onEndGetCurrentLiabalityDelegate == null)) {
                this.onEndGetCurrentLiabalityDelegate = new EndOperationDelegate(this.OnEndGetCurrentLiabality);
            }
            if ((this.onGetCurrentLiabalityCompletedDelegate == null)) {
                this.onGetCurrentLiabalityCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCurrentLiabalityCompleted);
            }
            base.InvokeAsync(this.onBeginGetCurrentLiabalityDelegate, new object[] {
                        userID}, this.onEndGetCurrentLiabalityDelegate, this.onGetCurrentLiabalityCompletedDelegate, userState);
        }
        
        public string GetAgentRate(int userID) {
            return base.Channel.GetAgentRate(userID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAgentRate(int userID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAgentRate(userID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetAgentRate(System.IAsyncResult result) {
            return base.Channel.EndGetAgentRate(result);
        }
        
        private System.IAsyncResult OnBeginGetAgentRate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            return this.BeginGetAgentRate(userID, callback, asyncState);
        }
        
        private object[] OnEndGetAgentRate(System.IAsyncResult result) {
            string retVal = this.EndGetAgentRate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAgentRateCompleted(object state) {
            if ((this.GetAgentRateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAgentRateCompleted(this, new GetAgentRateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAgentRateAsync(int userID) {
            this.GetAgentRateAsync(userID, null);
        }
        
        public void GetAgentRateAsync(int userID, object userState) {
            if ((this.onBeginGetAgentRateDelegate == null)) {
                this.onBeginGetAgentRateDelegate = new BeginOperationDelegate(this.OnBeginGetAgentRate);
            }
            if ((this.onEndGetAgentRateDelegate == null)) {
                this.onEndGetAgentRateDelegate = new EndOperationDelegate(this.OnEndGetAgentRate);
            }
            if ((this.onGetAgentRateCompletedDelegate == null)) {
                this.onGetAgentRateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAgentRateCompleted);
            }
            base.InvokeAsync(this.onBeginGetAgentRateDelegate, new object[] {
                        userID}, this.onEndGetAgentRateDelegate, this.onGetAgentRateCompletedDelegate, userState);
        }
        
        public string GetSuperName(int userID) {
            return base.Channel.GetSuperName(userID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetSuperName(int userID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSuperName(userID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetSuperName(System.IAsyncResult result) {
            return base.Channel.EndGetSuperName(result);
        }
        
        private System.IAsyncResult OnBeginGetSuperName(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            return this.BeginGetSuperName(userID, callback, asyncState);
        }
        
        private object[] OnEndGetSuperName(System.IAsyncResult result) {
            string retVal = this.EndGetSuperName(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSuperNameCompleted(object state) {
            if ((this.GetSuperNameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSuperNameCompleted(this, new GetSuperNameCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSuperNameAsync(int userID) {
            this.GetSuperNameAsync(userID, null);
        }
        
        public void GetSuperNameAsync(int userID, object userState) {
            if ((this.onBeginGetSuperNameDelegate == null)) {
                this.onBeginGetSuperNameDelegate = new BeginOperationDelegate(this.OnBeginGetSuperName);
            }
            if ((this.onEndGetSuperNameDelegate == null)) {
                this.onEndGetSuperNameDelegate = new EndOperationDelegate(this.OnEndGetSuperName);
            }
            if ((this.onGetSuperNameCompletedDelegate == null)) {
                this.onGetSuperNameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSuperNameCompleted);
            }
            base.InvokeAsync(this.onBeginGetSuperNameDelegate, new object[] {
                        userID}, this.onEndGetSuperNameDelegate, this.onGetSuperNameCompletedDelegate, userState);
        }
        
        public void CheckforMatchCompleted() {
            base.Channel.CheckforMatchCompleted();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCheckforMatchCompleted(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCheckforMatchCompleted(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndCheckforMatchCompleted(System.IAsyncResult result) {
            base.Channel.EndCheckforMatchCompleted(result);
        }
        
        private System.IAsyncResult OnBeginCheckforMatchCompleted(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginCheckforMatchCompleted(callback, asyncState);
        }
        
        private object[] OnEndCheckforMatchCompleted(System.IAsyncResult result) {
            this.EndCheckforMatchCompleted(result);
            return null;
        }
        
        private void OnCheckforMatchCompletedCompleted(object state) {
            if ((this.CheckforMatchCompletedCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CheckforMatchCompletedCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CheckforMatchCompletedAsync() {
            this.CheckforMatchCompletedAsync(null);
        }
        
        public void CheckforMatchCompletedAsync(object userState) {
            if ((this.onBeginCheckforMatchCompletedDelegate == null)) {
                this.onBeginCheckforMatchCompletedDelegate = new BeginOperationDelegate(this.OnBeginCheckforMatchCompleted);
            }
            if ((this.onEndCheckforMatchCompletedDelegate == null)) {
                this.onEndCheckforMatchCompletedDelegate = new EndOperationDelegate(this.OnEndCheckforMatchCompleted);
            }
            if ((this.onCheckforMatchCompletedCompletedDelegate == null)) {
                this.onCheckforMatchCompletedCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCheckforMatchCompletedCompleted);
            }
            base.InvokeAsync(this.onBeginCheckforMatchCompletedDelegate, null, this.onEndCheckforMatchCompletedDelegate, this.onCheckforMatchCompletedCompletedDelegate, userState);
        }
        
        public void CloseAllClosedMarkets() {
            base.Channel.CloseAllClosedMarkets();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCloseAllClosedMarkets(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCloseAllClosedMarkets(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndCloseAllClosedMarkets(System.IAsyncResult result) {
            base.Channel.EndCloseAllClosedMarkets(result);
        }
        
        private System.IAsyncResult OnBeginCloseAllClosedMarkets(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginCloseAllClosedMarkets(callback, asyncState);
        }
        
        private object[] OnEndCloseAllClosedMarkets(System.IAsyncResult result) {
            this.EndCloseAllClosedMarkets(result);
            return null;
        }
        
        private void OnCloseAllClosedMarketsCompleted(object state) {
            if ((this.CloseAllClosedMarketsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseAllClosedMarketsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAllClosedMarketsAsync() {
            this.CloseAllClosedMarketsAsync(null);
        }
        
        public void CloseAllClosedMarketsAsync(object userState) {
            if ((this.onBeginCloseAllClosedMarketsDelegate == null)) {
                this.onBeginCloseAllClosedMarketsDelegate = new BeginOperationDelegate(this.OnBeginCloseAllClosedMarkets);
            }
            if ((this.onEndCloseAllClosedMarketsDelegate == null)) {
                this.onEndCloseAllClosedMarketsDelegate = new EndOperationDelegate(this.OnEndCloseAllClosedMarkets);
            }
            if ((this.onCloseAllClosedMarketsCompletedDelegate == null)) {
                this.onCloseAllClosedMarketsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseAllClosedMarketsCompleted);
            }
            base.InvokeAsync(this.onBeginCloseAllClosedMarketsDelegate, null, this.onEndCloseAllClosedMarketsDelegate, this.onCloseAllClosedMarketsCompletedDelegate, userState);
        }
        
        public string SetAgentRateofUser(int UserID, string AgentRate, string Password) {
            return base.Channel.SetAgentRateofUser(UserID, AgentRate, Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSetAgentRateofUser(int UserID, string AgentRate, string Password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetAgentRateofUser(UserID, AgentRate, Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndSetAgentRateofUser(System.IAsyncResult result) {
            return base.Channel.EndSetAgentRateofUser(result);
        }
        
        private System.IAsyncResult OnBeginSetAgentRateofUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int UserID = ((int)(inValues[0]));
            string AgentRate = ((string)(inValues[1]));
            string Password = ((string)(inValues[2]));
            return this.BeginSetAgentRateofUser(UserID, AgentRate, Password, callback, asyncState);
        }
        
        private object[] OnEndSetAgentRateofUser(System.IAsyncResult result) {
            string retVal = this.EndSetAgentRateofUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSetAgentRateofUserCompleted(object state) {
            if ((this.SetAgentRateofUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetAgentRateofUserCompleted(this, new SetAgentRateofUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetAgentRateofUserAsync(int UserID, string AgentRate, string Password) {
            this.SetAgentRateofUserAsync(UserID, AgentRate, Password, null);
        }
        
        public void SetAgentRateofUserAsync(int UserID, string AgentRate, string Password, object userState) {
            if ((this.onBeginSetAgentRateofUserDelegate == null)) {
                this.onBeginSetAgentRateofUserDelegate = new BeginOperationDelegate(this.OnBeginSetAgentRateofUser);
            }
            if ((this.onEndSetAgentRateofUserDelegate == null)) {
                this.onEndSetAgentRateofUserDelegate = new EndOperationDelegate(this.OnEndSetAgentRateofUser);
            }
            if ((this.onSetAgentRateofUserCompletedDelegate == null)) {
                this.onSetAgentRateofUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetAgentRateofUserCompleted);
            }
            base.InvokeAsync(this.onBeginSetAgentRateofUserDelegate, new object[] {
                        UserID,
                        AgentRate,
                        Password}, this.onEndSetAgentRateofUserDelegate, this.onSetAgentRateofUserCompletedDelegate, userState);
        }
        
        public void UpdateUserBetUnMatchedStatusTocomplete(long[] ID, string Password) {
            base.Channel.UpdateUserBetUnMatchedStatusTocomplete(ID, Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateUserBetUnMatchedStatusTocomplete(long[] ID, string Password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateUserBetUnMatchedStatusTocomplete(ID, Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateUserBetUnMatchedStatusTocomplete(System.IAsyncResult result) {
            base.Channel.EndUpdateUserBetUnMatchedStatusTocomplete(result);
        }
        
        private System.IAsyncResult OnBeginUpdateUserBetUnMatchedStatusTocomplete(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long[] ID = ((long[])(inValues[0]));
            string Password = ((string)(inValues[1]));
            return this.BeginUpdateUserBetUnMatchedStatusTocomplete(ID, Password, callback, asyncState);
        }
        
        private object[] OnEndUpdateUserBetUnMatchedStatusTocomplete(System.IAsyncResult result) {
            this.EndUpdateUserBetUnMatchedStatusTocomplete(result);
            return null;
        }
        
        private void OnUpdateUserBetUnMatchedStatusTocompleteCompleted(object state) {
            if ((this.UpdateUserBetUnMatchedStatusTocompleteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateUserBetUnMatchedStatusTocompleteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateUserBetUnMatchedStatusTocompleteAsync(long[] ID, string Password) {
            this.UpdateUserBetUnMatchedStatusTocompleteAsync(ID, Password, null);
        }
        
        public void UpdateUserBetUnMatchedStatusTocompleteAsync(long[] ID, string Password, object userState) {
            if ((this.onBeginUpdateUserBetUnMatchedStatusTocompleteDelegate == null)) {
                this.onBeginUpdateUserBetUnMatchedStatusTocompleteDelegate = new BeginOperationDelegate(this.OnBeginUpdateUserBetUnMatchedStatusTocomplete);
            }
            if ((this.onEndUpdateUserBetUnMatchedStatusTocompleteDelegate == null)) {
                this.onEndUpdateUserBetUnMatchedStatusTocompleteDelegate = new EndOperationDelegate(this.OnEndUpdateUserBetUnMatchedStatusTocomplete);
            }
            if ((this.onUpdateUserBetUnMatchedStatusTocompleteCompletedDelegate == null)) {
                this.onUpdateUserBetUnMatchedStatusTocompleteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateUserBetUnMatchedStatusTocompleteCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateUserBetUnMatchedStatusTocompleteDelegate, new object[] {
                        ID,
                        Password}, this.onEndUpdateUserBetUnMatchedStatusTocompleteDelegate, this.onUpdateUserBetUnMatchedStatusTocompleteCompletedDelegate, userState);
        }
        
        public void UpdateUserBetUnMatchedStatusTocompleteforCuttingUser(long ID, string Password) {
            base.Channel.UpdateUserBetUnMatchedStatusTocompleteforCuttingUser(ID, Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateUserBetUnMatchedStatusTocompleteforCuttingUser(long ID, string Password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateUserBetUnMatchedStatusTocompleteforCuttingUser(ID, Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateUserBetUnMatchedStatusTocompleteforCuttingUser(System.IAsyncResult result) {
            base.Channel.EndUpdateUserBetUnMatchedStatusTocompleteforCuttingUser(result);
        }
        
        private System.IAsyncResult OnBeginUpdateUserBetUnMatchedStatusTocompleteforCuttingUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long ID = ((long)(inValues[0]));
            string Password = ((string)(inValues[1]));
            return this.BeginUpdateUserBetUnMatchedStatusTocompleteforCuttingUser(ID, Password, callback, asyncState);
        }
        
        private object[] OnEndUpdateUserBetUnMatchedStatusTocompleteforCuttingUser(System.IAsyncResult result) {
            this.EndUpdateUserBetUnMatchedStatusTocompleteforCuttingUser(result);
            return null;
        }
        
        private void OnUpdateUserBetUnMatchedStatusTocompleteforCuttingUserCompleted(object state) {
            if ((this.UpdateUserBetUnMatchedStatusTocompleteforCuttingUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateUserBetUnMatchedStatusTocompleteforCuttingUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateUserBetUnMatchedStatusTocompleteforCuttingUserAsync(long ID, string Password) {
            this.UpdateUserBetUnMatchedStatusTocompleteforCuttingUserAsync(ID, Password, null);
        }
        
        public void UpdateUserBetUnMatchedStatusTocompleteforCuttingUserAsync(long ID, string Password, object userState) {
            if ((this.onBeginUpdateUserBetUnMatchedStatusTocompleteforCuttingUserDelegate == null)) {
                this.onBeginUpdateUserBetUnMatchedStatusTocompleteforCuttingUserDelegate = new BeginOperationDelegate(this.OnBeginUpdateUserBetUnMatchedStatusTocompleteforCuttingUser);
            }
            if ((this.onEndUpdateUserBetUnMatchedStatusTocompleteforCuttingUserDelegate == null)) {
                this.onEndUpdateUserBetUnMatchedStatusTocompleteforCuttingUserDelegate = new EndOperationDelegate(this.OnEndUpdateUserBetUnMatchedStatusTocompleteforCuttingUser);
            }
            if ((this.onUpdateUserBetUnMatchedStatusTocompleteforCuttingUserCompletedDelegate == null)) {
                this.onUpdateUserBetUnMatchedStatusTocompleteforCuttingUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateUserBetUnMatchedStatusTocompleteforCuttingUserCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateUserBetUnMatchedStatusTocompleteforCuttingUserDelegate, new object[] {
                        ID,
                        Password}, this.onEndUpdateUserBetUnMatchedStatusTocompleteforCuttingUserDelegate, this.onUpdateUserBetUnMatchedStatusTocompleteforCuttingUserCompletedDelegate, userState);
        }
        
        public string GetMarketsOpenedbyUser(int userID) {
            return base.Channel.GetMarketsOpenedbyUser(userID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetMarketsOpenedbyUser(int userID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMarketsOpenedbyUser(userID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetMarketsOpenedbyUser(System.IAsyncResult result) {
            return base.Channel.EndGetMarketsOpenedbyUser(result);
        }
        
        private System.IAsyncResult OnBeginGetMarketsOpenedbyUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            return this.BeginGetMarketsOpenedbyUser(userID, callback, asyncState);
        }
        
        private object[] OnEndGetMarketsOpenedbyUser(System.IAsyncResult result) {
            string retVal = this.EndGetMarketsOpenedbyUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMarketsOpenedbyUserCompleted(object state) {
            if ((this.GetMarketsOpenedbyUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMarketsOpenedbyUserCompleted(this, new GetMarketsOpenedbyUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMarketsOpenedbyUserAsync(int userID) {
            this.GetMarketsOpenedbyUserAsync(userID, null);
        }
        
        public void GetMarketsOpenedbyUserAsync(int userID, object userState) {
            if ((this.onBeginGetMarketsOpenedbyUserDelegate == null)) {
                this.onBeginGetMarketsOpenedbyUserDelegate = new BeginOperationDelegate(this.OnBeginGetMarketsOpenedbyUser);
            }
            if ((this.onEndGetMarketsOpenedbyUserDelegate == null)) {
                this.onEndGetMarketsOpenedbyUserDelegate = new EndOperationDelegate(this.OnEndGetMarketsOpenedbyUser);
            }
            if ((this.onGetMarketsOpenedbyUserCompletedDelegate == null)) {
                this.onGetMarketsOpenedbyUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMarketsOpenedbyUserCompleted);
            }
            base.InvokeAsync(this.onBeginGetMarketsOpenedbyUserDelegate, new object[] {
                        userID}, this.onEndGetMarketsOpenedbyUserDelegate, this.onGetMarketsOpenedbyUserCompletedDelegate, userState);
        }
        
        public void SetMarketBookOpenbyUSer(int userID, string MarketBookID) {
            base.Channel.SetMarketBookOpenbyUSer(userID, MarketBookID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSetMarketBookOpenbyUSer(int userID, string MarketBookID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetMarketBookOpenbyUSer(userID, MarketBookID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSetMarketBookOpenbyUSer(System.IAsyncResult result) {
            base.Channel.EndSetMarketBookOpenbyUSer(result);
        }
        
        private System.IAsyncResult OnBeginSetMarketBookOpenbyUSer(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            string MarketBookID = ((string)(inValues[1]));
            return this.BeginSetMarketBookOpenbyUSer(userID, MarketBookID, callback, asyncState);
        }
        
        private object[] OnEndSetMarketBookOpenbyUSer(System.IAsyncResult result) {
            this.EndSetMarketBookOpenbyUSer(result);
            return null;
        }
        
        private void OnSetMarketBookOpenbyUSerCompleted(object state) {
            if ((this.SetMarketBookOpenbyUSerCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetMarketBookOpenbyUSerCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetMarketBookOpenbyUSerAsync(int userID, string MarketBookID) {
            this.SetMarketBookOpenbyUSerAsync(userID, MarketBookID, null);
        }
        
        public void SetMarketBookOpenbyUSerAsync(int userID, string MarketBookID, object userState) {
            if ((this.onBeginSetMarketBookOpenbyUSerDelegate == null)) {
                this.onBeginSetMarketBookOpenbyUSerDelegate = new BeginOperationDelegate(this.OnBeginSetMarketBookOpenbyUSer);
            }
            if ((this.onEndSetMarketBookOpenbyUSerDelegate == null)) {
                this.onEndSetMarketBookOpenbyUSerDelegate = new EndOperationDelegate(this.OnEndSetMarketBookOpenbyUSer);
            }
            if ((this.onSetMarketBookOpenbyUSerCompletedDelegate == null)) {
                this.onSetMarketBookOpenbyUSerCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetMarketBookOpenbyUSerCompleted);
            }
            base.InvokeAsync(this.onBeginSetMarketBookOpenbyUSerDelegate, new object[] {
                        userID,
                        MarketBookID}, this.onEndSetMarketBookOpenbyUSerDelegate, this.onSetMarketBookOpenbyUSerCompletedDelegate, userState);
        }
        
        public string SetMarketBookOpenbyUSerandGet(int userID, string MarketBookID) {
            return base.Channel.SetMarketBookOpenbyUSerandGet(userID, MarketBookID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSetMarketBookOpenbyUSerandGet(int userID, string MarketBookID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetMarketBookOpenbyUSerandGet(userID, MarketBookID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndSetMarketBookOpenbyUSerandGet(System.IAsyncResult result) {
            return base.Channel.EndSetMarketBookOpenbyUSerandGet(result);
        }
        
        private System.IAsyncResult OnBeginSetMarketBookOpenbyUSerandGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            string MarketBookID = ((string)(inValues[1]));
            return this.BeginSetMarketBookOpenbyUSerandGet(userID, MarketBookID, callback, asyncState);
        }
        
        private object[] OnEndSetMarketBookOpenbyUSerandGet(System.IAsyncResult result) {
            string retVal = this.EndSetMarketBookOpenbyUSerandGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSetMarketBookOpenbyUSerandGetCompleted(object state) {
            if ((this.SetMarketBookOpenbyUSerandGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetMarketBookOpenbyUSerandGetCompleted(this, new SetMarketBookOpenbyUSerandGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetMarketBookOpenbyUSerandGetAsync(int userID, string MarketBookID) {
            this.SetMarketBookOpenbyUSerandGetAsync(userID, MarketBookID, null);
        }
        
        public void SetMarketBookOpenbyUSerandGetAsync(int userID, string MarketBookID, object userState) {
            if ((this.onBeginSetMarketBookOpenbyUSerandGetDelegate == null)) {
                this.onBeginSetMarketBookOpenbyUSerandGetDelegate = new BeginOperationDelegate(this.OnBeginSetMarketBookOpenbyUSerandGet);
            }
            if ((this.onEndSetMarketBookOpenbyUSerandGetDelegate == null)) {
                this.onEndSetMarketBookOpenbyUSerandGetDelegate = new EndOperationDelegate(this.OnEndSetMarketBookOpenbyUSerandGet);
            }
            if ((this.onSetMarketBookOpenbyUSerandGetCompletedDelegate == null)) {
                this.onSetMarketBookOpenbyUSerandGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetMarketBookOpenbyUSerandGetCompleted);
            }
            base.InvokeAsync(this.onBeginSetMarketBookOpenbyUSerandGetDelegate, new object[] {
                        userID,
                        MarketBookID}, this.onEndSetMarketBookOpenbyUSerandGetDelegate, this.onSetMarketBookOpenbyUSerandGetCompletedDelegate, userState);
        }
        
        public string SetMarketBookOpenbyUSerandGet0(int userID, string MarketBookID) {
            return base.Channel.SetMarketBookOpenbyUSerandGet0(userID, MarketBookID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSetMarketBookOpenbyUSerandGet0(int userID, string MarketBookID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetMarketBookOpenbyUSerandGet0(userID, MarketBookID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndSetMarketBookOpenbyUSerandGet0(System.IAsyncResult result) {
            return base.Channel.EndSetMarketBookOpenbyUSerandGet0(result);
        }
        
        private System.IAsyncResult OnBeginSetMarketBookOpenbyUSerandGet0(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            string MarketBookID = ((string)(inValues[1]));
            return this.BeginSetMarketBookOpenbyUSerandGet0(userID, MarketBookID, callback, asyncState);
        }
        
        private object[] OnEndSetMarketBookOpenbyUSerandGet0(System.IAsyncResult result) {
            string retVal = this.EndSetMarketBookOpenbyUSerandGet0(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSetMarketBookOpenbyUSerandGet0Completed(object state) {
            if ((this.SetMarketBookOpenbyUSerandGet0Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetMarketBookOpenbyUSerandGet0Completed(this, new SetMarketBookOpenbyUSerandGet0CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetMarketBookOpenbyUSerandGet0Async(int userID, string MarketBookID) {
            this.SetMarketBookOpenbyUSerandGet0Async(userID, MarketBookID, null);
        }
        
        public void SetMarketBookOpenbyUSerandGet0Async(int userID, string MarketBookID, object userState) {
            if ((this.onBeginSetMarketBookOpenbyUSerandGet0Delegate == null)) {
                this.onBeginSetMarketBookOpenbyUSerandGet0Delegate = new BeginOperationDelegate(this.OnBeginSetMarketBookOpenbyUSerandGet0);
            }
            if ((this.onEndSetMarketBookOpenbyUSerandGet0Delegate == null)) {
                this.onEndSetMarketBookOpenbyUSerandGet0Delegate = new EndOperationDelegate(this.OnEndSetMarketBookOpenbyUSerandGet0);
            }
            if ((this.onSetMarketBookOpenbyUSerandGet0CompletedDelegate == null)) {
                this.onSetMarketBookOpenbyUSerandGet0CompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetMarketBookOpenbyUSerandGet0Completed);
            }
            base.InvokeAsync(this.onBeginSetMarketBookOpenbyUSerandGet0Delegate, new object[] {
                        userID,
                        MarketBookID}, this.onEndSetMarketBookOpenbyUSerandGet0Delegate, this.onSetMarketBookOpenbyUSerandGet0CompletedDelegate, userState);
        }
        
        public string SetMarketBookOpenbyUSerandGet1(int userID, string MarketBookID) {
            return base.Channel.SetMarketBookOpenbyUSerandGet1(userID, MarketBookID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSetMarketBookOpenbyUSerandGet1(int userID, string MarketBookID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetMarketBookOpenbyUSerandGet1(userID, MarketBookID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndSetMarketBookOpenbyUSerandGet1(System.IAsyncResult result) {
            return base.Channel.EndSetMarketBookOpenbyUSerandGet1(result);
        }
        
        private System.IAsyncResult OnBeginSetMarketBookOpenbyUSerandGet1(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            string MarketBookID = ((string)(inValues[1]));
            return this.BeginSetMarketBookOpenbyUSerandGet1(userID, MarketBookID, callback, asyncState);
        }
        
        private object[] OnEndSetMarketBookOpenbyUSerandGet1(System.IAsyncResult result) {
            string retVal = this.EndSetMarketBookOpenbyUSerandGet1(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSetMarketBookOpenbyUSerandGet1Completed(object state) {
            if ((this.SetMarketBookOpenbyUSerandGet1Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetMarketBookOpenbyUSerandGet1Completed(this, new SetMarketBookOpenbyUSerandGet1CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetMarketBookOpenbyUSerandGet1Async(int userID, string MarketBookID) {
            this.SetMarketBookOpenbyUSerandGet1Async(userID, MarketBookID, null);
        }
        
        public void SetMarketBookOpenbyUSerandGet1Async(int userID, string MarketBookID, object userState) {
            if ((this.onBeginSetMarketBookOpenbyUSerandGet1Delegate == null)) {
                this.onBeginSetMarketBookOpenbyUSerandGet1Delegate = new BeginOperationDelegate(this.OnBeginSetMarketBookOpenbyUSerandGet1);
            }
            if ((this.onEndSetMarketBookOpenbyUSerandGet1Delegate == null)) {
                this.onEndSetMarketBookOpenbyUSerandGet1Delegate = new EndOperationDelegate(this.OnEndSetMarketBookOpenbyUSerandGet1);
            }
            if ((this.onSetMarketBookOpenbyUSerandGet1CompletedDelegate == null)) {
                this.onSetMarketBookOpenbyUSerandGet1CompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetMarketBookOpenbyUSerandGet1Completed);
            }
            base.InvokeAsync(this.onBeginSetMarketBookOpenbyUSerandGet1Delegate, new object[] {
                        userID,
                        MarketBookID}, this.onEndSetMarketBookOpenbyUSerandGet1Delegate, this.onSetMarketBookOpenbyUSerandGet1CompletedDelegate, userState);
        }
        
        public string SetMarketBookOpenbyUSerandGet2(int userID, string MarketBookID) {
            return base.Channel.SetMarketBookOpenbyUSerandGet2(userID, MarketBookID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSetMarketBookOpenbyUSerandGet2(int userID, string MarketBookID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetMarketBookOpenbyUSerandGet2(userID, MarketBookID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndSetMarketBookOpenbyUSerandGet2(System.IAsyncResult result) {
            return base.Channel.EndSetMarketBookOpenbyUSerandGet2(result);
        }
        
        private System.IAsyncResult OnBeginSetMarketBookOpenbyUSerandGet2(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            string MarketBookID = ((string)(inValues[1]));
            return this.BeginSetMarketBookOpenbyUSerandGet2(userID, MarketBookID, callback, asyncState);
        }
        
        private object[] OnEndSetMarketBookOpenbyUSerandGet2(System.IAsyncResult result) {
            string retVal = this.EndSetMarketBookOpenbyUSerandGet2(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSetMarketBookOpenbyUSerandGet2Completed(object state) {
            if ((this.SetMarketBookOpenbyUSerandGet2Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetMarketBookOpenbyUSerandGet2Completed(this, new SetMarketBookOpenbyUSerandGet2CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetMarketBookOpenbyUSerandGet2Async(int userID, string MarketBookID) {
            this.SetMarketBookOpenbyUSerandGet2Async(userID, MarketBookID, null);
        }
        
        public void SetMarketBookOpenbyUSerandGet2Async(int userID, string MarketBookID, object userState) {
            if ((this.onBeginSetMarketBookOpenbyUSerandGet2Delegate == null)) {
                this.onBeginSetMarketBookOpenbyUSerandGet2Delegate = new BeginOperationDelegate(this.OnBeginSetMarketBookOpenbyUSerandGet2);
            }
            if ((this.onEndSetMarketBookOpenbyUSerandGet2Delegate == null)) {
                this.onEndSetMarketBookOpenbyUSerandGet2Delegate = new EndOperationDelegate(this.OnEndSetMarketBookOpenbyUSerandGet2);
            }
            if ((this.onSetMarketBookOpenbyUSerandGet2CompletedDelegate == null)) {
                this.onSetMarketBookOpenbyUSerandGet2CompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetMarketBookOpenbyUSerandGet2Completed);
            }
            base.InvokeAsync(this.onBeginSetMarketBookOpenbyUSerandGet2Delegate, new object[] {
                        userID,
                        MarketBookID}, this.onEndSetMarketBookOpenbyUSerandGet2Delegate, this.onSetMarketBookOpenbyUSerandGet2CompletedDelegate, userState);
        }
        
        public void SetMarketBookClosedbyUser(int userID, string MarketBookID) {
            base.Channel.SetMarketBookClosedbyUser(userID, MarketBookID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSetMarketBookClosedbyUser(int userID, string MarketBookID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetMarketBookClosedbyUser(userID, MarketBookID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSetMarketBookClosedbyUser(System.IAsyncResult result) {
            base.Channel.EndSetMarketBookClosedbyUser(result);
        }
        
        private System.IAsyncResult OnBeginSetMarketBookClosedbyUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            string MarketBookID = ((string)(inValues[1]));
            return this.BeginSetMarketBookClosedbyUser(userID, MarketBookID, callback, asyncState);
        }
        
        private object[] OnEndSetMarketBookClosedbyUser(System.IAsyncResult result) {
            this.EndSetMarketBookClosedbyUser(result);
            return null;
        }
        
        private void OnSetMarketBookClosedbyUserCompleted(object state) {
            if ((this.SetMarketBookClosedbyUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetMarketBookClosedbyUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetMarketBookClosedbyUserAsync(int userID, string MarketBookID) {
            this.SetMarketBookClosedbyUserAsync(userID, MarketBookID, null);
        }
        
        public void SetMarketBookClosedbyUserAsync(int userID, string MarketBookID, object userState) {
            if ((this.onBeginSetMarketBookClosedbyUserDelegate == null)) {
                this.onBeginSetMarketBookClosedbyUserDelegate = new BeginOperationDelegate(this.OnBeginSetMarketBookClosedbyUser);
            }
            if ((this.onEndSetMarketBookClosedbyUserDelegate == null)) {
                this.onEndSetMarketBookClosedbyUserDelegate = new EndOperationDelegate(this.OnEndSetMarketBookClosedbyUser);
            }
            if ((this.onSetMarketBookClosedbyUserCompletedDelegate == null)) {
                this.onSetMarketBookClosedbyUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetMarketBookClosedbyUserCompleted);
            }
            base.InvokeAsync(this.onBeginSetMarketBookClosedbyUserDelegate, new object[] {
                        userID,
                        MarketBookID}, this.onEndSetMarketBookClosedbyUserDelegate, this.onSetMarketBookClosedbyUserCompletedDelegate, userState);
        }
        
        public void SetMarketClosedAllUsers(string MarketbookID) {
            base.Channel.SetMarketClosedAllUsers(MarketbookID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSetMarketClosedAllUsers(string MarketbookID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetMarketClosedAllUsers(MarketbookID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSetMarketClosedAllUsers(System.IAsyncResult result) {
            base.Channel.EndSetMarketClosedAllUsers(result);
        }
        
        private System.IAsyncResult OnBeginSetMarketClosedAllUsers(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string MarketbookID = ((string)(inValues[0]));
            return this.BeginSetMarketClosedAllUsers(MarketbookID, callback, asyncState);
        }
        
        private object[] OnEndSetMarketClosedAllUsers(System.IAsyncResult result) {
            this.EndSetMarketClosedAllUsers(result);
            return null;
        }
        
        private void OnSetMarketClosedAllUsersCompleted(object state) {
            if ((this.SetMarketClosedAllUsersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetMarketClosedAllUsersCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetMarketClosedAllUsersAsync(string MarketbookID) {
            this.SetMarketClosedAllUsersAsync(MarketbookID, null);
        }
        
        public void SetMarketClosedAllUsersAsync(string MarketbookID, object userState) {
            if ((this.onBeginSetMarketClosedAllUsersDelegate == null)) {
                this.onBeginSetMarketClosedAllUsersDelegate = new BeginOperationDelegate(this.OnBeginSetMarketClosedAllUsers);
            }
            if ((this.onEndSetMarketClosedAllUsersDelegate == null)) {
                this.onEndSetMarketClosedAllUsersDelegate = new EndOperationDelegate(this.OnEndSetMarketClosedAllUsers);
            }
            if ((this.onSetMarketClosedAllUsersCompletedDelegate == null)) {
                this.onSetMarketClosedAllUsersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetMarketClosedAllUsersCompleted);
            }
            base.InvokeAsync(this.onBeginSetMarketClosedAllUsersDelegate, new object[] {
                        MarketbookID}, this.onEndSetMarketClosedAllUsersDelegate, this.onSetMarketClosedAllUsersCompletedDelegate, userState);
        }
        
        public globaltraders.UserServiceReference.SP_MarketCatalogueSelections_Get_Result[] GetSelectionNamesbyMarketID(string MarketID) {
            return base.Channel.GetSelectionNamesbyMarketID(MarketID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetSelectionNamesbyMarketID(string MarketID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSelectionNamesbyMarketID(MarketID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public globaltraders.UserServiceReference.SP_MarketCatalogueSelections_Get_Result[] EndGetSelectionNamesbyMarketID(System.IAsyncResult result) {
            return base.Channel.EndGetSelectionNamesbyMarketID(result);
        }
        
        private System.IAsyncResult OnBeginGetSelectionNamesbyMarketID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string MarketID = ((string)(inValues[0]));
            return this.BeginGetSelectionNamesbyMarketID(MarketID, callback, asyncState);
        }
        
        private object[] OnEndGetSelectionNamesbyMarketID(System.IAsyncResult result) {
            globaltraders.UserServiceReference.SP_MarketCatalogueSelections_Get_Result[] retVal = this.EndGetSelectionNamesbyMarketID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSelectionNamesbyMarketIDCompleted(object state) {
            if ((this.GetSelectionNamesbyMarketIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSelectionNamesbyMarketIDCompleted(this, new GetSelectionNamesbyMarketIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSelectionNamesbyMarketIDAsync(string MarketID) {
            this.GetSelectionNamesbyMarketIDAsync(MarketID, null);
        }
        
        public void GetSelectionNamesbyMarketIDAsync(string MarketID, object userState) {
            if ((this.onBeginGetSelectionNamesbyMarketIDDelegate == null)) {
                this.onBeginGetSelectionNamesbyMarketIDDelegate = new BeginOperationDelegate(this.OnBeginGetSelectionNamesbyMarketID);
            }
            if ((this.onEndGetSelectionNamesbyMarketIDDelegate == null)) {
                this.onEndGetSelectionNamesbyMarketIDDelegate = new EndOperationDelegate(this.OnEndGetSelectionNamesbyMarketID);
            }
            if ((this.onGetSelectionNamesbyMarketIDCompletedDelegate == null)) {
                this.onGetSelectionNamesbyMarketIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSelectionNamesbyMarketIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetSelectionNamesbyMarketIDDelegate, new object[] {
                        MarketID}, this.onEndGetSelectionNamesbyMarketIDDelegate, this.onGetSelectionNamesbyMarketIDCompletedDelegate, userState);
        }
        
        public string GetAccountsDatabyUserIDandDateRange(int userID, string From, string To, bool isCreditAmount, string Password) {
            return base.Channel.GetAccountsDatabyUserIDandDateRange(userID, From, To, isCreditAmount, Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAccountsDatabyUserIDandDateRange(int userID, string From, string To, bool isCreditAmount, string Password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAccountsDatabyUserIDandDateRange(userID, From, To, isCreditAmount, Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetAccountsDatabyUserIDandDateRange(System.IAsyncResult result) {
            return base.Channel.EndGetAccountsDatabyUserIDandDateRange(result);
        }
        
        private System.IAsyncResult OnBeginGetAccountsDatabyUserIDandDateRange(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            string From = ((string)(inValues[1]));
            string To = ((string)(inValues[2]));
            bool isCreditAmount = ((bool)(inValues[3]));
            string Password = ((string)(inValues[4]));
            return this.BeginGetAccountsDatabyUserIDandDateRange(userID, From, To, isCreditAmount, Password, callback, asyncState);
        }
        
        private object[] OnEndGetAccountsDatabyUserIDandDateRange(System.IAsyncResult result) {
            string retVal = this.EndGetAccountsDatabyUserIDandDateRange(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAccountsDatabyUserIDandDateRangeCompleted(object state) {
            if ((this.GetAccountsDatabyUserIDandDateRangeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAccountsDatabyUserIDandDateRangeCompleted(this, new GetAccountsDatabyUserIDandDateRangeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAccountsDatabyUserIDandDateRangeAsync(int userID, string From, string To, bool isCreditAmount, string Password) {
            this.GetAccountsDatabyUserIDandDateRangeAsync(userID, From, To, isCreditAmount, Password, null);
        }
        
        public void GetAccountsDatabyUserIDandDateRangeAsync(int userID, string From, string To, bool isCreditAmount, string Password, object userState) {
            if ((this.onBeginGetAccountsDatabyUserIDandDateRangeDelegate == null)) {
                this.onBeginGetAccountsDatabyUserIDandDateRangeDelegate = new BeginOperationDelegate(this.OnBeginGetAccountsDatabyUserIDandDateRange);
            }
            if ((this.onEndGetAccountsDatabyUserIDandDateRangeDelegate == null)) {
                this.onEndGetAccountsDatabyUserIDandDateRangeDelegate = new EndOperationDelegate(this.OnEndGetAccountsDatabyUserIDandDateRange);
            }
            if ((this.onGetAccountsDatabyUserIDandDateRangeCompletedDelegate == null)) {
                this.onGetAccountsDatabyUserIDandDateRangeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAccountsDatabyUserIDandDateRangeCompleted);
            }
            base.InvokeAsync(this.onBeginGetAccountsDatabyUserIDandDateRangeDelegate, new object[] {
                        userID,
                        From,
                        To,
                        isCreditAmount,
                        Password}, this.onEndGetAccountsDatabyUserIDandDateRangeDelegate, this.onGetAccountsDatabyUserIDandDateRangeCompletedDelegate, userState);
        }
        
        public string GetAccountsDatabyCreatedByID(int userID, bool isCreditAmount, string Password) {
            return base.Channel.GetAccountsDatabyCreatedByID(userID, isCreditAmount, Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAccountsDatabyCreatedByID(int userID, bool isCreditAmount, string Password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAccountsDatabyCreatedByID(userID, isCreditAmount, Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetAccountsDatabyCreatedByID(System.IAsyncResult result) {
            return base.Channel.EndGetAccountsDatabyCreatedByID(result);
        }
        
        private System.IAsyncResult OnBeginGetAccountsDatabyCreatedByID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            bool isCreditAmount = ((bool)(inValues[1]));
            string Password = ((string)(inValues[2]));
            return this.BeginGetAccountsDatabyCreatedByID(userID, isCreditAmount, Password, callback, asyncState);
        }
        
        private object[] OnEndGetAccountsDatabyCreatedByID(System.IAsyncResult result) {
            string retVal = this.EndGetAccountsDatabyCreatedByID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAccountsDatabyCreatedByIDCompleted(object state) {
            if ((this.GetAccountsDatabyCreatedByIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAccountsDatabyCreatedByIDCompleted(this, new GetAccountsDatabyCreatedByIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAccountsDatabyCreatedByIDAsync(int userID, bool isCreditAmount, string Password) {
            this.GetAccountsDatabyCreatedByIDAsync(userID, isCreditAmount, Password, null);
        }
        
        public void GetAccountsDatabyCreatedByIDAsync(int userID, bool isCreditAmount, string Password, object userState) {
            if ((this.onBeginGetAccountsDatabyCreatedByIDDelegate == null)) {
                this.onBeginGetAccountsDatabyCreatedByIDDelegate = new BeginOperationDelegate(this.OnBeginGetAccountsDatabyCreatedByID);
            }
            if ((this.onEndGetAccountsDatabyCreatedByIDDelegate == null)) {
                this.onEndGetAccountsDatabyCreatedByIDDelegate = new EndOperationDelegate(this.OnEndGetAccountsDatabyCreatedByID);
            }
            if ((this.onGetAccountsDatabyCreatedByIDCompletedDelegate == null)) {
                this.onGetAccountsDatabyCreatedByIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAccountsDatabyCreatedByIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetAccountsDatabyCreatedByIDDelegate, new object[] {
                        userID,
                        isCreditAmount,
                        Password}, this.onEndGetAccountsDatabyCreatedByIDDelegate, this.onGetAccountsDatabyCreatedByIDCompletedDelegate, userState);
        }
        
        public string GetAccountsDatabyCreatedByIDForSuper(int userID, bool isCreditAmount, string Password) {
            return base.Channel.GetAccountsDatabyCreatedByIDForSuper(userID, isCreditAmount, Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAccountsDatabyCreatedByIDForSuper(int userID, bool isCreditAmount, string Password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAccountsDatabyCreatedByIDForSuper(userID, isCreditAmount, Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetAccountsDatabyCreatedByIDForSuper(System.IAsyncResult result) {
            return base.Channel.EndGetAccountsDatabyCreatedByIDForSuper(result);
        }
        
        private System.IAsyncResult OnBeginGetAccountsDatabyCreatedByIDForSuper(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            bool isCreditAmount = ((bool)(inValues[1]));
            string Password = ((string)(inValues[2]));
            return this.BeginGetAccountsDatabyCreatedByIDForSuper(userID, isCreditAmount, Password, callback, asyncState);
        }
        
        private object[] OnEndGetAccountsDatabyCreatedByIDForSuper(System.IAsyncResult result) {
            string retVal = this.EndGetAccountsDatabyCreatedByIDForSuper(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAccountsDatabyCreatedByIDForSuperCompleted(object state) {
            if ((this.GetAccountsDatabyCreatedByIDForSuperCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAccountsDatabyCreatedByIDForSuperCompleted(this, new GetAccountsDatabyCreatedByIDForSuperCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAccountsDatabyCreatedByIDForSuperAsync(int userID, bool isCreditAmount, string Password) {
            this.GetAccountsDatabyCreatedByIDForSuperAsync(userID, isCreditAmount, Password, null);
        }
        
        public void GetAccountsDatabyCreatedByIDForSuperAsync(int userID, bool isCreditAmount, string Password, object userState) {
            if ((this.onBeginGetAccountsDatabyCreatedByIDForSuperDelegate == null)) {
                this.onBeginGetAccountsDatabyCreatedByIDForSuperDelegate = new BeginOperationDelegate(this.OnBeginGetAccountsDatabyCreatedByIDForSuper);
            }
            if ((this.onEndGetAccountsDatabyCreatedByIDForSuperDelegate == null)) {
                this.onEndGetAccountsDatabyCreatedByIDForSuperDelegate = new EndOperationDelegate(this.OnEndGetAccountsDatabyCreatedByIDForSuper);
            }
            if ((this.onGetAccountsDatabyCreatedByIDForSuperCompletedDelegate == null)) {
                this.onGetAccountsDatabyCreatedByIDForSuperCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAccountsDatabyCreatedByIDForSuperCompleted);
            }
            base.InvokeAsync(this.onBeginGetAccountsDatabyCreatedByIDForSuperDelegate, new object[] {
                        userID,
                        isCreditAmount,
                        Password}, this.onEndGetAccountsDatabyCreatedByIDForSuperDelegate, this.onGetAccountsDatabyCreatedByIDForSuperCompletedDelegate, userState);
        }
        
        public string GetAccountsDatabyCreatedByIDForSamiAdmin(int userID, bool isCreditAmount, string Password) {
            return base.Channel.GetAccountsDatabyCreatedByIDForSamiAdmin(userID, isCreditAmount, Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAccountsDatabyCreatedByIDForSamiAdmin(int userID, bool isCreditAmount, string Password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAccountsDatabyCreatedByIDForSamiAdmin(userID, isCreditAmount, Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetAccountsDatabyCreatedByIDForSamiAdmin(System.IAsyncResult result) {
            return base.Channel.EndGetAccountsDatabyCreatedByIDForSamiAdmin(result);
        }
        
        private System.IAsyncResult OnBeginGetAccountsDatabyCreatedByIDForSamiAdmin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            bool isCreditAmount = ((bool)(inValues[1]));
            string Password = ((string)(inValues[2]));
            return this.BeginGetAccountsDatabyCreatedByIDForSamiAdmin(userID, isCreditAmount, Password, callback, asyncState);
        }
        
        private object[] OnEndGetAccountsDatabyCreatedByIDForSamiAdmin(System.IAsyncResult result) {
            string retVal = this.EndGetAccountsDatabyCreatedByIDForSamiAdmin(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAccountsDatabyCreatedByIDForSamiAdminCompleted(object state) {
            if ((this.GetAccountsDatabyCreatedByIDForSamiAdminCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAccountsDatabyCreatedByIDForSamiAdminCompleted(this, new GetAccountsDatabyCreatedByIDForSamiAdminCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAccountsDatabyCreatedByIDForSamiAdminAsync(int userID, bool isCreditAmount, string Password) {
            this.GetAccountsDatabyCreatedByIDForSamiAdminAsync(userID, isCreditAmount, Password, null);
        }
        
        public void GetAccountsDatabyCreatedByIDForSamiAdminAsync(int userID, bool isCreditAmount, string Password, object userState) {
            if ((this.onBeginGetAccountsDatabyCreatedByIDForSamiAdminDelegate == null)) {
                this.onBeginGetAccountsDatabyCreatedByIDForSamiAdminDelegate = new BeginOperationDelegate(this.OnBeginGetAccountsDatabyCreatedByIDForSamiAdmin);
            }
            if ((this.onEndGetAccountsDatabyCreatedByIDForSamiAdminDelegate == null)) {
                this.onEndGetAccountsDatabyCreatedByIDForSamiAdminDelegate = new EndOperationDelegate(this.OnEndGetAccountsDatabyCreatedByIDForSamiAdmin);
            }
            if ((this.onGetAccountsDatabyCreatedByIDForSamiAdminCompletedDelegate == null)) {
                this.onGetAccountsDatabyCreatedByIDForSamiAdminCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAccountsDatabyCreatedByIDForSamiAdminCompleted);
            }
            base.InvokeAsync(this.onBeginGetAccountsDatabyCreatedByIDForSamiAdminDelegate, new object[] {
                        userID,
                        isCreditAmount,
                        Password}, this.onEndGetAccountsDatabyCreatedByIDForSamiAdminDelegate, this.onGetAccountsDatabyCreatedByIDForSamiAdminCompletedDelegate, userState);
        }
        
        public string GetAccountsDataForAdmin(int UserID, bool isCreditAmount, string Password) {
            return base.Channel.GetAccountsDataForAdmin(UserID, isCreditAmount, Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAccountsDataForAdmin(int UserID, bool isCreditAmount, string Password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAccountsDataForAdmin(UserID, isCreditAmount, Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetAccountsDataForAdmin(System.IAsyncResult result) {
            return base.Channel.EndGetAccountsDataForAdmin(result);
        }
        
        private System.IAsyncResult OnBeginGetAccountsDataForAdmin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int UserID = ((int)(inValues[0]));
            bool isCreditAmount = ((bool)(inValues[1]));
            string Password = ((string)(inValues[2]));
            return this.BeginGetAccountsDataForAdmin(UserID, isCreditAmount, Password, callback, asyncState);
        }
        
        private object[] OnEndGetAccountsDataForAdmin(System.IAsyncResult result) {
            string retVal = this.EndGetAccountsDataForAdmin(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAccountsDataForAdminCompleted(object state) {
            if ((this.GetAccountsDataForAdminCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAccountsDataForAdminCompleted(this, new GetAccountsDataForAdminCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAccountsDataForAdminAsync(int UserID, bool isCreditAmount, string Password) {
            this.GetAccountsDataForAdminAsync(UserID, isCreditAmount, Password, null);
        }
        
        public void GetAccountsDataForAdminAsync(int UserID, bool isCreditAmount, string Password, object userState) {
            if ((this.onBeginGetAccountsDataForAdminDelegate == null)) {
                this.onBeginGetAccountsDataForAdminDelegate = new BeginOperationDelegate(this.OnBeginGetAccountsDataForAdmin);
            }
            if ((this.onEndGetAccountsDataForAdminDelegate == null)) {
                this.onEndGetAccountsDataForAdminDelegate = new EndOperationDelegate(this.OnEndGetAccountsDataForAdmin);
            }
            if ((this.onGetAccountsDataForAdminCompletedDelegate == null)) {
                this.onGetAccountsDataForAdminCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAccountsDataForAdminCompleted);
            }
            base.InvokeAsync(this.onBeginGetAccountsDataForAdminDelegate, new object[] {
                        UserID,
                        isCreditAmount,
                        Password}, this.onEndGetAccountsDataForAdminDelegate, this.onGetAccountsDataForAdminCompletedDelegate, userState);
        }
        
        public decimal GetProfitorLossbyUserID(int userID, bool isCreditAmount, string Password) {
            return base.Channel.GetProfitorLossbyUserID(userID, isCreditAmount, Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetProfitorLossbyUserID(int userID, bool isCreditAmount, string Password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetProfitorLossbyUserID(userID, isCreditAmount, Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public decimal EndGetProfitorLossbyUserID(System.IAsyncResult result) {
            return base.Channel.EndGetProfitorLossbyUserID(result);
        }
        
        private System.IAsyncResult OnBeginGetProfitorLossbyUserID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            bool isCreditAmount = ((bool)(inValues[1]));
            string Password = ((string)(inValues[2]));
            return this.BeginGetProfitorLossbyUserID(userID, isCreditAmount, Password, callback, asyncState);
        }
        
        private object[] OnEndGetProfitorLossbyUserID(System.IAsyncResult result) {
            decimal retVal = this.EndGetProfitorLossbyUserID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetProfitorLossbyUserIDCompleted(object state) {
            if ((this.GetProfitorLossbyUserIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetProfitorLossbyUserIDCompleted(this, new GetProfitorLossbyUserIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetProfitorLossbyUserIDAsync(int userID, bool isCreditAmount, string Password) {
            this.GetProfitorLossbyUserIDAsync(userID, isCreditAmount, Password, null);
        }
        
        public void GetProfitorLossbyUserIDAsync(int userID, bool isCreditAmount, string Password, object userState) {
            if ((this.onBeginGetProfitorLossbyUserIDDelegate == null)) {
                this.onBeginGetProfitorLossbyUserIDDelegate = new BeginOperationDelegate(this.OnBeginGetProfitorLossbyUserID);
            }
            if ((this.onEndGetProfitorLossbyUserIDDelegate == null)) {
                this.onEndGetProfitorLossbyUserIDDelegate = new EndOperationDelegate(this.OnEndGetProfitorLossbyUserID);
            }
            if ((this.onGetProfitorLossbyUserIDCompletedDelegate == null)) {
                this.onGetProfitorLossbyUserIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetProfitorLossbyUserIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetProfitorLossbyUserIDDelegate, new object[] {
                        userID,
                        isCreditAmount,
                        Password}, this.onEndGetProfitorLossbyUserIDDelegate, this.onGetProfitorLossbyUserIDCompletedDelegate, userState);
        }
        
        public decimal GetProfitorLossforSuper(int userID, string Password) {
            return base.Channel.GetProfitorLossforSuper(userID, Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetProfitorLossforSuper(int userID, string Password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetProfitorLossforSuper(userID, Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public decimal EndGetProfitorLossforSuper(System.IAsyncResult result) {
            return base.Channel.EndGetProfitorLossforSuper(result);
        }
        
        private System.IAsyncResult OnBeginGetProfitorLossforSuper(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            string Password = ((string)(inValues[1]));
            return this.BeginGetProfitorLossforSuper(userID, Password, callback, asyncState);
        }
        
        private object[] OnEndGetProfitorLossforSuper(System.IAsyncResult result) {
            decimal retVal = this.EndGetProfitorLossforSuper(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetProfitorLossforSuperCompleted(object state) {
            if ((this.GetProfitorLossforSuperCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetProfitorLossforSuperCompleted(this, new GetProfitorLossforSuperCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetProfitorLossforSuperAsync(int userID, string Password) {
            this.GetProfitorLossforSuperAsync(userID, Password, null);
        }
        
        public void GetProfitorLossforSuperAsync(int userID, string Password, object userState) {
            if ((this.onBeginGetProfitorLossforSuperDelegate == null)) {
                this.onBeginGetProfitorLossforSuperDelegate = new BeginOperationDelegate(this.OnBeginGetProfitorLossforSuper);
            }
            if ((this.onEndGetProfitorLossforSuperDelegate == null)) {
                this.onEndGetProfitorLossforSuperDelegate = new EndOperationDelegate(this.OnEndGetProfitorLossforSuper);
            }
            if ((this.onGetProfitorLossforSuperCompletedDelegate == null)) {
                this.onGetProfitorLossforSuperCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetProfitorLossforSuperCompleted);
            }
            base.InvokeAsync(this.onBeginGetProfitorLossforSuperDelegate, new object[] {
                        userID,
                        Password}, this.onEndGetProfitorLossforSuperDelegate, this.onGetProfitorLossforSuperCompletedDelegate, userState);
        }
        
        public string GetAccountsDataForCommisionaccount(string Password) {
            return base.Channel.GetAccountsDataForCommisionaccount(Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAccountsDataForCommisionaccount(string Password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAccountsDataForCommisionaccount(Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetAccountsDataForCommisionaccount(System.IAsyncResult result) {
            return base.Channel.EndGetAccountsDataForCommisionaccount(result);
        }
        
        private System.IAsyncResult OnBeginGetAccountsDataForCommisionaccount(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string Password = ((string)(inValues[0]));
            return this.BeginGetAccountsDataForCommisionaccount(Password, callback, asyncState);
        }
        
        private object[] OnEndGetAccountsDataForCommisionaccount(System.IAsyncResult result) {
            string retVal = this.EndGetAccountsDataForCommisionaccount(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAccountsDataForCommisionaccountCompleted(object state) {
            if ((this.GetAccountsDataForCommisionaccountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAccountsDataForCommisionaccountCompleted(this, new GetAccountsDataForCommisionaccountCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAccountsDataForCommisionaccountAsync(string Password) {
            this.GetAccountsDataForCommisionaccountAsync(Password, null);
        }
        
        public void GetAccountsDataForCommisionaccountAsync(string Password, object userState) {
            if ((this.onBeginGetAccountsDataForCommisionaccountDelegate == null)) {
                this.onBeginGetAccountsDataForCommisionaccountDelegate = new BeginOperationDelegate(this.OnBeginGetAccountsDataForCommisionaccount);
            }
            if ((this.onEndGetAccountsDataForCommisionaccountDelegate == null)) {
                this.onEndGetAccountsDataForCommisionaccountDelegate = new EndOperationDelegate(this.OnEndGetAccountsDataForCommisionaccount);
            }
            if ((this.onGetAccountsDataForCommisionaccountCompletedDelegate == null)) {
                this.onGetAccountsDataForCommisionaccountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAccountsDataForCommisionaccountCompleted);
            }
            base.InvokeAsync(this.onBeginGetAccountsDataForCommisionaccountDelegate, new object[] {
                        Password}, this.onEndGetAccountsDataForCommisionaccountDelegate, this.onGetAccountsDataForCommisionaccountCompletedDelegate, userState);
        }
        
        public void DownloadAllMarketHorseRace(string Password) {
            base.Channel.DownloadAllMarketHorseRace(Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDownloadAllMarketHorseRace(string Password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDownloadAllMarketHorseRace(Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDownloadAllMarketHorseRace(System.IAsyncResult result) {
            base.Channel.EndDownloadAllMarketHorseRace(result);
        }
        
        private System.IAsyncResult OnBeginDownloadAllMarketHorseRace(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string Password = ((string)(inValues[0]));
            return this.BeginDownloadAllMarketHorseRace(Password, callback, asyncState);
        }
        
        private object[] OnEndDownloadAllMarketHorseRace(System.IAsyncResult result) {
            this.EndDownloadAllMarketHorseRace(result);
            return null;
        }
        
        private void OnDownloadAllMarketHorseRaceCompleted(object state) {
            if ((this.DownloadAllMarketHorseRaceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DownloadAllMarketHorseRaceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DownloadAllMarketHorseRaceAsync(string Password) {
            this.DownloadAllMarketHorseRaceAsync(Password, null);
        }
        
        public void DownloadAllMarketHorseRaceAsync(string Password, object userState) {
            if ((this.onBeginDownloadAllMarketHorseRaceDelegate == null)) {
                this.onBeginDownloadAllMarketHorseRaceDelegate = new BeginOperationDelegate(this.OnBeginDownloadAllMarketHorseRace);
            }
            if ((this.onEndDownloadAllMarketHorseRaceDelegate == null)) {
                this.onEndDownloadAllMarketHorseRaceDelegate = new EndOperationDelegate(this.OnEndDownloadAllMarketHorseRace);
            }
            if ((this.onDownloadAllMarketHorseRaceCompletedDelegate == null)) {
                this.onDownloadAllMarketHorseRaceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDownloadAllMarketHorseRaceCompleted);
            }
            base.InvokeAsync(this.onBeginDownloadAllMarketHorseRaceDelegate, new object[] {
                        Password}, this.onEndDownloadAllMarketHorseRaceDelegate, this.onDownloadAllMarketHorseRaceCompletedDelegate, userState);
        }
        
        public void DownloadAllMarketGrayHoundRace(string Password) {
            base.Channel.DownloadAllMarketGrayHoundRace(Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDownloadAllMarketGrayHoundRace(string Password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDownloadAllMarketGrayHoundRace(Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDownloadAllMarketGrayHoundRace(System.IAsyncResult result) {
            base.Channel.EndDownloadAllMarketGrayHoundRace(result);
        }
        
        private System.IAsyncResult OnBeginDownloadAllMarketGrayHoundRace(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string Password = ((string)(inValues[0]));
            return this.BeginDownloadAllMarketGrayHoundRace(Password, callback, asyncState);
        }
        
        private object[] OnEndDownloadAllMarketGrayHoundRace(System.IAsyncResult result) {
            this.EndDownloadAllMarketGrayHoundRace(result);
            return null;
        }
        
        private void OnDownloadAllMarketGrayHoundRaceCompleted(object state) {
            if ((this.DownloadAllMarketGrayHoundRaceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DownloadAllMarketGrayHoundRaceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DownloadAllMarketGrayHoundRaceAsync(string Password) {
            this.DownloadAllMarketGrayHoundRaceAsync(Password, null);
        }
        
        public void DownloadAllMarketGrayHoundRaceAsync(string Password, object userState) {
            if ((this.onBeginDownloadAllMarketGrayHoundRaceDelegate == null)) {
                this.onBeginDownloadAllMarketGrayHoundRaceDelegate = new BeginOperationDelegate(this.OnBeginDownloadAllMarketGrayHoundRace);
            }
            if ((this.onEndDownloadAllMarketGrayHoundRaceDelegate == null)) {
                this.onEndDownloadAllMarketGrayHoundRaceDelegate = new EndOperationDelegate(this.OnEndDownloadAllMarketGrayHoundRace);
            }
            if ((this.onDownloadAllMarketGrayHoundRaceCompletedDelegate == null)) {
                this.onDownloadAllMarketGrayHoundRaceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDownloadAllMarketGrayHoundRaceCompleted);
            }
            base.InvokeAsync(this.onBeginDownloadAllMarketGrayHoundRaceDelegate, new object[] {
                        Password}, this.onEndDownloadAllMarketGrayHoundRaceDelegate, this.onDownloadAllMarketGrayHoundRaceCompletedDelegate, userState);
        }
        
        public bool UpdateUserbetamountbyID(long ID, decimal amount, bool ismatched, string Password) {
            return base.Channel.UpdateUserbetamountbyID(ID, amount, ismatched, Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateUserbetamountbyID(long ID, decimal amount, bool ismatched, string Password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateUserbetamountbyID(ID, amount, ismatched, Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndUpdateUserbetamountbyID(System.IAsyncResult result) {
            return base.Channel.EndUpdateUserbetamountbyID(result);
        }
        
        private System.IAsyncResult OnBeginUpdateUserbetamountbyID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long ID = ((long)(inValues[0]));
            decimal amount = ((decimal)(inValues[1]));
            bool ismatched = ((bool)(inValues[2]));
            string Password = ((string)(inValues[3]));
            return this.BeginUpdateUserbetamountbyID(ID, amount, ismatched, Password, callback, asyncState);
        }
        
        private object[] OnEndUpdateUserbetamountbyID(System.IAsyncResult result) {
            bool retVal = this.EndUpdateUserbetamountbyID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateUserbetamountbyIDCompleted(object state) {
            if ((this.UpdateUserbetamountbyIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateUserbetamountbyIDCompleted(this, new UpdateUserbetamountbyIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateUserbetamountbyIDAsync(long ID, decimal amount, bool ismatched, string Password) {
            this.UpdateUserbetamountbyIDAsync(ID, amount, ismatched, Password, null);
        }
        
        public void UpdateUserbetamountbyIDAsync(long ID, decimal amount, bool ismatched, string Password, object userState) {
            if ((this.onBeginUpdateUserbetamountbyIDDelegate == null)) {
                this.onBeginUpdateUserbetamountbyIDDelegate = new BeginOperationDelegate(this.OnBeginUpdateUserbetamountbyID);
            }
            if ((this.onEndUpdateUserbetamountbyIDDelegate == null)) {
                this.onEndUpdateUserbetamountbyIDDelegate = new EndOperationDelegate(this.OnEndUpdateUserbetamountbyID);
            }
            if ((this.onUpdateUserbetamountbyIDCompletedDelegate == null)) {
                this.onUpdateUserbetamountbyIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateUserbetamountbyIDCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateUserbetamountbyIDDelegate, new object[] {
                        ID,
                        amount,
                        ismatched,
                        Password}, this.onEndUpdateUserbetamountbyIDDelegate, this.onUpdateUserbetamountbyIDCompletedDelegate, userState);
        }
        
        public string GetInPlayMatches(int userID) {
            return base.Channel.GetInPlayMatches(userID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetInPlayMatches(int userID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetInPlayMatches(userID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetInPlayMatches(System.IAsyncResult result) {
            return base.Channel.EndGetInPlayMatches(result);
        }
        
        private System.IAsyncResult OnBeginGetInPlayMatches(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            return this.BeginGetInPlayMatches(userID, callback, asyncState);
        }
        
        private object[] OnEndGetInPlayMatches(System.IAsyncResult result) {
            string retVal = this.EndGetInPlayMatches(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetInPlayMatchesCompleted(object state) {
            if ((this.GetInPlayMatchesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetInPlayMatchesCompleted(this, new GetInPlayMatchesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetInPlayMatchesAsync(int userID) {
            this.GetInPlayMatchesAsync(userID, null);
        }
        
        public void GetInPlayMatchesAsync(int userID, object userState) {
            if ((this.onBeginGetInPlayMatchesDelegate == null)) {
                this.onBeginGetInPlayMatchesDelegate = new BeginOperationDelegate(this.OnBeginGetInPlayMatches);
            }
            if ((this.onEndGetInPlayMatchesDelegate == null)) {
                this.onEndGetInPlayMatchesDelegate = new EndOperationDelegate(this.OnEndGetInPlayMatches);
            }
            if ((this.onGetInPlayMatchesCompletedDelegate == null)) {
                this.onGetInPlayMatchesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetInPlayMatchesCompleted);
            }
            base.InvokeAsync(this.onBeginGetInPlayMatchesDelegate, new object[] {
                        userID}, this.onEndGetInPlayMatchesDelegate, this.onGetInPlayMatchesCompletedDelegate, userState);
        }
        
        public string GetInPlayMatcheswithRunners(int userID) {
            return base.Channel.GetInPlayMatcheswithRunners(userID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetInPlayMatcheswithRunners(int userID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetInPlayMatcheswithRunners(userID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetInPlayMatcheswithRunners(System.IAsyncResult result) {
            return base.Channel.EndGetInPlayMatcheswithRunners(result);
        }
        
        private System.IAsyncResult OnBeginGetInPlayMatcheswithRunners(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            return this.BeginGetInPlayMatcheswithRunners(userID, callback, asyncState);
        }
        
        private object[] OnEndGetInPlayMatcheswithRunners(System.IAsyncResult result) {
            string retVal = this.EndGetInPlayMatcheswithRunners(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetInPlayMatcheswithRunnersCompleted(object state) {
            if ((this.GetInPlayMatcheswithRunnersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetInPlayMatcheswithRunnersCompleted(this, new GetInPlayMatcheswithRunnersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetInPlayMatcheswithRunnersAsync(int userID) {
            this.GetInPlayMatcheswithRunnersAsync(userID, null);
        }
        
        public void GetInPlayMatcheswithRunnersAsync(int userID, object userState) {
            if ((this.onBeginGetInPlayMatcheswithRunnersDelegate == null)) {
                this.onBeginGetInPlayMatcheswithRunnersDelegate = new BeginOperationDelegate(this.OnBeginGetInPlayMatcheswithRunners);
            }
            if ((this.onEndGetInPlayMatcheswithRunnersDelegate == null)) {
                this.onEndGetInPlayMatcheswithRunnersDelegate = new EndOperationDelegate(this.OnEndGetInPlayMatcheswithRunners);
            }
            if ((this.onGetInPlayMatcheswithRunnersCompletedDelegate == null)) {
                this.onGetInPlayMatcheswithRunnersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetInPlayMatcheswithRunnersCompleted);
            }
            base.InvokeAsync(this.onBeginGetInPlayMatcheswithRunnersDelegate, new object[] {
                        userID}, this.onEndGetInPlayMatcheswithRunnersDelegate, this.onGetInPlayMatcheswithRunnersCompletedDelegate, userState);
        }
        
        public string GetInPlayMatcheswithRunners1(int userID) {
            return base.Channel.GetInPlayMatcheswithRunners1(userID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetInPlayMatcheswithRunners1(int userID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetInPlayMatcheswithRunners1(userID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetInPlayMatcheswithRunners1(System.IAsyncResult result) {
            return base.Channel.EndGetInPlayMatcheswithRunners1(result);
        }
        
        private System.IAsyncResult OnBeginGetInPlayMatcheswithRunners1(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            return this.BeginGetInPlayMatcheswithRunners1(userID, callback, asyncState);
        }
        
        private object[] OnEndGetInPlayMatcheswithRunners1(System.IAsyncResult result) {
            string retVal = this.EndGetInPlayMatcheswithRunners1(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetInPlayMatcheswithRunners1Completed(object state) {
            if ((this.GetInPlayMatcheswithRunners1Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetInPlayMatcheswithRunners1Completed(this, new GetInPlayMatcheswithRunners1CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetInPlayMatcheswithRunners1Async(int userID) {
            this.GetInPlayMatcheswithRunners1Async(userID, null);
        }
        
        public void GetInPlayMatcheswithRunners1Async(int userID, object userState) {
            if ((this.onBeginGetInPlayMatcheswithRunners1Delegate == null)) {
                this.onBeginGetInPlayMatcheswithRunners1Delegate = new BeginOperationDelegate(this.OnBeginGetInPlayMatcheswithRunners1);
            }
            if ((this.onEndGetInPlayMatcheswithRunners1Delegate == null)) {
                this.onEndGetInPlayMatcheswithRunners1Delegate = new EndOperationDelegate(this.OnEndGetInPlayMatcheswithRunners1);
            }
            if ((this.onGetInPlayMatcheswithRunners1CompletedDelegate == null)) {
                this.onGetInPlayMatcheswithRunners1CompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetInPlayMatcheswithRunners1Completed);
            }
            base.InvokeAsync(this.onBeginGetInPlayMatcheswithRunners1Delegate, new object[] {
                        userID}, this.onEndGetInPlayMatcheswithRunners1Delegate, this.onGetInPlayMatcheswithRunners1CompletedDelegate, userState);
        }
    }
}
