//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace bfnexchange.Services.DBModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class NExchangeEntities : DbContext
    {
        public NExchangeEntities()
            : base("name=NExchangeEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserType> UserTypes { get; set; }
        public virtual DbSet<AccessRight> AccessRights { get; set; }
        public virtual DbSet<ActivityLog> ActivityLogs { get; set; }
        public virtual DbSet<UserType_AccessRights_Mapping> UserType_AccessRights_Mapping { get; set; }
        public virtual DbSet<UsersAmountHistory> UsersAmountHistories { get; set; }
        public virtual DbSet<Users_ChangePasswordHistory> Users_ChangePasswordHistory { get; set; }
        public virtual DbSet<UserMarket> UserMarkets { get; set; }
        public virtual DbSet<APIConfig> APIConfigs { get; set; }
        public virtual DbSet<CommisionAccount> CommisionAccounts { get; set; }
        public virtual DbSet<UserBet> UserBets { get; set; }
        public virtual DbSet<BetPlaceWaitandInterval> BetPlaceWaitandIntervals { get; set; }
        public virtual DbSet<BetSlipKey> BetSlipKeys { get; set; }
        public virtual DbSet<EmailConfig> EmailConfigs { get; set; }
        public virtual DbSet<BallbyBallSummary> BallbyBallSummaries { get; set; }
        public virtual DbSet<MarketRule> MarketRules { get; set; }
        public virtual DbSet<LiveTVChanel> LiveTVChanels { get; set; }
        public virtual DbSet<ResultPostSetting> ResultPostSettings { get; set; }
        public virtual DbSet<AmountReceiveable> AmountReceiveables { get; set; }
        public virtual DbSet<MarketCatalogueSelection> MarketCatalogueSelections { get; set; }
        public virtual DbSet<AdminAmount> AdminAmounts { get; set; }
        public virtual DbSet<UserAccount> UserAccounts { get; set; }
    
        public virtual ObjectResult<SP_AccessRigths_GetAccessRightsbyUserTypeID_Result> SP_AccessRigths_GetAccessRightsbyUserTypeID(Nullable<int> userTypeId)
        {
            var userTypeIdParameter = userTypeId.HasValue ?
                new ObjectParameter("UserTypeId", userTypeId) :
                new ObjectParameter("UserTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_AccessRigths_GetAccessRightsbyUserTypeID_Result>("SP_AccessRigths_GetAccessRightsbyUserTypeID", userTypeIdParameter);
        }
    
        public virtual int SP_ActivityLog_Insert(string activityName, Nullable<System.DateTime> activityTime, string iPAddress, string deviceinfo, string location, Nullable<int> userID)
        {
            var activityNameParameter = activityName != null ?
                new ObjectParameter("ActivityName", activityName) :
                new ObjectParameter("ActivityName", typeof(string));
    
            var activityTimeParameter = activityTime.HasValue ?
                new ObjectParameter("ActivityTime", activityTime) :
                new ObjectParameter("ActivityTime", typeof(System.DateTime));
    
            var iPAddressParameter = iPAddress != null ?
                new ObjectParameter("IPAddress", iPAddress) :
                new ObjectParameter("IPAddress", typeof(string));
    
            var deviceinfoParameter = deviceinfo != null ?
                new ObjectParameter("Deviceinfo", deviceinfo) :
                new ObjectParameter("Deviceinfo", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ActivityLog_Insert", activityNameParameter, activityTimeParameter, iPAddressParameter, deviceinfoParameter, locationParameter, userIDParameter);
        }
    
        public virtual ObjectResult<GetAccessRightsbyUserType_Result> GetAccessRightsbyUserType(Nullable<int> userTypeId)
        {
            var userTypeIdParameter = userTypeId.HasValue ?
                new ObjectParameter("UserTypeId", userTypeId) :
                new ObjectParameter("UserTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAccessRightsbyUserType_Result>("GetAccessRightsbyUserType", userTypeIdParameter);
        }
    
        public virtual ObjectResult<SP_Users_GetUserbyUsernameandPassword_Result1> GetUserbyUserName(string username, string password)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Users_GetUserbyUsernameandPassword_Result1>("GetUserbyUserName", usernameParameter, passwordParameter);
        }
    
        public virtual int SP_USers_AddCredit(Nullable<decimal> amount, Nullable<int> userID, Nullable<int> addedbyID, Nullable<System.DateTime> amountAddedTime, Nullable<decimal> amountRemoved)
        {
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var addedbyIDParameter = addedbyID.HasValue ?
                new ObjectParameter("AddedbyID", addedbyID) :
                new ObjectParameter("AddedbyID", typeof(int));
    
            var amountAddedTimeParameter = amountAddedTime.HasValue ?
                new ObjectParameter("AmountAddedTime", amountAddedTime) :
                new ObjectParameter("AmountAddedTime", typeof(System.DateTime));
    
            var amountRemovedParameter = amountRemoved.HasValue ?
                new ObjectParameter("AmountRemoved", amountRemoved) :
                new ObjectParameter("AmountRemoved", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_USers_AddCredit", amountParameter, userIDParameter, addedbyIDParameter, amountAddedTimeParameter, amountRemovedParameter);
        }
    
        public virtual ObjectResult<SP_Users_GetUSernamebyUsername_Result> SP_Users_GetUSernamebyUsername(string username)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Users_GetUSernamebyUsername_Result>("SP_Users_GetUSernamebyUsername", usernameParameter);
        }
    
        public virtual ObjectResult<SP_Users_Insert_Result> SP_Users_Insert(string name, string phonenumber, string emailAddress, string username, string password, string location, string accountBalance, Nullable<int> userTypeID, Nullable<int> createdbyID, Nullable<System.DateTime> createdDate, string rate, Nullable<decimal> betLowerLimit, Nullable<decimal> betUpperLimit, Nullable<bool> checkConditionsforPlacingBet, Nullable<decimal> betLowerLimitHorsePlace, Nullable<decimal> betUpperLimitHorsePlace, Nullable<decimal> betLowerLimitGrayHoundWin, Nullable<decimal> betUpperLimitGrayHoundWin, Nullable<decimal> betLowerLimitGrayHoundPlace, Nullable<decimal> betUpperLimitGrayHoundPlace, Nullable<decimal> betLowerLimitMatchOdds, Nullable<decimal> betUpperLimitMatchOdds, Nullable<decimal> betLowerLimitInningsRunns, Nullable<decimal> betUpperLimitInningsRunns, Nullable<decimal> betLowerLimitCompletedMatch, Nullable<decimal> betUpperLimitCompletedMatch, Nullable<int> commissionRate, Nullable<decimal> betUpperLimitMatchOddsSoccer, Nullable<decimal> betLowerLimitMatchOddsSoccer, Nullable<decimal> betUpperLimitMatchOddsTennis, Nullable<decimal> betLowerLimitMatchOddsTennis, Nullable<decimal> betUpperLimitTiedMatch, Nullable<decimal> betLowerLimitTiedMatch, Nullable<decimal> betUpperLimitWinner, Nullable<decimal> betLowerLimitWinner, Nullable<decimal> betUpperLimitFancy, Nullable<decimal> betLowerLimitFancy)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var phonenumberParameter = phonenumber != null ?
                new ObjectParameter("Phonenumber", phonenumber) :
                new ObjectParameter("Phonenumber", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var accountBalanceParameter = accountBalance != null ?
                new ObjectParameter("AccountBalance", accountBalance) :
                new ObjectParameter("AccountBalance", typeof(string));
    
            var userTypeIDParameter = userTypeID.HasValue ?
                new ObjectParameter("UserTypeID", userTypeID) :
                new ObjectParameter("UserTypeID", typeof(int));
    
            var createdbyIDParameter = createdbyID.HasValue ?
                new ObjectParameter("CreatedbyID", createdbyID) :
                new ObjectParameter("CreatedbyID", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var rateParameter = rate != null ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(string));
    
            var betLowerLimitParameter = betLowerLimit.HasValue ?
                new ObjectParameter("BetLowerLimit", betLowerLimit) :
                new ObjectParameter("BetLowerLimit", typeof(decimal));
    
            var betUpperLimitParameter = betUpperLimit.HasValue ?
                new ObjectParameter("BetUpperLimit", betUpperLimit) :
                new ObjectParameter("BetUpperLimit", typeof(decimal));
    
            var checkConditionsforPlacingBetParameter = checkConditionsforPlacingBet.HasValue ?
                new ObjectParameter("CheckConditionsforPlacingBet", checkConditionsforPlacingBet) :
                new ObjectParameter("CheckConditionsforPlacingBet", typeof(bool));
    
            var betLowerLimitHorsePlaceParameter = betLowerLimitHorsePlace.HasValue ?
                new ObjectParameter("BetLowerLimitHorsePlace", betLowerLimitHorsePlace) :
                new ObjectParameter("BetLowerLimitHorsePlace", typeof(decimal));
    
            var betUpperLimitHorsePlaceParameter = betUpperLimitHorsePlace.HasValue ?
                new ObjectParameter("BetUpperLimitHorsePlace", betUpperLimitHorsePlace) :
                new ObjectParameter("BetUpperLimitHorsePlace", typeof(decimal));
    
            var betLowerLimitGrayHoundWinParameter = betLowerLimitGrayHoundWin.HasValue ?
                new ObjectParameter("BetLowerLimitGrayHoundWin", betLowerLimitGrayHoundWin) :
                new ObjectParameter("BetLowerLimitGrayHoundWin", typeof(decimal));
    
            var betUpperLimitGrayHoundWinParameter = betUpperLimitGrayHoundWin.HasValue ?
                new ObjectParameter("BetUpperLimitGrayHoundWin", betUpperLimitGrayHoundWin) :
                new ObjectParameter("BetUpperLimitGrayHoundWin", typeof(decimal));
    
            var betLowerLimitGrayHoundPlaceParameter = betLowerLimitGrayHoundPlace.HasValue ?
                new ObjectParameter("BetLowerLimitGrayHoundPlace", betLowerLimitGrayHoundPlace) :
                new ObjectParameter("BetLowerLimitGrayHoundPlace", typeof(decimal));
    
            var betUpperLimitGrayHoundPlaceParameter = betUpperLimitGrayHoundPlace.HasValue ?
                new ObjectParameter("BetUpperLimitGrayHoundPlace", betUpperLimitGrayHoundPlace) :
                new ObjectParameter("BetUpperLimitGrayHoundPlace", typeof(decimal));
    
            var betLowerLimitMatchOddsParameter = betLowerLimitMatchOdds.HasValue ?
                new ObjectParameter("BetLowerLimitMatchOdds", betLowerLimitMatchOdds) :
                new ObjectParameter("BetLowerLimitMatchOdds", typeof(decimal));
    
            var betUpperLimitMatchOddsParameter = betUpperLimitMatchOdds.HasValue ?
                new ObjectParameter("BetUpperLimitMatchOdds", betUpperLimitMatchOdds) :
                new ObjectParameter("BetUpperLimitMatchOdds", typeof(decimal));
    
            var betLowerLimitInningsRunnsParameter = betLowerLimitInningsRunns.HasValue ?
                new ObjectParameter("BetLowerLimitInningsRunns", betLowerLimitInningsRunns) :
                new ObjectParameter("BetLowerLimitInningsRunns", typeof(decimal));
    
            var betUpperLimitInningsRunnsParameter = betUpperLimitInningsRunns.HasValue ?
                new ObjectParameter("BetUpperLimitInningsRunns", betUpperLimitInningsRunns) :
                new ObjectParameter("BetUpperLimitInningsRunns", typeof(decimal));
    
            var betLowerLimitCompletedMatchParameter = betLowerLimitCompletedMatch.HasValue ?
                new ObjectParameter("BetLowerLimitCompletedMatch", betLowerLimitCompletedMatch) :
                new ObjectParameter("BetLowerLimitCompletedMatch", typeof(decimal));
    
            var betUpperLimitCompletedMatchParameter = betUpperLimitCompletedMatch.HasValue ?
                new ObjectParameter("BetUpperLimitCompletedMatch", betUpperLimitCompletedMatch) :
                new ObjectParameter("BetUpperLimitCompletedMatch", typeof(decimal));
    
            var commissionRateParameter = commissionRate.HasValue ?
                new ObjectParameter("CommissionRate", commissionRate) :
                new ObjectParameter("CommissionRate", typeof(int));
    
            var betUpperLimitMatchOddsSoccerParameter = betUpperLimitMatchOddsSoccer.HasValue ?
                new ObjectParameter("BetUpperLimitMatchOddsSoccer", betUpperLimitMatchOddsSoccer) :
                new ObjectParameter("BetUpperLimitMatchOddsSoccer", typeof(decimal));
    
            var betLowerLimitMatchOddsSoccerParameter = betLowerLimitMatchOddsSoccer.HasValue ?
                new ObjectParameter("BetLowerLimitMatchOddsSoccer", betLowerLimitMatchOddsSoccer) :
                new ObjectParameter("BetLowerLimitMatchOddsSoccer", typeof(decimal));
    
            var betUpperLimitMatchOddsTennisParameter = betUpperLimitMatchOddsTennis.HasValue ?
                new ObjectParameter("BetUpperLimitMatchOddsTennis", betUpperLimitMatchOddsTennis) :
                new ObjectParameter("BetUpperLimitMatchOddsTennis", typeof(decimal));
    
            var betLowerLimitMatchOddsTennisParameter = betLowerLimitMatchOddsTennis.HasValue ?
                new ObjectParameter("BetLowerLimitMatchOddsTennis", betLowerLimitMatchOddsTennis) :
                new ObjectParameter("BetLowerLimitMatchOddsTennis", typeof(decimal));
    
            var betUpperLimitTiedMatchParameter = betUpperLimitTiedMatch.HasValue ?
                new ObjectParameter("BetUpperLimitTiedMatch", betUpperLimitTiedMatch) :
                new ObjectParameter("BetUpperLimitTiedMatch", typeof(decimal));
    
            var betLowerLimitTiedMatchParameter = betLowerLimitTiedMatch.HasValue ?
                new ObjectParameter("BetLowerLimitTiedMatch", betLowerLimitTiedMatch) :
                new ObjectParameter("BetLowerLimitTiedMatch", typeof(decimal));
    
            var betUpperLimitWinnerParameter = betUpperLimitWinner.HasValue ?
                new ObjectParameter("BetUpperLimitWinner", betUpperLimitWinner) :
                new ObjectParameter("BetUpperLimitWinner", typeof(decimal));
    
            var betLowerLimitWinnerParameter = betLowerLimitWinner.HasValue ?
                new ObjectParameter("BetLowerLimitWinner", betLowerLimitWinner) :
                new ObjectParameter("BetLowerLimitWinner", typeof(decimal));
    
            var betUpperLimitFancyParameter = betUpperLimitFancy.HasValue ?
                new ObjectParameter("BetUpperLimitFancy", betUpperLimitFancy) :
                new ObjectParameter("BetUpperLimitFancy", typeof(decimal));
    
            var betLowerLimitFancyParameter = betLowerLimitFancy.HasValue ?
                new ObjectParameter("BetLowerLimitFancy", betLowerLimitFancy) :
                new ObjectParameter("BetLowerLimitFancy", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Users_Insert_Result>("SP_Users_Insert", nameParameter, phonenumberParameter, emailAddressParameter, usernameParameter, passwordParameter, locationParameter, accountBalanceParameter, userTypeIDParameter, createdbyIDParameter, createdDateParameter, rateParameter, betLowerLimitParameter, betUpperLimitParameter, checkConditionsforPlacingBetParameter, betLowerLimitHorsePlaceParameter, betUpperLimitHorsePlaceParameter, betLowerLimitGrayHoundWinParameter, betUpperLimitGrayHoundWinParameter, betLowerLimitGrayHoundPlaceParameter, betUpperLimitGrayHoundPlaceParameter, betLowerLimitMatchOddsParameter, betUpperLimitMatchOddsParameter, betLowerLimitInningsRunnsParameter, betUpperLimitInningsRunnsParameter, betLowerLimitCompletedMatchParameter, betUpperLimitCompletedMatchParameter, commissionRateParameter, betUpperLimitMatchOddsSoccerParameter, betLowerLimitMatchOddsSoccerParameter, betUpperLimitMatchOddsTennisParameter, betLowerLimitMatchOddsTennisParameter, betUpperLimitTiedMatchParameter, betLowerLimitTiedMatchParameter, betUpperLimitWinnerParameter, betLowerLimitWinnerParameter, betUpperLimitFancyParameter, betLowerLimitFancyParameter);
        }
    
        public virtual ObjectResult<SP_Users_GetCurrentBalance_Result1> SP_Users_GetCurrentBalance(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Users_GetCurrentBalance_Result1>("SP_Users_GetCurrentBalance", userIDParameter);
        }
    
        public virtual int SP_Users_UpdateAccountBalancebyUserID(Nullable<int> userID, Nullable<decimal> accountBalance)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var accountBalanceParameter = accountBalance.HasValue ?
                new ObjectParameter("AccountBalance", accountBalance) :
                new ObjectParameter("AccountBalance", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Users_UpdateAccountBalancebyUserID", userIDParameter, accountBalanceParameter);
        }
    
        public virtual ObjectResult<SP_Users_GetAllUsersbyUserType_Result> SP_Users_GetAllUsersbyUserType(Nullable<int> userType, Nullable<int> createdbyID)
        {
            var userTypeParameter = userType.HasValue ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(int));
    
            var createdbyIDParameter = createdbyID.HasValue ?
                new ObjectParameter("CreatedbyID", createdbyID) :
                new ObjectParameter("CreatedbyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Users_GetAllUsersbyUserType_Result>("SP_Users_GetAllUsersbyUserType", userTypeParameter, createdbyIDParameter);
        }
    
        public virtual ObjectResult<SP_Users_GetDetailsofUserbyID_Result> SP_Users_GetDetailsofUserbyID(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Users_GetDetailsofUserbyID_Result>("SP_Users_GetDetailsofUserbyID", userIDParameter);
        }
    
        public virtual int SP_Users_Block(Nullable<int> userID, Nullable<bool> isBlocked)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var isBlockedParameter = isBlocked.HasValue ?
                new ObjectParameter("isBlocked", isBlocked) :
                new ObjectParameter("isBlocked", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Users_Block", userIDParameter, isBlockedParameter);
        }
    
        public virtual int SP_Users_Delete(Nullable<int> userID, Nullable<bool> isDeleted)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("isDeleted", isDeleted) :
                new ObjectParameter("isDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Users_Delete", userIDParameter, isDeletedParameter);
        }
    
        public virtual int SP_Users_ChangePasswordHistory_InsertResetPassword(Nullable<int> userID, string password, Nullable<int> updatedby, Nullable<System.DateTime> updatedTime)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var updatedbyParameter = updatedby.HasValue ?
                new ObjectParameter("Updatedby", updatedby) :
                new ObjectParameter("Updatedby", typeof(int));
    
            var updatedTimeParameter = updatedTime.HasValue ?
                new ObjectParameter("UpdatedTime", updatedTime) :
                new ObjectParameter("UpdatedTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Users_ChangePasswordHistory_InsertResetPassword", userIDParameter, passwordParameter, updatedbyParameter, updatedTimeParameter);
        }
    
        public virtual int SP_Users_ResetPassword(Nullable<int> userID, string password, Nullable<int> updatedby, Nullable<System.DateTime> updatedTime)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var updatedbyParameter = updatedby.HasValue ?
                new ObjectParameter("Updatedby", updatedby) :
                new ObjectParameter("Updatedby", typeof(int));
    
            var updatedTimeParameter = updatedTime.HasValue ?
                new ObjectParameter("UpdatedTime", updatedTime) :
                new ObjectParameter("UpdatedTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Users_ResetPassword", userIDParameter, passwordParameter, updatedbyParameter, updatedTimeParameter);
        }
    
        public virtual int SP_UserMarket_DeletebyUserID(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UserMarket_DeletebyUserID", userIDParameter);
        }
    
        public virtual ObjectResult<SP_UserMarket_GetCompetitionIDs_Result> SP_UserMarket_GetCompetitionIDs(Nullable<int> userID, string eventTypeID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var eventTypeIDParameter = eventTypeID != null ?
                new ObjectParameter("EventTypeID", eventTypeID) :
                new ObjectParameter("EventTypeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserMarket_GetCompetitionIDs_Result>("SP_UserMarket_GetCompetitionIDs", userIDParameter, eventTypeIDParameter);
        }
    
        public virtual ObjectResult<SP_UserMarket_GetEventIDs_Result> SP_UserMarket_GetEventIDs(Nullable<int> userID, string competitionID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var competitionIDParameter = competitionID != null ?
                new ObjectParameter("CompetitionID", competitionID) :
                new ObjectParameter("CompetitionID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserMarket_GetEventIDs_Result>("SP_UserMarket_GetEventIDs", userIDParameter, competitionIDParameter);
        }
    
        public virtual ObjectResult<SP_UserMarket_GetEventypeIDs_Result> SP_UserMarket_GetEventypeIDs(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserMarket_GetEventypeIDs_Result>("SP_UserMarket_GetEventypeIDs", userIDParameter);
        }
    
        public virtual ObjectResult<SP_UserMarket_GetMarketCatalogueIDs_Result> SP_UserMarket_GetMarketCatalogueIDs(Nullable<int> userID, string eventID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var eventIDParameter = eventID != null ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserMarket_GetMarketCatalogueIDs_Result>("SP_UserMarket_GetMarketCatalogueIDs", userIDParameter, eventIDParameter);
        }
    
        public virtual int SP_UserMarket_Insert(Nullable<int> userID, string eventTypeID, string competitonID, string eventID, string marketCatalogue, Nullable<int> updatedbyID, string eventTypeName, string competitionName, string eventName, string marketCatalogueName, Nullable<System.DateTime> eventOpenDate, string sheetName, string associateEventID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var eventTypeIDParameter = eventTypeID != null ?
                new ObjectParameter("EventTypeID", eventTypeID) :
                new ObjectParameter("EventTypeID", typeof(string));
    
            var competitonIDParameter = competitonID != null ?
                new ObjectParameter("CompetitonID", competitonID) :
                new ObjectParameter("CompetitonID", typeof(string));
    
            var eventIDParameter = eventID != null ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(string));
    
            var marketCatalogueParameter = marketCatalogue != null ?
                new ObjectParameter("MarketCatalogue", marketCatalogue) :
                new ObjectParameter("MarketCatalogue", typeof(string));
    
            var updatedbyIDParameter = updatedbyID.HasValue ?
                new ObjectParameter("UpdatedbyID", updatedbyID) :
                new ObjectParameter("UpdatedbyID", typeof(int));
    
            var eventTypeNameParameter = eventTypeName != null ?
                new ObjectParameter("EventTypeName", eventTypeName) :
                new ObjectParameter("EventTypeName", typeof(string));
    
            var competitionNameParameter = competitionName != null ?
                new ObjectParameter("CompetitionName", competitionName) :
                new ObjectParameter("CompetitionName", typeof(string));
    
            var eventNameParameter = eventName != null ?
                new ObjectParameter("EventName", eventName) :
                new ObjectParameter("EventName", typeof(string));
    
            var marketCatalogueNameParameter = marketCatalogueName != null ?
                new ObjectParameter("MarketCatalogueName", marketCatalogueName) :
                new ObjectParameter("MarketCatalogueName", typeof(string));
    
            var eventOpenDateParameter = eventOpenDate.HasValue ?
                new ObjectParameter("EventOpenDate", eventOpenDate) :
                new ObjectParameter("EventOpenDate", typeof(System.DateTime));
    
            var sheetNameParameter = sheetName != null ?
                new ObjectParameter("SheetName", sheetName) :
                new ObjectParameter("SheetName", typeof(string));
    
            var associateEventIDParameter = associateEventID != null ?
                new ObjectParameter("AssociateEventID", associateEventID) :
                new ObjectParameter("AssociateEventID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UserMarket_Insert", userIDParameter, eventTypeIDParameter, competitonIDParameter, eventIDParameter, marketCatalogueParameter, updatedbyIDParameter, eventTypeNameParameter, competitionNameParameter, eventNameParameter, marketCatalogueNameParameter, eventOpenDateParameter, sheetNameParameter, associateEventIDParameter);
        }
    
        public virtual ObjectResult<SP_UserMarket_GetUserMarketbyUserID_Result> SP_UserMarket_GetUserMarketbyUserID(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserMarket_GetUserMarketbyUserID_Result>("SP_UserMarket_GetUserMarketbyUserID", userIDParameter);
        }
    
        public virtual ObjectResult<SP_UserMarket_GetMarketAssignedtoUser_Result> SP_UserMarket_GetMarketAssignedtoUser(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserMarket_GetMarketAssignedtoUser_Result>("SP_UserMarket_GetMarketAssignedtoUser", userIDParameter);
        }
    
        public virtual ObjectResult<SP_APIConfig_GetData_Result> SP_APIConfig_GetData(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_APIConfig_GetData_Result>("SP_APIConfig_GetData", iDParameter);
        }
    
        public virtual int SP_APIConfig_UpdateSession(string sessionKey, Nullable<int> iD)
        {
            var sessionKeyParameter = sessionKey != null ?
                new ObjectParameter("SessionKey", sessionKey) :
                new ObjectParameter("SessionKey", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_APIConfig_UpdateSession", sessionKeyParameter, iDParameter);
        }
    
        public virtual ObjectResult<SP_Users_GetUserbyCreatedbyID_Result> SP_Users_GetUserbyCreatedbyID(Nullable<int> createdByID)
        {
            var createdByIDParameter = createdByID.HasValue ?
                new ObjectParameter("CreatedByID", createdByID) :
                new ObjectParameter("CreatedByID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Users_GetUserbyCreatedbyID_Result>("SP_Users_GetUserbyCreatedbyID", createdByIDParameter);
        }
    
        public virtual int SP_FavoriteCompetitions_Delete(string competitionID, Nullable<int> userID)
        {
            var competitionIDParameter = competitionID != null ?
                new ObjectParameter("CompetitionID", competitionID) :
                new ObjectParameter("CompetitionID", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_FavoriteCompetitions_Delete", competitionIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<SP_FavoriteCompetitions_GetdatabyUserID_Result> SP_FavoriteCompetitions_GetdatabyUserID(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_FavoriteCompetitions_GetdatabyUserID_Result>("SP_FavoriteCompetitions_GetdatabyUserID", userIDParameter);
        }
    
        public virtual int SP_FavoriteCompetitions_Insert(string competitionID, Nullable<int> userID)
        {
            var competitionIDParameter = competitionID != null ?
                new ObjectParameter("CompetitionID", competitionID) :
                new ObjectParameter("CompetitionID", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_FavoriteCompetitions_Insert", competitionIDParameter, userIDParameter);
        }
    
        public virtual int SP_FavoriteEvents_Delete(string eventID, Nullable<int> userID)
        {
            var eventIDParameter = eventID != null ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_FavoriteEvents_Delete", eventIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<SP_FavoriteEvents_GetdatabyUserID_Result> SP_FavoriteEvents_GetdatabyUserID(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_FavoriteEvents_GetdatabyUserID_Result>("SP_FavoriteEvents_GetdatabyUserID", userIDParameter);
        }
    
        public virtual int SP_FavoriteEvents_Insert(string eventID, Nullable<int> userID)
        {
            var eventIDParameter = eventID != null ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_FavoriteEvents_Insert", eventIDParameter, userIDParameter);
        }
    
        public virtual int SP_FavoriteEventType_Delete(string eventTypeID, Nullable<int> userID)
        {
            var eventTypeIDParameter = eventTypeID != null ?
                new ObjectParameter("EventTypeID", eventTypeID) :
                new ObjectParameter("EventTypeID", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_FavoriteEventType_Delete", eventTypeIDParameter, userIDParameter);
        }
    
        public virtual int SP_FavoriteEventType_Insert(string eventTypeID, Nullable<int> userID)
        {
            var eventTypeIDParameter = eventTypeID != null ?
                new ObjectParameter("EventTypeID", eventTypeID) :
                new ObjectParameter("EventTypeID", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_FavoriteEventType_Insert", eventTypeIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<SP_FavoriteEventTypes_GetdatabyUserID_Result> SP_FavoriteEventTypes_GetdatabyUserID(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_FavoriteEventTypes_GetdatabyUserID_Result>("SP_FavoriteEventTypes_GetdatabyUserID", userIDParameter);
        }
    
        public virtual int SP_FavoriteMarket_Insert(Nullable<long> marketID, Nullable<int> userID, string marketName, Nullable<int> level)
        {
            var marketIDParameter = marketID.HasValue ?
                new ObjectParameter("MarketID", marketID) :
                new ObjectParameter("MarketID", typeof(long));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var marketNameParameter = marketName != null ?
                new ObjectParameter("MarketName", marketName) :
                new ObjectParameter("MarketName", typeof(string));
    
            var levelParameter = level.HasValue ?
                new ObjectParameter("Level", level) :
                new ObjectParameter("Level", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_FavoriteMarket_Insert", marketIDParameter, userIDParameter, marketNameParameter, levelParameter);
        }
    
        public virtual ObjectResult<SP_APIConfig_GetPoundRate_Result> SP_APIConfig_GetPoundRate()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_APIConfig_GetPoundRate_Result>("SP_APIConfig_GetPoundRate");
        }
    
        public virtual int SP_APIConfig_UpdatePoundRate(string poundRate)
        {
            var poundRateParameter = poundRate != null ?
                new ObjectParameter("PoundRate", poundRate) :
                new ObjectParameter("PoundRate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_APIConfig_UpdatePoundRate", poundRateParameter);
        }
    
        public virtual ObjectResult<SP_UserBets_GetDatabyUserID_Result> SP_UserBets_GetDatabyUserID(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserBets_GetDatabyUserID_Result>("SP_UserBets_GetDatabyUserID", userIDParameter);
        }
    
        public virtual ObjectResult<SP_UserBets_GetDatabyUserIDandSelectionID_Result> SP_UserBets_GetDatabyUserIDandSelectionID(Nullable<int> userID, Nullable<long> selectionID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var selectionIDParameter = selectionID.HasValue ?
                new ObjectParameter("SelectionID", selectionID) :
                new ObjectParameter("SelectionID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserBets_GetDatabyUserIDandSelectionID_Result>("SP_UserBets_GetDatabyUserIDandSelectionID", userIDParameter, selectionIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> SP_UserBets_Insert(Nullable<int> userID, string selectionID, string userOdd, string amount, string betType, string liveOdd, Nullable<bool> isMatched, string status, string marketBookID, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> updateDate, string selectionname, string marketbookName, string agentRate, string liablity, string betSize, Nullable<decimal> pendingAmount, string location, Nullable<long> parentID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var selectionIDParameter = selectionID != null ?
                new ObjectParameter("SelectionID", selectionID) :
                new ObjectParameter("SelectionID", typeof(string));
    
            var userOddParameter = userOdd != null ?
                new ObjectParameter("UserOdd", userOdd) :
                new ObjectParameter("UserOdd", typeof(string));
    
            var amountParameter = amount != null ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(string));
    
            var betTypeParameter = betType != null ?
                new ObjectParameter("BetType", betType) :
                new ObjectParameter("BetType", typeof(string));
    
            var liveOddParameter = liveOdd != null ?
                new ObjectParameter("LiveOdd", liveOdd) :
                new ObjectParameter("LiveOdd", typeof(string));
    
            var isMatchedParameter = isMatched.HasValue ?
                new ObjectParameter("isMatched", isMatched) :
                new ObjectParameter("isMatched", typeof(bool));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var marketBookIDParameter = marketBookID != null ?
                new ObjectParameter("MarketBookID", marketBookID) :
                new ObjectParameter("MarketBookID", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var selectionnameParameter = selectionname != null ?
                new ObjectParameter("Selectionname", selectionname) :
                new ObjectParameter("Selectionname", typeof(string));
    
            var marketbookNameParameter = marketbookName != null ?
                new ObjectParameter("MarketbookName", marketbookName) :
                new ObjectParameter("MarketbookName", typeof(string));
    
            var agentRateParameter = agentRate != null ?
                new ObjectParameter("AgentRate", agentRate) :
                new ObjectParameter("AgentRate", typeof(string));
    
            var liablityParameter = liablity != null ?
                new ObjectParameter("Liablity", liablity) :
                new ObjectParameter("Liablity", typeof(string));
    
            var betSizeParameter = betSize != null ?
                new ObjectParameter("BetSize", betSize) :
                new ObjectParameter("BetSize", typeof(string));
    
            var pendingAmountParameter = pendingAmount.HasValue ?
                new ObjectParameter("PendingAmount", pendingAmount) :
                new ObjectParameter("PendingAmount", typeof(decimal));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("SP_UserBets_Insert", userIDParameter, selectionIDParameter, userOddParameter, amountParameter, betTypeParameter, liveOddParameter, isMatchedParameter, statusParameter, marketBookIDParameter, createdDateParameter, updateDateParameter, selectionnameParameter, marketbookNameParameter, agentRateParameter, liablityParameter, betSizeParameter, pendingAmountParameter, locationParameter, parentIDParameter);
        }
    
        public virtual int SP_UserBets_Update(Nullable<long> iD, string userOdd, string amount, string liveOdd, Nullable<bool> isMatched, Nullable<System.DateTime> updateDate, string agentRate, string liablity, string betSize, Nullable<decimal> pendingAmount)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var userOddParameter = userOdd != null ?
                new ObjectParameter("UserOdd", userOdd) :
                new ObjectParameter("UserOdd", typeof(string));
    
            var amountParameter = amount != null ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(string));
    
            var liveOddParameter = liveOdd != null ?
                new ObjectParameter("LiveOdd", liveOdd) :
                new ObjectParameter("LiveOdd", typeof(string));
    
            var isMatchedParameter = isMatched.HasValue ?
                new ObjectParameter("isMatched", isMatched) :
                new ObjectParameter("isMatched", typeof(bool));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var agentRateParameter = agentRate != null ?
                new ObjectParameter("AgentRate", agentRate) :
                new ObjectParameter("AgentRate", typeof(string));
    
            var liablityParameter = liablity != null ?
                new ObjectParameter("Liablity", liablity) :
                new ObjectParameter("Liablity", typeof(string));
    
            var betSizeParameter = betSize != null ?
                new ObjectParameter("BetSize", betSize) :
                new ObjectParameter("BetSize", typeof(string));
    
            var pendingAmountParameter = pendingAmount.HasValue ?
                new ObjectParameter("PendingAmount", pendingAmount) :
                new ObjectParameter("PendingAmount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UserBets_Update", iDParameter, userOddParameter, amountParameter, liveOddParameter, isMatchedParameter, updateDateParameter, agentRateParameter, liablityParameter, betSizeParameter, pendingAmountParameter);
        }
    
        public virtual int SP_UserBets_UpdateisMatched(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UserBets_UpdateisMatched", iDParameter);
        }
    
        public virtual ObjectResult<SP_UserBets_GetCurrentLiabality_Result> SP_UserBets_GetCurrentLiabality(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserBets_GetCurrentLiabality_Result>("SP_UserBets_GetCurrentLiabality", userIDParameter);
        }
    
        public virtual int SP_CommisionAccounts_Insert(string accountsTitle, string amount, Nullable<long> userAccountsID, Nullable<System.DateTime> createDate)
        {
            var accountsTitleParameter = accountsTitle != null ?
                new ObjectParameter("AccountsTitle", accountsTitle) :
                new ObjectParameter("AccountsTitle", typeof(string));
    
            var amountParameter = amount != null ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(string));
    
            var userAccountsIDParameter = userAccountsID.HasValue ?
                new ObjectParameter("UserAccountsID", userAccountsID) :
                new ObjectParameter("UserAccountsID", typeof(long));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_CommisionAccounts_Insert", accountsTitleParameter, amountParameter, userAccountsIDParameter, createDateParameter);
        }
    
        public virtual ObjectResult<SP_APIConfig_GetCommisionRate_Result> SP_APIConfig_GetCommisionRate()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_APIConfig_GetCommisionRate_Result>("SP_APIConfig_GetCommisionRate");
        }
    
        public virtual ObjectResult<SP_Users_GetAgentRate_Result> SP_Users_GetAgentRate(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Users_GetAgentRate_Result>("SP_Users_GetAgentRate", userIDParameter);
        }
    
        public virtual ObjectResult<SP_UserBets_GetUnCompleteMarketIDandUserID_Result> SP_UserBets_GetUnCompleteMarketIDandUserID()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserBets_GetUnCompleteMarketIDandUserID_Result>("SP_UserBets_GetUnCompleteMarketIDandUserID");
        }
    
        public virtual ObjectResult<SP_Userbets_GetUserIDsbyMarketID_Result> SP_Userbets_GetUserIDsbyMarketID(string marketBookID)
        {
            var marketBookIDParameter = marketBookID != null ?
                new ObjectParameter("MarketBookID", marketBookID) :
                new ObjectParameter("MarketBookID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Userbets_GetUserIDsbyMarketID_Result>("SP_Userbets_GetUserIDsbyMarketID", marketBookIDParameter);
        }
    
        public virtual ObjectResult<SP_Users_GetCreatedbyIDbyUserID_Result> SP_Users_GetCreatedbyIDbyUserID(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Users_GetCreatedbyIDbyUserID_Result>("SP_Users_GetCreatedbyIDbyUserID", userIDParameter);
        }
    
        public virtual int SP_UserBets_UpdateStatus(string marketBookID, Nullable<int> userID)
        {
            var marketBookIDParameter = marketBookID != null ?
                new ObjectParameter("MarketBookID", marketBookID) :
                new ObjectParameter("MarketBookID", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UserBets_UpdateStatus", marketBookIDParameter, userIDParameter);
        }
    
        public virtual int SP_Users_UpdateAgentRate(Nullable<int> userID, string ratePercent)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var ratePercentParameter = ratePercent != null ?
                new ObjectParameter("RatePercent", ratePercent) :
                new ObjectParameter("RatePercent", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Users_UpdateAgentRate", userIDParameter, ratePercentParameter);
        }
    
        public virtual int SP_UserBets_UpdateStatustoCompletebyID(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UserBets_UpdateStatustoCompletebyID", iDParameter);
        }
    
        public virtual ObjectResult<SP_UserMarket_GetMarketCatalogueIDsOpendByUser_Result> SP_UserMarket_GetMarketCatalogueIDsOpendByUser(Nullable<int> userID, string marketCatalogueID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var marketCatalogueIDParameter = marketCatalogueID != null ?
                new ObjectParameter("MarketCatalogueID", marketCatalogueID) :
                new ObjectParameter("MarketCatalogueID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserMarket_GetMarketCatalogueIDsOpendByUser_Result>("SP_UserMarket_GetMarketCatalogueIDsOpendByUser", userIDParameter, marketCatalogueIDParameter);
        }
    
        public virtual int SP_UserMarket_SetMarketCatalogueIDClosedByUser(Nullable<int> userID, string marketCatalogueID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var marketCatalogueIDParameter = marketCatalogueID != null ?
                new ObjectParameter("MarketCatalogueID", marketCatalogueID) :
                new ObjectParameter("MarketCatalogueID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UserMarket_SetMarketCatalogueIDClosedByUser", userIDParameter, marketCatalogueIDParameter);
        }
    
        public virtual int SP_UserMarket_SetMarketCatalogueIDOpendByUser(Nullable<int> userID, string marketCatalogueID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var marketCatalogueIDParameter = marketCatalogueID != null ?
                new ObjectParameter("MarketCatalogueID", marketCatalogueID) :
                new ObjectParameter("MarketCatalogueID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UserMarket_SetMarketCatalogueIDOpendByUser", userIDParameter, marketCatalogueIDParameter);
        }
    
        public virtual int SP_MarketCatalogueSelections_Delete(string marketCatalogueID)
        {
            var marketCatalogueIDParameter = marketCatalogueID != null ?
                new ObjectParameter("MarketCatalogueID", marketCatalogueID) :
                new ObjectParameter("MarketCatalogueID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_MarketCatalogueSelections_Delete", marketCatalogueIDParameter);
        }
    
        public virtual ObjectResult<SP_MarketCatalogueSelections_Get_Result> SP_MarketCatalogueSelections_Get(string marketCatalogueID)
        {
            var marketCatalogueIDParameter = marketCatalogueID != null ?
                new ObjectParameter("MarketCatalogueID", marketCatalogueID) :
                new ObjectParameter("MarketCatalogueID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_MarketCatalogueSelections_Get_Result>("SP_MarketCatalogueSelections_Get", marketCatalogueIDParameter);
        }
    
        public virtual int SP_MarketCatalogueSelections_Insert(string marketCatalogueID, string selectionID, string selectionName, string jockeyName, string wearing, string wearingDesc, string clothnumber, string stallDraw)
        {
            var marketCatalogueIDParameter = marketCatalogueID != null ?
                new ObjectParameter("MarketCatalogueID", marketCatalogueID) :
                new ObjectParameter("MarketCatalogueID", typeof(string));
    
            var selectionIDParameter = selectionID != null ?
                new ObjectParameter("SelectionID", selectionID) :
                new ObjectParameter("SelectionID", typeof(string));
    
            var selectionNameParameter = selectionName != null ?
                new ObjectParameter("SelectionName", selectionName) :
                new ObjectParameter("SelectionName", typeof(string));
    
            var jockeyNameParameter = jockeyName != null ?
                new ObjectParameter("JockeyName", jockeyName) :
                new ObjectParameter("JockeyName", typeof(string));
    
            var wearingParameter = wearing != null ?
                new ObjectParameter("Wearing", wearing) :
                new ObjectParameter("Wearing", typeof(string));
    
            var wearingDescParameter = wearingDesc != null ?
                new ObjectParameter("WearingDesc", wearingDesc) :
                new ObjectParameter("WearingDesc", typeof(string));
    
            var clothnumberParameter = clothnumber != null ?
                new ObjectParameter("Clothnumber", clothnumber) :
                new ObjectParameter("Clothnumber", typeof(string));
    
            var stallDrawParameter = stallDraw != null ?
                new ObjectParameter("StallDraw", stallDraw) :
                new ObjectParameter("StallDraw", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_MarketCatalogueSelections_Insert", marketCatalogueIDParameter, selectionIDParameter, selectionNameParameter, jockeyNameParameter, wearingParameter, wearingDescParameter, clothnumberParameter, stallDrawParameter);
        }
    
        public virtual ObjectResult<SP_UserAccounts_GetDatabyUserIDandDateRange_Result> SP_UserAccounts_GetDatabyUserIDandDateRange(Nullable<int> userID, string from, string to, Nullable<bool> isCreditAmount)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var fromParameter = from != null ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(string));
    
            var toParameter = to != null ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(string));
    
            var isCreditAmountParameter = isCreditAmount.HasValue ?
                new ObjectParameter("isCreditAmount", isCreditAmount) :
                new ObjectParameter("isCreditAmount", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserAccounts_GetDatabyUserIDandDateRange_Result>("SP_UserAccounts_GetDatabyUserIDandDateRange", userIDParameter, fromParameter, toParameter, isCreditAmountParameter);
        }
    
        public virtual int SP_UserBets_UpdateuserBetbyID(Nullable<long> iD, Nullable<decimal> amount, Nullable<bool> isMatched, Nullable<System.DateTime> updateDate)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var isMatchedParameter = isMatched.HasValue ?
                new ObjectParameter("isMatched", isMatched) :
                new ObjectParameter("isMatched", typeof(bool));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UserBets_UpdateuserBetbyID", iDParameter, amountParameter, isMatchedParameter, updateDateParameter);
        }
    
        public virtual ObjectResult<SP_UserBets_GetInPlayMatchesbyUserID_Result> SP_UserBets_GetInPlayMatchesbyUserID(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserBets_GetInPlayMatchesbyUserID_Result>("SP_UserBets_GetInPlayMatchesbyUserID", userIDParameter);
        }
    
        public virtual int SP_UserBets_UpdateuserBetbyParentID(Nullable<long> iD, Nullable<decimal> amount, string userodd, Nullable<System.DateTime> updateDate)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var useroddParameter = userodd != null ?
                new ObjectParameter("userodd", userodd) :
                new ObjectParameter("userodd", typeof(string));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UserBets_UpdateuserBetbyParentID", iDParameter, amountParameter, useroddParameter, updateDateParameter);
        }
    
        public virtual ObjectResult<SP_UserBets_GetDatabyAgentID_Result> SP_UserBets_GetDatabyAgentID(Nullable<int> agentID)
        {
            var agentIDParameter = agentID.HasValue ?
                new ObjectParameter("AgentID", agentID) :
                new ObjectParameter("AgentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserBets_GetDatabyAgentID_Result>("SP_UserBets_GetDatabyAgentID", agentIDParameter);
        }
    
        public virtual ObjectResult<SP_UserBets_GetDatabyUserIDbyAgentID_Result> SP_UserBets_GetDatabyUserIDbyAgentID(Nullable<int> agentID)
        {
            var agentIDParameter = agentID.HasValue ?
                new ObjectParameter("AgentID", agentID) :
                new ObjectParameter("AgentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserBets_GetDatabyUserIDbyAgentID_Result>("SP_UserBets_GetDatabyUserIDbyAgentID", agentIDParameter);
        }
    
        public virtual ObjectResult<SP_UserMarket_GetMarketCatalogueIDsOpendByUsersofAgent_Result> SP_UserMarket_GetMarketCatalogueIDsOpendByUsersofAgent(Nullable<int> agentID)
        {
            var agentIDParameter = agentID.HasValue ?
                new ObjectParameter("AgentID", agentID) :
                new ObjectParameter("AgentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserMarket_GetMarketCatalogueIDsOpendByUsersofAgent_Result>("SP_UserMarket_GetMarketCatalogueIDsOpendByUsersofAgent", agentIDParameter);
        }
    
        public virtual int SP_Users_SetLoggedInStatus(Nullable<int> userID, Nullable<bool> loggedIn)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var loggedInParameter = loggedIn.HasValue ?
                new ObjectParameter("LoggedIn", loggedIn) :
                new ObjectParameter("LoggedIn", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Users_SetLoggedInStatus", userIDParameter, loggedInParameter);
        }
    
        public virtual ObjectResult<SP_UserBets_GetCompletedMatchedBetsbyUserID_Result> SP_UserBets_GetCompletedMatchedBetsbyUserID(Nullable<int> userID, string marketbookID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var marketbookIDParameter = marketbookID != null ?
                new ObjectParameter("MarketbookID", marketbookID) :
                new ObjectParameter("MarketbookID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserBets_GetCompletedMatchedBetsbyUserID_Result>("SP_UserBets_GetCompletedMatchedBetsbyUserID", userIDParameter, marketbookIDParameter);
        }
    
        public virtual ObjectResult<SP_UserMarket_GetMarketCatalogueIDsOpendByUsersforAdmin_Result> SP_UserMarket_GetMarketCatalogueIDsOpendByUsersforAdmin()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserMarket_GetMarketCatalogueIDsOpendByUsersforAdmin_Result>("SP_UserMarket_GetMarketCatalogueIDsOpendByUsersforAdmin");
        }
    
        public virtual ObjectResult<SP_UsersMarket_GetAllDatabyUserID_Result> SP_UsersMarket_GetAllDatabyUserID(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UsersMarket_GetAllDatabyUserID_Result>("SP_UsersMarket_GetAllDatabyUserID", userIDParameter);
        }
    
        public virtual ObjectResult<SP_Users_GetBlockStatus_Result> SP_Users_GetBlockStatus(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Users_GetBlockStatus_Result>("SP_Users_GetBlockStatus", userIDParameter);
        }
    
        public virtual ObjectResult<SP_Users_GetLastLoginTimes_Result> SP_Users_GetLastLoginTimes(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Users_GetLastLoginTimes_Result>("SP_Users_GetLastLoginTimes", userIDParameter);
        }
    
        public virtual ObjectResult<SP_UserMarket_GetEventNamebyMarketID_Result> SP_UserMarket_GetEventNamebyMarketID(string marketbookID)
        {
            var marketbookIDParameter = marketbookID != null ?
                new ObjectParameter("MarketbookID", marketbookID) :
                new ObjectParameter("MarketbookID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserMarket_GetEventNamebyMarketID_Result>("SP_UserMarket_GetEventNamebyMarketID", marketbookIDParameter);
        }
    
        public virtual int SP_UserBets_UpdateBetSizebyID(Nullable<long> iD, string betSize)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var betSizeParameter = betSize != null ?
                new ObjectParameter("BetSize", betSize) :
                new ObjectParameter("BetSize", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UserBets_UpdateBetSizebyID", iDParameter, betSizeParameter);
        }
    
        public virtual ObjectResult<SP_UserMarket_GetSportsIDbyMarketID_Result> SP_UserMarket_GetSportsIDbyMarketID(string marektID)
        {
            var marektIDParameter = marektID != null ?
                new ObjectParameter("MarektID", marektID) :
                new ObjectParameter("MarektID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserMarket_GetSportsIDbyMarketID_Result>("SP_UserMarket_GetSportsIDbyMarketID", marektIDParameter);
        }
    
        public virtual ObjectResult<SP_UserBets_GetUnCompleteMarketIDbyMarketID_Result> SP_UserBets_GetUnCompleteMarketIDbyMarketID(string marketBookID)
        {
            var marketBookIDParameter = marketBookID != null ?
                new ObjectParameter("MarketBookID", marketBookID) :
                new ObjectParameter("MarketBookID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserBets_GetUnCompleteMarketIDbyMarketID_Result>("SP_UserBets_GetUnCompleteMarketIDbyMarketID", marketBookIDParameter);
        }
    
        public virtual ObjectResult<SP_UserBets_GetUnMatchedBets_Result> SP_UserBets_GetUnMatchedBets()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserBets_GetUnMatchedBets_Result>("SP_UserBets_GetUnMatchedBets");
        }
    
        public virtual ObjectResult<string> SP_UserBets_GetSheetNamebyMarketID(string marketbookID)
        {
            var marketbookIDParameter = marketbookID != null ?
                new ObjectParameter("MarketbookID", marketbookID) :
                new ObjectParameter("MarketbookID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_UserBets_GetSheetNamebyMarketID", marketbookIDParameter);
        }
    
        public virtual int SP_UserMarket_SetMarketCatalogueIDClosed(string marketCatalogueID)
        {
            var marketCatalogueIDParameter = marketCatalogueID != null ?
                new ObjectParameter("MarketCatalogueID", marketCatalogueID) :
                new ObjectParameter("MarketCatalogueID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UserMarket_SetMarketCatalogueIDClosed", marketCatalogueIDParameter);
        }
    
        public virtual int SP_Users_UpdateBetLowerLimit(Nullable<int> userID, Nullable<decimal> betLowerLimit, Nullable<decimal> betUpperLimit, Nullable<bool> isAllowedGrayHound, Nullable<bool> isAllowedHorseRacing, Nullable<decimal> betLowerLimitHorsePlace, Nullable<decimal> betUpperLimitHorsePlace, Nullable<decimal> betLowerLimitGrayHoundWin, Nullable<decimal> betUpperLimitGrayHoundWin, Nullable<decimal> betLowerLimitGrayHoundPlace, Nullable<decimal> betUpperLimitGrayHoundPlace, Nullable<decimal> betLowerLimitMatchOdds, Nullable<decimal> betUpperLimitMatchOdds, Nullable<decimal> betLowerLimitInningsRunns, Nullable<decimal> betUpperLimitInningsRunns, Nullable<decimal> betLowerLimitCompletedMatch, Nullable<decimal> betUpperLimitCompletedMatch, Nullable<bool> isTenisAllowed, Nullable<bool> isSoccerAllowed, Nullable<int> commissionRate, Nullable<decimal> betUpperLimitMatchOddsSoccer, Nullable<decimal> betLowerLimitMatchOddsSoccer, Nullable<decimal> betUpperLimitMatchOddsTennis, Nullable<decimal> betLowerLimitMatchOddsTennis, Nullable<decimal> betUpperLimitTiedMatch, Nullable<decimal> betLowerLimitTiedMatch, Nullable<decimal> betUpperLimitWinner, Nullable<decimal> betLowerLimitWinner, Nullable<decimal> betUpperLimitFancy, Nullable<decimal> betLowerLimitFancy)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var betLowerLimitParameter = betLowerLimit.HasValue ?
                new ObjectParameter("BetLowerLimit", betLowerLimit) :
                new ObjectParameter("BetLowerLimit", typeof(decimal));
    
            var betUpperLimitParameter = betUpperLimit.HasValue ?
                new ObjectParameter("BetUpperLimit", betUpperLimit) :
                new ObjectParameter("BetUpperLimit", typeof(decimal));
    
            var isAllowedGrayHoundParameter = isAllowedGrayHound.HasValue ?
                new ObjectParameter("isAllowedGrayHound", isAllowedGrayHound) :
                new ObjectParameter("isAllowedGrayHound", typeof(bool));
    
            var isAllowedHorseRacingParameter = isAllowedHorseRacing.HasValue ?
                new ObjectParameter("isAllowedHorseRacing", isAllowedHorseRacing) :
                new ObjectParameter("isAllowedHorseRacing", typeof(bool));
    
            var betLowerLimitHorsePlaceParameter = betLowerLimitHorsePlace.HasValue ?
                new ObjectParameter("BetLowerLimitHorsePlace", betLowerLimitHorsePlace) :
                new ObjectParameter("BetLowerLimitHorsePlace", typeof(decimal));
    
            var betUpperLimitHorsePlaceParameter = betUpperLimitHorsePlace.HasValue ?
                new ObjectParameter("BetUpperLimitHorsePlace", betUpperLimitHorsePlace) :
                new ObjectParameter("BetUpperLimitHorsePlace", typeof(decimal));
    
            var betLowerLimitGrayHoundWinParameter = betLowerLimitGrayHoundWin.HasValue ?
                new ObjectParameter("BetLowerLimitGrayHoundWin", betLowerLimitGrayHoundWin) :
                new ObjectParameter("BetLowerLimitGrayHoundWin", typeof(decimal));
    
            var betUpperLimitGrayHoundWinParameter = betUpperLimitGrayHoundWin.HasValue ?
                new ObjectParameter("BetUpperLimitGrayHoundWin", betUpperLimitGrayHoundWin) :
                new ObjectParameter("BetUpperLimitGrayHoundWin", typeof(decimal));
    
            var betLowerLimitGrayHoundPlaceParameter = betLowerLimitGrayHoundPlace.HasValue ?
                new ObjectParameter("BetLowerLimitGrayHoundPlace", betLowerLimitGrayHoundPlace) :
                new ObjectParameter("BetLowerLimitGrayHoundPlace", typeof(decimal));
    
            var betUpperLimitGrayHoundPlaceParameter = betUpperLimitGrayHoundPlace.HasValue ?
                new ObjectParameter("BetUpperLimitGrayHoundPlace", betUpperLimitGrayHoundPlace) :
                new ObjectParameter("BetUpperLimitGrayHoundPlace", typeof(decimal));
    
            var betLowerLimitMatchOddsParameter = betLowerLimitMatchOdds.HasValue ?
                new ObjectParameter("BetLowerLimitMatchOdds", betLowerLimitMatchOdds) :
                new ObjectParameter("BetLowerLimitMatchOdds", typeof(decimal));
    
            var betUpperLimitMatchOddsParameter = betUpperLimitMatchOdds.HasValue ?
                new ObjectParameter("BetUpperLimitMatchOdds", betUpperLimitMatchOdds) :
                new ObjectParameter("BetUpperLimitMatchOdds", typeof(decimal));
    
            var betLowerLimitInningsRunnsParameter = betLowerLimitInningsRunns.HasValue ?
                new ObjectParameter("BetLowerLimitInningsRunns", betLowerLimitInningsRunns) :
                new ObjectParameter("BetLowerLimitInningsRunns", typeof(decimal));
    
            var betUpperLimitInningsRunnsParameter = betUpperLimitInningsRunns.HasValue ?
                new ObjectParameter("BetUpperLimitInningsRunns", betUpperLimitInningsRunns) :
                new ObjectParameter("BetUpperLimitInningsRunns", typeof(decimal));
    
            var betLowerLimitCompletedMatchParameter = betLowerLimitCompletedMatch.HasValue ?
                new ObjectParameter("BetLowerLimitCompletedMatch", betLowerLimitCompletedMatch) :
                new ObjectParameter("BetLowerLimitCompletedMatch", typeof(decimal));
    
            var betUpperLimitCompletedMatchParameter = betUpperLimitCompletedMatch.HasValue ?
                new ObjectParameter("BetUpperLimitCompletedMatch", betUpperLimitCompletedMatch) :
                new ObjectParameter("BetUpperLimitCompletedMatch", typeof(decimal));
    
            var isTenisAllowedParameter = isTenisAllowed.HasValue ?
                new ObjectParameter("isTenisAllowed", isTenisAllowed) :
                new ObjectParameter("isTenisAllowed", typeof(bool));
    
            var isSoccerAllowedParameter = isSoccerAllowed.HasValue ?
                new ObjectParameter("isSoccerAllowed", isSoccerAllowed) :
                new ObjectParameter("isSoccerAllowed", typeof(bool));
    
            var commissionRateParameter = commissionRate.HasValue ?
                new ObjectParameter("CommissionRate", commissionRate) :
                new ObjectParameter("CommissionRate", typeof(int));
    
            var betUpperLimitMatchOddsSoccerParameter = betUpperLimitMatchOddsSoccer.HasValue ?
                new ObjectParameter("BetUpperLimitMatchOddsSoccer", betUpperLimitMatchOddsSoccer) :
                new ObjectParameter("BetUpperLimitMatchOddsSoccer", typeof(decimal));
    
            var betLowerLimitMatchOddsSoccerParameter = betLowerLimitMatchOddsSoccer.HasValue ?
                new ObjectParameter("BetLowerLimitMatchOddsSoccer", betLowerLimitMatchOddsSoccer) :
                new ObjectParameter("BetLowerLimitMatchOddsSoccer", typeof(decimal));
    
            var betUpperLimitMatchOddsTennisParameter = betUpperLimitMatchOddsTennis.HasValue ?
                new ObjectParameter("BetUpperLimitMatchOddsTennis", betUpperLimitMatchOddsTennis) :
                new ObjectParameter("BetUpperLimitMatchOddsTennis", typeof(decimal));
    
            var betLowerLimitMatchOddsTennisParameter = betLowerLimitMatchOddsTennis.HasValue ?
                new ObjectParameter("BetLowerLimitMatchOddsTennis", betLowerLimitMatchOddsTennis) :
                new ObjectParameter("BetLowerLimitMatchOddsTennis", typeof(decimal));
    
            var betUpperLimitTiedMatchParameter = betUpperLimitTiedMatch.HasValue ?
                new ObjectParameter("BetUpperLimitTiedMatch", betUpperLimitTiedMatch) :
                new ObjectParameter("BetUpperLimitTiedMatch", typeof(decimal));
    
            var betLowerLimitTiedMatchParameter = betLowerLimitTiedMatch.HasValue ?
                new ObjectParameter("BetLowerLimitTiedMatch", betLowerLimitTiedMatch) :
                new ObjectParameter("BetLowerLimitTiedMatch", typeof(decimal));
    
            var betUpperLimitWinnerParameter = betUpperLimitWinner.HasValue ?
                new ObjectParameter("BetUpperLimitWinner", betUpperLimitWinner) :
                new ObjectParameter("BetUpperLimitWinner", typeof(decimal));
    
            var betLowerLimitWinnerParameter = betLowerLimitWinner.HasValue ?
                new ObjectParameter("BetLowerLimitWinner", betLowerLimitWinner) :
                new ObjectParameter("BetLowerLimitWinner", typeof(decimal));
    
            var betUpperLimitFancyParameter = betUpperLimitFancy.HasValue ?
                new ObjectParameter("BetUpperLimitFancy", betUpperLimitFancy) :
                new ObjectParameter("BetUpperLimitFancy", typeof(decimal));
    
            var betLowerLimitFancyParameter = betLowerLimitFancy.HasValue ?
                new ObjectParameter("BetLowerLimitFancy", betLowerLimitFancy) :
                new ObjectParameter("BetLowerLimitFancy", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Users_UpdateBetLowerLimit", userIDParameter, betLowerLimitParameter, betUpperLimitParameter, isAllowedGrayHoundParameter, isAllowedHorseRacingParameter, betLowerLimitHorsePlaceParameter, betUpperLimitHorsePlaceParameter, betLowerLimitGrayHoundWinParameter, betUpperLimitGrayHoundWinParameter, betLowerLimitGrayHoundPlaceParameter, betUpperLimitGrayHoundPlaceParameter, betLowerLimitMatchOddsParameter, betUpperLimitMatchOddsParameter, betLowerLimitInningsRunnsParameter, betUpperLimitInningsRunnsParameter, betLowerLimitCompletedMatchParameter, betUpperLimitCompletedMatchParameter, isTenisAllowedParameter, isSoccerAllowedParameter, commissionRateParameter, betUpperLimitMatchOddsSoccerParameter, betLowerLimitMatchOddsSoccerParameter, betUpperLimitMatchOddsTennisParameter, betLowerLimitMatchOddsTennisParameter, betUpperLimitTiedMatchParameter, betLowerLimitTiedMatchParameter, betUpperLimitWinnerParameter, betLowerLimitWinnerParameter, betUpperLimitFancyParameter, betLowerLimitFancyParameter);
        }
    
        public virtual int SP_Users_UpdateCheckConditionsforPlaceBet(Nullable<int> userID, Nullable<bool> checkConditionsforPlacingBet)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var checkConditionsforPlacingBetParameter = checkConditionsforPlacingBet.HasValue ?
                new ObjectParameter("CheckConditionsforPlacingBet", checkConditionsforPlacingBet) :
                new ObjectParameter("CheckConditionsforPlacingBet", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Users_UpdateCheckConditionsforPlaceBet", userIDParameter, checkConditionsforPlacingBetParameter);
        }
    
        public virtual ObjectResult<string> SP_UserMarket_GetDistinctMarketsOpened()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_UserMarket_GetDistinctMarketsOpened");
        }
    
        public virtual ObjectResult<string> SP_OddsData_GetData(string oddsType)
        {
            var oddsTypeParameter = oddsType != null ?
                new ObjectParameter("OddsType", oddsType) :
                new ObjectParameter("OddsType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_OddsData_GetData", oddsTypeParameter);
        }
    
        public virtual int SP_OddsData_Update(string oddsdataStr, string oddsType)
        {
            var oddsdataStrParameter = oddsdataStr != null ?
                new ObjectParameter("OddsdataStr", oddsdataStr) :
                new ObjectParameter("OddsdataStr", typeof(string));
    
            var oddsTypeParameter = oddsType != null ?
                new ObjectParameter("OddsType", oddsType) :
                new ObjectParameter("OddsType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_OddsData_Update", oddsdataStrParameter, oddsTypeParameter);
        }
    
        public virtual ObjectResult<string> SP_UserMarket_GetEventTypeNamebyEventID(string eventID)
        {
            var eventIDParameter = eventID != null ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_UserMarket_GetEventTypeNamebyEventID", eventIDParameter);
        }
    
        public virtual ObjectResult<SP_UserMarket_GetTodaysHorseRacing_Result> SP_UserMarket_GetTodaysHorseRacing(string eventTypeID, Nullable<int> userID)
        {
            var eventTypeIDParameter = eventTypeID != null ?
                new ObjectParameter("EventTypeID", eventTypeID) :
                new ObjectParameter("EventTypeID", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserMarket_GetTodaysHorseRacing_Result>("SP_UserMarket_GetTodaysHorseRacing", eventTypeIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> SP_Users_GetStartingBalance(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("SP_Users_GetStartingBalance", userIDParameter);
        }
    
        public virtual ObjectResult<SP_Users_GetUserIDsforAllowedGrayHoundRace_Result> SP_Users_GetUserIDsforAllowedGrayHoundRace(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Users_GetUserIDsforAllowedGrayHoundRace_Result>("SP_Users_GetUserIDsforAllowedGrayHoundRace", userIDParameter);
        }
    
        public virtual ObjectResult<SP_Users_GetUserIDsforAllowedHorseRace_Result> SP_Users_GetUserIDsforAllowedHorseRace(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Users_GetUserIDsforAllowedHorseRace_Result>("SP_Users_GetUserIDsforAllowedHorseRace", userIDParameter);
        }
    
        public virtual int SP_UserMarket_DeletebyUserIDandMarketID(Nullable<int> userID, string marketID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var marketIDParameter = marketID != null ?
                new ObjectParameter("MarketID", marketID) :
                new ObjectParameter("MarketID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UserMarket_DeletebyUserIDandMarketID", userIDParameter, marketIDParameter);
        }
    
        public virtual int SP_UserMarket_DeleteAllDuplicateRows()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UserMarket_DeleteAllDuplicateRows");
        }
    
        public virtual ObjectResult<SP_Users_GetUserIDsforAllowedSoccer_Result> SP_Users_GetUserIDsforAllowedSoccer(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Users_GetUserIDsforAllowedSoccer_Result>("SP_Users_GetUserIDsforAllowedSoccer", userIDParameter);
        }
    
        public virtual ObjectResult<SP_Users_GetUserIDsforAllowedTennis_Result> SP_Users_GetUserIDsforAllowedTennis(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Users_GetUserIDsforAllowedTennis_Result>("SP_Users_GetUserIDsforAllowedTennis", userIDParameter);
        }
    
        public virtual ObjectResult<SP_UserAccounts_GetDatabyAdminID_Result> SP_UserAccounts_GetDatabyAdminID(Nullable<int> userID, Nullable<bool> isCreditAmount)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var isCreditAmountParameter = isCreditAmount.HasValue ?
                new ObjectParameter("isCreditAmount", isCreditAmount) :
                new ObjectParameter("isCreditAmount", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserAccounts_GetDatabyAdminID_Result>("SP_UserAccounts_GetDatabyAdminID", userIDParameter, isCreditAmountParameter);
        }
    
        public virtual ObjectResult<SP_UserAccounts_GetDatabyCommission_Result> SP_UserAccounts_GetDatabyCommission()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserAccounts_GetDatabyCommission_Result>("SP_UserAccounts_GetDatabyCommission");
        }
    
        public virtual ObjectResult<Nullable<decimal>> SP_UserAccounts_GetDatabyUserIDProfitandLoss(Nullable<int> userID, Nullable<bool> isCreditAmount)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var isCreditAmountParameter = isCreditAmount.HasValue ?
                new ObjectParameter("isCreditAmount", isCreditAmount) :
                new ObjectParameter("isCreditAmount", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("SP_UserAccounts_GetDatabyUserIDProfitandLoss", userIDParameter, isCreditAmountParameter);
        }
    
        public virtual ObjectResult<SP_Users_GetUSernamebyUserID_Result> SP_Users_GetUSernamebyUserID(string userID)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Users_GetUSernamebyUserID_Result>("SP_Users_GetUSernamebyUserID", userIDParameter);
        }
    
        public virtual ObjectResult<SP_Users_GetAllCuttingUsers_Result> SP_Users_GetAllCuttingUsers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Users_GetAllCuttingUsers_Result>("SP_Users_GetAllCuttingUsers");
        }
    
        public virtual int SP_UserAccounts_UpdateOpeningBalancebyUserID(Nullable<int> userID, Nullable<decimal> accountBalance)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var accountBalanceParameter = accountBalance.HasValue ?
                new ObjectParameter("AccountBalance", accountBalance) :
                new ObjectParameter("AccountBalance", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UserAccounts_UpdateOpeningBalancebyUserID", userIDParameter, accountBalanceParameter);
        }
    
        public virtual int SP_Users_UpdateStartingBalancebyUserID(Nullable<int> userID, Nullable<decimal> accountBalance)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var accountBalanceParameter = accountBalance.HasValue ?
                new ObjectParameter("AccountBalance", accountBalance) :
                new ObjectParameter("AccountBalance", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Users_UpdateStartingBalancebyUserID", userIDParameter, accountBalanceParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_Users_GetCommissionRate(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_Users_GetCommissionRate", userIDParameter);
        }
    
        public virtual ObjectResult<SP_UserBets_GetAllMatchesbyUserID_Result> SP_UserBets_GetAllMatchesbyUserID(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserBets_GetAllMatchesbyUserID_Result>("SP_UserBets_GetAllMatchesbyUserID", userIDParameter);
        }
    
        public virtual int SP_Users_UpdateNameandPhonebyUserID(Nullable<int> userID, string name, string phone)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Users_UpdateNameandPhonebyUserID", userIDParameter, nameParameter, phoneParameter);
        }
    
        public virtual ObjectResult<string> SP_UserMarket_GetEventTypeNamebyMarketID(string marketbookID)
        {
            var marketbookIDParameter = marketbookID != null ?
                new ObjectParameter("MarketbookID", marketbookID) :
                new ObjectParameter("MarketbookID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_UserMarket_GetEventTypeNamebyMarketID", marketbookIDParameter);
        }
    
        public virtual ObjectResult<SP_UserAccounts_GetDatabyEventTypeandDateRange_Result> SP_UserAccounts_GetDatabyEventTypeandDateRange(Nullable<int> userID, Nullable<bool> isCreditAmount, string from, string to)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var isCreditAmountParameter = isCreditAmount.HasValue ?
                new ObjectParameter("isCreditAmount", isCreditAmount) :
                new ObjectParameter("isCreditAmount", typeof(bool));
    
            var fromParameter = from != null ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(string));
    
            var toParameter = to != null ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserAccounts_GetDatabyEventTypeandDateRange_Result>("SP_UserAccounts_GetDatabyEventTypeandDateRange", userIDParameter, isCreditAmountParameter, fromParameter, toParameter);
        }
    
        public virtual ObjectResult<string> SP_UserMarket_GetDistinctMarketsOpenedCricketCompletedMatch()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_UserMarket_GetDistinctMarketsOpenedCricketCompletedMatch");
        }
    
        public virtual ObjectResult<string> SP_UserMarket_GetDistinctMarketsOpenedCricketInningsRuns()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_UserMarket_GetDistinctMarketsOpenedCricketInningsRuns");
        }
    
        public virtual ObjectResult<string> SP_UserMarket_GetDistinctMarketsOpenedCricketMatchOdds()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_UserMarket_GetDistinctMarketsOpenedCricketMatchOdds");
        }
    
        public virtual ObjectResult<string> SP_UserMarket_GetDistinctMarketsOpenedGrayHoundRacePlace()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_UserMarket_GetDistinctMarketsOpenedGrayHoundRacePlace");
        }
    
        public virtual ObjectResult<string> SP_UserMarket_GetDistinctMarketsOpenedGrayHoundRaceWin()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_UserMarket_GetDistinctMarketsOpenedGrayHoundRaceWin");
        }
    
        public virtual ObjectResult<string> SP_UserMarket_GetDistinctMarketsOpenedHorseRacePlace()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_UserMarket_GetDistinctMarketsOpenedHorseRacePlace");
        }
    
        public virtual ObjectResult<string> SP_UserMarket_GetDistinctMarketsOpenedHorseRaceWin()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_UserMarket_GetDistinctMarketsOpenedHorseRaceWin");
        }
    
        public virtual ObjectResult<string> SP_UserMarket_GetDistinctMarketsOpenedSoccer()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_UserMarket_GetDistinctMarketsOpenedSoccer");
        }
    
        public virtual ObjectResult<string> SP_UserMarket_GetDistinctMarketsOpenedTennis()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_UserMarket_GetDistinctMarketsOpenedTennis");
        }
    
        public virtual int SP_UserBets_UpdateuserBetLiveOddbyID(Nullable<long> iD, string liveOdd, Nullable<System.DateTime> updateDate)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var liveOddParameter = liveOdd != null ?
                new ObjectParameter("LiveOdd", liveOdd) :
                new ObjectParameter("LiveOdd", typeof(string));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UserBets_UpdateuserBetLiveOddbyID", iDParameter, liveOddParameter, updateDateParameter);
        }
    
        public virtual ObjectResult<SP_UserAccounts_GetDatabyUserIDandDateRangeandEventType_Result> SP_UserAccounts_GetDatabyUserIDandDateRangeandEventType(Nullable<int> userID, string from, string to, Nullable<bool> isCreditAmount, string eventType)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var fromParameter = from != null ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(string));
    
            var toParameter = to != null ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(string));
    
            var isCreditAmountParameter = isCreditAmount.HasValue ?
                new ObjectParameter("isCreditAmount", isCreditAmount) :
                new ObjectParameter("isCreditAmount", typeof(bool));
    
            var eventTypeParameter = eventType != null ?
                new ObjectParameter("EventType", eventType) :
                new ObjectParameter("EventType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserAccounts_GetDatabyUserIDandDateRangeandEventType_Result>("SP_UserAccounts_GetDatabyUserIDandDateRangeandEventType", userIDParameter, fromParameter, toParameter, isCreditAmountParameter, eventTypeParameter);
        }
    
        public virtual ObjectResult<SP_UserAccounts_GetDistinctEventTypes_Result> SP_UserAccounts_GetDistinctEventTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserAccounts_GetDistinctEventTypes_Result>("SP_UserAccounts_GetDistinctEventTypes");
        }
    
        public virtual int SP_UserMarket_DeleteAllMarketsofPreviousDay()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UserMarket_DeleteAllMarketsofPreviousDay");
        }
    
        public virtual ObjectResult<SP_UserMarket_SetMarketCatalogueIDOpendByUserandGet_Result> SP_UserMarket_SetMarketCatalogueIDOpendByUserandGet(Nullable<int> userID, string marketCatalogueID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var marketCatalogueIDParameter = marketCatalogueID != null ?
                new ObjectParameter("MarketCatalogueID", marketCatalogueID) :
                new ObjectParameter("MarketCatalogueID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserMarket_SetMarketCatalogueIDOpendByUserandGet_Result>("SP_UserMarket_SetMarketCatalogueIDOpendByUserandGet", userIDParameter, marketCatalogueIDParameter);
        }
    
        public virtual ObjectResult<SP_UserMarket_GetMarketCatalogueIDsOpendByUserandSelectionNames_Result> SP_UserMarket_GetMarketCatalogueIDsOpendByUserandSelectionNames(Nullable<int> userID, string marketCatalogueID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var marketCatalogueIDParameter = marketCatalogueID != null ?
                new ObjectParameter("MarketCatalogueID", marketCatalogueID) :
                new ObjectParameter("MarketCatalogueID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserMarket_GetMarketCatalogueIDsOpendByUserandSelectionNames_Result>("SP_UserMarket_GetMarketCatalogueIDsOpendByUserandSelectionNames", userIDParameter, marketCatalogueIDParameter);
        }
    
        public virtual ObjectResult<string> SP_UserMarket_GetDistinctMarketsOpenedWinner()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_UserMarket_GetDistinctMarketsOpenedWinner");
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> SP_UserMarket_GetEventOpenDatebyMarketID(string marketID)
        {
            var marketIDParameter = marketID != null ?
                new ObjectParameter("MarketID", marketID) :
                new ObjectParameter("MarketID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("SP_UserMarket_GetEventOpenDatebyMarketID", marketIDParameter);
        }
    
        public virtual ObjectResult<SP_Users_GetMaxOddBackandLay_Result> SP_Users_GetMaxOddBackandLay(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Users_GetMaxOddBackandLay_Result>("SP_Users_GetMaxOddBackandLay", userIDParameter);
        }
    
        public virtual int SP_Users_UpdateCurrentLoggedInIDbyUserID(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Users_UpdateCurrentLoggedInIDbyUserID", userIDParameter);
        }
    
        public virtual ObjectResult<SP_Users_GetReferrerRateandReferrerIDbyUserID_Result> SP_Users_GetReferrerRateandReferrerIDbyUserID(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Users_GetReferrerRateandReferrerIDbyUserID_Result>("SP_Users_GetReferrerRateandReferrerIDbyUserID", userIDParameter);
        }
    
        public virtual ObjectResult<SP_Users_GetAllowedMarketsbyUserID_Result> SP_Users_GetAllowedMarketsbyUserID(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Users_GetAllowedMarketsbyUserID_Result>("SP_Users_GetAllowedMarketsbyUserID", userIDParameter);
        }
    
        public virtual int SP_Users_UpdateAllowedMarketsbyUserID(Nullable<int> userID, Nullable<bool> isCricketMatchOddsAllowedForBet, Nullable<bool> isCricketTiedMatchAllowedForBet, Nullable<bool> isCricketCompletedMatchAllowedForBet, Nullable<bool> isCricketInningsRunsAllowedForBet, Nullable<bool> isSoccerAllowedForBet, Nullable<bool> isTennisAllowedForBet, Nullable<bool> isHorseRaceWinAllowedForBet, Nullable<bool> isHorseRacePlaceAllowedForBet, Nullable<bool> isGrayHoundRaceWinAllowedForBet, Nullable<bool> isGrayHoundRacePlaceAllowedForBet, Nullable<bool> isWinnerAllowedForBet, Nullable<bool> isFancyAllowed)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            var isCricketMatchOddsAllowedForBetParameter = isCricketMatchOddsAllowedForBet.HasValue ?
                new ObjectParameter("isCricketMatchOddsAllowedForBet", isCricketMatchOddsAllowedForBet) :
                new ObjectParameter("isCricketMatchOddsAllowedForBet", typeof(bool));
    
            var isCricketTiedMatchAllowedForBetParameter = isCricketTiedMatchAllowedForBet.HasValue ?
                new ObjectParameter("isCricketTiedMatchAllowedForBet", isCricketTiedMatchAllowedForBet) :
                new ObjectParameter("isCricketTiedMatchAllowedForBet", typeof(bool));
    
            var isCricketCompletedMatchAllowedForBetParameter = isCricketCompletedMatchAllowedForBet.HasValue ?
                new ObjectParameter("isCricketCompletedMatchAllowedForBet", isCricketCompletedMatchAllowedForBet) :
                new ObjectParameter("isCricketCompletedMatchAllowedForBet", typeof(bool));
    
            var isCricketInningsRunsAllowedForBetParameter = isCricketInningsRunsAllowedForBet.HasValue ?
                new ObjectParameter("isCricketInningsRunsAllowedForBet", isCricketInningsRunsAllowedForBet) :
                new ObjectParameter("isCricketInningsRunsAllowedForBet", typeof(bool));
    
            var isSoccerAllowedForBetParameter = isSoccerAllowedForBet.HasValue ?
                new ObjectParameter("isSoccerAllowedForBet", isSoccerAllowedForBet) :
                new ObjectParameter("isSoccerAllowedForBet", typeof(bool));
    
            var isTennisAllowedForBetParameter = isTennisAllowedForBet.HasValue ?
                new ObjectParameter("isTennisAllowedForBet", isTennisAllowedForBet) :
                new ObjectParameter("isTennisAllowedForBet", typeof(bool));
    
            var isHorseRaceWinAllowedForBetParameter = isHorseRaceWinAllowedForBet.HasValue ?
                new ObjectParameter("isHorseRaceWinAllowedForBet", isHorseRaceWinAllowedForBet) :
                new ObjectParameter("isHorseRaceWinAllowedForBet", typeof(bool));
    
            var isHorseRacePlaceAllowedForBetParameter = isHorseRacePlaceAllowedForBet.HasValue ?
                new ObjectParameter("isHorseRacePlaceAllowedForBet", isHorseRacePlaceAllowedForBet) :
                new ObjectParameter("isHorseRacePlaceAllowedForBet", typeof(bool));
    
            var isGrayHoundRaceWinAllowedForBetParameter = isGrayHoundRaceWinAllowedForBet.HasValue ?
                new ObjectParameter("isGrayHoundRaceWinAllowedForBet", isGrayHoundRaceWinAllowedForBet) :
                new ObjectParameter("isGrayHoundRaceWinAllowedForBet", typeof(bool));
    
            var isGrayHoundRacePlaceAllowedForBetParameter = isGrayHoundRacePlaceAllowedForBet.HasValue ?
                new ObjectParameter("isGrayHoundRacePlaceAllowedForBet", isGrayHoundRacePlaceAllowedForBet) :
                new ObjectParameter("isGrayHoundRacePlaceAllowedForBet", typeof(bool));
    
            var isWinnerAllowedForBetParameter = isWinnerAllowedForBet.HasValue ?
                new ObjectParameter("isWinnerAllowedForBet", isWinnerAllowedForBet) :
                new ObjectParameter("isWinnerAllowedForBet", typeof(bool));
    
            var isFancyAllowedParameter = isFancyAllowed.HasValue ?
                new ObjectParameter("isFancyAllowed", isFancyAllowed) :
                new ObjectParameter("isFancyAllowed", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Users_UpdateAllowedMarketsbyUserID", userIDParameter, isCricketMatchOddsAllowedForBetParameter, isCricketTiedMatchAllowedForBetParameter, isCricketCompletedMatchAllowedForBetParameter, isCricketInningsRunsAllowedForBetParameter, isSoccerAllowedForBetParameter, isTennisAllowedForBetParameter, isHorseRaceWinAllowedForBetParameter, isHorseRacePlaceAllowedForBetParameter, isGrayHoundRaceWinAllowedForBetParameter, isGrayHoundRacePlaceAllowedForBetParameter, isWinnerAllowedForBetParameter, isFancyAllowedParameter);
        }
    
        public virtual ObjectResult<SP_Users_GetCommissionAccountIDandBookAccountID_Result> SP_Users_GetCommissionAccountIDandBookAccountID(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Users_GetCommissionAccountIDandBookAccountID_Result>("SP_Users_GetCommissionAccountIDandBookAccountID", userIDParameter);
        }
    
        public virtual int SP_Users_UpdateReferrerRateandReferrerIDbyUserID(Nullable<int> userID, Nullable<int> refferID, Nullable<int> reffereRate)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var refferIDParameter = refferID.HasValue ?
                new ObjectParameter("RefferID", refferID) :
                new ObjectParameter("RefferID", typeof(int));
    
            var reffereRateParameter = reffereRate.HasValue ?
                new ObjectParameter("ReffereRate", reffereRate) :
                new ObjectParameter("ReffereRate", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Users_UpdateReferrerRateandReferrerIDbyUserID", userIDParameter, refferIDParameter, reffereRateParameter);
        }
    
        public virtual int SP_Users_BlockUnBlockAllEndUsersandAgents()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Users_BlockUnBlockAllEndUsersandAgents");
        }
    
        public virtual int SP_Users_LoggedOutAllEndUsersandAgents()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Users_LoggedOutAllEndUsersandAgents");
        }
    
        public virtual int SP_Users_UpdateMaxOddBackandLay(Nullable<int> userID, Nullable<decimal> maxOddBack, Nullable<bool> checkForMaxOddBack, Nullable<decimal> maxOddLay, Nullable<bool> checkForMaxOddLay)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var maxOddBackParameter = maxOddBack.HasValue ?
                new ObjectParameter("MaxOddBack", maxOddBack) :
                new ObjectParameter("MaxOddBack", typeof(decimal));
    
            var checkForMaxOddBackParameter = checkForMaxOddBack.HasValue ?
                new ObjectParameter("CheckForMaxOddBack", checkForMaxOddBack) :
                new ObjectParameter("CheckForMaxOddBack", typeof(bool));
    
            var maxOddLayParameter = maxOddLay.HasValue ?
                new ObjectParameter("MaxOddLay", maxOddLay) :
                new ObjectParameter("MaxOddLay", typeof(decimal));
    
            var checkForMaxOddLayParameter = checkForMaxOddLay.HasValue ?
                new ObjectParameter("CheckForMaxOddLay", checkForMaxOddLay) :
                new ObjectParameter("CheckForMaxOddLay", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Users_UpdateMaxOddBackandLay", userIDParameter, maxOddBackParameter, checkForMaxOddBackParameter, maxOddLayParameter, checkForMaxOddLayParameter);
        }
    
        public virtual ObjectResult<SP_BetPlaceWaitandInterval_GetAllData_Result> SP_BetPlaceWaitandInterval_GetAllData(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_BetPlaceWaitandInterval_GetAllData_Result>("SP_BetPlaceWaitandInterval_GetAllData", userIDParameter);
        }
    
        public virtual int SP_BetPlaceWaitandInterval_Update(Nullable<int> horseRaceTimerInterval, Nullable<int> horseRaceBetPlaceWait, Nullable<int> grayHoundTimerInterval, Nullable<int> grayHoundBetPlaceWait, Nullable<int> cricketMatchOddsTimerInterval, Nullable<int> cricketMatchOddsBetPlaceWait, Nullable<int> completedMatchTimerInterval, Nullable<int> completedMatchBetPlaceWait, Nullable<int> tiedMatchTimerInterval, Nullable<int> tiedMatchBetPlaceWait, Nullable<int> inningsRunsTimerInterval, Nullable<int> inningsRunsBetPlaceWait, Nullable<int> winnerTimerInterval, Nullable<int> winnerBetPlaceWait, Nullable<int> tennisTimerInterval, Nullable<int> tennisBetPlaceWait, Nullable<int> soccerTimerInterval, Nullable<int> soccerBetPlaceWait, Nullable<decimal> poundRate, Nullable<int> userID, Nullable<int> fancyTimerInterval, Nullable<int> fancyBetPlaceWait, Nullable<int> raceMinutesBeforeStart, Nullable<int> cancelBetTime)
        {
            var horseRaceTimerIntervalParameter = horseRaceTimerInterval.HasValue ?
                new ObjectParameter("HorseRaceTimerInterval", horseRaceTimerInterval) :
                new ObjectParameter("HorseRaceTimerInterval", typeof(int));
    
            var horseRaceBetPlaceWaitParameter = horseRaceBetPlaceWait.HasValue ?
                new ObjectParameter("HorseRaceBetPlaceWait", horseRaceBetPlaceWait) :
                new ObjectParameter("HorseRaceBetPlaceWait", typeof(int));
    
            var grayHoundTimerIntervalParameter = grayHoundTimerInterval.HasValue ?
                new ObjectParameter("GrayHoundTimerInterval", grayHoundTimerInterval) :
                new ObjectParameter("GrayHoundTimerInterval", typeof(int));
    
            var grayHoundBetPlaceWaitParameter = grayHoundBetPlaceWait.HasValue ?
                new ObjectParameter("GrayHoundBetPlaceWait", grayHoundBetPlaceWait) :
                new ObjectParameter("GrayHoundBetPlaceWait", typeof(int));
    
            var cricketMatchOddsTimerIntervalParameter = cricketMatchOddsTimerInterval.HasValue ?
                new ObjectParameter("CricketMatchOddsTimerInterval", cricketMatchOddsTimerInterval) :
                new ObjectParameter("CricketMatchOddsTimerInterval", typeof(int));
    
            var cricketMatchOddsBetPlaceWaitParameter = cricketMatchOddsBetPlaceWait.HasValue ?
                new ObjectParameter("CricketMatchOddsBetPlaceWait", cricketMatchOddsBetPlaceWait) :
                new ObjectParameter("CricketMatchOddsBetPlaceWait", typeof(int));
    
            var completedMatchTimerIntervalParameter = completedMatchTimerInterval.HasValue ?
                new ObjectParameter("CompletedMatchTimerInterval", completedMatchTimerInterval) :
                new ObjectParameter("CompletedMatchTimerInterval", typeof(int));
    
            var completedMatchBetPlaceWaitParameter = completedMatchBetPlaceWait.HasValue ?
                new ObjectParameter("CompletedMatchBetPlaceWait", completedMatchBetPlaceWait) :
                new ObjectParameter("CompletedMatchBetPlaceWait", typeof(int));
    
            var tiedMatchTimerIntervalParameter = tiedMatchTimerInterval.HasValue ?
                new ObjectParameter("TiedMatchTimerInterval", tiedMatchTimerInterval) :
                new ObjectParameter("TiedMatchTimerInterval", typeof(int));
    
            var tiedMatchBetPlaceWaitParameter = tiedMatchBetPlaceWait.HasValue ?
                new ObjectParameter("TiedMatchBetPlaceWait", tiedMatchBetPlaceWait) :
                new ObjectParameter("TiedMatchBetPlaceWait", typeof(int));
    
            var inningsRunsTimerIntervalParameter = inningsRunsTimerInterval.HasValue ?
                new ObjectParameter("InningsRunsTimerInterval", inningsRunsTimerInterval) :
                new ObjectParameter("InningsRunsTimerInterval", typeof(int));
    
            var inningsRunsBetPlaceWaitParameter = inningsRunsBetPlaceWait.HasValue ?
                new ObjectParameter("InningsRunsBetPlaceWait", inningsRunsBetPlaceWait) :
                new ObjectParameter("InningsRunsBetPlaceWait", typeof(int));
    
            var winnerTimerIntervalParameter = winnerTimerInterval.HasValue ?
                new ObjectParameter("WinnerTimerInterval", winnerTimerInterval) :
                new ObjectParameter("WinnerTimerInterval", typeof(int));
    
            var winnerBetPlaceWaitParameter = winnerBetPlaceWait.HasValue ?
                new ObjectParameter("WinnerBetPlaceWait", winnerBetPlaceWait) :
                new ObjectParameter("WinnerBetPlaceWait", typeof(int));
    
            var tennisTimerIntervalParameter = tennisTimerInterval.HasValue ?
                new ObjectParameter("TennisTimerInterval", tennisTimerInterval) :
                new ObjectParameter("TennisTimerInterval", typeof(int));
    
            var tennisBetPlaceWaitParameter = tennisBetPlaceWait.HasValue ?
                new ObjectParameter("TennisBetPlaceWait", tennisBetPlaceWait) :
                new ObjectParameter("TennisBetPlaceWait", typeof(int));
    
            var soccerTimerIntervalParameter = soccerTimerInterval.HasValue ?
                new ObjectParameter("SoccerTimerInterval", soccerTimerInterval) :
                new ObjectParameter("SoccerTimerInterval", typeof(int));
    
            var soccerBetPlaceWaitParameter = soccerBetPlaceWait.HasValue ?
                new ObjectParameter("SoccerBetPlaceWait", soccerBetPlaceWait) :
                new ObjectParameter("SoccerBetPlaceWait", typeof(int));
    
            var poundRateParameter = poundRate.HasValue ?
                new ObjectParameter("PoundRate", poundRate) :
                new ObjectParameter("PoundRate", typeof(decimal));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var fancyTimerIntervalParameter = fancyTimerInterval.HasValue ?
                new ObjectParameter("FancyTimerInterval", fancyTimerInterval) :
                new ObjectParameter("FancyTimerInterval", typeof(int));
    
            var fancyBetPlaceWaitParameter = fancyBetPlaceWait.HasValue ?
                new ObjectParameter("FancyBetPlaceWait", fancyBetPlaceWait) :
                new ObjectParameter("FancyBetPlaceWait", typeof(int));
    
            var raceMinutesBeforeStartParameter = raceMinutesBeforeStart.HasValue ?
                new ObjectParameter("RaceMinutesBeforeStart", raceMinutesBeforeStart) :
                new ObjectParameter("RaceMinutesBeforeStart", typeof(int));
    
            var cancelBetTimeParameter = cancelBetTime.HasValue ?
                new ObjectParameter("CancelBetTime", cancelBetTime) :
                new ObjectParameter("CancelBetTime", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_BetPlaceWaitandInterval_Update", horseRaceTimerIntervalParameter, horseRaceBetPlaceWaitParameter, grayHoundTimerIntervalParameter, grayHoundBetPlaceWaitParameter, cricketMatchOddsTimerIntervalParameter, cricketMatchOddsBetPlaceWaitParameter, completedMatchTimerIntervalParameter, completedMatchBetPlaceWaitParameter, tiedMatchTimerIntervalParameter, tiedMatchBetPlaceWaitParameter, inningsRunsTimerIntervalParameter, inningsRunsBetPlaceWaitParameter, winnerTimerIntervalParameter, winnerBetPlaceWaitParameter, tennisTimerIntervalParameter, tennisBetPlaceWaitParameter, soccerTimerIntervalParameter, soccerBetPlaceWaitParameter, poundRateParameter, userIDParameter, fancyTimerIntervalParameter, fancyBetPlaceWaitParameter, raceMinutesBeforeStartParameter, cancelBetTimeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_Users_GetHwalaAccountIDbyUserID(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_Users_GetHwalaAccountIDbyUserID", userIDParameter);
        }
    
        public virtual int SP_Users_UpdateHwalaAccountIDbyUserID(Nullable<int> userID, Nullable<int> parentID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Users_UpdateHwalaAccountIDbyUserID", userIDParameter, parentIDParameter);
        }
    
        public virtual ObjectResult<SP_UserMarket_GetMarketForAllowedBetting_Result> SP_UserMarket_GetMarketForAllowedBetting(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserMarket_GetMarketForAllowedBetting_Result>("SP_UserMarket_GetMarketForAllowedBetting", userIDParameter);
        }
    
        public virtual int SP_UserMarket_UpdateMarketForAllowedBetting(Nullable<int> userID, string marketCatalogueID, Nullable<bool> allowedBetting)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var marketCatalogueIDParameter = marketCatalogueID != null ?
                new ObjectParameter("MarketCatalogueID", marketCatalogueID) :
                new ObjectParameter("MarketCatalogueID", typeof(string));
    
            var allowedBettingParameter = allowedBetting.HasValue ?
                new ObjectParameter("AllowedBetting", allowedBetting) :
                new ObjectParameter("AllowedBetting", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UserMarket_UpdateMarketForAllowedBetting", userIDParameter, marketCatalogueIDParameter, allowedBettingParameter);
        }
    
        public virtual ObjectResult<SP_BetSlipKeys_Get_Result> SP_BetSlipKeys_Get(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_BetSlipKeys_Get_Result>("SP_BetSlipKeys_Get", userIDParameter);
        }
    
        public virtual int SP_BetSlipKeys_Update(Nullable<int> userID, string simpleBtn1, string simpleBtn2, string simpleBtn3, string simpleBtn4, string simpleBtn5, string simpleBtn6, string simpleBtn7, string simpleBtn8, string simpleBtn9, string simpleBtn10, string simpleBtn11, string simpleBtn12, string mutipleBtn1, string mutipleBtn2, string mutipleBtn3, string mutipleBtn4, string mutipleBtn5, string mutipleBtn6, string mutipleBtn7, string mutipleBtn8, string mutipleBtn9, string mutipleBtn10, string mutipleBtn11, string mutipleBtn12)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var simpleBtn1Parameter = simpleBtn1 != null ?
                new ObjectParameter("SimpleBtn1", simpleBtn1) :
                new ObjectParameter("SimpleBtn1", typeof(string));
    
            var simpleBtn2Parameter = simpleBtn2 != null ?
                new ObjectParameter("SimpleBtn2", simpleBtn2) :
                new ObjectParameter("SimpleBtn2", typeof(string));
    
            var simpleBtn3Parameter = simpleBtn3 != null ?
                new ObjectParameter("SimpleBtn3", simpleBtn3) :
                new ObjectParameter("SimpleBtn3", typeof(string));
    
            var simpleBtn4Parameter = simpleBtn4 != null ?
                new ObjectParameter("SimpleBtn4", simpleBtn4) :
                new ObjectParameter("SimpleBtn4", typeof(string));
    
            var simpleBtn5Parameter = simpleBtn5 != null ?
                new ObjectParameter("SimpleBtn5", simpleBtn5) :
                new ObjectParameter("SimpleBtn5", typeof(string));
    
            var simpleBtn6Parameter = simpleBtn6 != null ?
                new ObjectParameter("SimpleBtn6", simpleBtn6) :
                new ObjectParameter("SimpleBtn6", typeof(string));
    
            var simpleBtn7Parameter = simpleBtn7 != null ?
                new ObjectParameter("SimpleBtn7", simpleBtn7) :
                new ObjectParameter("SimpleBtn7", typeof(string));
    
            var simpleBtn8Parameter = simpleBtn8 != null ?
                new ObjectParameter("SimpleBtn8", simpleBtn8) :
                new ObjectParameter("SimpleBtn8", typeof(string));
    
            var simpleBtn9Parameter = simpleBtn9 != null ?
                new ObjectParameter("SimpleBtn9", simpleBtn9) :
                new ObjectParameter("SimpleBtn9", typeof(string));
    
            var simpleBtn10Parameter = simpleBtn10 != null ?
                new ObjectParameter("SimpleBtn10", simpleBtn10) :
                new ObjectParameter("SimpleBtn10", typeof(string));
    
            var simpleBtn11Parameter = simpleBtn11 != null ?
                new ObjectParameter("SimpleBtn11", simpleBtn11) :
                new ObjectParameter("SimpleBtn11", typeof(string));
    
            var simpleBtn12Parameter = simpleBtn12 != null ?
                new ObjectParameter("SimpleBtn12", simpleBtn12) :
                new ObjectParameter("SimpleBtn12", typeof(string));
    
            var mutipleBtn1Parameter = mutipleBtn1 != null ?
                new ObjectParameter("MutipleBtn1", mutipleBtn1) :
                new ObjectParameter("MutipleBtn1", typeof(string));
    
            var mutipleBtn2Parameter = mutipleBtn2 != null ?
                new ObjectParameter("MutipleBtn2", mutipleBtn2) :
                new ObjectParameter("MutipleBtn2", typeof(string));
    
            var mutipleBtn3Parameter = mutipleBtn3 != null ?
                new ObjectParameter("MutipleBtn3", mutipleBtn3) :
                new ObjectParameter("MutipleBtn3", typeof(string));
    
            var mutipleBtn4Parameter = mutipleBtn4 != null ?
                new ObjectParameter("MutipleBtn4", mutipleBtn4) :
                new ObjectParameter("MutipleBtn4", typeof(string));
    
            var mutipleBtn5Parameter = mutipleBtn5 != null ?
                new ObjectParameter("MutipleBtn5", mutipleBtn5) :
                new ObjectParameter("MutipleBtn5", typeof(string));
    
            var mutipleBtn6Parameter = mutipleBtn6 != null ?
                new ObjectParameter("MutipleBtn6", mutipleBtn6) :
                new ObjectParameter("MutipleBtn6", typeof(string));
    
            var mutipleBtn7Parameter = mutipleBtn7 != null ?
                new ObjectParameter("MutipleBtn7", mutipleBtn7) :
                new ObjectParameter("MutipleBtn7", typeof(string));
    
            var mutipleBtn8Parameter = mutipleBtn8 != null ?
                new ObjectParameter("MutipleBtn8", mutipleBtn8) :
                new ObjectParameter("MutipleBtn8", typeof(string));
    
            var mutipleBtn9Parameter = mutipleBtn9 != null ?
                new ObjectParameter("MutipleBtn9", mutipleBtn9) :
                new ObjectParameter("MutipleBtn9", typeof(string));
    
            var mutipleBtn10Parameter = mutipleBtn10 != null ?
                new ObjectParameter("MutipleBtn10", mutipleBtn10) :
                new ObjectParameter("MutipleBtn10", typeof(string));
    
            var mutipleBtn11Parameter = mutipleBtn11 != null ?
                new ObjectParameter("MutipleBtn11", mutipleBtn11) :
                new ObjectParameter("MutipleBtn11", typeof(string));
    
            var mutipleBtn12Parameter = mutipleBtn12 != null ?
                new ObjectParameter("MutipleBtn12", mutipleBtn12) :
                new ObjectParameter("MutipleBtn12", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_BetSlipKeys_Update", userIDParameter, simpleBtn1Parameter, simpleBtn2Parameter, simpleBtn3Parameter, simpleBtn4Parameter, simpleBtn5Parameter, simpleBtn6Parameter, simpleBtn7Parameter, simpleBtn8Parameter, simpleBtn9Parameter, simpleBtn10Parameter, simpleBtn11Parameter, simpleBtn12Parameter, mutipleBtn1Parameter, mutipleBtn2Parameter, mutipleBtn3Parameter, mutipleBtn4Parameter, mutipleBtn5Parameter, mutipleBtn6Parameter, mutipleBtn7Parameter, mutipleBtn8Parameter, mutipleBtn9Parameter, mutipleBtn10Parameter, mutipleBtn11Parameter, mutipleBtn12Parameter);
        }
    
        public virtual int SP_BettingAllowed_Update(string eventID, string bettingAllowed)
        {
            var eventIDParameter = eventID != null ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(string));
    
            var bettingAllowedParameter = bettingAllowed != null ?
                new ObjectParameter("BettingAllowed", bettingAllowed) :
                new ObjectParameter("BettingAllowed", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_BettingAllowed_Update", eventIDParameter, bettingAllowedParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> SP_BetPlaceWaitandInterval_GetPoundRate(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("SP_BetPlaceWaitandInterval_GetPoundRate", userIDParameter);
        }
    
        public virtual ObjectResult<string> SP_APIConfig_GetMarqueeText()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_APIConfig_GetMarqueeText");
        }
    
        public virtual int SP_APIConfig_UpdateMarqueeText(string marqueeText)
        {
            var marqueeTextParameter = marqueeText != null ?
                new ObjectParameter("MarqueeText", marqueeText) :
                new ObjectParameter("MarqueeText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_APIConfig_UpdateMarqueeText", marqueeTextParameter);
        }
    
        public virtual ObjectResult<SP_EMAILConfig_GetData_Result> SP_EMAILConfig_GetData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_EMAILConfig_GetData_Result>("SP_EMAILConfig_GetData");
        }
    
        public virtual int SP_UserBets_UpdateStatustoCompletebyIDforCuttingUser(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UserBets_UpdateStatustoCompletebyIDforCuttingUser", iDParameter);
        }
    
        public virtual ObjectResult<SP_UserBets_GetDatabyAgentIDWithRefererZero_Result> SP_UserBets_GetDatabyAgentIDWithRefererZero(Nullable<int> agentID)
        {
            var agentIDParameter = agentID.HasValue ?
                new ObjectParameter("AgentID", agentID) :
                new ObjectParameter("AgentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserBets_GetDatabyAgentIDWithRefererZero_Result>("SP_UserBets_GetDatabyAgentIDWithRefererZero", agentIDParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> SP_BetPlaceWaitandInterval_GetShowTV(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("SP_BetPlaceWaitandInterval_GetShowTV", userIDParameter);
        }
    
        public virtual int SP_BetPlaceWaitandInterval_UpdateShowTV(Nullable<int> userID, Nullable<bool> showTV)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var showTVParameter = showTV.HasValue ?
                new ObjectParameter("ShowTV", showTV) :
                new ObjectParameter("ShowTV", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_BetPlaceWaitandInterval_UpdateShowTV", userIDParameter, showTVParameter);
        }
    
        public virtual int SP_UserBets_UpdateuserBetUserOddbyID(Nullable<long> iD, string userOdd, Nullable<System.DateTime> updateDate)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var userOddParameter = userOdd != null ?
                new ObjectParameter("UserOdd", userOdd) :
                new ObjectParameter("UserOdd", typeof(string));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UserBets_UpdateuserBetUserOddbyID", iDParameter, userOddParameter, updateDateParameter);
        }
    
        public virtual int SP_BallbyBallSummary_Insert(string eventID, string marketBookId, Nullable<double> overs, Nullable<int> score, Nullable<int> innings, Nullable<System.DateTime> eventDate, Nullable<int> wickets, string teamname, string matchStatus, string matchType, string totalOvers)
        {
            var eventIDParameter = eventID != null ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(string));
    
            var marketBookIdParameter = marketBookId != null ?
                new ObjectParameter("MarketBookId", marketBookId) :
                new ObjectParameter("MarketBookId", typeof(string));
    
            var oversParameter = overs.HasValue ?
                new ObjectParameter("Overs", overs) :
                new ObjectParameter("Overs", typeof(double));
    
            var scoreParameter = score.HasValue ?
                new ObjectParameter("Score", score) :
                new ObjectParameter("Score", typeof(int));
    
            var inningsParameter = innings.HasValue ?
                new ObjectParameter("Innings", innings) :
                new ObjectParameter("Innings", typeof(int));
    
            var eventDateParameter = eventDate.HasValue ?
                new ObjectParameter("EventDate", eventDate) :
                new ObjectParameter("EventDate", typeof(System.DateTime));
    
            var wicketsParameter = wickets.HasValue ?
                new ObjectParameter("Wickets", wickets) :
                new ObjectParameter("Wickets", typeof(int));
    
            var teamnameParameter = teamname != null ?
                new ObjectParameter("Teamname", teamname) :
                new ObjectParameter("Teamname", typeof(string));
    
            var matchStatusParameter = matchStatus != null ?
                new ObjectParameter("MatchStatus", matchStatus) :
                new ObjectParameter("MatchStatus", typeof(string));
    
            var matchTypeParameter = matchType != null ?
                new ObjectParameter("MatchType", matchType) :
                new ObjectParameter("MatchType", typeof(string));
    
            var totalOversParameter = totalOvers != null ?
                new ObjectParameter("TotalOvers", totalOvers) :
                new ObjectParameter("TotalOvers", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_BallbyBallSummary_Insert", eventIDParameter, marketBookIdParameter, oversParameter, scoreParameter, inningsParameter, eventDateParameter, wicketsParameter, teamnameParameter, matchStatusParameter, matchTypeParameter, totalOversParameter);
        }
    
        public virtual ObjectResult<SP_UserMarket_GetDistinctLinevMarkets_Result> SP_UserMarket_GetDistinctLinevMarkets()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserMarket_GetDistinctLinevMarkets_Result>("SP_UserMarket_GetDistinctLinevMarkets");
        }
    
        public virtual ObjectResult<SP_BallbyBallSummary_GetResultsbyEventID_Result> SP_BallbyBallSummary_GetResultsbyEventID(string eventID, Nullable<System.DateTime> eventDate)
        {
            var eventIDParameter = eventID != null ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(string));
    
            var eventDateParameter = eventDate.HasValue ?
                new ObjectParameter("EventDate", eventDate) :
                new ObjectParameter("EventDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_BallbyBallSummary_GetResultsbyEventID_Result>("SP_BallbyBallSummary_GetResultsbyEventID", eventIDParameter, eventDateParameter);
        }
    
        public virtual ObjectResult<SP_UserMarket_GetEventDetailsbyMarketID_Result> SP_UserMarket_GetEventDetailsbyMarketID(string marketbookID)
        {
            var marketbookIDParameter = marketbookID != null ?
                new ObjectParameter("MarketbookID", marketbookID) :
                new ObjectParameter("MarketbookID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserMarket_GetEventDetailsbyMarketID_Result>("SP_UserMarket_GetEventDetailsbyMarketID", marketbookIDParameter);
        }
    
        public virtual ObjectResult<SP_UserMarket_GetEventDetailsbyEventOpenDateMatchOddsOnly_Result> SP_UserMarket_GetEventDetailsbyEventOpenDateMatchOddsOnly(Nullable<System.DateTime> eventOpenDAte)
        {
            var eventOpenDAteParameter = eventOpenDAte.HasValue ?
                new ObjectParameter("EventOpenDAte", eventOpenDAte) :
                new ObjectParameter("EventOpenDAte", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserMarket_GetEventDetailsbyEventOpenDateMatchOddsOnly_Result>("SP_UserMarket_GetEventDetailsbyEventOpenDateMatchOddsOnly", eventOpenDAteParameter);
        }
    
        public virtual ObjectResult<SP_UserMarket_GetDistinctLinevMarketsbyEventID_Result> SP_UserMarket_GetDistinctLinevMarketsbyEventID(string eventID, Nullable<System.DateTime> eventOpenDate, Nullable<int> userID)
        {
            var eventIDParameter = eventID != null ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(string));
    
            var eventOpenDateParameter = eventOpenDate.HasValue ?
                new ObjectParameter("EventOpenDate", eventOpenDate) :
                new ObjectParameter("EventOpenDate", typeof(System.DateTime));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserMarket_GetDistinctLinevMarketsbyEventID_Result>("SP_UserMarket_GetDistinctLinevMarketsbyEventID", eventIDParameter, eventOpenDateParameter, userIDParameter);
        }
    
        public virtual ObjectResult<SP_BallbyBallSummary_GetScoresbyEventID_Result> SP_BallbyBallSummary_GetScoresbyEventID(string eventID, Nullable<System.DateTime> eventDate)
        {
            var eventIDParameter = eventID != null ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(string));
    
            var eventDateParameter = eventDate.HasValue ?
                new ObjectParameter("EventDate", eventDate) :
                new ObjectParameter("EventDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_BallbyBallSummary_GetScoresbyEventID_Result>("SP_BallbyBallSummary_GetScoresbyEventID", eventIDParameter, eventDateParameter);
        }
    
        public virtual ObjectResult<SP_BallbyBallSummary_GetScoresbyEventIDbyInnings_Result> SP_BallbyBallSummary_GetScoresbyEventIDbyInnings(string eventID, Nullable<System.DateTime> eventDate, Nullable<int> innings)
        {
            var eventIDParameter = eventID != null ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(string));
    
            var eventDateParameter = eventDate.HasValue ?
                new ObjectParameter("EventDate", eventDate) :
                new ObjectParameter("EventDate", typeof(System.DateTime));
    
            var inningsParameter = innings.HasValue ?
                new ObjectParameter("Innings", innings) :
                new ObjectParameter("Innings", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_BallbyBallSummary_GetScoresbyEventIDbyInnings_Result>("SP_BallbyBallSummary_GetScoresbyEventIDbyInnings", eventIDParameter, eventDateParameter, inningsParameter);
        }
    
        public virtual ObjectResult<SP_MarketRules_GetData_Result> SP_MarketRules_GetData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_MarketRules_GetData_Result>("SP_MarketRules_GetData");
        }
    
        public virtual ObjectResult<SP_UserMarket_GetEventLineMarketandOddsForAssociation_Result> SP_UserMarket_GetEventLineMarketandOddsForAssociation()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserMarket_GetEventLineMarketandOddsForAssociation_Result>("SP_UserMarket_GetEventLineMarketandOddsForAssociation");
        }
    
        public virtual int SP_UserMarket_UpdateAssociateEventID(string eventID, string associateEventID)
        {
            var eventIDParameter = eventID != null ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(string));
    
            var associateEventIDParameter = associateEventID != null ?
                new ObjectParameter("AssociateEventID", associateEventID) :
                new ObjectParameter("AssociateEventID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UserMarket_UpdateAssociateEventID", eventIDParameter, associateEventIDParameter);
        }
    
        public virtual ObjectResult<SP_LiveTVChanels_GetAlldata_Result> SP_LiveTVChanels_GetAlldata()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_LiveTVChanels_GetAlldata_Result>("SP_LiveTVChanels_GetAlldata");
        }
    
        public virtual ObjectResult<SP_BallbyBallSummary_GetScoresbyEventIDbyInningsandOvers_Result> SP_BallbyBallSummary_GetScoresbyEventIDbyInningsandOvers(string eventID, Nullable<System.DateTime> eventDate, Nullable<int> innings, Nullable<int> overs)
        {
            var eventIDParameter = eventID != null ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(string));
    
            var eventDateParameter = eventDate.HasValue ?
                new ObjectParameter("EventDate", eventDate) :
                new ObjectParameter("EventDate", typeof(System.DateTime));
    
            var inningsParameter = innings.HasValue ?
                new ObjectParameter("Innings", innings) :
                new ObjectParameter("Innings", typeof(int));
    
            var oversParameter = overs.HasValue ?
                new ObjectParameter("Overs", overs) :
                new ObjectParameter("Overs", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_BallbyBallSummary_GetScoresbyEventIDbyInningsandOvers_Result>("SP_BallbyBallSummary_GetScoresbyEventIDbyInningsandOvers", eventIDParameter, eventDateParameter, inningsParameter, oversParameter);
        }
    
        public virtual int SP_UserMarket_UpdateMarketStatusbyMarektBookID(string marketBookID, string marketStatus)
        {
            var marketBookIDParameter = marketBookID != null ?
                new ObjectParameter("MarketBookID", marketBookID) :
                new ObjectParameter("MarketBookID", typeof(string));
    
            var marketStatusParameter = marketStatus != null ?
                new ObjectParameter("MarketStatus", marketStatus) :
                new ObjectParameter("MarketStatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UserMarket_UpdateMarketStatusbyMarektBookID", marketBookIDParameter, marketStatusParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> SP_ResultPostSettings_GetFancyPostResultSetting()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("SP_ResultPostSettings_GetFancyPostResultSetting");
        }
    
        public virtual int SP_ResultPostSettings_UpdateFancyPostResultSetting(Nullable<bool> automaticResultPostFancy)
        {
            var automaticResultPostFancyParameter = automaticResultPostFancy.HasValue ?
                new ObjectParameter("AutomaticResultPostFancy", automaticResultPostFancy) :
                new ObjectParameter("AutomaticResultPostFancy", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ResultPostSettings_UpdateFancyPostResultSetting", automaticResultPostFancyParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_Users_GetCommissionRateFancy(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_Users_GetCommissionRateFancy", userIDParameter);
        }
    
        public virtual int SP_Users_UpdateCommissionRateFancy(Nullable<int> userID, Nullable<int> commisionRateFancy)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var commisionRateFancyParameter = commisionRateFancy.HasValue ?
                new ObjectParameter("CommisionRateFancy", commisionRateFancy) :
                new ObjectParameter("CommisionRateFancy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Users_UpdateCommissionRateFancy", userIDParameter, commisionRateFancyParameter);
        }
    
        public virtual ObjectResult<SP_CricketAPIConfig_GetData_Result> SP_CricketAPIConfig_GetData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_CricketAPIConfig_GetData_Result>("SP_CricketAPIConfig_GetData");
        }
    
        public virtual ObjectResult<string> SP_CricketAPIConfig_GetSessionKey(string sessionKey)
        {
            var sessionKeyParameter = sessionKey != null ?
                new ObjectParameter("SessionKey", sessionKey) :
                new ObjectParameter("SessionKey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_CricketAPIConfig_GetSessionKey", sessionKeyParameter);
        }
    
        public virtual int SP_CricketAPIConfig_UpdateSessionKey(string sessionKey)
        {
            var sessionKeyParameter = sessionKey != null ?
                new ObjectParameter("SessionKey", sessionKey) :
                new ObjectParameter("SessionKey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_CricketAPIConfig_UpdateSessionKey", sessionKeyParameter);
        }
    
        public virtual ObjectResult<string> SP_UserMarket_GetCricketAPIMatchKey(string marketBookID)
        {
            var marketBookIDParameter = marketBookID != null ?
                new ObjectParameter("MarketBookID", marketBookID) :
                new ObjectParameter("MarketBookID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_UserMarket_GetCricketAPIMatchKey", marketBookIDParameter);
        }
    
        public virtual int SP_UserMarket_UpdateCricketAPIMatchKey(string eventID, string cricketAPIMatchKey)
        {
            var eventIDParameter = eventID != null ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(string));
    
            var cricketAPIMatchKeyParameter = cricketAPIMatchKey != null ?
                new ObjectParameter("CricketAPIMatchKey", cricketAPIMatchKey) :
                new ObjectParameter("CricketAPIMatchKey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UserMarket_UpdateCricketAPIMatchKey", eventIDParameter, cricketAPIMatchKeyParameter);
        }
    
        public virtual ObjectResult<string> SP_ResultPostSettings_GetResultsFrom()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_ResultPostSettings_GetResultsFrom");
        }
    
        public virtual int SP_ResultPostSettings_UpdateGetResultsFrom(string getResultsFrom)
        {
            var getResultsFromParameter = getResultsFrom != null ?
                new ObjectParameter("GetResultsFrom", getResultsFrom) :
                new ObjectParameter("GetResultsFrom", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ResultPostSettings_UpdateGetResultsFrom", getResultsFromParameter);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> SP_UserMarket_GetMarketClosedTime(string marketCatalogueId)
        {
            var marketCatalogueIdParameter = marketCatalogueId != null ?
                new ObjectParameter("MarketCatalogueId", marketCatalogueId) :
                new ObjectParameter("MarketCatalogueId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("SP_UserMarket_GetMarketClosedTime", marketCatalogueIdParameter);
        }
    
        public virtual int SP_UserMarket_UpdateMarketClosedTime(string marketCatalogueId, Nullable<System.DateTime> marketClosetime)
        {
            var marketCatalogueIdParameter = marketCatalogueId != null ?
                new ObjectParameter("MarketCatalogueId", marketCatalogueId) :
                new ObjectParameter("MarketCatalogueId", typeof(string));
    
            var marketClosetimeParameter = marketClosetime.HasValue ?
                new ObjectParameter("MarketClosetime", marketClosetime) :
                new ObjectParameter("MarketClosetime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UserMarket_UpdateMarketClosedTime", marketCatalogueIdParameter, marketClosetimeParameter);
        }
    
        public virtual int SP_UserMarket_UpdateGetMatchUpdatesFrom(string eventID, string getMatchUpdatesFrom)
        {
            var eventIDParameter = eventID != null ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(string));
    
            var getMatchUpdatesFromParameter = getMatchUpdatesFrom != null ?
                new ObjectParameter("GetMatchUpdatesFrom", getMatchUpdatesFrom) :
                new ObjectParameter("GetMatchUpdatesFrom", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UserMarket_UpdateGetMatchUpdatesFrom", eventIDParameter, getMatchUpdatesFromParameter);
        }
    
        public virtual ObjectResult<SP_UserAccounts_GetDatabyEventNameandDateRange_Result> SP_UserAccounts_GetDatabyEventNameandDateRange(Nullable<int> userID, Nullable<bool> isCreditAmount, string from, string to)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var isCreditAmountParameter = isCreditAmount.HasValue ?
                new ObjectParameter("isCreditAmount", isCreditAmount) :
                new ObjectParameter("isCreditAmount", typeof(bool));
    
            var fromParameter = from != null ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(string));
    
            var toParameter = to != null ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserAccounts_GetDatabyEventNameandDateRange_Result>("SP_UserAccounts_GetDatabyEventNameandDateRange", userIDParameter, isCreditAmountParameter, fromParameter, toParameter);
        }
    
        public virtual ObjectResult<SP_Users_GetTransferAdminAmount_Result> SP_Users_GetTransferAdminAmount(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Users_GetTransferAdminAmount_Result>("SP_Users_GetTransferAdminAmount", userIDParameter);
        }
    
        public virtual int SP_Users_UpdateTransferAdminAmount(Nullable<int> userID, Nullable<bool> transferAdminAmount, Nullable<int> transferAgentID, Nullable<bool> transferAdminAmountSoccer, Nullable<bool> transferAdminAmountTennis, Nullable<bool> transferAdminAmountHorse, Nullable<bool> transferAdminAmountGreyHound)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var transferAdminAmountParameter = transferAdminAmount.HasValue ?
                new ObjectParameter("TransferAdminAmount", transferAdminAmount) :
                new ObjectParameter("TransferAdminAmount", typeof(bool));
    
            var transferAgentIDParameter = transferAgentID.HasValue ?
                new ObjectParameter("TransferAgentID", transferAgentID) :
                new ObjectParameter("TransferAgentID", typeof(int));
    
            var transferAdminAmountSoccerParameter = transferAdminAmountSoccer.HasValue ?
                new ObjectParameter("TransferAdminAmountSoccer", transferAdminAmountSoccer) :
                new ObjectParameter("TransferAdminAmountSoccer", typeof(bool));
    
            var transferAdminAmountTennisParameter = transferAdminAmountTennis.HasValue ?
                new ObjectParameter("TransferAdminAmountTennis", transferAdminAmountTennis) :
                new ObjectParameter("TransferAdminAmountTennis", typeof(bool));
    
            var transferAdminAmountHorseParameter = transferAdminAmountHorse.HasValue ?
                new ObjectParameter("TransferAdminAmountHorse", transferAdminAmountHorse) :
                new ObjectParameter("TransferAdminAmountHorse", typeof(bool));
    
            var transferAdminAmountGreyHoundParameter = transferAdminAmountGreyHound.HasValue ?
                new ObjectParameter("TransferAdminAmountGreyHound", transferAdminAmountGreyHound) :
                new ObjectParameter("TransferAdminAmountGreyHound", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Users_UpdateTransferAdminAmount", userIDParameter, transferAdminAmountParameter, transferAgentIDParameter, transferAdminAmountSoccerParameter, transferAdminAmountTennisParameter, transferAdminAmountHorseParameter, transferAdminAmountGreyHoundParameter);
        }
    
        public virtual ObjectResult<SP_AmountReceiveables_GetDatabyDate_Result> SP_AmountReceiveables_GetDatabyDate(Nullable<System.DateTime> dueDate)
        {
            var dueDateParameter = dueDate.HasValue ?
                new ObjectParameter("DueDate", dueDate) :
                new ObjectParameter("DueDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_AmountReceiveables_GetDatabyDate_Result>("SP_AmountReceiveables_GetDatabyDate", dueDateParameter);
        }
    
        public virtual int SP_AmountReceiveables_Insert(Nullable<int> userID, Nullable<decimal> amount, Nullable<System.DateTime> dueDate, string status, Nullable<decimal> amountReceived)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var dueDateParameter = dueDate.HasValue ?
                new ObjectParameter("DueDate", dueDate) :
                new ObjectParameter("DueDate", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var amountReceivedParameter = amountReceived.HasValue ?
                new ObjectParameter("AmountReceived", amountReceived) :
                new ObjectParameter("AmountReceived", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AmountReceiveables_Insert", userIDParameter, amountParameter, dueDateParameter, statusParameter, amountReceivedParameter);
        }
    
        public virtual int SP_AmountReceiveables_Update(Nullable<int> iD, Nullable<decimal> amount, Nullable<System.DateTime> dueDate, string status)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var dueDateParameter = dueDate.HasValue ?
                new ObjectParameter("DueDate", dueDate) :
                new ObjectParameter("DueDate", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AmountReceiveables_Update", iDParameter, amountParameter, dueDateParameter, statusParameter);
        }
    
        public virtual ObjectResult<SP_UserBets_GetInPlayMatcheswithRunnersbyUserID_Result> SP_UserBets_GetInPlayMatcheswithRunnersbyUserID(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserBets_GetInPlayMatcheswithRunnersbyUserID_Result>("SP_UserBets_GetInPlayMatcheswithRunnersbyUserID", userIDParameter);
        }
    
        public virtual int SP_Referrers_DeletebyUserID(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Referrers_DeletebyUserID", userIDParameter);
        }
    
        public virtual ObjectResult<SP_Referrers_GetReferrerRateandReferrerIDbyUserID_Result> SP_Referrers_GetReferrerRateandReferrerIDbyUserID(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Referrers_GetReferrerRateandReferrerIDbyUserID_Result>("SP_Referrers_GetReferrerRateandReferrerIDbyUserID", userIDParameter);
        }
    
        public virtual int SP_Referrers_Insert(Nullable<int> userID, Nullable<int> referrerID, Nullable<int> referrerRate)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var referrerIDParameter = referrerID.HasValue ?
                new ObjectParameter("ReferrerID", referrerID) :
                new ObjectParameter("ReferrerID", typeof(int));
    
            var referrerRateParameter = referrerRate.HasValue ?
                new ObjectParameter("ReferrerRate", referrerRate) :
                new ObjectParameter("ReferrerRate", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Referrers_Insert", userIDParameter, referrerIDParameter, referrerRateParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> SP_UserMarket_GetMarketForAllowedBettingbtMarketIDandUserID(Nullable<int> userID, string marketBookID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var marketBookIDParameter = marketBookID != null ?
                new ObjectParameter("MarketBookID", marketBookID) :
                new ObjectParameter("MarketBookID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("SP_UserMarket_GetMarketForAllowedBettingbtMarketIDandUserID", userIDParameter, marketBookIDParameter);
        }
    
        public virtual ObjectResult<SP_UserAccounts_GetDatabyMarketID_Result> SP_UserAccounts_GetDatabyMarketID(string marketCatalogueID)
        {
            var marketCatalogueIDParameter = marketCatalogueID != null ?
                new ObjectParameter("MarketCatalogueID", marketCatalogueID) :
                new ObjectParameter("MarketCatalogueID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserAccounts_GetDatabyMarketID_Result>("SP_UserAccounts_GetDatabyMarketID", marketCatalogueIDParameter);
        }
    
        public virtual ObjectResult<SP_UserAccounts_GetDistinctMarket_Result> SP_UserAccounts_GetDistinctMarket(string from, string to)
        {
            var fromParameter = from != null ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(string));
    
            var toParameter = to != null ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserAccounts_GetDistinctMarket_Result>("SP_UserAccounts_GetDistinctMarket", fromParameter, toParameter);
        }
    
        public virtual ObjectResult<SP_UserBets_GetDistinctMarket_Result> SP_UserBets_GetDistinctMarket(string from, string to)
        {
            var fromParameter = from != null ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(string));
    
            var toParameter = to != null ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserBets_GetDistinctMarket_Result>("SP_UserBets_GetDistinctMarket", fromParameter, toParameter);
        }
    
        public virtual int SP_UserBets_UpdateStatustoInCompletebyMarketIDandUserID(string marketCatalogueID, Nullable<int> userID)
        {
            var marketCatalogueIDParameter = marketCatalogueID != null ?
                new ObjectParameter("MarketCatalogueID", marketCatalogueID) :
                new ObjectParameter("MarketCatalogueID", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UserBets_UpdateStatustoInCompletebyMarketIDandUserID", marketCatalogueIDParameter, userIDParameter);
        }
    
        public virtual int SP_UserMarket_UpdateTotalOvers123(string eventID, string totalOvers)
        {
            var eventIDParameter = eventID != null ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(string));
    
            var totalOversParameter = totalOvers != null ?
                new ObjectParameter("TotalOvers", totalOvers) :
                new ObjectParameter("TotalOvers", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UserMarket_UpdateTotalOvers123", eventIDParameter, totalOversParameter);
        }
    
        public virtual int SP_Users_UpdateMarketsForView(Nullable<int> userID, Nullable<bool> isAllowedGrayHound, Nullable<bool> isAllowedHorseRacing, Nullable<bool> isTenisAllowed, Nullable<bool> isSoccerAllowed)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var isAllowedGrayHoundParameter = isAllowedGrayHound.HasValue ?
                new ObjectParameter("isAllowedGrayHound", isAllowedGrayHound) :
                new ObjectParameter("isAllowedGrayHound", typeof(bool));
    
            var isAllowedHorseRacingParameter = isAllowedHorseRacing.HasValue ?
                new ObjectParameter("isAllowedHorseRacing", isAllowedHorseRacing) :
                new ObjectParameter("isAllowedHorseRacing", typeof(bool));
    
            var isTenisAllowedParameter = isTenisAllowed.HasValue ?
                new ObjectParameter("isTenisAllowed", isTenisAllowed) :
                new ObjectParameter("isTenisAllowed", typeof(bool));
    
            var isSoccerAllowedParameter = isSoccerAllowed.HasValue ?
                new ObjectParameter("isSoccerAllowed", isSoccerAllowed) :
                new ObjectParameter("isSoccerAllowed", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Users_UpdateMarketsForView", userIDParameter, isAllowedGrayHoundParameter, isAllowedHorseRacingParameter, isTenisAllowedParameter, isSoccerAllowedParameter);
        }
    
        public virtual int SP_Users_BlockBMS(Nullable<int> userID, Nullable<bool> isBMSBlocked)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var isBMSBlockedParameter = isBMSBlocked.HasValue ?
                new ObjectParameter("isBMSBlocked", isBMSBlocked) :
                new ObjectParameter("isBMSBlocked", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Users_BlockBMS", userIDParameter, isBMSBlockedParameter);
        }
    
        public virtual int SP_UserMarket_SetAllMarketCatalogueIDClosedByUser(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UserMarket_SetAllMarketCatalogueIDClosedByUser", userIDParameter);
        }
    
        public virtual ObjectResult<SP_URLsData_GetAllData_Result> SP_URLsData_GetAllData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_URLsData_GetAllData_Result>("SP_URLsData_GetAllData");
        }
    
        public virtual ObjectResult<SP_UserAccounts_GetDatabyCashRecivedorPaidandDateRange_Result> SP_UserAccounts_GetDatabyCashRecivedorPaidandDateRange(Nullable<int> userID, string from, string to)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var fromParameter = from != null ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(string));
    
            var toParameter = to != null ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserAccounts_GetDatabyCashRecivedorPaidandDateRange_Result>("SP_UserAccounts_GetDatabyCashRecivedorPaidandDateRange", userIDParameter, fromParameter, toParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> SP_APIConfig_GetAutomaticDownloadData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("SP_APIConfig_GetAutomaticDownloadData");
        }
    
        public virtual ObjectResult<Nullable<bool>> SP_Users_GetTransferAgentCommission(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("SP_Users_GetTransferAgentCommission", userIDParameter);
        }
    
        public virtual int SP_Users_UpdateTransferAgentCommission(Nullable<int> userID, Nullable<bool> transferAgentCommission)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var transferAgentCommissionParameter = transferAgentCommission.HasValue ?
                new ObjectParameter("TransferAgentCommission", transferAgentCommission) :
                new ObjectParameter("TransferAgentCommission", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Users_UpdateTransferAgentCommission", userIDParameter, transferAgentCommissionParameter);
        }
    
        public virtual int SP_UserMarket_SetMarketCatalogueIDOpendorClosedByEventIDLine(Nullable<int> userID, string eventID, Nullable<bool> isOpenedbyUser)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var eventIDParameter = eventID != null ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(string));
    
            var isOpenedbyUserParameter = isOpenedbyUser.HasValue ?
                new ObjectParameter("isOpenedbyUser", isOpenedbyUser) :
                new ObjectParameter("isOpenedbyUser", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UserMarket_SetMarketCatalogueIDOpendorClosedByEventIDLine", userIDParameter, eventIDParameter, isOpenedbyUserParameter);
        }
    
        public virtual ObjectResult<SP_Users_GetAllUsersbyUserTypeNew_Result> SP_Users_GetAllUsersbyUserTypeNew(Nullable<int> userType, Nullable<int> createdbyID)
        {
            var userTypeParameter = userType.HasValue ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(int));
    
            var createdbyIDParameter = createdbyID.HasValue ?
                new ObjectParameter("CreatedbyID", createdbyID) :
                new ObjectParameter("CreatedbyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Users_GetAllUsersbyUserTypeNew_Result>("SP_Users_GetAllUsersbyUserTypeNew", userTypeParameter, createdbyIDParameter);
        }
    
        public virtual ObjectResult<SP_UserAccounts_GetDatabyEventNameandDateRangeFancywithMarketName_Result> SP_UserAccounts_GetDatabyEventNameandDateRangeFancywithMarketName(Nullable<int> userID, Nullable<bool> isCreditAmount, string from, string to)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var isCreditAmountParameter = isCreditAmount.HasValue ?
                new ObjectParameter("isCreditAmount", isCreditAmount) :
                new ObjectParameter("isCreditAmount", typeof(bool));
    
            var fromParameter = from != null ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(string));
    
            var toParameter = to != null ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserAccounts_GetDatabyEventNameandDateRangeFancywithMarketName_Result>("SP_UserAccounts_GetDatabyEventNameandDateRangeFancywithMarketName", userIDParameter, isCreditAmountParameter, fromParameter, toParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_Users_GetMaxBalanceTransferLimit(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_Users_GetMaxBalanceTransferLimit", userIDParameter);
        }
    
        public virtual int SP_Users_UpdateMaxBalanceTransferLimit(Nullable<int> userID, Nullable<int> maxBalanceTransferLimit)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var maxBalanceTransferLimitParameter = maxBalanceTransferLimit.HasValue ?
                new ObjectParameter("MaxBalanceTransferLimit", maxBalanceTransferLimit) :
                new ObjectParameter("MaxBalanceTransferLimit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Users_UpdateMaxBalanceTransferLimit", userIDParameter, maxBalanceTransferLimitParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_Users_GetMaxMaxAgentRate(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_Users_GetMaxMaxAgentRate", userIDParameter);
        }
    
        public virtual int SP_Users_UpdateMaxAgentRate(Nullable<int> userID, Nullable<int> maxAgentRate)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var maxAgentRateParameter = maxAgentRate.HasValue ?
                new ObjectParameter("MaxAgentRate", maxAgentRate) :
                new ObjectParameter("MaxAgentRate", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Users_UpdateMaxAgentRate", userIDParameter, maxAgentRateParameter);
        }
    
        public virtual int SP_UserMarket_SetMarketCatalogueIDOpendorClosedByMarketIDLine(Nullable<int> userID, string marketCatalogueID, Nullable<bool> isOpenedbyUser)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var marketCatalogueIDParameter = marketCatalogueID != null ?
                new ObjectParameter("MarketCatalogueID", marketCatalogueID) :
                new ObjectParameter("MarketCatalogueID", typeof(string));
    
            var isOpenedbyUserParameter = isOpenedbyUser.HasValue ?
                new ObjectParameter("isOpenedbyUser", isOpenedbyUser) :
                new ObjectParameter("isOpenedbyUser", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UserMarket_SetMarketCatalogueIDOpendorClosedByMarketIDLine", userIDParameter, marketCatalogueIDParameter, isOpenedbyUserParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> SP_UserAccounts_GetDatabyAgentIDForCommision(Nullable<int> userID, Nullable<bool> isCreditAmount)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var isCreditAmountParameter = isCreditAmount.HasValue ?
                new ObjectParameter("isCreditAmount", isCreditAmount) :
                new ObjectParameter("isCreditAmount", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("SP_UserAccounts_GetDatabyAgentIDForCommision", userIDParameter, isCreditAmountParameter);
        }
    
        public virtual ObjectResult<SP_UserMarket_GetToWinTheTossbyEventID_Result> SP_UserMarket_GetToWinTheTossbyEventID(string eventID, Nullable<System.DateTime> eventOpenDate, Nullable<int> userID)
        {
            var eventIDParameter = eventID != null ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(string));
    
            var eventOpenDateParameter = eventOpenDate.HasValue ?
                new ObjectParameter("EventOpenDate", eventOpenDate) :
                new ObjectParameter("EventOpenDate", typeof(System.DateTime));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserMarket_GetToWinTheTossbyEventID_Result>("SP_UserMarket_GetToWinTheTossbyEventID", eventIDParameter, eventOpenDateParameter, userIDParameter);
        }
    
        public virtual ObjectResult<SP_UserMarket_GetDistinctMarketsOpenedNew_Result> SP_UserMarket_GetDistinctMarketsOpenedNew()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserMarket_GetDistinctMarketsOpenedNew_Result>("SP_UserMarket_GetDistinctMarketsOpenedNew");
        }
    
        public virtual ObjectResult<Nullable<bool>> SP_UserMarket_GetMarketForAllowedBettingbtMarketIDandUserIDInPlay(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("SP_UserMarket_GetMarketForAllowedBettingbtMarketIDandUserIDInPlay", userIDParameter);
        }
    
        public virtual ObjectResult<SP_UserAccounts_GetDatabySuperID_Result> SP_UserAccounts_GetDatabySuperID(Nullable<int> userID, Nullable<bool> isCreditAmount)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var isCreditAmountParameter = isCreditAmount.HasValue ?
                new ObjectParameter("isCreditAmount", isCreditAmount) :
                new ObjectParameter("isCreditAmount", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserAccounts_GetDatabySuperID_Result>("SP_UserAccounts_GetDatabySuperID", userIDParameter, isCreditAmountParameter);
        }
    
        public virtual int SP_AdminAmountForSuper_Insert(string accountsTitle, string debit, string credit, Nullable<int> userID, string marketBookID, Nullable<System.DateTime> createDate)
        {
            var accountsTitleParameter = accountsTitle != null ?
                new ObjectParameter("AccountsTitle", accountsTitle) :
                new ObjectParameter("AccountsTitle", typeof(string));
    
            var debitParameter = debit != null ?
                new ObjectParameter("Debit", debit) :
                new ObjectParameter("Debit", typeof(string));
    
            var creditParameter = credit != null ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var marketBookIDParameter = marketBookID != null ?
                new ObjectParameter("MarketBookID", marketBookID) :
                new ObjectParameter("MarketBookID", typeof(string));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AdminAmountForSuper_Insert", accountsTitleParameter, debitParameter, creditParameter, userIDParameter, marketBookIDParameter, createDateParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> SP_GetAdminPLForSuper(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("SP_GetAdminPLForSuper", userIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> SP_GetAdminPLForSuper1(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("SP_GetAdminPLForSuper1", userIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_Get_CreatrdbyID(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_Get_CreatrdbyID", userIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> SP_UserAccounts_GetDatabyAgentIDForCommisionandDateRange(Nullable<int> userID, Nullable<bool> isCreditAmount, string from, string to)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var isCreditAmountParameter = isCreditAmount.HasValue ?
                new ObjectParameter("isCreditAmount", isCreditAmount) :
                new ObjectParameter("isCreditAmount", typeof(bool));
    
            var fromParameter = from != null ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(string));
    
            var toParameter = to != null ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("SP_UserAccounts_GetDatabyAgentIDForCommisionandDateRange", userIDParameter, isCreditAmountParameter, fromParameter, toParameter);
        }
    
        public virtual int SpInsertIndianFancy(string selectionid, string selectionname)
        {
            var selectionidParameter = selectionid != null ?
                new ObjectParameter("selectionid", selectionid) :
                new ObjectParameter("selectionid", typeof(string));
    
            var selectionnameParameter = selectionname != null ?
                new ObjectParameter("selectionname", selectionname) :
                new ObjectParameter("selectionname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpInsertIndianFancy", selectionidParameter, selectionnameParameter);
        }
    
        public virtual int SpInsertIndianFancy1(string selectionid, string runnername, string marketbookid)
        {
            var selectionidParameter = selectionid != null ?
                new ObjectParameter("selectionid", selectionid) :
                new ObjectParameter("selectionid", typeof(string));
    
            var runnernameParameter = runnername != null ?
                new ObjectParameter("runnername", runnername) :
                new ObjectParameter("runnername", typeof(string));
    
            var marketbookidParameter = marketbookid != null ?
                new ObjectParameter("marketbookid", marketbookid) :
                new ObjectParameter("marketbookid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpInsertIndianFancy1", selectionidParameter, runnernameParameter, marketbookidParameter);
        }
    
        public virtual ObjectResult<SP_UserMarket_GetDistinctLinevMarketsbyEventIDIN_Result> SP_UserMarket_GetDistinctLinevMarketsbyEventIDIN(string eventID)
        {
            var eventIDParameter = eventID != null ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserMarket_GetDistinctLinevMarketsbyEventIDIN_Result>("SP_UserMarket_GetDistinctLinevMarketsbyEventIDIN", eventIDParameter);
        }
    
        public virtual ObjectResult<SP_UserMarket_GetEventDetailsbyMarketIDIN_Result> SP_UserMarket_GetEventDetailsbyMarketIDIN(string marketbookID)
        {
            var marketbookIDParameter = marketbookID != null ?
                new ObjectParameter("MarketbookID", marketbookID) :
                new ObjectParameter("MarketbookID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserMarket_GetEventDetailsbyMarketIDIN_Result>("SP_UserMarket_GetEventDetailsbyMarketIDIN", marketbookIDParameter);
        }
    
        public virtual ObjectResult<string> SP_UserMarket_GetEventTypeNamebyMarketIDIN(string marketbookID, string selectionID)
        {
            var marketbookIDParameter = marketbookID != null ?
                new ObjectParameter("MarketbookID", marketbookID) :
                new ObjectParameter("MarketbookID", typeof(string));
    
            var selectionIDParameter = selectionID != null ?
                new ObjectParameter("selectionID", selectionID) :
                new ObjectParameter("selectionID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_UserMarket_GetEventTypeNamebyMarketIDIN", marketbookIDParameter, selectionIDParameter);
        }
    
        public virtual ObjectResult<SP_UserMarket_GetUserMarketbyEventID_Result> SP_UserMarket_GetUserMarketbyEventID(string eventID)
        {
            var eventIDParameter = eventID != null ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserMarket_GetUserMarketbyEventID_Result>("SP_UserMarket_GetUserMarketbyEventID", eventIDParameter);
        }
    
        public virtual ObjectResult<Sp_GetKalijut_Result> Sp_GetKalijut()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_GetKalijut_Result>("Sp_GetKalijut");
        }
    
        public virtual ObjectResult<SP_UserMarket_GetDistinctKJMarketsbyEventID_Result> SP_UserMarket_GetDistinctKJMarketsbyEventID(string eventID, Nullable<int> userID)
        {
            var eventIDParameter = eventID != null ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserMarket_GetDistinctKJMarketsbyEventID_Result>("SP_UserMarket_GetDistinctKJMarketsbyEventID", eventIDParameter, userIDParameter);
        }
    
        public virtual int SP_UserMarket_SetMarketCatalogueIDOpendorClosedByMarketIDKJ(Nullable<int> userID, string marketCatalogueID, Nullable<bool> isOpenedbyUser)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var marketCatalogueIDParameter = marketCatalogueID != null ?
                new ObjectParameter("MarketCatalogueID", marketCatalogueID) :
                new ObjectParameter("MarketCatalogueID", typeof(string));
    
            var isOpenedbyUserParameter = isOpenedbyUser.HasValue ?
                new ObjectParameter("isOpenedbyUser", isOpenedbyUser) :
                new ObjectParameter("isOpenedbyUser", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UserMarket_SetMarketCatalogueIDOpendorClosedByMarketIDKJ", userIDParameter, marketCatalogueIDParameter, isOpenedbyUserParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_Users_GetUserbyCreatedbyIDKJ(Nullable<int> createdByID)
        {
            var createdByIDParameter = createdByID.HasValue ?
                new ObjectParameter("CreatedByID", createdByID) :
                new ObjectParameter("CreatedByID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_Users_GetUserbyCreatedbyIDKJ", createdByIDParameter);
        }
    
        public virtual ObjectResult<SP_UserMarket_GetDistinctKJMarketsbyEventID1_Result> SP_UserMarket_GetDistinctKJMarketsbyEventID1(string eventID, Nullable<int> userID)
        {
            var eventIDParameter = eventID != null ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserMarket_GetDistinctKJMarketsbyEventID1_Result>("SP_UserMarket_GetDistinctKJMarketsbyEventID1", eventIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<Sp_GetFigureOdds_Result> Sp_GetFigureOdds()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_GetFigureOdds_Result>("Sp_GetFigureOdds");
        }
    
        public virtual int SP_UserMarket_SetMarketCatalogueIDOpendorClosedByMarketIDFigure(Nullable<int> userID, string marketCatalogueID, Nullable<bool> isOpenedbyUser)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var marketCatalogueIDParameter = marketCatalogueID != null ?
                new ObjectParameter("MarketCatalogueID", marketCatalogueID) :
                new ObjectParameter("MarketCatalogueID", typeof(string));
    
            var isOpenedbyUserParameter = isOpenedbyUser.HasValue ?
                new ObjectParameter("isOpenedbyUser", isOpenedbyUser) :
                new ObjectParameter("isOpenedbyUser", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UserMarket_SetMarketCatalogueIDOpendorClosedByMarketIDFigure", userIDParameter, marketCatalogueIDParameter, isOpenedbyUserParameter);
        }
    
        public virtual int SP_UserBets_UpdateStatusForIndianFancy(string marketBookID, string selectionID, Nullable<int> userID)
        {
            var marketBookIDParameter = marketBookID != null ?
                new ObjectParameter("MarketBookID", marketBookID) :
                new ObjectParameter("MarketBookID", typeof(string));
    
            var selectionIDParameter = selectionID != null ?
                new ObjectParameter("selectionID", selectionID) :
                new ObjectParameter("selectionID", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UserBets_UpdateStatusForIndianFancy", marketBookIDParameter, selectionIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<SP_UserBets_GetInPlayMatcheswithRunnersbyUserID1_Result> SP_UserBets_GetInPlayMatcheswithRunnersbyUserID1(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserBets_GetInPlayMatcheswithRunnersbyUserID1_Result>("SP_UserBets_GetInPlayMatcheswithRunnersbyUserID1", userIDParameter);
        }
    
        public virtual ObjectResult<SP_UserMarket_GetUserMarketbyEventID1_Result> SP_UserMarket_GetUserMarketbyEventID1(string eventID)
        {
            var eventIDParameter = eventID != null ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserMarket_GetUserMarketbyEventID1_Result>("SP_UserMarket_GetUserMarketbyEventID1", eventIDParameter);
        }
    
        public virtual ObjectResult<SP_UserMarket_GetUserMarketbyEventID11_Result> SP_UserMarket_GetUserMarketbyEventID11(string eventID)
        {
            var eventIDParameter = eventID != null ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserMarket_GetUserMarketbyEventID11_Result>("SP_UserMarket_GetUserMarketbyEventID11", eventIDParameter);
        }
    
        public virtual ObjectResult<Sp_GetFigureOdd_Result> Sp_GetFigureOdd()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_GetFigureOdd_Result>("Sp_GetFigureOdd");
        }
    
        public virtual ObjectResult<Sp_GetFigureOdds1_Result> Sp_GetFigureOdds1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_GetFigureOdds1_Result>("Sp_GetFigureOdds1");
        }
    
        public virtual ObjectResult<Sp_GetKalijut1_Result> Sp_GetKalijut1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_GetKalijut1_Result>("Sp_GetKalijut1");
        }
    
        public virtual ObjectResult<Sp_GetKalijutodds_Result> Sp_GetKalijutodds()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_GetKalijutodds_Result>("Sp_GetKalijutodds");
        }
    
        public virtual ObjectResult<Sp_GetKalijuts_Result> Sp_GetKalijuts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_GetKalijuts_Result>("Sp_GetKalijuts");
        }
    
        public virtual ObjectResult<SP_UserBets_GetDatabyAgentIDLimit_Result> SP_UserBets_GetDatabyAgentIDLimit(Nullable<int> agentID)
        {
            var agentIDParameter = agentID.HasValue ?
                new ObjectParameter("AgentID", agentID) :
                new ObjectParameter("AgentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserBets_GetDatabyAgentIDLimit_Result>("SP_UserBets_GetDatabyAgentIDLimit", agentIDParameter);
        }
    
        public virtual ObjectResult<SP_UserBets_GetDataForAdminLimit_Result> SP_UserBets_GetDataForAdminLimit()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserBets_GetDataForAdminLimit_Result>("SP_UserBets_GetDataForAdminLimit");
        }
    
        public virtual ObjectResult<SP_UserMarket_GetDistinctKJMarketsbyEventID2_Result> SP_UserMarket_GetDistinctKJMarketsbyEventID2(string eventID, Nullable<int> userID)
        {
            var eventIDParameter = eventID != null ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserMarket_GetDistinctKJMarketsbyEventID2_Result>("SP_UserMarket_GetDistinctKJMarketsbyEventID2", eventIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<SP_UserMarket_GetDistinctKJMarketsbyEventID11_Result> SP_UserMarket_GetDistinctKJMarketsbyEventID11(string eventID, Nullable<int> userID)
        {
            var eventIDParameter = eventID != null ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserMarket_GetDistinctKJMarketsbyEventID11_Result>("SP_UserMarket_GetDistinctKJMarketsbyEventID11", eventIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<SP_UserMarket_GetDistinctKJMarketsbyEventIDs_Result> SP_UserMarket_GetDistinctKJMarketsbyEventIDs(string eventID, Nullable<int> userID)
        {
            var eventIDParameter = eventID != null ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserMarket_GetDistinctKJMarketsbyEventIDs_Result>("SP_UserMarket_GetDistinctKJMarketsbyEventIDs", eventIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<SP_UserMarket_GetDistinctLinevMarketsbyEventIDIN1_Result> SP_UserMarket_GetDistinctLinevMarketsbyEventIDIN1(string eventID)
        {
            var eventIDParameter = eventID != null ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserMarket_GetDistinctLinevMarketsbyEventIDIN1_Result>("SP_UserMarket_GetDistinctLinevMarketsbyEventIDIN1", eventIDParameter);
        }
    
        public virtual ObjectResult<SP_UserMarket_GetEventDetailsbyMarketIDIN1_Result> SP_UserMarket_GetEventDetailsbyMarketIDIN1(string marketbookID)
        {
            var marketbookIDParameter = marketbookID != null ?
                new ObjectParameter("MarketbookID", marketbookID) :
                new ObjectParameter("MarketbookID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserMarket_GetEventDetailsbyMarketIDIN1_Result>("SP_UserMarket_GetEventDetailsbyMarketIDIN1", marketbookIDParameter);
        }
    
        public virtual ObjectResult<string> SP_UserMarket_GetEventTypeNamebyMarketIDIN1(string marketbookID, string selectionID)
        {
            var marketbookIDParameter = marketbookID != null ?
                new ObjectParameter("MarketbookID", marketbookID) :
                new ObjectParameter("MarketbookID", typeof(string));
    
            var selectionIDParameter = selectionID != null ?
                new ObjectParameter("selectionID", selectionID) :
                new ObjectParameter("selectionID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_UserMarket_GetEventTypeNamebyMarketIDIN1", marketbookIDParameter, selectionIDParameter);
        }
    
        public virtual int SP_UserMarket_SetMarketCatalogueIDOpendorClosedByMarketIDFigure1(Nullable<int> userID, string marketCatalogueID, Nullable<bool> isOpenedbyUser)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var marketCatalogueIDParameter = marketCatalogueID != null ?
                new ObjectParameter("MarketCatalogueID", marketCatalogueID) :
                new ObjectParameter("MarketCatalogueID", typeof(string));
    
            var isOpenedbyUserParameter = isOpenedbyUser.HasValue ?
                new ObjectParameter("isOpenedbyUser", isOpenedbyUser) :
                new ObjectParameter("isOpenedbyUser", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UserMarket_SetMarketCatalogueIDOpendorClosedByMarketIDFigure1", userIDParameter, marketCatalogueIDParameter, isOpenedbyUserParameter);
        }
    
        public virtual int SP_UserMarket_SetMarketCatalogueIDOpendorClosedByMarketIDKJ1(Nullable<int> userID, string marketCatalogueID, Nullable<bool> isOpenedbyUser)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var marketCatalogueIDParameter = marketCatalogueID != null ?
                new ObjectParameter("MarketCatalogueID", marketCatalogueID) :
                new ObjectParameter("MarketCatalogueID", typeof(string));
    
            var isOpenedbyUserParameter = isOpenedbyUser.HasValue ?
                new ObjectParameter("isOpenedbyUser", isOpenedbyUser) :
                new ObjectParameter("isOpenedbyUser", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UserMarket_SetMarketCatalogueIDOpendorClosedByMarketIDKJ1", userIDParameter, marketCatalogueIDParameter, isOpenedbyUserParameter);
        }
    
        public virtual ObjectResult<string> SP_Users_GetUserSupername(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_Users_GetUserSupername", userIDParameter);
        }
    
        public virtual int SP_UserMarket_SetMarketCatalogueIDOpendorClosedByMarketIDFigures(Nullable<int> userID, string marketCatalogueID, Nullable<bool> isOpenedbyUser)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var marketCatalogueIDParameter = marketCatalogueID != null ?
                new ObjectParameter("MarketCatalogueID", marketCatalogueID) :
                new ObjectParameter("MarketCatalogueID", typeof(string));
    
            var isOpenedbyUserParameter = isOpenedbyUser.HasValue ?
                new ObjectParameter("isOpenedbyUser", isOpenedbyUser) :
                new ObjectParameter("isOpenedbyUser", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UserMarket_SetMarketCatalogueIDOpendorClosedByMarketIDFigures", userIDParameter, marketCatalogueIDParameter, isOpenedbyUserParameter);
        }
    
        public virtual int SP_UserMarket_SetMarketCatalogueIDOpendorClosedByMarketIDKJs(Nullable<int> userID, string marketCatalogueID, Nullable<bool> isOpenedbyUser)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var marketCatalogueIDParameter = marketCatalogueID != null ?
                new ObjectParameter("MarketCatalogueID", marketCatalogueID) :
                new ObjectParameter("MarketCatalogueID", typeof(string));
    
            var isOpenedbyUserParameter = isOpenedbyUser.HasValue ?
                new ObjectParameter("isOpenedbyUser", isOpenedbyUser) :
                new ObjectParameter("isOpenedbyUser", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UserMarket_SetMarketCatalogueIDOpendorClosedByMarketIDKJs", userIDParameter, marketCatalogueIDParameter, isOpenedbyUserParameter);
        }
    
        public virtual ObjectResult<SP_UserMarket_GetSoccergoalbyEventID_Result> SP_UserMarket_GetSoccergoalbyEventID(string eventID, Nullable<System.DateTime> eventOpenDate, Nullable<int> userID)
        {
            var eventIDParameter = eventID != null ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(string));
    
            var eventOpenDateParameter = eventOpenDate.HasValue ?
                new ObjectParameter("EventOpenDate", eventOpenDate) :
                new ObjectParameter("EventOpenDate", typeof(System.DateTime));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserMarket_GetSoccergoalbyEventID_Result>("SP_UserMarket_GetSoccergoalbyEventID", eventIDParameter, eventOpenDateParameter, userIDParameter);
        }
    
        public virtual ObjectResult<SP_UserMarket_GetDistinctMarketsOpenedNewFancy_Result> SP_UserMarket_GetDistinctMarketsOpenedNewFancy()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserMarket_GetDistinctMarketsOpenedNewFancy_Result>("SP_UserMarket_GetDistinctMarketsOpenedNewFancy");
        }
    
        public virtual ObjectResult<SP_UserMarket_GetDistinctLinevMarketsbyEventID2_Result> SP_UserMarket_GetDistinctLinevMarketsbyEventID2()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserMarket_GetDistinctLinevMarketsbyEventID2_Result>("SP_UserMarket_GetDistinctLinevMarketsbyEventID2");
        }
    
        public virtual ObjectResult<SP_UserMarket_GetTodaysHorseRacingauto_Result> SP_UserMarket_GetTodaysHorseRacingauto(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserMarket_GetTodaysHorseRacingauto_Result>("SP_UserMarket_GetTodaysHorseRacingauto", userIDParameter);
        }
    
        public virtual ObjectResult<SP_UserAccounts_GetDatabyAgentIDForCommisionbyEventtype_Result> SP_UserAccounts_GetDatabyAgentIDForCommisionbyEventtype(Nullable<int> userID, Nullable<bool> isCreditAmount, string from, string to)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var isCreditAmountParameter = isCreditAmount.HasValue ?
                new ObjectParameter("isCreditAmount", isCreditAmount) :
                new ObjectParameter("isCreditAmount", typeof(bool));
    
            var fromParameter = from != null ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(string));
    
            var toParameter = to != null ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserAccounts_GetDatabyAgentIDForCommisionbyEventtype_Result>("SP_UserAccounts_GetDatabyAgentIDForCommisionbyEventtype", userIDParameter, isCreditAmountParameter, fromParameter, toParameter);
        }
    
        public virtual ObjectResult<SP_Users_GetUserbyUsernameandPasswordWeb_Result> SP_Users_GetUserbyUsernameandPasswordWeb(string username, string password)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Users_GetUserbyUsernameandPasswordWeb_Result>("SP_Users_GetUserbyUsernameandPasswordWeb", usernameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<SP_Users_GetUserbyUsernameandPassword_Result2> SP_Users_GetUserbyUsernameandPassword(string username, string password)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Users_GetUserbyUsernameandPassword_Result2>("SP_Users_GetUserbyUsernameandPassword", usernameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<SP_UserBets_GetDatabySamiAdminByID_Result> SP_UserBets_GetDatabySamiAdminByID(Nullable<int> superID)
        {
            var superIDParameter = superID.HasValue ?
                new ObjectParameter("SuperID", superID) :
                new ObjectParameter("SuperID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserBets_GetDatabySamiAdminByID_Result>("SP_UserBets_GetDatabySamiAdminByID", superIDParameter);
        }
    
        public virtual ObjectResult<SP_UserBets_GetDatabySamiAdminByID1_Result> SP_UserBets_GetDatabySamiAdminByID1(Nullable<int> superID)
        {
            var superIDParameter = superID.HasValue ?
                new ObjectParameter("SuperID", superID) :
                new ObjectParameter("SuperID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserBets_GetDatabySamiAdminByID1_Result>("SP_UserBets_GetDatabySamiAdminByID1", superIDParameter);
        }
    
        public virtual ObjectResult<SP_UserBets_GetDataForAdmin_Result> SP_UserBets_GetDataForAdmin()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserBets_GetDataForAdmin_Result>("SP_UserBets_GetDataForAdmin");
        }
    
        public virtual ObjectResult<SP_UserBets_GetDatabySuperID2_Result> SP_UserBets_GetDatabySuperID2(Nullable<int> superID)
        {
            var superIDParameter = superID.HasValue ?
                new ObjectParameter("SuperID", superID) :
                new ObjectParameter("SuperID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserBets_GetDatabySuperID2_Result>("SP_UserBets_GetDatabySuperID2", superIDParameter);
        }
    
        public virtual ObjectResult<SP_UserBets_GetDatabyUserIDandMArketID_Result> SP_UserBets_GetDatabyUserIDandMArketID(Nullable<int> userID, string marketID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var marketIDParameter = marketID != null ?
                new ObjectParameter("MarketID", marketID) :
                new ObjectParameter("MarketID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserBets_GetDatabyUserIDandMArketID_Result>("SP_UserBets_GetDatabyUserIDandMArketID", userIDParameter, marketIDParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> SP_Users_GetIsComAllowbyUserIDNew(Nullable<int> userid)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("SP_Users_GetIsComAllowbyUserIDNew", useridParameter);
        }
    
        public virtual ObjectResult<SP_UserAccounts_GetDatabyCreatedByID_Result> SP_UserAccounts_GetDatabyCreatedByID(Nullable<int> userID, Nullable<bool> isCreditAmount)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var isCreditAmountParameter = isCreditAmount.HasValue ?
                new ObjectParameter("isCreditAmount", isCreditAmount) :
                new ObjectParameter("isCreditAmount", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserAccounts_GetDatabyCreatedByID_Result>("SP_UserAccounts_GetDatabyCreatedByID", userIDParameter, isCreditAmountParameter);
        }
    
        public virtual ObjectResult<SP_UserAccounts_GetDatabyCreatedByIDandEventType_Result> SP_UserAccounts_GetDatabyCreatedByIDandEventType(Nullable<int> userID, Nullable<bool> isCreditAmount, string eventType)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var isCreditAmountParameter = isCreditAmount.HasValue ?
                new ObjectParameter("isCreditAmount", isCreditAmount) :
                new ObjectParameter("isCreditAmount", typeof(bool));
    
            var eventTypeParameter = eventType != null ?
                new ObjectParameter("EventType", eventType) :
                new ObjectParameter("EventType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserAccounts_GetDatabyCreatedByIDandEventType_Result>("SP_UserAccounts_GetDatabyCreatedByIDandEventType", userIDParameter, isCreditAmountParameter, eventTypeParameter);
        }
    
        public virtual ObjectResult<SP_UserAccounts_GetDatabyCreatedByIDForsuper_Result> SP_UserAccounts_GetDatabyCreatedByIDForsuper(Nullable<int> userID, Nullable<bool> isCreditAmount)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var isCreditAmountParameter = isCreditAmount.HasValue ?
                new ObjectParameter("isCreditAmount", isCreditAmount) :
                new ObjectParameter("isCreditAmount", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserAccounts_GetDatabyCreatedByIDForsuper_Result>("SP_UserAccounts_GetDatabyCreatedByIDForsuper", userIDParameter, isCreditAmountParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> SP_GetUsersAccountsID(Nullable<int> userid, string marketid)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var marketidParameter = marketid != null ?
                new ObjectParameter("marketid", marketid) :
                new ObjectParameter("marketid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("SP_GetUsersAccountsID", useridParameter, marketidParameter);
        }
    
        public virtual ObjectResult<SP_UsersAccounts_Insert_Result> SP_UsersAccounts_Insert(string accountsTitle, string debit, string credit, Nullable<int> userID, string marketBookID, Nullable<System.DateTime> createDate, string agentRate, string supertRate, string samiadminRate, string commissionRate, Nullable<decimal> openingBalance, Nullable<bool> isCreditAmount, string eventType, string winnerName, string eventID, string eventName, string mareketBookNameAcc)
        {
            var accountsTitleParameter = accountsTitle != null ?
                new ObjectParameter("AccountsTitle", accountsTitle) :
                new ObjectParameter("AccountsTitle", typeof(string));
    
            var debitParameter = debit != null ?
                new ObjectParameter("Debit", debit) :
                new ObjectParameter("Debit", typeof(string));
    
            var creditParameter = credit != null ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var marketBookIDParameter = marketBookID != null ?
                new ObjectParameter("MarketBookID", marketBookID) :
                new ObjectParameter("MarketBookID", typeof(string));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var agentRateParameter = agentRate != null ?
                new ObjectParameter("AgentRate", agentRate) :
                new ObjectParameter("AgentRate", typeof(string));
    
            var supertRateParameter = supertRate != null ?
                new ObjectParameter("SupertRate", supertRate) :
                new ObjectParameter("SupertRate", typeof(string));
    
            var samiadminRateParameter = samiadminRate != null ?
                new ObjectParameter("SamiadminRate", samiadminRate) :
                new ObjectParameter("SamiadminRate", typeof(string));
    
            var commissionRateParameter = commissionRate != null ?
                new ObjectParameter("CommissionRate", commissionRate) :
                new ObjectParameter("CommissionRate", typeof(string));
    
            var openingBalanceParameter = openingBalance.HasValue ?
                new ObjectParameter("OpeningBalance", openingBalance) :
                new ObjectParameter("OpeningBalance", typeof(decimal));
    
            var isCreditAmountParameter = isCreditAmount.HasValue ?
                new ObjectParameter("isCreditAmount", isCreditAmount) :
                new ObjectParameter("isCreditAmount", typeof(bool));
    
            var eventTypeParameter = eventType != null ?
                new ObjectParameter("EventType", eventType) :
                new ObjectParameter("EventType", typeof(string));
    
            var winnerNameParameter = winnerName != null ?
                new ObjectParameter("WinnerName", winnerName) :
                new ObjectParameter("WinnerName", typeof(string));
    
            var eventIDParameter = eventID != null ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(string));
    
            var eventNameParameter = eventName != null ?
                new ObjectParameter("EventName", eventName) :
                new ObjectParameter("EventName", typeof(string));
    
            var mareketBookNameAccParameter = mareketBookNameAcc != null ?
                new ObjectParameter("MareketBookNameAcc", mareketBookNameAcc) :
                new ObjectParameter("MareketBookNameAcc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UsersAccounts_Insert_Result>("SP_UsersAccounts_Insert", accountsTitleParameter, debitParameter, creditParameter, userIDParameter, marketBookIDParameter, createDateParameter, agentRateParameter, supertRateParameter, samiadminRateParameter, commissionRateParameter, openingBalanceParameter, isCreditAmountParameter, eventTypeParameter, winnerNameParameter, eventIDParameter, eventNameParameter, mareketBookNameAccParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_Users_GetSamiadminRate(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_Users_GetSamiadminRate", userIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_Users_GetSuperRate(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_Users_GetSuperRate", userIDParameter);
        }
    
        public virtual ObjectResult<SP_UserAccounts_GetDatabyCreatedByIDForSamiadmin_Result> SP_UserAccounts_GetDatabyCreatedByIDForSamiadmin(Nullable<int> userID, Nullable<bool> isCreditAmount)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var isCreditAmountParameter = isCreditAmount.HasValue ?
                new ObjectParameter("isCreditAmount", isCreditAmount) :
                new ObjectParameter("isCreditAmount", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserAccounts_GetDatabyCreatedByIDForSamiadmin_Result>("SP_UserAccounts_GetDatabyCreatedByIDForSamiadmin", userIDParameter, isCreditAmountParameter);
        }
    
        public virtual ObjectResult<SP_UserAccounts_GetCommission_Result> SP_UserAccounts_GetCommission(Nullable<int> userID, Nullable<bool> isCreditAmount, string from, string to)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var isCreditAmountParameter = isCreditAmount.HasValue ?
                new ObjectParameter("isCreditAmount", isCreditAmount) :
                new ObjectParameter("isCreditAmount", typeof(bool));
    
            var fromParameter = from != null ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(string));
    
            var toParameter = to != null ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserAccounts_GetCommission_Result>("SP_UserAccounts_GetCommission", userIDParameter, isCreditAmountParameter, fromParameter, toParameter);
        }
    
        public virtual ObjectResult<SP_UserBets_GetDatabyUserIDandMArketIDIN_Result> SP_UserBets_GetDatabyUserIDandMArketIDIN(Nullable<int> userID, string selectionID, string marketID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var selectionIDParameter = selectionID != null ?
                new ObjectParameter("selectionID", selectionID) :
                new ObjectParameter("selectionID", typeof(string));
    
            var marketIDParameter = marketID != null ?
                new ObjectParameter("MarketID", marketID) :
                new ObjectParameter("MarketID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserBets_GetDatabyUserIDandMArketIDIN_Result>("SP_UserBets_GetDatabyUserIDandMArketIDIN", userIDParameter, selectionIDParameter, marketIDParameter);
        }
    
        public virtual int SP_UserBets_UpdateStatusIN(string marketBookID, string selectionID, Nullable<int> userID)
        {
            var marketBookIDParameter = marketBookID != null ?
                new ObjectParameter("MarketBookID", marketBookID) :
                new ObjectParameter("MarketBookID", typeof(string));
    
            var selectionIDParameter = selectionID != null ?
                new ObjectParameter("selectionID", selectionID) :
                new ObjectParameter("selectionID", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UserBets_UpdateStatusIN", marketBookIDParameter, selectionIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<SP_UserMarket_GetToTiedMarketbyEventID_Result> SP_UserMarket_GetToTiedMarketbyEventID(string eventID, Nullable<System.DateTime> eventOpenDate, Nullable<int> userID)
        {
            var eventIDParameter = eventID != null ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(string));
    
            var eventOpenDateParameter = eventOpenDate.HasValue ?
                new ObjectParameter("EventOpenDate", eventOpenDate) :
                new ObjectParameter("EventOpenDate", typeof(System.DateTime));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserMarket_GetToTiedMarketbyEventID_Result>("SP_UserMarket_GetToTiedMarketbyEventID", eventIDParameter, eventOpenDateParameter, userIDParameter);
        }
    
        public virtual ObjectResult<string> SP_UserMarket_GetDistinctMarketIDByEventID(string eventID)
        {
            var eventIDParameter = eventID != null ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_UserMarket_GetDistinctMarketIDByEventID", eventIDParameter);
        }
    }
}
