//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AppForBackGroundTasks.BettingServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MarketCatalogue", Namespace="http://schemas.datacontract.org/2004/07/ExternalAPI.TO")]
    [System.SerializableAttribute()]
    public partial class MarketCatalogue : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AppForBackGroundTasks.BettingServiceReference.Competition CompetitionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AppForBackGroundTasks.BettingServiceReference.MarketDescription DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AppForBackGroundTasks.BettingServiceReference.Event EventField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AppForBackGroundTasks.BettingServiceReference.EventType EventTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsMarketDataDelayedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MarketIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MarketNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AppForBackGroundTasks.BettingServiceReference.RunnerDescription[] RunnersField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AppForBackGroundTasks.BettingServiceReference.Competition Competition {
            get {
                return this.CompetitionField;
            }
            set {
                if ((object.ReferenceEquals(this.CompetitionField, value) != true)) {
                    this.CompetitionField = value;
                    this.RaisePropertyChanged("Competition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AppForBackGroundTasks.BettingServiceReference.MarketDescription Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AppForBackGroundTasks.BettingServiceReference.Event Event {
            get {
                return this.EventField;
            }
            set {
                if ((object.ReferenceEquals(this.EventField, value) != true)) {
                    this.EventField = value;
                    this.RaisePropertyChanged("Event");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AppForBackGroundTasks.BettingServiceReference.EventType EventType {
            get {
                return this.EventTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.EventTypeField, value) != true)) {
                    this.EventTypeField = value;
                    this.RaisePropertyChanged("EventType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsMarketDataDelayed {
            get {
                return this.IsMarketDataDelayedField;
            }
            set {
                if ((this.IsMarketDataDelayedField.Equals(value) != true)) {
                    this.IsMarketDataDelayedField = value;
                    this.RaisePropertyChanged("IsMarketDataDelayed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MarketId {
            get {
                return this.MarketIdField;
            }
            set {
                if ((object.ReferenceEquals(this.MarketIdField, value) != true)) {
                    this.MarketIdField = value;
                    this.RaisePropertyChanged("MarketId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MarketName {
            get {
                return this.MarketNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MarketNameField, value) != true)) {
                    this.MarketNameField = value;
                    this.RaisePropertyChanged("MarketName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AppForBackGroundTasks.BettingServiceReference.RunnerDescription[] Runners {
            get {
                return this.RunnersField;
            }
            set {
                if ((object.ReferenceEquals(this.RunnersField, value) != true)) {
                    this.RunnersField = value;
                    this.RaisePropertyChanged("Runners");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Competition", Namespace="http://schemas.datacontract.org/2004/07/ExternalAPI.TO")]
    [System.SerializableAttribute()]
    public partial class Competition : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool isFavoriteField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isFavorite {
            get {
                return this.isFavoriteField;
            }
            set {
                if ((this.isFavoriteField.Equals(value) != true)) {
                    this.isFavoriteField = value;
                    this.RaisePropertyChanged("isFavorite");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MarketDescription", Namespace="http://schemas.datacontract.org/2004/07/ExternalAPI.TO")]
    [System.SerializableAttribute()]
    public partial class MarketDescription : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AppForBackGroundTasks.BettingServiceReference.MarketBettingType BettingTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ClarificationsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsBspMarketField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsDiscountAllowedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsPersistenceEnabledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsTurnInPlayEnabledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double MarketBaseRateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime MarketTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MarketTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RegulatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RulesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool RulesHasDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> SettleTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> SuspendTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WalletField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AppForBackGroundTasks.BettingServiceReference.MarketBettingType BettingType {
            get {
                return this.BettingTypeField;
            }
            set {
                if ((this.BettingTypeField.Equals(value) != true)) {
                    this.BettingTypeField = value;
                    this.RaisePropertyChanged("BettingType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Clarifications {
            get {
                return this.ClarificationsField;
            }
            set {
                if ((object.ReferenceEquals(this.ClarificationsField, value) != true)) {
                    this.ClarificationsField = value;
                    this.RaisePropertyChanged("Clarifications");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsBspMarket {
            get {
                return this.IsBspMarketField;
            }
            set {
                if ((this.IsBspMarketField.Equals(value) != true)) {
                    this.IsBspMarketField = value;
                    this.RaisePropertyChanged("IsBspMarket");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDiscountAllowed {
            get {
                return this.IsDiscountAllowedField;
            }
            set {
                if ((this.IsDiscountAllowedField.Equals(value) != true)) {
                    this.IsDiscountAllowedField = value;
                    this.RaisePropertyChanged("IsDiscountAllowed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPersistenceEnabled {
            get {
                return this.IsPersistenceEnabledField;
            }
            set {
                if ((this.IsPersistenceEnabledField.Equals(value) != true)) {
                    this.IsPersistenceEnabledField = value;
                    this.RaisePropertyChanged("IsPersistenceEnabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsTurnInPlayEnabled {
            get {
                return this.IsTurnInPlayEnabledField;
            }
            set {
                if ((this.IsTurnInPlayEnabledField.Equals(value) != true)) {
                    this.IsTurnInPlayEnabledField = value;
                    this.RaisePropertyChanged("IsTurnInPlayEnabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MarketBaseRate {
            get {
                return this.MarketBaseRateField;
            }
            set {
                if ((this.MarketBaseRateField.Equals(value) != true)) {
                    this.MarketBaseRateField = value;
                    this.RaisePropertyChanged("MarketBaseRate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime MarketTime {
            get {
                return this.MarketTimeField;
            }
            set {
                if ((this.MarketTimeField.Equals(value) != true)) {
                    this.MarketTimeField = value;
                    this.RaisePropertyChanged("MarketTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MarketType {
            get {
                return this.MarketTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.MarketTypeField, value) != true)) {
                    this.MarketTypeField = value;
                    this.RaisePropertyChanged("MarketType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Regulator {
            get {
                return this.RegulatorField;
            }
            set {
                if ((object.ReferenceEquals(this.RegulatorField, value) != true)) {
                    this.RegulatorField = value;
                    this.RaisePropertyChanged("Regulator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Rules {
            get {
                return this.RulesField;
            }
            set {
                if ((object.ReferenceEquals(this.RulesField, value) != true)) {
                    this.RulesField = value;
                    this.RaisePropertyChanged("Rules");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool RulesHasDate {
            get {
                return this.RulesHasDateField;
            }
            set {
                if ((this.RulesHasDateField.Equals(value) != true)) {
                    this.RulesHasDateField = value;
                    this.RaisePropertyChanged("RulesHasDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> SettleTime {
            get {
                return this.SettleTimeField;
            }
            set {
                if ((this.SettleTimeField.Equals(value) != true)) {
                    this.SettleTimeField = value;
                    this.RaisePropertyChanged("SettleTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> SuspendTime {
            get {
                return this.SuspendTimeField;
            }
            set {
                if ((this.SuspendTimeField.Equals(value) != true)) {
                    this.SuspendTimeField = value;
                    this.RaisePropertyChanged("SuspendTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Wallet {
            get {
                return this.WalletField;
            }
            set {
                if ((object.ReferenceEquals(this.WalletField, value) != true)) {
                    this.WalletField = value;
                    this.RaisePropertyChanged("Wallet");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Event", Namespace="http://schemas.datacontract.org/2004/07/ExternalAPI.TO")]
    [System.SerializableAttribute()]
    public partial class Event : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CountryCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> OpenDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TimezoneField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VenueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool isFavoriteField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CountryCode {
            get {
                return this.CountryCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryCodeField, value) != true)) {
                    this.CountryCodeField = value;
                    this.RaisePropertyChanged("CountryCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> OpenDate {
            get {
                return this.OpenDateField;
            }
            set {
                if ((this.OpenDateField.Equals(value) != true)) {
                    this.OpenDateField = value;
                    this.RaisePropertyChanged("OpenDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Timezone {
            get {
                return this.TimezoneField;
            }
            set {
                if ((object.ReferenceEquals(this.TimezoneField, value) != true)) {
                    this.TimezoneField = value;
                    this.RaisePropertyChanged("Timezone");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Venue {
            get {
                return this.VenueField;
            }
            set {
                if ((object.ReferenceEquals(this.VenueField, value) != true)) {
                    this.VenueField = value;
                    this.RaisePropertyChanged("Venue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isFavorite {
            get {
                return this.isFavoriteField;
            }
            set {
                if ((this.isFavoriteField.Equals(value) != true)) {
                    this.isFavoriteField = value;
                    this.RaisePropertyChanged("isFavorite");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EventType", Namespace="http://schemas.datacontract.org/2004/07/ExternalAPI.TO")]
    [System.SerializableAttribute()]
    public partial class EventType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool isFavoriteField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isFavorite {
            get {
                return this.isFavoriteField;
            }
            set {
                if ((this.isFavoriteField.Equals(value) != true)) {
                    this.isFavoriteField = value;
                    this.RaisePropertyChanged("isFavorite");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RunnerDescription", Namespace="http://schemas.datacontract.org/2004/07/ExternalAPI.TO")]
    [System.SerializableAttribute()]
    public partial class RunnerDescription : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double HandicapField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<string, string> MetadataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RunnerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long SelectionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SortPriorityField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Handicap {
            get {
                return this.HandicapField;
            }
            set {
                if ((this.HandicapField.Equals(value) != true)) {
                    this.HandicapField = value;
                    this.RaisePropertyChanged("Handicap");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, string> Metadata {
            get {
                return this.MetadataField;
            }
            set {
                if ((object.ReferenceEquals(this.MetadataField, value) != true)) {
                    this.MetadataField = value;
                    this.RaisePropertyChanged("Metadata");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RunnerName {
            get {
                return this.RunnerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.RunnerNameField, value) != true)) {
                    this.RunnerNameField = value;
                    this.RaisePropertyChanged("RunnerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long SelectionId {
            get {
                return this.SelectionIdField;
            }
            set {
                if ((this.SelectionIdField.Equals(value) != true)) {
                    this.SelectionIdField = value;
                    this.RaisePropertyChanged("SelectionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SortPriority {
            get {
                return this.SortPriorityField;
            }
            set {
                if ((this.SortPriorityField.Equals(value) != true)) {
                    this.SortPriorityField = value;
                    this.RaisePropertyChanged("SortPriority");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MarketBettingType", Namespace="http://schemas.datacontract.org/2004/07/ExternalAPI.TO")]
    public enum MarketBettingType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ODDS = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LINE = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RANGE = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ASIAN_HANDICAP_DOUBLE_LINE = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ASIAN_HANDICAP_SINGLE_LINE = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FIXED_ODDS = 5,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MarketBook", Namespace="http://schemas.datacontract.org/2004/07/ExternalAPI.TO")]
    [System.SerializableAttribute()]
    public partial class MarketBook : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BetDelayField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BettingAllowedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BettingAllowedOverAllField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CricketAPIMatchKeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CricketMatchKeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AppForBackGroundTasks.BettingServiceReference.DebitCredit[] DebitCreditField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EventIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FavoriteBackField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FavoriteBackSizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FavoriteIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FavoriteLayField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FavoriteLaySizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FavoriteSelectionNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GetMatchUpdatesFromField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsBspReconciledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsCompleteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsCrossMatchingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsInplayField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsMarketDataDelayedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsRunnersVoidableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> LastMatchTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AppForBackGroundTasks.BettingServiceReference.LinevMarkets[] LineVMarketsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MainSportsnameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MarketBookNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MarketIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MarketStatusstrField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NumberOfActiveRunnersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NumberOfRunnersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NumberOfWinnersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OpenDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> OrignalOpenDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal PoundRateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AppForBackGroundTasks.BettingServiceReference.Runner[] RunnersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SheetNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AppForBackGroundTasks.BettingServiceReference.MarketStatus StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double TotalAvailableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double TotalMatchedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TotalOversField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserBetsAdminField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserBetsAgentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserBetsEndUserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long VersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool isOpenExternallyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] lstMultipleSelectionforBetsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int marketsopenedField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BetDelay {
            get {
                return this.BetDelayField;
            }
            set {
                if ((this.BetDelayField.Equals(value) != true)) {
                    this.BetDelayField = value;
                    this.RaisePropertyChanged("BetDelay");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BettingAllowed {
            get {
                return this.BettingAllowedField;
            }
            set {
                if ((this.BettingAllowedField.Equals(value) != true)) {
                    this.BettingAllowedField = value;
                    this.RaisePropertyChanged("BettingAllowed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BettingAllowedOverAll {
            get {
                return this.BettingAllowedOverAllField;
            }
            set {
                if ((this.BettingAllowedOverAllField.Equals(value) != true)) {
                    this.BettingAllowedOverAllField = value;
                    this.RaisePropertyChanged("BettingAllowedOverAll");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CricketAPIMatchKey {
            get {
                return this.CricketAPIMatchKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.CricketAPIMatchKeyField, value) != true)) {
                    this.CricketAPIMatchKeyField = value;
                    this.RaisePropertyChanged("CricketAPIMatchKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CricketMatchKey {
            get {
                return this.CricketMatchKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.CricketMatchKeyField, value) != true)) {
                    this.CricketMatchKeyField = value;
                    this.RaisePropertyChanged("CricketMatchKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AppForBackGroundTasks.BettingServiceReference.DebitCredit[] DebitCredit {
            get {
                return this.DebitCreditField;
            }
            set {
                if ((object.ReferenceEquals(this.DebitCreditField, value) != true)) {
                    this.DebitCreditField = value;
                    this.RaisePropertyChanged("DebitCredit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EventID {
            get {
                return this.EventIDField;
            }
            set {
                if ((object.ReferenceEquals(this.EventIDField, value) != true)) {
                    this.EventIDField = value;
                    this.RaisePropertyChanged("EventID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FavoriteBack {
            get {
                return this.FavoriteBackField;
            }
            set {
                if ((object.ReferenceEquals(this.FavoriteBackField, value) != true)) {
                    this.FavoriteBackField = value;
                    this.RaisePropertyChanged("FavoriteBack");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FavoriteBackSize {
            get {
                return this.FavoriteBackSizeField;
            }
            set {
                if ((object.ReferenceEquals(this.FavoriteBackSizeField, value) != true)) {
                    this.FavoriteBackSizeField = value;
                    this.RaisePropertyChanged("FavoriteBackSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FavoriteID {
            get {
                return this.FavoriteIDField;
            }
            set {
                if ((object.ReferenceEquals(this.FavoriteIDField, value) != true)) {
                    this.FavoriteIDField = value;
                    this.RaisePropertyChanged("FavoriteID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FavoriteLay {
            get {
                return this.FavoriteLayField;
            }
            set {
                if ((object.ReferenceEquals(this.FavoriteLayField, value) != true)) {
                    this.FavoriteLayField = value;
                    this.RaisePropertyChanged("FavoriteLay");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FavoriteLaySize {
            get {
                return this.FavoriteLaySizeField;
            }
            set {
                if ((object.ReferenceEquals(this.FavoriteLaySizeField, value) != true)) {
                    this.FavoriteLaySizeField = value;
                    this.RaisePropertyChanged("FavoriteLaySize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FavoriteSelectionName {
            get {
                return this.FavoriteSelectionNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FavoriteSelectionNameField, value) != true)) {
                    this.FavoriteSelectionNameField = value;
                    this.RaisePropertyChanged("FavoriteSelectionName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GetMatchUpdatesFrom {
            get {
                return this.GetMatchUpdatesFromField;
            }
            set {
                if ((object.ReferenceEquals(this.GetMatchUpdatesFromField, value) != true)) {
                    this.GetMatchUpdatesFromField = value;
                    this.RaisePropertyChanged("GetMatchUpdatesFrom");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsBspReconciled {
            get {
                return this.IsBspReconciledField;
            }
            set {
                if ((this.IsBspReconciledField.Equals(value) != true)) {
                    this.IsBspReconciledField = value;
                    this.RaisePropertyChanged("IsBspReconciled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsComplete {
            get {
                return this.IsCompleteField;
            }
            set {
                if ((this.IsCompleteField.Equals(value) != true)) {
                    this.IsCompleteField = value;
                    this.RaisePropertyChanged("IsComplete");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsCrossMatching {
            get {
                return this.IsCrossMatchingField;
            }
            set {
                if ((this.IsCrossMatchingField.Equals(value) != true)) {
                    this.IsCrossMatchingField = value;
                    this.RaisePropertyChanged("IsCrossMatching");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsInplay {
            get {
                return this.IsInplayField;
            }
            set {
                if ((this.IsInplayField.Equals(value) != true)) {
                    this.IsInplayField = value;
                    this.RaisePropertyChanged("IsInplay");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsMarketDataDelayed {
            get {
                return this.IsMarketDataDelayedField;
            }
            set {
                if ((this.IsMarketDataDelayedField.Equals(value) != true)) {
                    this.IsMarketDataDelayedField = value;
                    this.RaisePropertyChanged("IsMarketDataDelayed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsRunnersVoidable {
            get {
                return this.IsRunnersVoidableField;
            }
            set {
                if ((this.IsRunnersVoidableField.Equals(value) != true)) {
                    this.IsRunnersVoidableField = value;
                    this.RaisePropertyChanged("IsRunnersVoidable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> LastMatchTime {
            get {
                return this.LastMatchTimeField;
            }
            set {
                if ((this.LastMatchTimeField.Equals(value) != true)) {
                    this.LastMatchTimeField = value;
                    this.RaisePropertyChanged("LastMatchTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AppForBackGroundTasks.BettingServiceReference.LinevMarkets[] LineVMarkets {
            get {
                return this.LineVMarketsField;
            }
            set {
                if ((object.ReferenceEquals(this.LineVMarketsField, value) != true)) {
                    this.LineVMarketsField = value;
                    this.RaisePropertyChanged("LineVMarkets");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MainSportsname {
            get {
                return this.MainSportsnameField;
            }
            set {
                if ((object.ReferenceEquals(this.MainSportsnameField, value) != true)) {
                    this.MainSportsnameField = value;
                    this.RaisePropertyChanged("MainSportsname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MarketBookName {
            get {
                return this.MarketBookNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MarketBookNameField, value) != true)) {
                    this.MarketBookNameField = value;
                    this.RaisePropertyChanged("MarketBookName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MarketId {
            get {
                return this.MarketIdField;
            }
            set {
                if ((object.ReferenceEquals(this.MarketIdField, value) != true)) {
                    this.MarketIdField = value;
                    this.RaisePropertyChanged("MarketId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MarketStatusstr {
            get {
                return this.MarketStatusstrField;
            }
            set {
                if ((object.ReferenceEquals(this.MarketStatusstrField, value) != true)) {
                    this.MarketStatusstrField = value;
                    this.RaisePropertyChanged("MarketStatusstr");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NumberOfActiveRunners {
            get {
                return this.NumberOfActiveRunnersField;
            }
            set {
                if ((this.NumberOfActiveRunnersField.Equals(value) != true)) {
                    this.NumberOfActiveRunnersField = value;
                    this.RaisePropertyChanged("NumberOfActiveRunners");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NumberOfRunners {
            get {
                return this.NumberOfRunnersField;
            }
            set {
                if ((this.NumberOfRunnersField.Equals(value) != true)) {
                    this.NumberOfRunnersField = value;
                    this.RaisePropertyChanged("NumberOfRunners");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NumberOfWinners {
            get {
                return this.NumberOfWinnersField;
            }
            set {
                if ((this.NumberOfWinnersField.Equals(value) != true)) {
                    this.NumberOfWinnersField = value;
                    this.RaisePropertyChanged("NumberOfWinners");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OpenDate {
            get {
                return this.OpenDateField;
            }
            set {
                if ((object.ReferenceEquals(this.OpenDateField, value) != true)) {
                    this.OpenDateField = value;
                    this.RaisePropertyChanged("OpenDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> OrignalOpenDate {
            get {
                return this.OrignalOpenDateField;
            }
            set {
                if ((this.OrignalOpenDateField.Equals(value) != true)) {
                    this.OrignalOpenDateField = value;
                    this.RaisePropertyChanged("OrignalOpenDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal PoundRate {
            get {
                return this.PoundRateField;
            }
            set {
                if ((this.PoundRateField.Equals(value) != true)) {
                    this.PoundRateField = value;
                    this.RaisePropertyChanged("PoundRate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AppForBackGroundTasks.BettingServiceReference.Runner[] Runners {
            get {
                return this.RunnersField;
            }
            set {
                if ((object.ReferenceEquals(this.RunnersField, value) != true)) {
                    this.RunnersField = value;
                    this.RaisePropertyChanged("Runners");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SheetName {
            get {
                return this.SheetNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SheetNameField, value) != true)) {
                    this.SheetNameField = value;
                    this.RaisePropertyChanged("SheetName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AppForBackGroundTasks.BettingServiceReference.MarketStatus Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double TotalAvailable {
            get {
                return this.TotalAvailableField;
            }
            set {
                if ((this.TotalAvailableField.Equals(value) != true)) {
                    this.TotalAvailableField = value;
                    this.RaisePropertyChanged("TotalAvailable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double TotalMatched {
            get {
                return this.TotalMatchedField;
            }
            set {
                if ((this.TotalMatchedField.Equals(value) != true)) {
                    this.TotalMatchedField = value;
                    this.RaisePropertyChanged("TotalMatched");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TotalOvers {
            get {
                return this.TotalOversField;
            }
            set {
                if ((object.ReferenceEquals(this.TotalOversField, value) != true)) {
                    this.TotalOversField = value;
                    this.RaisePropertyChanged("TotalOvers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserBetsAdmin {
            get {
                return this.UserBetsAdminField;
            }
            set {
                if ((object.ReferenceEquals(this.UserBetsAdminField, value) != true)) {
                    this.UserBetsAdminField = value;
                    this.RaisePropertyChanged("UserBetsAdmin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserBetsAgent {
            get {
                return this.UserBetsAgentField;
            }
            set {
                if ((object.ReferenceEquals(this.UserBetsAgentField, value) != true)) {
                    this.UserBetsAgentField = value;
                    this.RaisePropertyChanged("UserBetsAgent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserBetsEndUser {
            get {
                return this.UserBetsEndUserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserBetsEndUserField, value) != true)) {
                    this.UserBetsEndUserField = value;
                    this.RaisePropertyChanged("UserBetsEndUser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Version {
            get {
                return this.VersionField;
            }
            set {
                if ((this.VersionField.Equals(value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isOpenExternally {
            get {
                return this.isOpenExternallyField;
            }
            set {
                if ((this.isOpenExternallyField.Equals(value) != true)) {
                    this.isOpenExternallyField = value;
                    this.RaisePropertyChanged("isOpenExternally");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] lstMultipleSelectionforBets {
            get {
                return this.lstMultipleSelectionforBetsField;
            }
            set {
                if ((object.ReferenceEquals(this.lstMultipleSelectionforBetsField, value) != true)) {
                    this.lstMultipleSelectionforBetsField = value;
                    this.RaisePropertyChanged("lstMultipleSelectionforBets");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int marketsopened {
            get {
                return this.marketsopenedField;
            }
            set {
                if ((this.marketsopenedField.Equals(value) != true)) {
                    this.marketsopenedField = value;
                    this.RaisePropertyChanged("marketsopened");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DebitCredit", Namespace="http://schemas.datacontract.org/2004/07/ExternalAPI.TO")]
    [System.SerializableAttribute()]
    public partial class DebitCredit : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal CreditField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal DebitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SelectionIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Credit {
            get {
                return this.CreditField;
            }
            set {
                if ((this.CreditField.Equals(value) != true)) {
                    this.CreditField = value;
                    this.RaisePropertyChanged("Credit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Debit {
            get {
                return this.DebitField;
            }
            set {
                if ((this.DebitField.Equals(value) != true)) {
                    this.DebitField = value;
                    this.RaisePropertyChanged("Debit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SelectionID {
            get {
                return this.SelectionIDField;
            }
            set {
                if ((object.ReferenceEquals(this.SelectionIDField, value) != true)) {
                    this.SelectionIDField = value;
                    this.RaisePropertyChanged("SelectionID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LinevMarkets", Namespace="http://schemas.datacontract.org/2004/07/ExternalAPI.TO")]
    [System.SerializableAttribute()]
    public partial class LinevMarkets : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string AssociateeventIDk__BackingFieldField;
        
        private bool BettingAllowedk__BackingFieldField;
        
        private string CompetitionIDk__BackingFieldField;
        
        private string CompetitionNamek__BackingFieldField;
        
        private string EventIDk__BackingFieldField;
        
        private string EventNamek__BackingFieldField;
        
        private string MarketCatalogueIDk__BackingFieldField;
        
        private string MarketCatalogueNamek__BackingFieldField;
        
        private string SelectionIDk__BackingFieldField;
        
        private string SelectionNamek__BackingFieldField;
        
        private bool isOpenedbyUserk__BackingFieldField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<AssociateeventID>k__BackingField", IsRequired=true)]
        public string AssociateeventIDk__BackingField {
            get {
                return this.AssociateeventIDk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.AssociateeventIDk__BackingFieldField, value) != true)) {
                    this.AssociateeventIDk__BackingFieldField = value;
                    this.RaisePropertyChanged("AssociateeventIDk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<BettingAllowed>k__BackingField", IsRequired=true)]
        public bool BettingAllowedk__BackingField {
            get {
                return this.BettingAllowedk__BackingFieldField;
            }
            set {
                if ((this.BettingAllowedk__BackingFieldField.Equals(value) != true)) {
                    this.BettingAllowedk__BackingFieldField = value;
                    this.RaisePropertyChanged("BettingAllowedk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<CompetitionID>k__BackingField", IsRequired=true)]
        public string CompetitionIDk__BackingField {
            get {
                return this.CompetitionIDk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.CompetitionIDk__BackingFieldField, value) != true)) {
                    this.CompetitionIDk__BackingFieldField = value;
                    this.RaisePropertyChanged("CompetitionIDk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<CompetitionName>k__BackingField", IsRequired=true)]
        public string CompetitionNamek__BackingField {
            get {
                return this.CompetitionNamek__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.CompetitionNamek__BackingFieldField, value) != true)) {
                    this.CompetitionNamek__BackingFieldField = value;
                    this.RaisePropertyChanged("CompetitionNamek__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<EventID>k__BackingField", IsRequired=true)]
        public string EventIDk__BackingField {
            get {
                return this.EventIDk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.EventIDk__BackingFieldField, value) != true)) {
                    this.EventIDk__BackingFieldField = value;
                    this.RaisePropertyChanged("EventIDk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<EventName>k__BackingField", IsRequired=true)]
        public string EventNamek__BackingField {
            get {
                return this.EventNamek__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.EventNamek__BackingFieldField, value) != true)) {
                    this.EventNamek__BackingFieldField = value;
                    this.RaisePropertyChanged("EventNamek__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<MarketCatalogueID>k__BackingField", IsRequired=true)]
        public string MarketCatalogueIDk__BackingField {
            get {
                return this.MarketCatalogueIDk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.MarketCatalogueIDk__BackingFieldField, value) != true)) {
                    this.MarketCatalogueIDk__BackingFieldField = value;
                    this.RaisePropertyChanged("MarketCatalogueIDk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<MarketCatalogueName>k__BackingField", IsRequired=true)]
        public string MarketCatalogueNamek__BackingField {
            get {
                return this.MarketCatalogueNamek__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.MarketCatalogueNamek__BackingFieldField, value) != true)) {
                    this.MarketCatalogueNamek__BackingFieldField = value;
                    this.RaisePropertyChanged("MarketCatalogueNamek__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<SelectionID>k__BackingField", IsRequired=true)]
        public string SelectionIDk__BackingField {
            get {
                return this.SelectionIDk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.SelectionIDk__BackingFieldField, value) != true)) {
                    this.SelectionIDk__BackingFieldField = value;
                    this.RaisePropertyChanged("SelectionIDk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<SelectionName>k__BackingField", IsRequired=true)]
        public string SelectionNamek__BackingField {
            get {
                return this.SelectionNamek__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.SelectionNamek__BackingFieldField, value) != true)) {
                    this.SelectionNamek__BackingFieldField = value;
                    this.RaisePropertyChanged("SelectionNamek__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<isOpenedbyUser>k__BackingField", IsRequired=true)]
        public bool isOpenedbyUserk__BackingField {
            get {
                return this.isOpenedbyUserk__BackingFieldField;
            }
            set {
                if ((this.isOpenedbyUserk__BackingFieldField.Equals(value) != true)) {
                    this.isOpenedbyUserk__BackingFieldField = value;
                    this.RaisePropertyChanged("isOpenedbyUserk__BackingField");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Runner", Namespace="http://schemas.datacontract.org/2004/07/ExternalAPI.TO")]
    [System.SerializableAttribute()]
    public partial class Runner : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> AdjustmentFactorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AverageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BettingAllowedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ClothnumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AppForBackGroundTasks.BettingServiceReference.ExchangePrices ExchangePricesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> HandicapField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string JockeyNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> LastPriceTradedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long LossField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MarketBookIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MarketStatusStrField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AppForBackGroundTasks.BettingServiceReference.Match[] MatchesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AppForBackGroundTasks.BettingServiceReference.Order[] OrdersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long ProfitandLossField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> RemovalDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RunnerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SelectionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StallDrawField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AppForBackGroundTasks.BettingServiceReference.StartingPrices StartingPricesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AppForBackGroundTasks.BettingServiceReference.RunnerStatus StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusStrField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double TotalMatchedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WearingDescField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WearingURLField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool isShowField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> AdjustmentFactor {
            get {
                return this.AdjustmentFactorField;
            }
            set {
                if ((this.AdjustmentFactorField.Equals(value) != true)) {
                    this.AdjustmentFactorField = value;
                    this.RaisePropertyChanged("AdjustmentFactor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Average {
            get {
                return this.AverageField;
            }
            set {
                if ((object.ReferenceEquals(this.AverageField, value) != true)) {
                    this.AverageField = value;
                    this.RaisePropertyChanged("Average");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BettingAllowed {
            get {
                return this.BettingAllowedField;
            }
            set {
                if ((this.BettingAllowedField.Equals(value) != true)) {
                    this.BettingAllowedField = value;
                    this.RaisePropertyChanged("BettingAllowed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Clothnumber {
            get {
                return this.ClothnumberField;
            }
            set {
                if ((object.ReferenceEquals(this.ClothnumberField, value) != true)) {
                    this.ClothnumberField = value;
                    this.RaisePropertyChanged("Clothnumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AppForBackGroundTasks.BettingServiceReference.ExchangePrices ExchangePrices {
            get {
                return this.ExchangePricesField;
            }
            set {
                if ((object.ReferenceEquals(this.ExchangePricesField, value) != true)) {
                    this.ExchangePricesField = value;
                    this.RaisePropertyChanged("ExchangePrices");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> Handicap {
            get {
                return this.HandicapField;
            }
            set {
                if ((this.HandicapField.Equals(value) != true)) {
                    this.HandicapField = value;
                    this.RaisePropertyChanged("Handicap");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string JockeyName {
            get {
                return this.JockeyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.JockeyNameField, value) != true)) {
                    this.JockeyNameField = value;
                    this.RaisePropertyChanged("JockeyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> LastPriceTraded {
            get {
                return this.LastPriceTradedField;
            }
            set {
                if ((this.LastPriceTradedField.Equals(value) != true)) {
                    this.LastPriceTradedField = value;
                    this.RaisePropertyChanged("LastPriceTraded");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Loss {
            get {
                return this.LossField;
            }
            set {
                if ((this.LossField.Equals(value) != true)) {
                    this.LossField = value;
                    this.RaisePropertyChanged("Loss");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MarketBookID {
            get {
                return this.MarketBookIDField;
            }
            set {
                if ((object.ReferenceEquals(this.MarketBookIDField, value) != true)) {
                    this.MarketBookIDField = value;
                    this.RaisePropertyChanged("MarketBookID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MarketStatusStr {
            get {
                return this.MarketStatusStrField;
            }
            set {
                if ((object.ReferenceEquals(this.MarketStatusStrField, value) != true)) {
                    this.MarketStatusStrField = value;
                    this.RaisePropertyChanged("MarketStatusStr");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AppForBackGroundTasks.BettingServiceReference.Match[] Matches {
            get {
                return this.MatchesField;
            }
            set {
                if ((object.ReferenceEquals(this.MatchesField, value) != true)) {
                    this.MatchesField = value;
                    this.RaisePropertyChanged("Matches");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AppForBackGroundTasks.BettingServiceReference.Order[] Orders {
            get {
                return this.OrdersField;
            }
            set {
                if ((object.ReferenceEquals(this.OrdersField, value) != true)) {
                    this.OrdersField = value;
                    this.RaisePropertyChanged("Orders");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long ProfitandLoss {
            get {
                return this.ProfitandLossField;
            }
            set {
                if ((this.ProfitandLossField.Equals(value) != true)) {
                    this.ProfitandLossField = value;
                    this.RaisePropertyChanged("ProfitandLoss");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> RemovalDate {
            get {
                return this.RemovalDateField;
            }
            set {
                if ((this.RemovalDateField.Equals(value) != true)) {
                    this.RemovalDateField = value;
                    this.RaisePropertyChanged("RemovalDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RunnerName {
            get {
                return this.RunnerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.RunnerNameField, value) != true)) {
                    this.RunnerNameField = value;
                    this.RaisePropertyChanged("RunnerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SelectionId {
            get {
                return this.SelectionIdField;
            }
            set {
                if ((object.ReferenceEquals(this.SelectionIdField, value) != true)) {
                    this.SelectionIdField = value;
                    this.RaisePropertyChanged("SelectionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StallDraw {
            get {
                return this.StallDrawField;
            }
            set {
                if ((object.ReferenceEquals(this.StallDrawField, value) != true)) {
                    this.StallDrawField = value;
                    this.RaisePropertyChanged("StallDraw");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AppForBackGroundTasks.BettingServiceReference.StartingPrices StartingPrices {
            get {
                return this.StartingPricesField;
            }
            set {
                if ((object.ReferenceEquals(this.StartingPricesField, value) != true)) {
                    this.StartingPricesField = value;
                    this.RaisePropertyChanged("StartingPrices");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AppForBackGroundTasks.BettingServiceReference.RunnerStatus Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StatusStr {
            get {
                return this.StatusStrField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusStrField, value) != true)) {
                    this.StatusStrField = value;
                    this.RaisePropertyChanged("StatusStr");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double TotalMatched {
            get {
                return this.TotalMatchedField;
            }
            set {
                if ((this.TotalMatchedField.Equals(value) != true)) {
                    this.TotalMatchedField = value;
                    this.RaisePropertyChanged("TotalMatched");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WearingDesc {
            get {
                return this.WearingDescField;
            }
            set {
                if ((object.ReferenceEquals(this.WearingDescField, value) != true)) {
                    this.WearingDescField = value;
                    this.RaisePropertyChanged("WearingDesc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WearingURL {
            get {
                return this.WearingURLField;
            }
            set {
                if ((object.ReferenceEquals(this.WearingURLField, value) != true)) {
                    this.WearingURLField = value;
                    this.RaisePropertyChanged("WearingURL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isShow {
            get {
                return this.isShowField;
            }
            set {
                if ((this.isShowField.Equals(value) != true)) {
                    this.isShowField = value;
                    this.RaisePropertyChanged("isShow");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MarketStatus", Namespace="http://schemas.datacontract.org/2004/07/ExternalAPI.TO")]
    public enum MarketStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        INACTIVE = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OPEN = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SUSPENDED = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CLOSED = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExchangePrices", Namespace="http://schemas.datacontract.org/2004/07/ExternalAPI.TO")]
    [System.SerializableAttribute()]
    public partial class ExchangePrices : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AppForBackGroundTasks.BettingServiceReference.PriceSize[] AvailableToBackField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AppForBackGroundTasks.BettingServiceReference.PriceSize[] AvailableToLayField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AppForBackGroundTasks.BettingServiceReference.PriceSize[] TradedVolumeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AppForBackGroundTasks.BettingServiceReference.PriceSize[] AvailableToBack {
            get {
                return this.AvailableToBackField;
            }
            set {
                if ((object.ReferenceEquals(this.AvailableToBackField, value) != true)) {
                    this.AvailableToBackField = value;
                    this.RaisePropertyChanged("AvailableToBack");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AppForBackGroundTasks.BettingServiceReference.PriceSize[] AvailableToLay {
            get {
                return this.AvailableToLayField;
            }
            set {
                if ((object.ReferenceEquals(this.AvailableToLayField, value) != true)) {
                    this.AvailableToLayField = value;
                    this.RaisePropertyChanged("AvailableToLay");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AppForBackGroundTasks.BettingServiceReference.PriceSize[] TradedVolume {
            get {
                return this.TradedVolumeField;
            }
            set {
                if ((object.ReferenceEquals(this.TradedVolumeField, value) != true)) {
                    this.TradedVolumeField = value;
                    this.RaisePropertyChanged("TradedVolume");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StartingPrices", Namespace="http://schemas.datacontract.org/2004/07/ExternalAPI.TO")]
    [System.SerializableAttribute()]
    public partial class StartingPrices : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ActualSPField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AppForBackGroundTasks.BettingServiceReference.PriceSize[] BackStakeTakenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double FarPriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AppForBackGroundTasks.BettingServiceReference.PriceSize[] LayLiabilityTakenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double NearPriceField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double ActualSP {
            get {
                return this.ActualSPField;
            }
            set {
                if ((this.ActualSPField.Equals(value) != true)) {
                    this.ActualSPField = value;
                    this.RaisePropertyChanged("ActualSP");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AppForBackGroundTasks.BettingServiceReference.PriceSize[] BackStakeTaken {
            get {
                return this.BackStakeTakenField;
            }
            set {
                if ((object.ReferenceEquals(this.BackStakeTakenField, value) != true)) {
                    this.BackStakeTakenField = value;
                    this.RaisePropertyChanged("BackStakeTaken");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double FarPrice {
            get {
                return this.FarPriceField;
            }
            set {
                if ((this.FarPriceField.Equals(value) != true)) {
                    this.FarPriceField = value;
                    this.RaisePropertyChanged("FarPrice");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AppForBackGroundTasks.BettingServiceReference.PriceSize[] LayLiabilityTaken {
            get {
                return this.LayLiabilityTakenField;
            }
            set {
                if ((object.ReferenceEquals(this.LayLiabilityTakenField, value) != true)) {
                    this.LayLiabilityTakenField = value;
                    this.RaisePropertyChanged("LayLiabilityTaken");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double NearPrice {
            get {
                return this.NearPriceField;
            }
            set {
                if ((this.NearPriceField.Equals(value) != true)) {
                    this.NearPriceField = value;
                    this.RaisePropertyChanged("NearPrice");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Match", Namespace="http://schemas.datacontract.org/2004/07/ExternalAPI.TO")]
    [System.SerializableAttribute()]
    public partial class Match : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BetIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime MatchDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AppForBackGroundTasks.BettingServiceReference.Side SideField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double SizeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BetId {
            get {
                return this.BetIdField;
            }
            set {
                if ((object.ReferenceEquals(this.BetIdField, value) != true)) {
                    this.BetIdField = value;
                    this.RaisePropertyChanged("BetId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime MatchDate {
            get {
                return this.MatchDateField;
            }
            set {
                if ((this.MatchDateField.Equals(value) != true)) {
                    this.MatchDateField = value;
                    this.RaisePropertyChanged("MatchDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Price {
            get {
                return this.PriceField;
            }
            set {
                if ((this.PriceField.Equals(value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AppForBackGroundTasks.BettingServiceReference.Side Side {
            get {
                return this.SideField;
            }
            set {
                if ((this.SideField.Equals(value) != true)) {
                    this.SideField = value;
                    this.RaisePropertyChanged("Side");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Size {
            get {
                return this.SizeField;
            }
            set {
                if ((this.SizeField.Equals(value) != true)) {
                    this.SizeField = value;
                    this.RaisePropertyChanged("Size");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Order", Namespace="http://schemas.datacontract.org/2004/07/ExternalAPI.TO")]
    [System.SerializableAttribute()]
    public partial class Order : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> AvgPriceMatchedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BetIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> BspLiabilityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AppForBackGroundTasks.BettingServiceReference.OrderType OrderTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AppForBackGroundTasks.BettingServiceReference.PersistenceType PersistenceTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> PlacedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AppForBackGroundTasks.BettingServiceReference.Side SideField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double SizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> SizeCancelledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> SizeLapsedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> SizeMatchedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> SizeRemainingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> SizeVoidedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AppForBackGroundTasks.BettingServiceReference.OrderStatus StatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> AvgPriceMatched {
            get {
                return this.AvgPriceMatchedField;
            }
            set {
                if ((this.AvgPriceMatchedField.Equals(value) != true)) {
                    this.AvgPriceMatchedField = value;
                    this.RaisePropertyChanged("AvgPriceMatched");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BetId {
            get {
                return this.BetIdField;
            }
            set {
                if ((object.ReferenceEquals(this.BetIdField, value) != true)) {
                    this.BetIdField = value;
                    this.RaisePropertyChanged("BetId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> BspLiability {
            get {
                return this.BspLiabilityField;
            }
            set {
                if ((this.BspLiabilityField.Equals(value) != true)) {
                    this.BspLiabilityField = value;
                    this.RaisePropertyChanged("BspLiability");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AppForBackGroundTasks.BettingServiceReference.OrderType OrderType {
            get {
                return this.OrderTypeField;
            }
            set {
                if ((this.OrderTypeField.Equals(value) != true)) {
                    this.OrderTypeField = value;
                    this.RaisePropertyChanged("OrderType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AppForBackGroundTasks.BettingServiceReference.PersistenceType PersistenceType {
            get {
                return this.PersistenceTypeField;
            }
            set {
                if ((this.PersistenceTypeField.Equals(value) != true)) {
                    this.PersistenceTypeField = value;
                    this.RaisePropertyChanged("PersistenceType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> PlacedDate {
            get {
                return this.PlacedDateField;
            }
            set {
                if ((this.PlacedDateField.Equals(value) != true)) {
                    this.PlacedDateField = value;
                    this.RaisePropertyChanged("PlacedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Price {
            get {
                return this.PriceField;
            }
            set {
                if ((this.PriceField.Equals(value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AppForBackGroundTasks.BettingServiceReference.Side Side {
            get {
                return this.SideField;
            }
            set {
                if ((this.SideField.Equals(value) != true)) {
                    this.SideField = value;
                    this.RaisePropertyChanged("Side");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Size {
            get {
                return this.SizeField;
            }
            set {
                if ((this.SizeField.Equals(value) != true)) {
                    this.SizeField = value;
                    this.RaisePropertyChanged("Size");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> SizeCancelled {
            get {
                return this.SizeCancelledField;
            }
            set {
                if ((this.SizeCancelledField.Equals(value) != true)) {
                    this.SizeCancelledField = value;
                    this.RaisePropertyChanged("SizeCancelled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> SizeLapsed {
            get {
                return this.SizeLapsedField;
            }
            set {
                if ((this.SizeLapsedField.Equals(value) != true)) {
                    this.SizeLapsedField = value;
                    this.RaisePropertyChanged("SizeLapsed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> SizeMatched {
            get {
                return this.SizeMatchedField;
            }
            set {
                if ((this.SizeMatchedField.Equals(value) != true)) {
                    this.SizeMatchedField = value;
                    this.RaisePropertyChanged("SizeMatched");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> SizeRemaining {
            get {
                return this.SizeRemainingField;
            }
            set {
                if ((this.SizeRemainingField.Equals(value) != true)) {
                    this.SizeRemainingField = value;
                    this.RaisePropertyChanged("SizeRemaining");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> SizeVoided {
            get {
                return this.SizeVoidedField;
            }
            set {
                if ((this.SizeVoidedField.Equals(value) != true)) {
                    this.SizeVoidedField = value;
                    this.RaisePropertyChanged("SizeVoided");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AppForBackGroundTasks.BettingServiceReference.OrderStatus Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RunnerStatus", Namespace="http://schemas.datacontract.org/2004/07/ExternalAPI.TO")]
    public enum RunnerStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACTIVE = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WINNER = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LOSER = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        REMOVED_VACANT = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        REMOVED = 4,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PriceSize", Namespace="http://schemas.datacontract.org/2004/07/ExternalAPI.TO")]
    [System.SerializableAttribute()]
    public partial class PriceSize : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double OrignalSizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double SizeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double OrignalSize {
            get {
                return this.OrignalSizeField;
            }
            set {
                if ((this.OrignalSizeField.Equals(value) != true)) {
                    this.OrignalSizeField = value;
                    this.RaisePropertyChanged("OrignalSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Price {
            get {
                return this.PriceField;
            }
            set {
                if ((this.PriceField.Equals(value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Size {
            get {
                return this.SizeField;
            }
            set {
                if ((this.SizeField.Equals(value) != true)) {
                    this.SizeField = value;
                    this.RaisePropertyChanged("Size");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Side", Namespace="http://schemas.datacontract.org/2004/07/ExternalAPI.TO")]
    public enum Side : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BACK = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LAY = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OrderType", Namespace="http://schemas.datacontract.org/2004/07/ExternalAPI.TO")]
    public enum OrderType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LIMIT = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LIMIT_ON_CLOSE = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MARKET_ON_CLOSE = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PersistenceType", Namespace="http://schemas.datacontract.org/2004/07/ExternalAPI.TO")]
    public enum PersistenceType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LAPSE = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PERSIST = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MARKET_ON_CLOSE = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OrderStatus", Namespace="http://schemas.datacontract.org/2004/07/ExternalAPI.TO")]
    public enum OrderStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EXECUTION_COMPLETE = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EXECUTABLE = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EventTypeResult", Namespace="http://schemas.datacontract.org/2004/07/ExternalAPI.TO")]
    [System.SerializableAttribute()]
    public partial class EventTypeResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AppForBackGroundTasks.BettingServiceReference.EventType EventTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MarketCountField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AppForBackGroundTasks.BettingServiceReference.EventType EventType {
            get {
                return this.EventTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.EventTypeField, value) != true)) {
                    this.EventTypeField = value;
                    this.RaisePropertyChanged("EventType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MarketCount {
            get {
                return this.MarketCountField;
            }
            set {
                if ((this.MarketCountField.Equals(value) != true)) {
                    this.MarketCountField = value;
                    this.RaisePropertyChanged("MarketCount");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompetitionResult", Namespace="http://schemas.datacontract.org/2004/07/ExternalAPI.TO")]
    [System.SerializableAttribute()]
    public partial class CompetitionResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AppForBackGroundTasks.BettingServiceReference.Competition CompetitionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MarketCountField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AppForBackGroundTasks.BettingServiceReference.Competition Competition {
            get {
                return this.CompetitionField;
            }
            set {
                if ((object.ReferenceEquals(this.CompetitionField, value) != true)) {
                    this.CompetitionField = value;
                    this.RaisePropertyChanged("Competition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MarketCount {
            get {
                return this.MarketCountField;
            }
            set {
                if ((this.MarketCountField.Equals(value) != true)) {
                    this.MarketCountField = value;
                    this.RaisePropertyChanged("MarketCount");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EventResult", Namespace="http://schemas.datacontract.org/2004/07/ExternalAPI.TO")]
    [System.SerializableAttribute()]
    public partial class EventResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AppForBackGroundTasks.BettingServiceReference.Event EventField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MarketCountField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AppForBackGroundTasks.BettingServiceReference.Event Event {
            get {
                return this.EventField;
            }
            set {
                if ((object.ReferenceEquals(this.EventField, value) != true)) {
                    this.EventField = value;
                    this.RaisePropertyChanged("Event");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MarketCount {
            get {
                return this.MarketCountField;
            }
            set {
                if ((this.MarketCountField.Equals(value) != true)) {
                    this.MarketCountField = value;
                    this.RaisePropertyChanged("MarketCount");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MarketBook", Namespace="http://schemas.datacontract.org/2004/07/bfnexchange.wrBF")]
    [System.SerializableAttribute()]
    public partial class MarketBook1 : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int betDelayFieldField;
        
        private bool isBspReconciledFieldField;
        
        private bool isCompleteFieldField;
        
        private bool isCrossMatchingFieldField;
        
        private bool isInplayFieldField;
        
        private bool isMarketDataDelayedFieldField;
        
        private bool isRunnersVoidableFieldField;
        
        private System.Nullable<System.DateTime> lastMatchTimeFieldField;
        
        private string marketIdFieldField;
        
        private int numberOfActiveRunnersFieldField;
        
        private int numberOfRunnersFieldField;
        
        private int numberOfWinnersFieldField;
        
        private AppForBackGroundTasks.BettingServiceReference.Runner1[] runnersFieldField;
        
        private string sPricesFieldField;
        
        private AppForBackGroundTasks.BettingServiceReference.MarketStatus1 statusFieldField;
        
        private double totalAvailableFieldField;
        
        private double totalMatchedFieldField;
        
        private long versionFieldField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int betDelayField {
            get {
                return this.betDelayFieldField;
            }
            set {
                if ((this.betDelayFieldField.Equals(value) != true)) {
                    this.betDelayFieldField = value;
                    this.RaisePropertyChanged("betDelayField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool isBspReconciledField {
            get {
                return this.isBspReconciledFieldField;
            }
            set {
                if ((this.isBspReconciledFieldField.Equals(value) != true)) {
                    this.isBspReconciledFieldField = value;
                    this.RaisePropertyChanged("isBspReconciledField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool isCompleteField {
            get {
                return this.isCompleteFieldField;
            }
            set {
                if ((this.isCompleteFieldField.Equals(value) != true)) {
                    this.isCompleteFieldField = value;
                    this.RaisePropertyChanged("isCompleteField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool isCrossMatchingField {
            get {
                return this.isCrossMatchingFieldField;
            }
            set {
                if ((this.isCrossMatchingFieldField.Equals(value) != true)) {
                    this.isCrossMatchingFieldField = value;
                    this.RaisePropertyChanged("isCrossMatchingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool isInplayField {
            get {
                return this.isInplayFieldField;
            }
            set {
                if ((this.isInplayFieldField.Equals(value) != true)) {
                    this.isInplayFieldField = value;
                    this.RaisePropertyChanged("isInplayField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool isMarketDataDelayedField {
            get {
                return this.isMarketDataDelayedFieldField;
            }
            set {
                if ((this.isMarketDataDelayedFieldField.Equals(value) != true)) {
                    this.isMarketDataDelayedFieldField = value;
                    this.RaisePropertyChanged("isMarketDataDelayedField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool isRunnersVoidableField {
            get {
                return this.isRunnersVoidableFieldField;
            }
            set {
                if ((this.isRunnersVoidableFieldField.Equals(value) != true)) {
                    this.isRunnersVoidableFieldField = value;
                    this.RaisePropertyChanged("isRunnersVoidableField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Nullable<System.DateTime> lastMatchTimeField {
            get {
                return this.lastMatchTimeFieldField;
            }
            set {
                if ((this.lastMatchTimeFieldField.Equals(value) != true)) {
                    this.lastMatchTimeFieldField = value;
                    this.RaisePropertyChanged("lastMatchTimeField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string marketIdField {
            get {
                return this.marketIdFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.marketIdFieldField, value) != true)) {
                    this.marketIdFieldField = value;
                    this.RaisePropertyChanged("marketIdField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int numberOfActiveRunnersField {
            get {
                return this.numberOfActiveRunnersFieldField;
            }
            set {
                if ((this.numberOfActiveRunnersFieldField.Equals(value) != true)) {
                    this.numberOfActiveRunnersFieldField = value;
                    this.RaisePropertyChanged("numberOfActiveRunnersField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int numberOfRunnersField {
            get {
                return this.numberOfRunnersFieldField;
            }
            set {
                if ((this.numberOfRunnersFieldField.Equals(value) != true)) {
                    this.numberOfRunnersFieldField = value;
                    this.RaisePropertyChanged("numberOfRunnersField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int numberOfWinnersField {
            get {
                return this.numberOfWinnersFieldField;
            }
            set {
                if ((this.numberOfWinnersFieldField.Equals(value) != true)) {
                    this.numberOfWinnersFieldField = value;
                    this.RaisePropertyChanged("numberOfWinnersField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public AppForBackGroundTasks.BettingServiceReference.Runner1[] runnersField {
            get {
                return this.runnersFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.runnersFieldField, value) != true)) {
                    this.runnersFieldField = value;
                    this.RaisePropertyChanged("runnersField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string sPricesField {
            get {
                return this.sPricesFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.sPricesFieldField, value) != true)) {
                    this.sPricesFieldField = value;
                    this.RaisePropertyChanged("sPricesField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public AppForBackGroundTasks.BettingServiceReference.MarketStatus1 statusField {
            get {
                return this.statusFieldField;
            }
            set {
                if ((this.statusFieldField.Equals(value) != true)) {
                    this.statusFieldField = value;
                    this.RaisePropertyChanged("statusField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public double totalAvailableField {
            get {
                return this.totalAvailableFieldField;
            }
            set {
                if ((this.totalAvailableFieldField.Equals(value) != true)) {
                    this.totalAvailableFieldField = value;
                    this.RaisePropertyChanged("totalAvailableField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public double totalMatchedField {
            get {
                return this.totalMatchedFieldField;
            }
            set {
                if ((this.totalMatchedFieldField.Equals(value) != true)) {
                    this.totalMatchedFieldField = value;
                    this.RaisePropertyChanged("totalMatchedField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public long versionField {
            get {
                return this.versionFieldField;
            }
            set {
                if ((this.versionFieldField.Equals(value) != true)) {
                    this.versionFieldField = value;
                    this.RaisePropertyChanged("versionField");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Runner", Namespace="http://schemas.datacontract.org/2004/07/bfnexchange.wrBF")]
    [System.SerializableAttribute()]
    public partial class Runner1 : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.Nullable<double> adjustmentFactorFieldField;
        
        private AppForBackGroundTasks.BettingServiceReference.ExchangePrices1 exchangePricesFieldField;
        
        private System.Nullable<double> handicapFieldField;
        
        private System.Nullable<double> lastPriceTradedFieldField;
        
        private AppForBackGroundTasks.BettingServiceReference.Match1[] matchesFieldField;
        
        private AppForBackGroundTasks.BettingServiceReference.Order1[] ordersFieldField;
        
        private System.Nullable<System.DateTime> removalDateFieldField;
        
        private long selectionIdFieldField;
        
        private AppForBackGroundTasks.BettingServiceReference.StartingPrices1 startingPricesFieldField;
        
        private AppForBackGroundTasks.BettingServiceReference.RunnerStatus1 statusFieldField;
        
        private double totalMatchedFieldField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Nullable<double> adjustmentFactorField {
            get {
                return this.adjustmentFactorFieldField;
            }
            set {
                if ((this.adjustmentFactorFieldField.Equals(value) != true)) {
                    this.adjustmentFactorFieldField = value;
                    this.RaisePropertyChanged("adjustmentFactorField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public AppForBackGroundTasks.BettingServiceReference.ExchangePrices1 exchangePricesField {
            get {
                return this.exchangePricesFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.exchangePricesFieldField, value) != true)) {
                    this.exchangePricesFieldField = value;
                    this.RaisePropertyChanged("exchangePricesField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Nullable<double> handicapField {
            get {
                return this.handicapFieldField;
            }
            set {
                if ((this.handicapFieldField.Equals(value) != true)) {
                    this.handicapFieldField = value;
                    this.RaisePropertyChanged("handicapField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Nullable<double> lastPriceTradedField {
            get {
                return this.lastPriceTradedFieldField;
            }
            set {
                if ((this.lastPriceTradedFieldField.Equals(value) != true)) {
                    this.lastPriceTradedFieldField = value;
                    this.RaisePropertyChanged("lastPriceTradedField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public AppForBackGroundTasks.BettingServiceReference.Match1[] matchesField {
            get {
                return this.matchesFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.matchesFieldField, value) != true)) {
                    this.matchesFieldField = value;
                    this.RaisePropertyChanged("matchesField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public AppForBackGroundTasks.BettingServiceReference.Order1[] ordersField {
            get {
                return this.ordersFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.ordersFieldField, value) != true)) {
                    this.ordersFieldField = value;
                    this.RaisePropertyChanged("ordersField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Nullable<System.DateTime> removalDateField {
            get {
                return this.removalDateFieldField;
            }
            set {
                if ((this.removalDateFieldField.Equals(value) != true)) {
                    this.removalDateFieldField = value;
                    this.RaisePropertyChanged("removalDateField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public long selectionIdField {
            get {
                return this.selectionIdFieldField;
            }
            set {
                if ((this.selectionIdFieldField.Equals(value) != true)) {
                    this.selectionIdFieldField = value;
                    this.RaisePropertyChanged("selectionIdField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public AppForBackGroundTasks.BettingServiceReference.StartingPrices1 startingPricesField {
            get {
                return this.startingPricesFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.startingPricesFieldField, value) != true)) {
                    this.startingPricesFieldField = value;
                    this.RaisePropertyChanged("startingPricesField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public AppForBackGroundTasks.BettingServiceReference.RunnerStatus1 statusField {
            get {
                return this.statusFieldField;
            }
            set {
                if ((this.statusFieldField.Equals(value) != true)) {
                    this.statusFieldField = value;
                    this.RaisePropertyChanged("statusField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public double totalMatchedField {
            get {
                return this.totalMatchedFieldField;
            }
            set {
                if ((this.totalMatchedFieldField.Equals(value) != true)) {
                    this.totalMatchedFieldField = value;
                    this.RaisePropertyChanged("totalMatchedField");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MarketStatus", Namespace="http://schemas.datacontract.org/2004/07/bfnexchange.wrBF")]
    public enum MarketStatus1 : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        INACTIVE = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OPEN = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SUSPENDED = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CLOSED = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExchangePrices", Namespace="http://schemas.datacontract.org/2004/07/bfnexchange.wrBF")]
    [System.SerializableAttribute()]
    public partial class ExchangePrices1 : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private AppForBackGroundTasks.BettingServiceReference.PriceSize1[] availableToBackFieldField;
        
        private AppForBackGroundTasks.BettingServiceReference.PriceSize1[] availableToLayFieldField;
        
        private AppForBackGroundTasks.BettingServiceReference.PriceSize1[] tradedVolumeFieldField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public AppForBackGroundTasks.BettingServiceReference.PriceSize1[] availableToBackField {
            get {
                return this.availableToBackFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.availableToBackFieldField, value) != true)) {
                    this.availableToBackFieldField = value;
                    this.RaisePropertyChanged("availableToBackField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public AppForBackGroundTasks.BettingServiceReference.PriceSize1[] availableToLayField {
            get {
                return this.availableToLayFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.availableToLayFieldField, value) != true)) {
                    this.availableToLayFieldField = value;
                    this.RaisePropertyChanged("availableToLayField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public AppForBackGroundTasks.BettingServiceReference.PriceSize1[] tradedVolumeField {
            get {
                return this.tradedVolumeFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.tradedVolumeFieldField, value) != true)) {
                    this.tradedVolumeFieldField = value;
                    this.RaisePropertyChanged("tradedVolumeField");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StartingPrices", Namespace="http://schemas.datacontract.org/2004/07/bfnexchange.wrBF")]
    [System.SerializableAttribute()]
    public partial class StartingPrices1 : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private double actualSPFieldField;
        
        private AppForBackGroundTasks.BettingServiceReference.PriceSize1[] backStakeTakenFieldField;
        
        private double farPriceFieldField;
        
        private AppForBackGroundTasks.BettingServiceReference.PriceSize1[] layLiabilityTakenFieldField;
        
        private double nearPriceFieldField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public double actualSPField {
            get {
                return this.actualSPFieldField;
            }
            set {
                if ((this.actualSPFieldField.Equals(value) != true)) {
                    this.actualSPFieldField = value;
                    this.RaisePropertyChanged("actualSPField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public AppForBackGroundTasks.BettingServiceReference.PriceSize1[] backStakeTakenField {
            get {
                return this.backStakeTakenFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.backStakeTakenFieldField, value) != true)) {
                    this.backStakeTakenFieldField = value;
                    this.RaisePropertyChanged("backStakeTakenField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public double farPriceField {
            get {
                return this.farPriceFieldField;
            }
            set {
                if ((this.farPriceFieldField.Equals(value) != true)) {
                    this.farPriceFieldField = value;
                    this.RaisePropertyChanged("farPriceField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public AppForBackGroundTasks.BettingServiceReference.PriceSize1[] layLiabilityTakenField {
            get {
                return this.layLiabilityTakenFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.layLiabilityTakenFieldField, value) != true)) {
                    this.layLiabilityTakenFieldField = value;
                    this.RaisePropertyChanged("layLiabilityTakenField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public double nearPriceField {
            get {
                return this.nearPriceFieldField;
            }
            set {
                if ((this.nearPriceFieldField.Equals(value) != true)) {
                    this.nearPriceFieldField = value;
                    this.RaisePropertyChanged("nearPriceField");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Match", Namespace="http://schemas.datacontract.org/2004/07/bfnexchange.wrBF")]
    [System.SerializableAttribute()]
    public partial class Match1 : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string betIdFieldField;
        
        private System.DateTime matchDateFieldField;
        
        private double priceFieldField;
        
        private AppForBackGroundTasks.BettingServiceReference.Side1 sideFieldField;
        
        private double sizeFieldField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string betIdField {
            get {
                return this.betIdFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.betIdFieldField, value) != true)) {
                    this.betIdFieldField = value;
                    this.RaisePropertyChanged("betIdField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime matchDateField {
            get {
                return this.matchDateFieldField;
            }
            set {
                if ((this.matchDateFieldField.Equals(value) != true)) {
                    this.matchDateFieldField = value;
                    this.RaisePropertyChanged("matchDateField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public double priceField {
            get {
                return this.priceFieldField;
            }
            set {
                if ((this.priceFieldField.Equals(value) != true)) {
                    this.priceFieldField = value;
                    this.RaisePropertyChanged("priceField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public AppForBackGroundTasks.BettingServiceReference.Side1 sideField {
            get {
                return this.sideFieldField;
            }
            set {
                if ((this.sideFieldField.Equals(value) != true)) {
                    this.sideFieldField = value;
                    this.RaisePropertyChanged("sideField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public double sizeField {
            get {
                return this.sizeFieldField;
            }
            set {
                if ((this.sizeFieldField.Equals(value) != true)) {
                    this.sizeFieldField = value;
                    this.RaisePropertyChanged("sizeField");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Order", Namespace="http://schemas.datacontract.org/2004/07/bfnexchange.wrBF")]
    [System.SerializableAttribute()]
    public partial class Order1 : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.Nullable<double> avgPriceMatchedFieldField;
        
        private string betIdFieldField;
        
        private System.Nullable<double> bspLiabilityFieldField;
        
        private AppForBackGroundTasks.BettingServiceReference.OrderType1 orderTypeFieldField;
        
        private AppForBackGroundTasks.BettingServiceReference.PersistenceType1 persistenceTypeFieldField;
        
        private System.Nullable<System.DateTime> placedDateFieldField;
        
        private double priceFieldField;
        
        private AppForBackGroundTasks.BettingServiceReference.Side1 sideFieldField;
        
        private System.Nullable<double> sizeCancelledFieldField;
        
        private double sizeFieldField;
        
        private System.Nullable<double> sizeLapsedFieldField;
        
        private System.Nullable<double> sizeMatchedFieldField;
        
        private System.Nullable<double> sizeRemainingFieldField;
        
        private System.Nullable<double> sizeVoidedFieldField;
        
        private AppForBackGroundTasks.BettingServiceReference.OrderStatus1 statusFieldField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Nullable<double> avgPriceMatchedField {
            get {
                return this.avgPriceMatchedFieldField;
            }
            set {
                if ((this.avgPriceMatchedFieldField.Equals(value) != true)) {
                    this.avgPriceMatchedFieldField = value;
                    this.RaisePropertyChanged("avgPriceMatchedField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string betIdField {
            get {
                return this.betIdFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.betIdFieldField, value) != true)) {
                    this.betIdFieldField = value;
                    this.RaisePropertyChanged("betIdField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Nullable<double> bspLiabilityField {
            get {
                return this.bspLiabilityFieldField;
            }
            set {
                if ((this.bspLiabilityFieldField.Equals(value) != true)) {
                    this.bspLiabilityFieldField = value;
                    this.RaisePropertyChanged("bspLiabilityField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public AppForBackGroundTasks.BettingServiceReference.OrderType1 orderTypeField {
            get {
                return this.orderTypeFieldField;
            }
            set {
                if ((this.orderTypeFieldField.Equals(value) != true)) {
                    this.orderTypeFieldField = value;
                    this.RaisePropertyChanged("orderTypeField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public AppForBackGroundTasks.BettingServiceReference.PersistenceType1 persistenceTypeField {
            get {
                return this.persistenceTypeFieldField;
            }
            set {
                if ((this.persistenceTypeFieldField.Equals(value) != true)) {
                    this.persistenceTypeFieldField = value;
                    this.RaisePropertyChanged("persistenceTypeField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Nullable<System.DateTime> placedDateField {
            get {
                return this.placedDateFieldField;
            }
            set {
                if ((this.placedDateFieldField.Equals(value) != true)) {
                    this.placedDateFieldField = value;
                    this.RaisePropertyChanged("placedDateField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public double priceField {
            get {
                return this.priceFieldField;
            }
            set {
                if ((this.priceFieldField.Equals(value) != true)) {
                    this.priceFieldField = value;
                    this.RaisePropertyChanged("priceField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public AppForBackGroundTasks.BettingServiceReference.Side1 sideField {
            get {
                return this.sideFieldField;
            }
            set {
                if ((this.sideFieldField.Equals(value) != true)) {
                    this.sideFieldField = value;
                    this.RaisePropertyChanged("sideField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Nullable<double> sizeCancelledField {
            get {
                return this.sizeCancelledFieldField;
            }
            set {
                if ((this.sizeCancelledFieldField.Equals(value) != true)) {
                    this.sizeCancelledFieldField = value;
                    this.RaisePropertyChanged("sizeCancelledField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public double sizeField {
            get {
                return this.sizeFieldField;
            }
            set {
                if ((this.sizeFieldField.Equals(value) != true)) {
                    this.sizeFieldField = value;
                    this.RaisePropertyChanged("sizeField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Nullable<double> sizeLapsedField {
            get {
                return this.sizeLapsedFieldField;
            }
            set {
                if ((this.sizeLapsedFieldField.Equals(value) != true)) {
                    this.sizeLapsedFieldField = value;
                    this.RaisePropertyChanged("sizeLapsedField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Nullable<double> sizeMatchedField {
            get {
                return this.sizeMatchedFieldField;
            }
            set {
                if ((this.sizeMatchedFieldField.Equals(value) != true)) {
                    this.sizeMatchedFieldField = value;
                    this.RaisePropertyChanged("sizeMatchedField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Nullable<double> sizeRemainingField {
            get {
                return this.sizeRemainingFieldField;
            }
            set {
                if ((this.sizeRemainingFieldField.Equals(value) != true)) {
                    this.sizeRemainingFieldField = value;
                    this.RaisePropertyChanged("sizeRemainingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Nullable<double> sizeVoidedField {
            get {
                return this.sizeVoidedFieldField;
            }
            set {
                if ((this.sizeVoidedFieldField.Equals(value) != true)) {
                    this.sizeVoidedFieldField = value;
                    this.RaisePropertyChanged("sizeVoidedField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public AppForBackGroundTasks.BettingServiceReference.OrderStatus1 statusField {
            get {
                return this.statusFieldField;
            }
            set {
                if ((this.statusFieldField.Equals(value) != true)) {
                    this.statusFieldField = value;
                    this.RaisePropertyChanged("statusField");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RunnerStatus", Namespace="http://schemas.datacontract.org/2004/07/bfnexchange.wrBF")]
    public enum RunnerStatus1 : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACTIVE = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WINNER = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LOSER = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        REMOVED_VACANT = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        REMOVED = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        HIDDEN = 5,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PriceSize", Namespace="http://schemas.datacontract.org/2004/07/bfnexchange.wrBF")]
    [System.SerializableAttribute()]
    public partial class PriceSize1 : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private double priceFieldField;
        
        private double sizeFieldField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public double priceField {
            get {
                return this.priceFieldField;
            }
            set {
                if ((this.priceFieldField.Equals(value) != true)) {
                    this.priceFieldField = value;
                    this.RaisePropertyChanged("priceField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public double sizeField {
            get {
                return this.sizeFieldField;
            }
            set {
                if ((this.sizeFieldField.Equals(value) != true)) {
                    this.sizeFieldField = value;
                    this.RaisePropertyChanged("sizeField");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Side", Namespace="http://schemas.datacontract.org/2004/07/bfnexchange.wrBF")]
    public enum Side1 : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BACK = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LAY = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OrderType", Namespace="http://schemas.datacontract.org/2004/07/bfnexchange.wrBF")]
    public enum OrderType1 : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LIMIT = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LIMIT_ON_CLOSE = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MARKET_ON_CLOSE = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PersistenceType", Namespace="http://schemas.datacontract.org/2004/07/bfnexchange.wrBF")]
    public enum PersistenceType1 : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LAPSE = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PERSIST = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MARKET_ON_CLOSE = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OrderStatus", Namespace="http://schemas.datacontract.org/2004/07/bfnexchange.wrBF")]
    public enum OrderStatus1 : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EXECUTION_COMPLETE = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EXECUTABLE = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="BettingServiceReference.IBettingService")]
    public interface IBettingService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/listMarketCatalogue", ReplyAction="http://tempuri.org/IBettingService/listMarketCatalogueResponse")]
        AppForBackGroundTasks.BettingServiceReference.MarketCatalogue[] listMarketCatalogue(string ID, string[] lstMarketCatalogues, bool isInPlay, string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBettingService/listMarketCatalogue", ReplyAction="http://tempuri.org/IBettingService/listMarketCatalogueResponse")]
        System.IAsyncResult BeginlistMarketCatalogue(string ID, string[] lstMarketCatalogues, bool isInPlay, string Password, System.AsyncCallback callback, object asyncState);
        
        AppForBackGroundTasks.BettingServiceReference.MarketCatalogue[] EndlistMarketCatalogue(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/listMarketBookALL", ReplyAction="http://tempuri.org/IBettingService/listMarketBookALLResponse")]
        AppForBackGroundTasks.BettingServiceReference.MarketBook[] listMarketBookALL(string[] ID, int UserID, int UserTypeID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBettingService/listMarketBookALL", ReplyAction="http://tempuri.org/IBettingService/listMarketBookALLResponse")]
        System.IAsyncResult BeginlistMarketBookALL(string[] ID, int UserID, int UserTypeID, string Password, System.AsyncCallback callback, object asyncState);
        
        AppForBackGroundTasks.BettingServiceReference.MarketBook[] EndlistMarketBookALL(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/listMarketBook", ReplyAction="http://tempuri.org/IBettingService/listMarketBookResponse")]
        AppForBackGroundTasks.BettingServiceReference.MarketBook[] listMarketBook(string ID, int UserID, int UserTypeID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBettingService/listMarketBook", ReplyAction="http://tempuri.org/IBettingService/listMarketBookResponse")]
        System.IAsyncResult BeginlistMarketBook(string ID, int UserID, int UserTypeID, string Password, System.AsyncCallback callback, object asyncState);
        
        AppForBackGroundTasks.BettingServiceReference.MarketBook[] EndlistMarketBook(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/listEventTypes", ReplyAction="http://tempuri.org/IBettingService/listEventTypesResponse")]
        AppForBackGroundTasks.BettingServiceReference.EventTypeResult[] listEventTypes(bool isInPlay, string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBettingService/listEventTypes", ReplyAction="http://tempuri.org/IBettingService/listEventTypesResponse")]
        System.IAsyncResult BeginlistEventTypes(bool isInPlay, string Password, System.AsyncCallback callback, object asyncState);
        
        AppForBackGroundTasks.BettingServiceReference.EventTypeResult[] EndlistEventTypes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/listEventTypesWithMarketFilter", ReplyAction="http://tempuri.org/IBettingService/listEventTypesWithMarketFilterResponse")]
        AppForBackGroundTasks.BettingServiceReference.EventTypeResult[] listEventTypesWithMarketFilter(bool isInPlay, string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBettingService/listEventTypesWithMarketFilter", ReplyAction="http://tempuri.org/IBettingService/listEventTypesWithMarketFilterResponse")]
        System.IAsyncResult BeginlistEventTypesWithMarketFilter(bool isInPlay, string Password, System.AsyncCallback callback, object asyncState);
        
        AppForBackGroundTasks.BettingServiceReference.EventTypeResult[] EndlistEventTypesWithMarketFilter(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/listCompetitions", ReplyAction="http://tempuri.org/IBettingService/listCompetitionsResponse")]
        AppForBackGroundTasks.BettingServiceReference.CompetitionResult[] listCompetitions(string ID, bool isInPlay, string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBettingService/listCompetitions", ReplyAction="http://tempuri.org/IBettingService/listCompetitionsResponse")]
        System.IAsyncResult BeginlistCompetitions(string ID, bool isInPlay, string Password, System.AsyncCallback callback, object asyncState);
        
        AppForBackGroundTasks.BettingServiceReference.CompetitionResult[] EndlistCompetitions(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/listEvents", ReplyAction="http://tempuri.org/IBettingService/listEventsResponse")]
        AppForBackGroundTasks.BettingServiceReference.EventResult[] listEvents(string ID, bool isInPlay, string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBettingService/listEvents", ReplyAction="http://tempuri.org/IBettingService/listEventsResponse")]
        System.IAsyncResult BeginlistEvents(string ID, bool isInPlay, string Password, System.AsyncCallback callback, object asyncState);
        
        AppForBackGroundTasks.BettingServiceReference.EventResult[] EndlistEvents(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetMarketDatabyIDResultsOnly", ReplyAction="http://tempuri.org/IBettingService/GetMarketDatabyIDResultsOnlyResponse")]
        AppForBackGroundTasks.BettingServiceReference.MarketBook[] GetMarketDatabyIDResultsOnly(string marketID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBettingService/GetMarketDatabyIDResultsOnly", ReplyAction="http://tempuri.org/IBettingService/GetMarketDatabyIDResultsOnlyResponse")]
        System.IAsyncResult BeginGetMarketDatabyIDResultsOnly(string marketID, System.AsyncCallback callback, object asyncState);
        
        AppForBackGroundTasks.BettingServiceReference.MarketBook[] EndGetMarketDatabyIDResultsOnly(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetMarketDatabyID", ReplyAction="http://tempuri.org/IBettingService/GetMarketDatabyIDResponse")]
        AppForBackGroundTasks.BettingServiceReference.MarketBook[] GetMarketDatabyID(string[] marketID, string sheetname, System.DateTime OrignalOpenDate, string MainSportsCategory, string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBettingService/GetMarketDatabyID", ReplyAction="http://tempuri.org/IBettingService/GetMarketDatabyIDResponse")]
        System.IAsyncResult BeginGetMarketDatabyID(string[] marketID, string sheetname, System.DateTime OrignalOpenDate, string MainSportsCategory, string Password, System.AsyncCallback callback, object asyncState);
        
        AppForBackGroundTasks.BettingServiceReference.MarketBook[] EndGetMarketDatabyID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetDataFromBetfairReadOnly", ReplyAction="http://tempuri.org/IBettingService/GetDataFromBetfairReadOnlyResponse")]
        void GetDataFromBetfairReadOnly();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBettingService/GetDataFromBetfairReadOnly", ReplyAction="http://tempuri.org/IBettingService/GetDataFromBetfairReadOnlyResponse")]
        System.IAsyncResult BeginGetDataFromBetfairReadOnly(System.AsyncCallback callback, object asyncState);
        
        void EndGetDataFromBetfairReadOnly(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetBallbyBallSummary", ReplyAction="http://tempuri.org/IBettingService/GetBallbyBallSummaryResponse")]
        void GetBallbyBallSummary();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBettingService/GetBallbyBallSummary", ReplyAction="http://tempuri.org/IBettingService/GetBallbyBallSummaryResponse")]
        System.IAsyncResult BeginGetBallbyBallSummary(System.AsyncCallback callback, object asyncState);
        
        void EndGetBallbyBallSummary(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetCurrentMarketBookNew", ReplyAction="http://tempuri.org/IBettingService/GetCurrentMarketBookNewResponse")]
        AppForBackGroundTasks.BettingServiceReference.MarketBook1[] GetCurrentMarketBookNew(string marketid, string sheetname, string MainSportsCategory, System.DateTime marketopendate, bool BettingAllowed, AppForBackGroundTasks.BettingServiceReference.Runner[] OldRunners, AppForBackGroundTasks.BettingServiceReference.MarketBook currentmarketobject, string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBettingService/GetCurrentMarketBookNew", ReplyAction="http://tempuri.org/IBettingService/GetCurrentMarketBookNewResponse")]
        System.IAsyncResult BeginGetCurrentMarketBookNew(string marketid, string sheetname, string MainSportsCategory, System.DateTime marketopendate, bool BettingAllowed, AppForBackGroundTasks.BettingServiceReference.Runner[] OldRunners, AppForBackGroundTasks.BettingServiceReference.MarketBook currentmarketobject, string Password, System.AsyncCallback callback, object asyncState);
        
        AppForBackGroundTasks.BettingServiceReference.MarketBook1[] EndGetCurrentMarketBookNew(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetMarketDatabyIDLive", ReplyAction="http://tempuri.org/IBettingService/GetMarketDatabyIDLiveResponse")]
        AppForBackGroundTasks.BettingServiceReference.MarketBook[] GetMarketDatabyIDLive(string[] marketID, string sheetname, System.DateTime OrignalOpenDate, string MainSportsCategory, string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBettingService/GetMarketDatabyIDLive", ReplyAction="http://tempuri.org/IBettingService/GetMarketDatabyIDLiveResponse")]
        System.IAsyncResult BeginGetMarketDatabyIDLive(string[] marketID, string sheetname, System.DateTime OrignalOpenDate, string MainSportsCategory, string Password, System.AsyncCallback callback, object asyncState);
        
        AppForBackGroundTasks.BettingServiceReference.MarketBook[] EndGetMarketDatabyIDLive(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetAllMarketsBP", ReplyAction="http://tempuri.org/IBettingService/GetAllMarketsBPResponse")]
        string GetAllMarketsBP(string[] marketIDs);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBettingService/GetAllMarketsBP", ReplyAction="http://tempuri.org/IBettingService/GetAllMarketsBPResponse")]
        System.IAsyncResult BeginGetAllMarketsBP(string[] marketIDs, System.AsyncCallback callback, object asyncState);
        
        string EndGetAllMarketsBP(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetAllMarketsOthers", ReplyAction="http://tempuri.org/IBettingService/GetAllMarketsOthersResponse")]
        AppForBackGroundTasks.BettingServiceReference.MarketBook1[] GetAllMarketsOthers(string[] marketIDs);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBettingService/GetAllMarketsOthers", ReplyAction="http://tempuri.org/IBettingService/GetAllMarketsOthersResponse")]
        System.IAsyncResult BeginGetAllMarketsOthers(string[] marketIDs, System.AsyncCallback callback, object asyncState);
        
        AppForBackGroundTasks.BettingServiceReference.MarketBook1[] EndGetAllMarketsOthers(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetAllMarketsOthersFancy", ReplyAction="http://tempuri.org/IBettingService/GetAllMarketsOthersFancyResponse")]
        AppForBackGroundTasks.BettingServiceReference.MarketBook1[] GetAllMarketsOthersFancy(string[] marketIDs);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBettingService/GetAllMarketsOthersFancy", ReplyAction="http://tempuri.org/IBettingService/GetAllMarketsOthersFancyResponse")]
        System.IAsyncResult BeginGetAllMarketsOthersFancy(string[] marketIDs, System.AsyncCallback callback, object asyncState);
        
        AppForBackGroundTasks.BettingServiceReference.MarketBook1[] EndGetAllMarketsOthersFancy(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetAllMarketsBPFancy", ReplyAction="http://tempuri.org/IBettingService/GetAllMarketsBPFancyResponse")]
        string GetAllMarketsBPFancy(string[] marketIDs);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBettingService/GetAllMarketsBPFancy", ReplyAction="http://tempuri.org/IBettingService/GetAllMarketsBPFancyResponse")]
        System.IAsyncResult BeginGetAllMarketsBPFancy(string[] marketIDs, System.AsyncCallback callback, object asyncState);
        
        string EndGetAllMarketsBPFancy(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetAllMarketsFancy", ReplyAction="http://tempuri.org/IBettingService/GetAllMarketsFancyResponse")]
        AppForBackGroundTasks.BettingServiceReference.MarketBook[] GetAllMarketsFancy(string[] marketIDs);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBettingService/GetAllMarketsFancy", ReplyAction="http://tempuri.org/IBettingService/GetAllMarketsFancyResponse")]
        System.IAsyncResult BeginGetAllMarketsFancy(string[] marketIDs, System.AsyncCallback callback, object asyncState);
        
        AppForBackGroundTasks.BettingServiceReference.MarketBook[] EndGetAllMarketsFancy(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBettingServiceChannel : AppForBackGroundTasks.BettingServiceReference.IBettingService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class listMarketCatalogueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public listMarketCatalogueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public AppForBackGroundTasks.BettingServiceReference.MarketCatalogue[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AppForBackGroundTasks.BettingServiceReference.MarketCatalogue[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class listMarketBookALLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public listMarketBookALLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public AppForBackGroundTasks.BettingServiceReference.MarketBook[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AppForBackGroundTasks.BettingServiceReference.MarketBook[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class listMarketBookCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public listMarketBookCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public AppForBackGroundTasks.BettingServiceReference.MarketBook[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AppForBackGroundTasks.BettingServiceReference.MarketBook[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class listEventTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public listEventTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public AppForBackGroundTasks.BettingServiceReference.EventTypeResult[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AppForBackGroundTasks.BettingServiceReference.EventTypeResult[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class listEventTypesWithMarketFilterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public listEventTypesWithMarketFilterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public AppForBackGroundTasks.BettingServiceReference.EventTypeResult[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AppForBackGroundTasks.BettingServiceReference.EventTypeResult[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class listCompetitionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public listCompetitionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public AppForBackGroundTasks.BettingServiceReference.CompetitionResult[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AppForBackGroundTasks.BettingServiceReference.CompetitionResult[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class listEventsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public listEventsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public AppForBackGroundTasks.BettingServiceReference.EventResult[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AppForBackGroundTasks.BettingServiceReference.EventResult[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMarketDatabyIDResultsOnlyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMarketDatabyIDResultsOnlyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public AppForBackGroundTasks.BettingServiceReference.MarketBook[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AppForBackGroundTasks.BettingServiceReference.MarketBook[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMarketDatabyIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMarketDatabyIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public AppForBackGroundTasks.BettingServiceReference.MarketBook[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AppForBackGroundTasks.BettingServiceReference.MarketBook[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCurrentMarketBookNewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCurrentMarketBookNewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public AppForBackGroundTasks.BettingServiceReference.MarketBook1[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AppForBackGroundTasks.BettingServiceReference.MarketBook1[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMarketDatabyIDLiveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMarketDatabyIDLiveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public AppForBackGroundTasks.BettingServiceReference.MarketBook[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AppForBackGroundTasks.BettingServiceReference.MarketBook[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllMarketsBPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllMarketsBPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllMarketsOthersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllMarketsOthersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public AppForBackGroundTasks.BettingServiceReference.MarketBook1[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AppForBackGroundTasks.BettingServiceReference.MarketBook1[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllMarketsOthersFancyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllMarketsOthersFancyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public AppForBackGroundTasks.BettingServiceReference.MarketBook1[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AppForBackGroundTasks.BettingServiceReference.MarketBook1[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllMarketsBPFancyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllMarketsBPFancyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllMarketsFancyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllMarketsFancyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public AppForBackGroundTasks.BettingServiceReference.MarketBook[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((AppForBackGroundTasks.BettingServiceReference.MarketBook[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BettingServiceClient : System.ServiceModel.ClientBase<AppForBackGroundTasks.BettingServiceReference.IBettingService>, AppForBackGroundTasks.BettingServiceReference.IBettingService {
        
        private BeginOperationDelegate onBeginlistMarketCatalogueDelegate;
        
        private EndOperationDelegate onEndlistMarketCatalogueDelegate;
        
        private System.Threading.SendOrPostCallback onlistMarketCatalogueCompletedDelegate;
        
        private BeginOperationDelegate onBeginlistMarketBookALLDelegate;
        
        private EndOperationDelegate onEndlistMarketBookALLDelegate;
        
        private System.Threading.SendOrPostCallback onlistMarketBookALLCompletedDelegate;
        
        private BeginOperationDelegate onBeginlistMarketBookDelegate;
        
        private EndOperationDelegate onEndlistMarketBookDelegate;
        
        private System.Threading.SendOrPostCallback onlistMarketBookCompletedDelegate;
        
        private BeginOperationDelegate onBeginlistEventTypesDelegate;
        
        private EndOperationDelegate onEndlistEventTypesDelegate;
        
        private System.Threading.SendOrPostCallback onlistEventTypesCompletedDelegate;
        
        private BeginOperationDelegate onBeginlistEventTypesWithMarketFilterDelegate;
        
        private EndOperationDelegate onEndlistEventTypesWithMarketFilterDelegate;
        
        private System.Threading.SendOrPostCallback onlistEventTypesWithMarketFilterCompletedDelegate;
        
        private BeginOperationDelegate onBeginlistCompetitionsDelegate;
        
        private EndOperationDelegate onEndlistCompetitionsDelegate;
        
        private System.Threading.SendOrPostCallback onlistCompetitionsCompletedDelegate;
        
        private BeginOperationDelegate onBeginlistEventsDelegate;
        
        private EndOperationDelegate onEndlistEventsDelegate;
        
        private System.Threading.SendOrPostCallback onlistEventsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMarketDatabyIDResultsOnlyDelegate;
        
        private EndOperationDelegate onEndGetMarketDatabyIDResultsOnlyDelegate;
        
        private System.Threading.SendOrPostCallback onGetMarketDatabyIDResultsOnlyCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMarketDatabyIDDelegate;
        
        private EndOperationDelegate onEndGetMarketDatabyIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetMarketDatabyIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDataFromBetfairReadOnlyDelegate;
        
        private EndOperationDelegate onEndGetDataFromBetfairReadOnlyDelegate;
        
        private System.Threading.SendOrPostCallback onGetDataFromBetfairReadOnlyCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetBallbyBallSummaryDelegate;
        
        private EndOperationDelegate onEndGetBallbyBallSummaryDelegate;
        
        private System.Threading.SendOrPostCallback onGetBallbyBallSummaryCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCurrentMarketBookNewDelegate;
        
        private EndOperationDelegate onEndGetCurrentMarketBookNewDelegate;
        
        private System.Threading.SendOrPostCallback onGetCurrentMarketBookNewCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMarketDatabyIDLiveDelegate;
        
        private EndOperationDelegate onEndGetMarketDatabyIDLiveDelegate;
        
        private System.Threading.SendOrPostCallback onGetMarketDatabyIDLiveCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllMarketsBPDelegate;
        
        private EndOperationDelegate onEndGetAllMarketsBPDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllMarketsBPCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllMarketsOthersDelegate;
        
        private EndOperationDelegate onEndGetAllMarketsOthersDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllMarketsOthersCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllMarketsOthersFancyDelegate;
        
        private EndOperationDelegate onEndGetAllMarketsOthersFancyDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllMarketsOthersFancyCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllMarketsBPFancyDelegate;
        
        private EndOperationDelegate onEndGetAllMarketsBPFancyDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllMarketsBPFancyCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllMarketsFancyDelegate;
        
        private EndOperationDelegate onEndGetAllMarketsFancyDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllMarketsFancyCompletedDelegate;
        
        public BettingServiceClient() {
        }
        
        public BettingServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BettingServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BettingServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BettingServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<listMarketCatalogueCompletedEventArgs> listMarketCatalogueCompleted;
        
        public event System.EventHandler<listMarketBookALLCompletedEventArgs> listMarketBookALLCompleted;
        
        public event System.EventHandler<listMarketBookCompletedEventArgs> listMarketBookCompleted;
        
        public event System.EventHandler<listEventTypesCompletedEventArgs> listEventTypesCompleted;
        
        public event System.EventHandler<listEventTypesWithMarketFilterCompletedEventArgs> listEventTypesWithMarketFilterCompleted;
        
        public event System.EventHandler<listCompetitionsCompletedEventArgs> listCompetitionsCompleted;
        
        public event System.EventHandler<listEventsCompletedEventArgs> listEventsCompleted;
        
        public event System.EventHandler<GetMarketDatabyIDResultsOnlyCompletedEventArgs> GetMarketDatabyIDResultsOnlyCompleted;
        
        public event System.EventHandler<GetMarketDatabyIDCompletedEventArgs> GetMarketDatabyIDCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> GetDataFromBetfairReadOnlyCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> GetBallbyBallSummaryCompleted;
        
        public event System.EventHandler<GetCurrentMarketBookNewCompletedEventArgs> GetCurrentMarketBookNewCompleted;
        
        public event System.EventHandler<GetMarketDatabyIDLiveCompletedEventArgs> GetMarketDatabyIDLiveCompleted;
        
        public event System.EventHandler<GetAllMarketsBPCompletedEventArgs> GetAllMarketsBPCompleted;
        
        public event System.EventHandler<GetAllMarketsOthersCompletedEventArgs> GetAllMarketsOthersCompleted;
        
        public event System.EventHandler<GetAllMarketsOthersFancyCompletedEventArgs> GetAllMarketsOthersFancyCompleted;
        
        public event System.EventHandler<GetAllMarketsBPFancyCompletedEventArgs> GetAllMarketsBPFancyCompleted;
        
        public event System.EventHandler<GetAllMarketsFancyCompletedEventArgs> GetAllMarketsFancyCompleted;
        
        public AppForBackGroundTasks.BettingServiceReference.MarketCatalogue[] listMarketCatalogue(string ID, string[] lstMarketCatalogues, bool isInPlay, string Password) {
            return base.Channel.listMarketCatalogue(ID, lstMarketCatalogues, isInPlay, Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginlistMarketCatalogue(string ID, string[] lstMarketCatalogues, bool isInPlay, string Password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginlistMarketCatalogue(ID, lstMarketCatalogues, isInPlay, Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public AppForBackGroundTasks.BettingServiceReference.MarketCatalogue[] EndlistMarketCatalogue(System.IAsyncResult result) {
            return base.Channel.EndlistMarketCatalogue(result);
        }
        
        private System.IAsyncResult OnBeginlistMarketCatalogue(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ID = ((string)(inValues[0]));
            string[] lstMarketCatalogues = ((string[])(inValues[1]));
            bool isInPlay = ((bool)(inValues[2]));
            string Password = ((string)(inValues[3]));
            return this.BeginlistMarketCatalogue(ID, lstMarketCatalogues, isInPlay, Password, callback, asyncState);
        }
        
        private object[] OnEndlistMarketCatalogue(System.IAsyncResult result) {
            AppForBackGroundTasks.BettingServiceReference.MarketCatalogue[] retVal = this.EndlistMarketCatalogue(result);
            return new object[] {
                    retVal};
        }
        
        private void OnlistMarketCatalogueCompleted(object state) {
            if ((this.listMarketCatalogueCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.listMarketCatalogueCompleted(this, new listMarketCatalogueCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void listMarketCatalogueAsync(string ID, string[] lstMarketCatalogues, bool isInPlay, string Password) {
            this.listMarketCatalogueAsync(ID, lstMarketCatalogues, isInPlay, Password, null);
        }
        
        public void listMarketCatalogueAsync(string ID, string[] lstMarketCatalogues, bool isInPlay, string Password, object userState) {
            if ((this.onBeginlistMarketCatalogueDelegate == null)) {
                this.onBeginlistMarketCatalogueDelegate = new BeginOperationDelegate(this.OnBeginlistMarketCatalogue);
            }
            if ((this.onEndlistMarketCatalogueDelegate == null)) {
                this.onEndlistMarketCatalogueDelegate = new EndOperationDelegate(this.OnEndlistMarketCatalogue);
            }
            if ((this.onlistMarketCatalogueCompletedDelegate == null)) {
                this.onlistMarketCatalogueCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnlistMarketCatalogueCompleted);
            }
            base.InvokeAsync(this.onBeginlistMarketCatalogueDelegate, new object[] {
                        ID,
                        lstMarketCatalogues,
                        isInPlay,
                        Password}, this.onEndlistMarketCatalogueDelegate, this.onlistMarketCatalogueCompletedDelegate, userState);
        }
        
        public AppForBackGroundTasks.BettingServiceReference.MarketBook[] listMarketBookALL(string[] ID, int UserID, int UserTypeID, string Password) {
            return base.Channel.listMarketBookALL(ID, UserID, UserTypeID, Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginlistMarketBookALL(string[] ID, int UserID, int UserTypeID, string Password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginlistMarketBookALL(ID, UserID, UserTypeID, Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public AppForBackGroundTasks.BettingServiceReference.MarketBook[] EndlistMarketBookALL(System.IAsyncResult result) {
            return base.Channel.EndlistMarketBookALL(result);
        }
        
        private System.IAsyncResult OnBeginlistMarketBookALL(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string[] ID = ((string[])(inValues[0]));
            int UserID = ((int)(inValues[1]));
            int UserTypeID = ((int)(inValues[2]));
            string Password = ((string)(inValues[3]));
            return this.BeginlistMarketBookALL(ID, UserID, UserTypeID, Password, callback, asyncState);
        }
        
        private object[] OnEndlistMarketBookALL(System.IAsyncResult result) {
            AppForBackGroundTasks.BettingServiceReference.MarketBook[] retVal = this.EndlistMarketBookALL(result);
            return new object[] {
                    retVal};
        }
        
        private void OnlistMarketBookALLCompleted(object state) {
            if ((this.listMarketBookALLCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.listMarketBookALLCompleted(this, new listMarketBookALLCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void listMarketBookALLAsync(string[] ID, int UserID, int UserTypeID, string Password) {
            this.listMarketBookALLAsync(ID, UserID, UserTypeID, Password, null);
        }
        
        public void listMarketBookALLAsync(string[] ID, int UserID, int UserTypeID, string Password, object userState) {
            if ((this.onBeginlistMarketBookALLDelegate == null)) {
                this.onBeginlistMarketBookALLDelegate = new BeginOperationDelegate(this.OnBeginlistMarketBookALL);
            }
            if ((this.onEndlistMarketBookALLDelegate == null)) {
                this.onEndlistMarketBookALLDelegate = new EndOperationDelegate(this.OnEndlistMarketBookALL);
            }
            if ((this.onlistMarketBookALLCompletedDelegate == null)) {
                this.onlistMarketBookALLCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnlistMarketBookALLCompleted);
            }
            base.InvokeAsync(this.onBeginlistMarketBookALLDelegate, new object[] {
                        ID,
                        UserID,
                        UserTypeID,
                        Password}, this.onEndlistMarketBookALLDelegate, this.onlistMarketBookALLCompletedDelegate, userState);
        }
        
        public AppForBackGroundTasks.BettingServiceReference.MarketBook[] listMarketBook(string ID, int UserID, int UserTypeID, string Password) {
            return base.Channel.listMarketBook(ID, UserID, UserTypeID, Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginlistMarketBook(string ID, int UserID, int UserTypeID, string Password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginlistMarketBook(ID, UserID, UserTypeID, Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public AppForBackGroundTasks.BettingServiceReference.MarketBook[] EndlistMarketBook(System.IAsyncResult result) {
            return base.Channel.EndlistMarketBook(result);
        }
        
        private System.IAsyncResult OnBeginlistMarketBook(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ID = ((string)(inValues[0]));
            int UserID = ((int)(inValues[1]));
            int UserTypeID = ((int)(inValues[2]));
            string Password = ((string)(inValues[3]));
            return this.BeginlistMarketBook(ID, UserID, UserTypeID, Password, callback, asyncState);
        }
        
        private object[] OnEndlistMarketBook(System.IAsyncResult result) {
            AppForBackGroundTasks.BettingServiceReference.MarketBook[] retVal = this.EndlistMarketBook(result);
            return new object[] {
                    retVal};
        }
        
        private void OnlistMarketBookCompleted(object state) {
            if ((this.listMarketBookCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.listMarketBookCompleted(this, new listMarketBookCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void listMarketBookAsync(string ID, int UserID, int UserTypeID, string Password) {
            this.listMarketBookAsync(ID, UserID, UserTypeID, Password, null);
        }
        
        public void listMarketBookAsync(string ID, int UserID, int UserTypeID, string Password, object userState) {
            if ((this.onBeginlistMarketBookDelegate == null)) {
                this.onBeginlistMarketBookDelegate = new BeginOperationDelegate(this.OnBeginlistMarketBook);
            }
            if ((this.onEndlistMarketBookDelegate == null)) {
                this.onEndlistMarketBookDelegate = new EndOperationDelegate(this.OnEndlistMarketBook);
            }
            if ((this.onlistMarketBookCompletedDelegate == null)) {
                this.onlistMarketBookCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnlistMarketBookCompleted);
            }
            base.InvokeAsync(this.onBeginlistMarketBookDelegate, new object[] {
                        ID,
                        UserID,
                        UserTypeID,
                        Password}, this.onEndlistMarketBookDelegate, this.onlistMarketBookCompletedDelegate, userState);
        }
        
        public AppForBackGroundTasks.BettingServiceReference.EventTypeResult[] listEventTypes(bool isInPlay, string Password) {
            return base.Channel.listEventTypes(isInPlay, Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginlistEventTypes(bool isInPlay, string Password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginlistEventTypes(isInPlay, Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public AppForBackGroundTasks.BettingServiceReference.EventTypeResult[] EndlistEventTypes(System.IAsyncResult result) {
            return base.Channel.EndlistEventTypes(result);
        }
        
        private System.IAsyncResult OnBeginlistEventTypes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            bool isInPlay = ((bool)(inValues[0]));
            string Password = ((string)(inValues[1]));
            return this.BeginlistEventTypes(isInPlay, Password, callback, asyncState);
        }
        
        private object[] OnEndlistEventTypes(System.IAsyncResult result) {
            AppForBackGroundTasks.BettingServiceReference.EventTypeResult[] retVal = this.EndlistEventTypes(result);
            return new object[] {
                    retVal};
        }
        
        private void OnlistEventTypesCompleted(object state) {
            if ((this.listEventTypesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.listEventTypesCompleted(this, new listEventTypesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void listEventTypesAsync(bool isInPlay, string Password) {
            this.listEventTypesAsync(isInPlay, Password, null);
        }
        
        public void listEventTypesAsync(bool isInPlay, string Password, object userState) {
            if ((this.onBeginlistEventTypesDelegate == null)) {
                this.onBeginlistEventTypesDelegate = new BeginOperationDelegate(this.OnBeginlistEventTypes);
            }
            if ((this.onEndlistEventTypesDelegate == null)) {
                this.onEndlistEventTypesDelegate = new EndOperationDelegate(this.OnEndlistEventTypes);
            }
            if ((this.onlistEventTypesCompletedDelegate == null)) {
                this.onlistEventTypesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnlistEventTypesCompleted);
            }
            base.InvokeAsync(this.onBeginlistEventTypesDelegate, new object[] {
                        isInPlay,
                        Password}, this.onEndlistEventTypesDelegate, this.onlistEventTypesCompletedDelegate, userState);
        }
        
        public AppForBackGroundTasks.BettingServiceReference.EventTypeResult[] listEventTypesWithMarketFilter(bool isInPlay, string Password) {
            return base.Channel.listEventTypesWithMarketFilter(isInPlay, Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginlistEventTypesWithMarketFilter(bool isInPlay, string Password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginlistEventTypesWithMarketFilter(isInPlay, Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public AppForBackGroundTasks.BettingServiceReference.EventTypeResult[] EndlistEventTypesWithMarketFilter(System.IAsyncResult result) {
            return base.Channel.EndlistEventTypesWithMarketFilter(result);
        }
        
        private System.IAsyncResult OnBeginlistEventTypesWithMarketFilter(object[] inValues, System.AsyncCallback callback, object asyncState) {
            bool isInPlay = ((bool)(inValues[0]));
            string Password = ((string)(inValues[1]));
            return this.BeginlistEventTypesWithMarketFilter(isInPlay, Password, callback, asyncState);
        }
        
        private object[] OnEndlistEventTypesWithMarketFilter(System.IAsyncResult result) {
            AppForBackGroundTasks.BettingServiceReference.EventTypeResult[] retVal = this.EndlistEventTypesWithMarketFilter(result);
            return new object[] {
                    retVal};
        }
        
        private void OnlistEventTypesWithMarketFilterCompleted(object state) {
            if ((this.listEventTypesWithMarketFilterCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.listEventTypesWithMarketFilterCompleted(this, new listEventTypesWithMarketFilterCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void listEventTypesWithMarketFilterAsync(bool isInPlay, string Password) {
            this.listEventTypesWithMarketFilterAsync(isInPlay, Password, null);
        }
        
        public void listEventTypesWithMarketFilterAsync(bool isInPlay, string Password, object userState) {
            if ((this.onBeginlistEventTypesWithMarketFilterDelegate == null)) {
                this.onBeginlistEventTypesWithMarketFilterDelegate = new BeginOperationDelegate(this.OnBeginlistEventTypesWithMarketFilter);
            }
            if ((this.onEndlistEventTypesWithMarketFilterDelegate == null)) {
                this.onEndlistEventTypesWithMarketFilterDelegate = new EndOperationDelegate(this.OnEndlistEventTypesWithMarketFilter);
            }
            if ((this.onlistEventTypesWithMarketFilterCompletedDelegate == null)) {
                this.onlistEventTypesWithMarketFilterCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnlistEventTypesWithMarketFilterCompleted);
            }
            base.InvokeAsync(this.onBeginlistEventTypesWithMarketFilterDelegate, new object[] {
                        isInPlay,
                        Password}, this.onEndlistEventTypesWithMarketFilterDelegate, this.onlistEventTypesWithMarketFilterCompletedDelegate, userState);
        }
        
        public AppForBackGroundTasks.BettingServiceReference.CompetitionResult[] listCompetitions(string ID, bool isInPlay, string Password) {
            return base.Channel.listCompetitions(ID, isInPlay, Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginlistCompetitions(string ID, bool isInPlay, string Password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginlistCompetitions(ID, isInPlay, Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public AppForBackGroundTasks.BettingServiceReference.CompetitionResult[] EndlistCompetitions(System.IAsyncResult result) {
            return base.Channel.EndlistCompetitions(result);
        }
        
        private System.IAsyncResult OnBeginlistCompetitions(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ID = ((string)(inValues[0]));
            bool isInPlay = ((bool)(inValues[1]));
            string Password = ((string)(inValues[2]));
            return this.BeginlistCompetitions(ID, isInPlay, Password, callback, asyncState);
        }
        
        private object[] OnEndlistCompetitions(System.IAsyncResult result) {
            AppForBackGroundTasks.BettingServiceReference.CompetitionResult[] retVal = this.EndlistCompetitions(result);
            return new object[] {
                    retVal};
        }
        
        private void OnlistCompetitionsCompleted(object state) {
            if ((this.listCompetitionsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.listCompetitionsCompleted(this, new listCompetitionsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void listCompetitionsAsync(string ID, bool isInPlay, string Password) {
            this.listCompetitionsAsync(ID, isInPlay, Password, null);
        }
        
        public void listCompetitionsAsync(string ID, bool isInPlay, string Password, object userState) {
            if ((this.onBeginlistCompetitionsDelegate == null)) {
                this.onBeginlistCompetitionsDelegate = new BeginOperationDelegate(this.OnBeginlistCompetitions);
            }
            if ((this.onEndlistCompetitionsDelegate == null)) {
                this.onEndlistCompetitionsDelegate = new EndOperationDelegate(this.OnEndlistCompetitions);
            }
            if ((this.onlistCompetitionsCompletedDelegate == null)) {
                this.onlistCompetitionsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnlistCompetitionsCompleted);
            }
            base.InvokeAsync(this.onBeginlistCompetitionsDelegate, new object[] {
                        ID,
                        isInPlay,
                        Password}, this.onEndlistCompetitionsDelegate, this.onlistCompetitionsCompletedDelegate, userState);
        }
        
        public AppForBackGroundTasks.BettingServiceReference.EventResult[] listEvents(string ID, bool isInPlay, string Password) {
            return base.Channel.listEvents(ID, isInPlay, Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginlistEvents(string ID, bool isInPlay, string Password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginlistEvents(ID, isInPlay, Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public AppForBackGroundTasks.BettingServiceReference.EventResult[] EndlistEvents(System.IAsyncResult result) {
            return base.Channel.EndlistEvents(result);
        }
        
        private System.IAsyncResult OnBeginlistEvents(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ID = ((string)(inValues[0]));
            bool isInPlay = ((bool)(inValues[1]));
            string Password = ((string)(inValues[2]));
            return this.BeginlistEvents(ID, isInPlay, Password, callback, asyncState);
        }
        
        private object[] OnEndlistEvents(System.IAsyncResult result) {
            AppForBackGroundTasks.BettingServiceReference.EventResult[] retVal = this.EndlistEvents(result);
            return new object[] {
                    retVal};
        }
        
        private void OnlistEventsCompleted(object state) {
            if ((this.listEventsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.listEventsCompleted(this, new listEventsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void listEventsAsync(string ID, bool isInPlay, string Password) {
            this.listEventsAsync(ID, isInPlay, Password, null);
        }
        
        public void listEventsAsync(string ID, bool isInPlay, string Password, object userState) {
            if ((this.onBeginlistEventsDelegate == null)) {
                this.onBeginlistEventsDelegate = new BeginOperationDelegate(this.OnBeginlistEvents);
            }
            if ((this.onEndlistEventsDelegate == null)) {
                this.onEndlistEventsDelegate = new EndOperationDelegate(this.OnEndlistEvents);
            }
            if ((this.onlistEventsCompletedDelegate == null)) {
                this.onlistEventsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnlistEventsCompleted);
            }
            base.InvokeAsync(this.onBeginlistEventsDelegate, new object[] {
                        ID,
                        isInPlay,
                        Password}, this.onEndlistEventsDelegate, this.onlistEventsCompletedDelegate, userState);
        }
        
        public AppForBackGroundTasks.BettingServiceReference.MarketBook[] GetMarketDatabyIDResultsOnly(string marketID) {
            return base.Channel.GetMarketDatabyIDResultsOnly(marketID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetMarketDatabyIDResultsOnly(string marketID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMarketDatabyIDResultsOnly(marketID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public AppForBackGroundTasks.BettingServiceReference.MarketBook[] EndGetMarketDatabyIDResultsOnly(System.IAsyncResult result) {
            return base.Channel.EndGetMarketDatabyIDResultsOnly(result);
        }
        
        private System.IAsyncResult OnBeginGetMarketDatabyIDResultsOnly(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string marketID = ((string)(inValues[0]));
            return this.BeginGetMarketDatabyIDResultsOnly(marketID, callback, asyncState);
        }
        
        private object[] OnEndGetMarketDatabyIDResultsOnly(System.IAsyncResult result) {
            AppForBackGroundTasks.BettingServiceReference.MarketBook[] retVal = this.EndGetMarketDatabyIDResultsOnly(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMarketDatabyIDResultsOnlyCompleted(object state) {
            if ((this.GetMarketDatabyIDResultsOnlyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMarketDatabyIDResultsOnlyCompleted(this, new GetMarketDatabyIDResultsOnlyCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMarketDatabyIDResultsOnlyAsync(string marketID) {
            this.GetMarketDatabyIDResultsOnlyAsync(marketID, null);
        }
        
        public void GetMarketDatabyIDResultsOnlyAsync(string marketID, object userState) {
            if ((this.onBeginGetMarketDatabyIDResultsOnlyDelegate == null)) {
                this.onBeginGetMarketDatabyIDResultsOnlyDelegate = new BeginOperationDelegate(this.OnBeginGetMarketDatabyIDResultsOnly);
            }
            if ((this.onEndGetMarketDatabyIDResultsOnlyDelegate == null)) {
                this.onEndGetMarketDatabyIDResultsOnlyDelegate = new EndOperationDelegate(this.OnEndGetMarketDatabyIDResultsOnly);
            }
            if ((this.onGetMarketDatabyIDResultsOnlyCompletedDelegate == null)) {
                this.onGetMarketDatabyIDResultsOnlyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMarketDatabyIDResultsOnlyCompleted);
            }
            base.InvokeAsync(this.onBeginGetMarketDatabyIDResultsOnlyDelegate, new object[] {
                        marketID}, this.onEndGetMarketDatabyIDResultsOnlyDelegate, this.onGetMarketDatabyIDResultsOnlyCompletedDelegate, userState);
        }
        
        public AppForBackGroundTasks.BettingServiceReference.MarketBook[] GetMarketDatabyID(string[] marketID, string sheetname, System.DateTime OrignalOpenDate, string MainSportsCategory, string Password) {
            return base.Channel.GetMarketDatabyID(marketID, sheetname, OrignalOpenDate, MainSportsCategory, Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetMarketDatabyID(string[] marketID, string sheetname, System.DateTime OrignalOpenDate, string MainSportsCategory, string Password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMarketDatabyID(marketID, sheetname, OrignalOpenDate, MainSportsCategory, Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public AppForBackGroundTasks.BettingServiceReference.MarketBook[] EndGetMarketDatabyID(System.IAsyncResult result) {
            return base.Channel.EndGetMarketDatabyID(result);
        }
        
        private System.IAsyncResult OnBeginGetMarketDatabyID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string[] marketID = ((string[])(inValues[0]));
            string sheetname = ((string)(inValues[1]));
            System.DateTime OrignalOpenDate = ((System.DateTime)(inValues[2]));
            string MainSportsCategory = ((string)(inValues[3]));
            string Password = ((string)(inValues[4]));
            return this.BeginGetMarketDatabyID(marketID, sheetname, OrignalOpenDate, MainSportsCategory, Password, callback, asyncState);
        }
        
        private object[] OnEndGetMarketDatabyID(System.IAsyncResult result) {
            AppForBackGroundTasks.BettingServiceReference.MarketBook[] retVal = this.EndGetMarketDatabyID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMarketDatabyIDCompleted(object state) {
            if ((this.GetMarketDatabyIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMarketDatabyIDCompleted(this, new GetMarketDatabyIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMarketDatabyIDAsync(string[] marketID, string sheetname, System.DateTime OrignalOpenDate, string MainSportsCategory, string Password) {
            this.GetMarketDatabyIDAsync(marketID, sheetname, OrignalOpenDate, MainSportsCategory, Password, null);
        }
        
        public void GetMarketDatabyIDAsync(string[] marketID, string sheetname, System.DateTime OrignalOpenDate, string MainSportsCategory, string Password, object userState) {
            if ((this.onBeginGetMarketDatabyIDDelegate == null)) {
                this.onBeginGetMarketDatabyIDDelegate = new BeginOperationDelegate(this.OnBeginGetMarketDatabyID);
            }
            if ((this.onEndGetMarketDatabyIDDelegate == null)) {
                this.onEndGetMarketDatabyIDDelegate = new EndOperationDelegate(this.OnEndGetMarketDatabyID);
            }
            if ((this.onGetMarketDatabyIDCompletedDelegate == null)) {
                this.onGetMarketDatabyIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMarketDatabyIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetMarketDatabyIDDelegate, new object[] {
                        marketID,
                        sheetname,
                        OrignalOpenDate,
                        MainSportsCategory,
                        Password}, this.onEndGetMarketDatabyIDDelegate, this.onGetMarketDatabyIDCompletedDelegate, userState);
        }
        
        public void GetDataFromBetfairReadOnly() {
            base.Channel.GetDataFromBetfairReadOnly();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetDataFromBetfairReadOnly(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDataFromBetfairReadOnly(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndGetDataFromBetfairReadOnly(System.IAsyncResult result) {
            base.Channel.EndGetDataFromBetfairReadOnly(result);
        }
        
        private System.IAsyncResult OnBeginGetDataFromBetfairReadOnly(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetDataFromBetfairReadOnly(callback, asyncState);
        }
        
        private object[] OnEndGetDataFromBetfairReadOnly(System.IAsyncResult result) {
            this.EndGetDataFromBetfairReadOnly(result);
            return null;
        }
        
        private void OnGetDataFromBetfairReadOnlyCompleted(object state) {
            if ((this.GetDataFromBetfairReadOnlyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDataFromBetfairReadOnlyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDataFromBetfairReadOnlyAsync() {
            this.GetDataFromBetfairReadOnlyAsync(null);
        }
        
        public void GetDataFromBetfairReadOnlyAsync(object userState) {
            if ((this.onBeginGetDataFromBetfairReadOnlyDelegate == null)) {
                this.onBeginGetDataFromBetfairReadOnlyDelegate = new BeginOperationDelegate(this.OnBeginGetDataFromBetfairReadOnly);
            }
            if ((this.onEndGetDataFromBetfairReadOnlyDelegate == null)) {
                this.onEndGetDataFromBetfairReadOnlyDelegate = new EndOperationDelegate(this.OnEndGetDataFromBetfairReadOnly);
            }
            if ((this.onGetDataFromBetfairReadOnlyCompletedDelegate == null)) {
                this.onGetDataFromBetfairReadOnlyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDataFromBetfairReadOnlyCompleted);
            }
            base.InvokeAsync(this.onBeginGetDataFromBetfairReadOnlyDelegate, null, this.onEndGetDataFromBetfairReadOnlyDelegate, this.onGetDataFromBetfairReadOnlyCompletedDelegate, userState);
        }
        
        public void GetBallbyBallSummary() {
            base.Channel.GetBallbyBallSummary();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetBallbyBallSummary(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetBallbyBallSummary(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndGetBallbyBallSummary(System.IAsyncResult result) {
            base.Channel.EndGetBallbyBallSummary(result);
        }
        
        private System.IAsyncResult OnBeginGetBallbyBallSummary(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetBallbyBallSummary(callback, asyncState);
        }
        
        private object[] OnEndGetBallbyBallSummary(System.IAsyncResult result) {
            this.EndGetBallbyBallSummary(result);
            return null;
        }
        
        private void OnGetBallbyBallSummaryCompleted(object state) {
            if ((this.GetBallbyBallSummaryCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetBallbyBallSummaryCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetBallbyBallSummaryAsync() {
            this.GetBallbyBallSummaryAsync(null);
        }
        
        public void GetBallbyBallSummaryAsync(object userState) {
            if ((this.onBeginGetBallbyBallSummaryDelegate == null)) {
                this.onBeginGetBallbyBallSummaryDelegate = new BeginOperationDelegate(this.OnBeginGetBallbyBallSummary);
            }
            if ((this.onEndGetBallbyBallSummaryDelegate == null)) {
                this.onEndGetBallbyBallSummaryDelegate = new EndOperationDelegate(this.OnEndGetBallbyBallSummary);
            }
            if ((this.onGetBallbyBallSummaryCompletedDelegate == null)) {
                this.onGetBallbyBallSummaryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetBallbyBallSummaryCompleted);
            }
            base.InvokeAsync(this.onBeginGetBallbyBallSummaryDelegate, null, this.onEndGetBallbyBallSummaryDelegate, this.onGetBallbyBallSummaryCompletedDelegate, userState);
        }
        
        public AppForBackGroundTasks.BettingServiceReference.MarketBook1[] GetCurrentMarketBookNew(string marketid, string sheetname, string MainSportsCategory, System.DateTime marketopendate, bool BettingAllowed, AppForBackGroundTasks.BettingServiceReference.Runner[] OldRunners, AppForBackGroundTasks.BettingServiceReference.MarketBook currentmarketobject, string Password) {
            return base.Channel.GetCurrentMarketBookNew(marketid, sheetname, MainSportsCategory, marketopendate, BettingAllowed, OldRunners, currentmarketobject, Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetCurrentMarketBookNew(string marketid, string sheetname, string MainSportsCategory, System.DateTime marketopendate, bool BettingAllowed, AppForBackGroundTasks.BettingServiceReference.Runner[] OldRunners, AppForBackGroundTasks.BettingServiceReference.MarketBook currentmarketobject, string Password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCurrentMarketBookNew(marketid, sheetname, MainSportsCategory, marketopendate, BettingAllowed, OldRunners, currentmarketobject, Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public AppForBackGroundTasks.BettingServiceReference.MarketBook1[] EndGetCurrentMarketBookNew(System.IAsyncResult result) {
            return base.Channel.EndGetCurrentMarketBookNew(result);
        }
        
        private System.IAsyncResult OnBeginGetCurrentMarketBookNew(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string marketid = ((string)(inValues[0]));
            string sheetname = ((string)(inValues[1]));
            string MainSportsCategory = ((string)(inValues[2]));
            System.DateTime marketopendate = ((System.DateTime)(inValues[3]));
            bool BettingAllowed = ((bool)(inValues[4]));
            AppForBackGroundTasks.BettingServiceReference.Runner[] OldRunners = ((AppForBackGroundTasks.BettingServiceReference.Runner[])(inValues[5]));
            AppForBackGroundTasks.BettingServiceReference.MarketBook currentmarketobject = ((AppForBackGroundTasks.BettingServiceReference.MarketBook)(inValues[6]));
            string Password = ((string)(inValues[7]));
            return this.BeginGetCurrentMarketBookNew(marketid, sheetname, MainSportsCategory, marketopendate, BettingAllowed, OldRunners, currentmarketobject, Password, callback, asyncState);
        }
        
        private object[] OnEndGetCurrentMarketBookNew(System.IAsyncResult result) {
            AppForBackGroundTasks.BettingServiceReference.MarketBook1[] retVal = this.EndGetCurrentMarketBookNew(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCurrentMarketBookNewCompleted(object state) {
            if ((this.GetCurrentMarketBookNewCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCurrentMarketBookNewCompleted(this, new GetCurrentMarketBookNewCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCurrentMarketBookNewAsync(string marketid, string sheetname, string MainSportsCategory, System.DateTime marketopendate, bool BettingAllowed, AppForBackGroundTasks.BettingServiceReference.Runner[] OldRunners, AppForBackGroundTasks.BettingServiceReference.MarketBook currentmarketobject, string Password) {
            this.GetCurrentMarketBookNewAsync(marketid, sheetname, MainSportsCategory, marketopendate, BettingAllowed, OldRunners, currentmarketobject, Password, null);
        }
        
        public void GetCurrentMarketBookNewAsync(string marketid, string sheetname, string MainSportsCategory, System.DateTime marketopendate, bool BettingAllowed, AppForBackGroundTasks.BettingServiceReference.Runner[] OldRunners, AppForBackGroundTasks.BettingServiceReference.MarketBook currentmarketobject, string Password, object userState) {
            if ((this.onBeginGetCurrentMarketBookNewDelegate == null)) {
                this.onBeginGetCurrentMarketBookNewDelegate = new BeginOperationDelegate(this.OnBeginGetCurrentMarketBookNew);
            }
            if ((this.onEndGetCurrentMarketBookNewDelegate == null)) {
                this.onEndGetCurrentMarketBookNewDelegate = new EndOperationDelegate(this.OnEndGetCurrentMarketBookNew);
            }
            if ((this.onGetCurrentMarketBookNewCompletedDelegate == null)) {
                this.onGetCurrentMarketBookNewCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCurrentMarketBookNewCompleted);
            }
            base.InvokeAsync(this.onBeginGetCurrentMarketBookNewDelegate, new object[] {
                        marketid,
                        sheetname,
                        MainSportsCategory,
                        marketopendate,
                        BettingAllowed,
                        OldRunners,
                        currentmarketobject,
                        Password}, this.onEndGetCurrentMarketBookNewDelegate, this.onGetCurrentMarketBookNewCompletedDelegate, userState);
        }
        
        public AppForBackGroundTasks.BettingServiceReference.MarketBook[] GetMarketDatabyIDLive(string[] marketID, string sheetname, System.DateTime OrignalOpenDate, string MainSportsCategory, string Password) {
            return base.Channel.GetMarketDatabyIDLive(marketID, sheetname, OrignalOpenDate, MainSportsCategory, Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetMarketDatabyIDLive(string[] marketID, string sheetname, System.DateTime OrignalOpenDate, string MainSportsCategory, string Password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMarketDatabyIDLive(marketID, sheetname, OrignalOpenDate, MainSportsCategory, Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public AppForBackGroundTasks.BettingServiceReference.MarketBook[] EndGetMarketDatabyIDLive(System.IAsyncResult result) {
            return base.Channel.EndGetMarketDatabyIDLive(result);
        }
        
        private System.IAsyncResult OnBeginGetMarketDatabyIDLive(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string[] marketID = ((string[])(inValues[0]));
            string sheetname = ((string)(inValues[1]));
            System.DateTime OrignalOpenDate = ((System.DateTime)(inValues[2]));
            string MainSportsCategory = ((string)(inValues[3]));
            string Password = ((string)(inValues[4]));
            return this.BeginGetMarketDatabyIDLive(marketID, sheetname, OrignalOpenDate, MainSportsCategory, Password, callback, asyncState);
        }
        
        private object[] OnEndGetMarketDatabyIDLive(System.IAsyncResult result) {
            AppForBackGroundTasks.BettingServiceReference.MarketBook[] retVal = this.EndGetMarketDatabyIDLive(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMarketDatabyIDLiveCompleted(object state) {
            if ((this.GetMarketDatabyIDLiveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMarketDatabyIDLiveCompleted(this, new GetMarketDatabyIDLiveCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMarketDatabyIDLiveAsync(string[] marketID, string sheetname, System.DateTime OrignalOpenDate, string MainSportsCategory, string Password) {
            this.GetMarketDatabyIDLiveAsync(marketID, sheetname, OrignalOpenDate, MainSportsCategory, Password, null);
        }
        
        public void GetMarketDatabyIDLiveAsync(string[] marketID, string sheetname, System.DateTime OrignalOpenDate, string MainSportsCategory, string Password, object userState) {
            if ((this.onBeginGetMarketDatabyIDLiveDelegate == null)) {
                this.onBeginGetMarketDatabyIDLiveDelegate = new BeginOperationDelegate(this.OnBeginGetMarketDatabyIDLive);
            }
            if ((this.onEndGetMarketDatabyIDLiveDelegate == null)) {
                this.onEndGetMarketDatabyIDLiveDelegate = new EndOperationDelegate(this.OnEndGetMarketDatabyIDLive);
            }
            if ((this.onGetMarketDatabyIDLiveCompletedDelegate == null)) {
                this.onGetMarketDatabyIDLiveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMarketDatabyIDLiveCompleted);
            }
            base.InvokeAsync(this.onBeginGetMarketDatabyIDLiveDelegate, new object[] {
                        marketID,
                        sheetname,
                        OrignalOpenDate,
                        MainSportsCategory,
                        Password}, this.onEndGetMarketDatabyIDLiveDelegate, this.onGetMarketDatabyIDLiveCompletedDelegate, userState);
        }
        
        public string GetAllMarketsBP(string[] marketIDs) {
            return base.Channel.GetAllMarketsBP(marketIDs);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAllMarketsBP(string[] marketIDs, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllMarketsBP(marketIDs, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetAllMarketsBP(System.IAsyncResult result) {
            return base.Channel.EndGetAllMarketsBP(result);
        }
        
        private System.IAsyncResult OnBeginGetAllMarketsBP(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string[] marketIDs = ((string[])(inValues[0]));
            return this.BeginGetAllMarketsBP(marketIDs, callback, asyncState);
        }
        
        private object[] OnEndGetAllMarketsBP(System.IAsyncResult result) {
            string retVal = this.EndGetAllMarketsBP(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllMarketsBPCompleted(object state) {
            if ((this.GetAllMarketsBPCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllMarketsBPCompleted(this, new GetAllMarketsBPCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllMarketsBPAsync(string[] marketIDs) {
            this.GetAllMarketsBPAsync(marketIDs, null);
        }
        
        public void GetAllMarketsBPAsync(string[] marketIDs, object userState) {
            if ((this.onBeginGetAllMarketsBPDelegate == null)) {
                this.onBeginGetAllMarketsBPDelegate = new BeginOperationDelegate(this.OnBeginGetAllMarketsBP);
            }
            if ((this.onEndGetAllMarketsBPDelegate == null)) {
                this.onEndGetAllMarketsBPDelegate = new EndOperationDelegate(this.OnEndGetAllMarketsBP);
            }
            if ((this.onGetAllMarketsBPCompletedDelegate == null)) {
                this.onGetAllMarketsBPCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllMarketsBPCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllMarketsBPDelegate, new object[] {
                        marketIDs}, this.onEndGetAllMarketsBPDelegate, this.onGetAllMarketsBPCompletedDelegate, userState);
        }
        
        public AppForBackGroundTasks.BettingServiceReference.MarketBook1[] GetAllMarketsOthers(string[] marketIDs) {
            return base.Channel.GetAllMarketsOthers(marketIDs);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAllMarketsOthers(string[] marketIDs, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllMarketsOthers(marketIDs, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public AppForBackGroundTasks.BettingServiceReference.MarketBook1[] EndGetAllMarketsOthers(System.IAsyncResult result) {
            return base.Channel.EndGetAllMarketsOthers(result);
        }
        
        private System.IAsyncResult OnBeginGetAllMarketsOthers(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string[] marketIDs = ((string[])(inValues[0]));
            return this.BeginGetAllMarketsOthers(marketIDs, callback, asyncState);
        }
        
        private object[] OnEndGetAllMarketsOthers(System.IAsyncResult result) {
            AppForBackGroundTasks.BettingServiceReference.MarketBook1[] retVal = this.EndGetAllMarketsOthers(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllMarketsOthersCompleted(object state) {
            if ((this.GetAllMarketsOthersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllMarketsOthersCompleted(this, new GetAllMarketsOthersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllMarketsOthersAsync(string[] marketIDs) {
            this.GetAllMarketsOthersAsync(marketIDs, null);
        }
        
        public void GetAllMarketsOthersAsync(string[] marketIDs, object userState) {
            if ((this.onBeginGetAllMarketsOthersDelegate == null)) {
                this.onBeginGetAllMarketsOthersDelegate = new BeginOperationDelegate(this.OnBeginGetAllMarketsOthers);
            }
            if ((this.onEndGetAllMarketsOthersDelegate == null)) {
                this.onEndGetAllMarketsOthersDelegate = new EndOperationDelegate(this.OnEndGetAllMarketsOthers);
            }
            if ((this.onGetAllMarketsOthersCompletedDelegate == null)) {
                this.onGetAllMarketsOthersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllMarketsOthersCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllMarketsOthersDelegate, new object[] {
                        marketIDs}, this.onEndGetAllMarketsOthersDelegate, this.onGetAllMarketsOthersCompletedDelegate, userState);
        }
        
        public AppForBackGroundTasks.BettingServiceReference.MarketBook1[] GetAllMarketsOthersFancy(string[] marketIDs) {
            return base.Channel.GetAllMarketsOthersFancy(marketIDs);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAllMarketsOthersFancy(string[] marketIDs, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllMarketsOthersFancy(marketIDs, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public AppForBackGroundTasks.BettingServiceReference.MarketBook1[] EndGetAllMarketsOthersFancy(System.IAsyncResult result) {
            return base.Channel.EndGetAllMarketsOthersFancy(result);
        }
        
        private System.IAsyncResult OnBeginGetAllMarketsOthersFancy(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string[] marketIDs = ((string[])(inValues[0]));
            return this.BeginGetAllMarketsOthersFancy(marketIDs, callback, asyncState);
        }
        
        private object[] OnEndGetAllMarketsOthersFancy(System.IAsyncResult result) {
            AppForBackGroundTasks.BettingServiceReference.MarketBook1[] retVal = this.EndGetAllMarketsOthersFancy(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllMarketsOthersFancyCompleted(object state) {
            if ((this.GetAllMarketsOthersFancyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllMarketsOthersFancyCompleted(this, new GetAllMarketsOthersFancyCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllMarketsOthersFancyAsync(string[] marketIDs) {
            this.GetAllMarketsOthersFancyAsync(marketIDs, null);
        }
        
        public void GetAllMarketsOthersFancyAsync(string[] marketIDs, object userState) {
            if ((this.onBeginGetAllMarketsOthersFancyDelegate == null)) {
                this.onBeginGetAllMarketsOthersFancyDelegate = new BeginOperationDelegate(this.OnBeginGetAllMarketsOthersFancy);
            }
            if ((this.onEndGetAllMarketsOthersFancyDelegate == null)) {
                this.onEndGetAllMarketsOthersFancyDelegate = new EndOperationDelegate(this.OnEndGetAllMarketsOthersFancy);
            }
            if ((this.onGetAllMarketsOthersFancyCompletedDelegate == null)) {
                this.onGetAllMarketsOthersFancyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllMarketsOthersFancyCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllMarketsOthersFancyDelegate, new object[] {
                        marketIDs}, this.onEndGetAllMarketsOthersFancyDelegate, this.onGetAllMarketsOthersFancyCompletedDelegate, userState);
        }
        
        public string GetAllMarketsBPFancy(string[] marketIDs) {
            return base.Channel.GetAllMarketsBPFancy(marketIDs);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAllMarketsBPFancy(string[] marketIDs, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllMarketsBPFancy(marketIDs, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetAllMarketsBPFancy(System.IAsyncResult result) {
            return base.Channel.EndGetAllMarketsBPFancy(result);
        }
        
        private System.IAsyncResult OnBeginGetAllMarketsBPFancy(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string[] marketIDs = ((string[])(inValues[0]));
            return this.BeginGetAllMarketsBPFancy(marketIDs, callback, asyncState);
        }
        
        private object[] OnEndGetAllMarketsBPFancy(System.IAsyncResult result) {
            string retVal = this.EndGetAllMarketsBPFancy(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllMarketsBPFancyCompleted(object state) {
            if ((this.GetAllMarketsBPFancyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllMarketsBPFancyCompleted(this, new GetAllMarketsBPFancyCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllMarketsBPFancyAsync(string[] marketIDs) {
            this.GetAllMarketsBPFancyAsync(marketIDs, null);
        }
        
        public void GetAllMarketsBPFancyAsync(string[] marketIDs, object userState) {
            if ((this.onBeginGetAllMarketsBPFancyDelegate == null)) {
                this.onBeginGetAllMarketsBPFancyDelegate = new BeginOperationDelegate(this.OnBeginGetAllMarketsBPFancy);
            }
            if ((this.onEndGetAllMarketsBPFancyDelegate == null)) {
                this.onEndGetAllMarketsBPFancyDelegate = new EndOperationDelegate(this.OnEndGetAllMarketsBPFancy);
            }
            if ((this.onGetAllMarketsBPFancyCompletedDelegate == null)) {
                this.onGetAllMarketsBPFancyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllMarketsBPFancyCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllMarketsBPFancyDelegate, new object[] {
                        marketIDs}, this.onEndGetAllMarketsBPFancyDelegate, this.onGetAllMarketsBPFancyCompletedDelegate, userState);
        }
        
        public AppForBackGroundTasks.BettingServiceReference.MarketBook[] GetAllMarketsFancy(string[] marketIDs) {
            return base.Channel.GetAllMarketsFancy(marketIDs);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAllMarketsFancy(string[] marketIDs, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllMarketsFancy(marketIDs, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public AppForBackGroundTasks.BettingServiceReference.MarketBook[] EndGetAllMarketsFancy(System.IAsyncResult result) {
            return base.Channel.EndGetAllMarketsFancy(result);
        }
        
        private System.IAsyncResult OnBeginGetAllMarketsFancy(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string[] marketIDs = ((string[])(inValues[0]));
            return this.BeginGetAllMarketsFancy(marketIDs, callback, asyncState);
        }
        
        private object[] OnEndGetAllMarketsFancy(System.IAsyncResult result) {
            AppForBackGroundTasks.BettingServiceReference.MarketBook[] retVal = this.EndGetAllMarketsFancy(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllMarketsFancyCompleted(object state) {
            if ((this.GetAllMarketsFancyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllMarketsFancyCompleted(this, new GetAllMarketsFancyCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllMarketsFancyAsync(string[] marketIDs) {
            this.GetAllMarketsFancyAsync(marketIDs, null);
        }
        
        public void GetAllMarketsFancyAsync(string[] marketIDs, object userState) {
            if ((this.onBeginGetAllMarketsFancyDelegate == null)) {
                this.onBeginGetAllMarketsFancyDelegate = new BeginOperationDelegate(this.OnBeginGetAllMarketsFancy);
            }
            if ((this.onEndGetAllMarketsFancyDelegate == null)) {
                this.onEndGetAllMarketsFancyDelegate = new EndOperationDelegate(this.OnEndGetAllMarketsFancy);
            }
            if ((this.onGetAllMarketsFancyCompletedDelegate == null)) {
                this.onGetAllMarketsFancyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllMarketsFancyCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllMarketsFancyDelegate, new object[] {
                        marketIDs}, this.onEndGetAllMarketsFancyDelegate, this.onGetAllMarketsFancyCompletedDelegate, userState);
        }
    }
}
