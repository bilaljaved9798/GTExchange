//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AccountsServiceReference
{
    using System.Runtime.Serialization;


    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3-preview3.21351.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name = "SP_UserAccounts_GetDatabyUserIDandDateRangeandEventType_Result", Namespace = "http://schemas.datacontract.org/2004/07/bfnexchange.Services.DBModel")]
    internal partial class SP_UserAccounts_GetDatabyUserIDandDateRangeandEventType_Result : object
    {

        private string AccountsTitleField;

        private string AgentRateField;

        private string CreatedDateField;

        private string CreditField;

        private string DebitField;

        private string MarketBookIDField;

        private System.Nullable<decimal> OpeningBalanceField;

        private System.Nullable<int> UserIDField;

        private string UserNameField;

        [System.Runtime.Serialization.DataMemberAttribute()]
        internal string AccountsTitle
        {
            get
            {
                return this.AccountsTitleField;
            }
            set
            {
                this.AccountsTitleField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        internal string AgentRate
        {
            get
            {
                return this.AgentRateField;
            }
            set
            {
                this.AgentRateField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        internal string CreatedDate
        {
            get
            {
                return this.CreatedDateField;
            }
            set
            {
                this.CreatedDateField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        internal string Credit
        {
            get
            {
                return this.CreditField;
            }
            set
            {
                this.CreditField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        internal string Debit
        {
            get
            {
                return this.DebitField;
            }
            set
            {
                this.DebitField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        internal string MarketBookID
        {
            get
            {
                return this.MarketBookIDField;
            }
            set
            {
                this.MarketBookIDField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        internal System.Nullable<decimal> OpeningBalance
        {
            get
            {
                return this.OpeningBalanceField;
            }
            set
            {
                this.OpeningBalanceField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        internal System.Nullable<int> UserID
        {
            get
            {
                return this.UserIDField;
            }
            set
            {
                this.UserIDField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        internal string UserName
        {
            get
            {
                return this.UserNameField;
            }
            set
            {
                this.UserNameField = value;
            }
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3-preview3.21351.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name = "SP_UserAccounts_GetDistinctEventTypes_Result", Namespace = "http://schemas.datacontract.org/2004/07/bfnexchange.Services.DBModel")]
    internal partial class SP_UserAccounts_GetDistinctEventTypes_Result : object
    {

        private string EventtypeField;

        [System.Runtime.Serialization.DataMemberAttribute()]
        internal string Eventtype
        {
            get
            {
                return this.EventtypeField;
            }
            set
            {
                this.EventtypeField = value;
            }
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3-preview3.21351.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name = "SP_UserAccounts_GetDatabyCashRecivedorPaidandDateRange_Result", Namespace = "http://schemas.datacontract.org/2004/07/bfnexchange.Services.DBModel")]
    internal partial class SP_UserAccounts_GetDatabyCashRecivedorPaidandDateRange_Result : object
    {

        private decimal TotCreditField;

        private decimal TotDebitField;

        [System.Runtime.Serialization.DataMemberAttribute()]
        internal decimal TotCredit
        {
            get
            {
                return this.TotCreditField;
            }
            set
            {
                this.TotCreditField = value;
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        internal decimal TotDebit
        {
            get
            {
                return this.TotDebitField;
            }
            set
            {
                this.TotDebitField = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3-preview3.21351.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName = "AccountsServiceReference.IAccountsService")]
    internal interface IAccountsService
    {

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IAccountsService/AddtoUsersAccounts", ReplyAction = "http://tempuri.org/IAccountsService/AddtoUsersAccountsResponse")]
        string AddtoUsersAccounts(
                    string AccountsTitle,
                    string Debit,
                    string Credit,
                    int UserID,
                    string MarketBookID,
                    System.DateTime CreatedDate,
                    string AgentRate,
                    string SuperRate,
                    string ComissionRate,
                    decimal OpeningBalance,
                    bool isCreditAmount,
                    string EventType,
                    string WinnerName,
                    string EventId,
                    string EventName,
                    string MarketBookName);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IAccountsService/AddtoUsersAccounts", ReplyAction = "http://tempuri.org/IAccountsService/AddtoUsersAccountsResponse")]
        System.Threading.Tasks.Task<string> AddtoUsersAccountsAsync(
                    string AccountsTitle,
                    string Debit,
                    string Credit,
                    int UserID,
                    string MarketBookID,
                    System.DateTime CreatedDate,
                    string AgentRate,
                    string SuperRate,
                    string ComissionRate,
                    decimal OpeningBalance,
                    bool isCreditAmount,
                    string EventType,
                    string WinnerName,
                    string EventId,
                    string EventName,
                    string MarketBookName);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IAccountsService/GetAccountsDatabyUserIdDateRangeandEventType", ReplyAction = "http://tempuri.org/IAccountsService/GetAccountsDatabyUserIdDateRangeandEventTypeR" +
            "esponse")]
        AccountsServiceReference.SP_UserAccounts_GetDatabyUserIDandDateRangeandEventType_Result[] GetAccountsDatabyUserIdDateRangeandEventType(int userID, string From, string To, bool isCreditAmount, string Eventtype);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IAccountsService/GetAccountsDatabyUserIdDateRangeandEventType", ReplyAction = "http://tempuri.org/IAccountsService/GetAccountsDatabyUserIdDateRangeandEventTypeR" +
            "esponse")]
        System.Threading.Tasks.Task<AccountsServiceReference.SP_UserAccounts_GetDatabyUserIDandDateRangeandEventType_Result[]> GetAccountsDatabyUserIdDateRangeandEventTypeAsync(int userID, string From, string To, bool isCreditAmount, string Eventtype);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IAccountsService/GetDistinctEventTypesfromAccounts", ReplyAction = "http://tempuri.org/IAccountsService/GetDistinctEventTypesfromAccountsResponse")]
        AccountsServiceReference.SP_UserAccounts_GetDistinctEventTypes_Result[] GetDistinctEventTypesfromAccounts();

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IAccountsService/GetDistinctEventTypesfromAccounts", ReplyAction = "http://tempuri.org/IAccountsService/GetDistinctEventTypesfromAccountsResponse")]
        System.Threading.Tasks.Task<AccountsServiceReference.SP_UserAccounts_GetDistinctEventTypes_Result[]> GetDistinctEventTypesfromAccountsAsync();

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IAccountsService/GetAccountsCashReceivedorPaidbyDataRange", ReplyAction = "http://tempuri.org/IAccountsService/GetAccountsCashReceivedorPaidbyDataRangeRespo" +
            "nse")]
        AccountsServiceReference.SP_UserAccounts_GetDatabyCashRecivedorPaidandDateRange_Result GetAccountsCashReceivedorPaidbyDataRange(int userID, string From, string To);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IAccountsService/GetAccountsCashReceivedorPaidbyDataRange", ReplyAction = "http://tempuri.org/IAccountsService/GetAccountsCashReceivedorPaidbyDataRangeRespo" +
            "nse")]
        System.Threading.Tasks.Task<AccountsServiceReference.SP_UserAccounts_GetDatabyCashRecivedorPaidandDateRange_Result> GetAccountsCashReceivedorPaidbyDataRangeAsync(int userID, string From, string To);
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3-preview3.21351.2")]
    internal interface IAccountsServiceChannel : AccountsServiceReference.IAccountsService, System.ServiceModel.IClientChannel
    {
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3-preview3.21351.2")]
    internal partial class AccountsServiceClient : System.ServiceModel.ClientBase<AccountsServiceReference.IAccountsService>, AccountsServiceReference.IAccountsService
    {

        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);

        public AccountsServiceClient() :
                base(AccountsServiceClient.GetDefaultBinding(), AccountsServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IUserServices.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }

        public AccountsServiceClient(EndpointConfiguration endpointConfiguration) :
                base(AccountsServiceClient.GetBindingForEndpoint(endpointConfiguration), AccountsServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }

        public AccountsServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) :
                base(AccountsServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }

        public AccountsServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) :
                base(AccountsServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }

        public AccountsServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) :
                base(binding, remoteAddress)
        {
        }

        public string AddtoUsersAccounts(
                    string AccountsTitle,
                    string Debit,
                    string Credit,
                    int UserID,
                    string MarketBookID,
                    System.DateTime CreatedDate,
                    string AgentRate,
                    string SuperRate,
                    string ComissionRate,
                    decimal OpeningBalance,
                    bool isCreditAmount,
                    string EventType,
                    string WinnerName,
                    string EventId,
                    string EventName,
                    string MarketBookName)
        {
            return base.Channel.AddtoUsersAccounts(AccountsTitle, Debit, Credit, UserID, MarketBookID, CreatedDate, AgentRate, SuperRate, ComissionRate, OpeningBalance, isCreditAmount, EventType, WinnerName, EventId, EventName, MarketBookName);
        }

        public System.Threading.Tasks.Task<string> AddtoUsersAccountsAsync(
                    string AccountsTitle,
                    string Debit,
                    string Credit,
                    int UserID,
                    string MarketBookID,
                    System.DateTime CreatedDate,
                    string AgentRate,
                    string SuperRate,
                    string ComissionRate,
                    decimal OpeningBalance,
                    bool isCreditAmount,
                    string EventType,
                    string WinnerName,
                    string EventId,
                    string EventName,
                    string MarketBookName)
        {
            return base.Channel.AddtoUsersAccountsAsync(AccountsTitle, Debit, Credit, UserID, MarketBookID, CreatedDate, AgentRate, SuperRate, ComissionRate, OpeningBalance, isCreditAmount, EventType, WinnerName, EventId, EventName, MarketBookName);
        }

        public AccountsServiceReference.SP_UserAccounts_GetDatabyUserIDandDateRangeandEventType_Result[] GetAccountsDatabyUserIdDateRangeandEventType(int userID, string From, string To, bool isCreditAmount, string Eventtype)
        {
            return base.Channel.GetAccountsDatabyUserIdDateRangeandEventType(userID, From, To, isCreditAmount, Eventtype);
        }

        public System.Threading.Tasks.Task<AccountsServiceReference.SP_UserAccounts_GetDatabyUserIDandDateRangeandEventType_Result[]> GetAccountsDatabyUserIdDateRangeandEventTypeAsync(int userID, string From, string To, bool isCreditAmount, string Eventtype)
        {
            return base.Channel.GetAccountsDatabyUserIdDateRangeandEventTypeAsync(userID, From, To, isCreditAmount, Eventtype);
        }

        public AccountsServiceReference.SP_UserAccounts_GetDistinctEventTypes_Result[] GetDistinctEventTypesfromAccounts()
        {
            return base.Channel.GetDistinctEventTypesfromAccounts();
        }

        public System.Threading.Tasks.Task<AccountsServiceReference.SP_UserAccounts_GetDistinctEventTypes_Result[]> GetDistinctEventTypesfromAccountsAsync()
        {
            return base.Channel.GetDistinctEventTypesfromAccountsAsync();
        }

        public AccountsServiceReference.SP_UserAccounts_GetDatabyCashRecivedorPaidandDateRange_Result GetAccountsCashReceivedorPaidbyDataRange(int userID, string From, string To)
        {
            return base.Channel.GetAccountsCashReceivedorPaidbyDataRange(userID, From, To);
        }

        public System.Threading.Tasks.Task<AccountsServiceReference.SP_UserAccounts_GetDatabyCashRecivedorPaidandDateRange_Result> GetAccountsCashReceivedorPaidbyDataRangeAsync(int userID, string From, string To)
        {
            return base.Channel.GetAccountsCashReceivedorPaidbyDataRangeAsync(userID, From, To);
        }

        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }

        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }

        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IUserServices))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }

        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IUserServices))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:54524/Services/AccountsService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }

        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return AccountsServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IUserServices);
        }

        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return AccountsServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IUserServices);
        }

        public enum EndpointConfiguration
        {

            BasicHttpBinding_IUserServices,
        }
    }
}
