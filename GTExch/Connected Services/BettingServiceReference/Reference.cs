//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BettingServiceReference
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3-preview3.21351.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="BettingServiceReference.IBettingService")]
    public interface IBettingService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/listMarketCatalogue", ReplyAction="http://tempuri.org/IBettingService/listMarketCatalogueResponse")]
        System.Collections.Generic.List<ExternalAPI.TO.MarketCatalogue> listMarketCatalogue(string ID, System.Collections.Generic.List<string> lstMarketCatalogues, bool isInPlay, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/listMarketCatalogue", ReplyAction="http://tempuri.org/IBettingService/listMarketCatalogueResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ExternalAPI.TO.MarketCatalogue>> listMarketCatalogueAsync(string ID, System.Collections.Generic.List<string> lstMarketCatalogues, bool isInPlay, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/listMarketBookALL", ReplyAction="http://tempuri.org/IBettingService/listMarketBookALLResponse")]
        System.Collections.Generic.List<ExternalAPI.TO.MarketBook> listMarketBookALL(System.Collections.Generic.List<string> ID, int UserID, int UserTypeID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/listMarketBookALL", ReplyAction="http://tempuri.org/IBettingService/listMarketBookALLResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ExternalAPI.TO.MarketBook>> listMarketBookALLAsync(System.Collections.Generic.List<string> ID, int UserID, int UserTypeID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/listMarketBook", ReplyAction="http://tempuri.org/IBettingService/listMarketBookResponse")]
        System.Collections.Generic.List<ExternalAPI.TO.MarketBook> listMarketBook(string ID, int UserID, int UserTypeID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/listMarketBook", ReplyAction="http://tempuri.org/IBettingService/listMarketBookResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ExternalAPI.TO.MarketBook>> listMarketBookAsync(string ID, int UserID, int UserTypeID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/listEventTypes", ReplyAction="http://tempuri.org/IBettingService/listEventTypesResponse")]
        System.Collections.Generic.List<ExternalAPI.TO.EventTypeResult> listEventTypes(bool isInPlay, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/listEventTypes", ReplyAction="http://tempuri.org/IBettingService/listEventTypesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ExternalAPI.TO.EventTypeResult>> listEventTypesAsync(bool isInPlay, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/listEventTypesWithMarketFilter", ReplyAction="http://tempuri.org/IBettingService/listEventTypesWithMarketFilterResponse")]
        System.Collections.Generic.List<ExternalAPI.TO.EventTypeResult> listEventTypesWithMarketFilter(bool isInPlay, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/listEventTypesWithMarketFilter", ReplyAction="http://tempuri.org/IBettingService/listEventTypesWithMarketFilterResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ExternalAPI.TO.EventTypeResult>> listEventTypesWithMarketFilterAsync(bool isInPlay, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/listCompetitions", ReplyAction="http://tempuri.org/IBettingService/listCompetitionsResponse")]
        System.Collections.Generic.List<ExternalAPI.TO.CompetitionResult> listCompetitions(string ID, bool isInPlay, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/listCompetitions", ReplyAction="http://tempuri.org/IBettingService/listCompetitionsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ExternalAPI.TO.CompetitionResult>> listCompetitionsAsync(string ID, bool isInPlay, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/listEvents", ReplyAction="http://tempuri.org/IBettingService/listEventsResponse")]
        System.Collections.Generic.List<ExternalAPI.TO.EventResult> listEvents(string ID, bool isInPlay, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/listEvents", ReplyAction="http://tempuri.org/IBettingService/listEventsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ExternalAPI.TO.EventResult>> listEventsAsync(string ID, bool isInPlay, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetMarketDatabyIDResultsOnly", ReplyAction="http://tempuri.org/IBettingService/GetMarketDatabyIDResultsOnlyResponse")]
        System.Collections.Generic.List<ExternalAPI.TO.MarketBook> GetMarketDatabyIDResultsOnly(string marketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetMarketDatabyIDResultsOnly", ReplyAction="http://tempuri.org/IBettingService/GetMarketDatabyIDResultsOnlyResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ExternalAPI.TO.MarketBook>> GetMarketDatabyIDResultsOnlyAsync(string marketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetMarketDatabyID", ReplyAction="http://tempuri.org/IBettingService/GetMarketDatabyIDResponse")]
        System.Collections.Generic.List<ExternalAPI.TO.MarketBook> GetMarketDatabyID(System.Collections.Generic.List<string> marketID, string sheetname, System.DateTime OrignalOpenDate, string MainSportsCategory, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetMarketDatabyID", ReplyAction="http://tempuri.org/IBettingService/GetMarketDatabyIDResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ExternalAPI.TO.MarketBook>> GetMarketDatabyIDAsync(System.Collections.Generic.List<string> marketID, string sheetname, System.DateTime OrignalOpenDate, string MainSportsCategory, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetMarketDatabyIDIndianFancy", ReplyAction="http://tempuri.org/IBettingService/GetMarketDatabyIDIndianFancyResponse")]
        ExternalAPI.TO.MarketBookForindianFancy GetMarketDatabyIDIndianFancy(string EventID, string MarketBookID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetMarketDatabyIDIndianFancy", ReplyAction="http://tempuri.org/IBettingService/GetMarketDatabyIDIndianFancyResponse")]
        System.Threading.Tasks.Task<ExternalAPI.TO.MarketBookForindianFancy> GetMarketDatabyIDIndianFancyAsync(string EventID, string MarketBookID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetRunnersForFancy", ReplyAction="http://tempuri.org/IBettingService/GetRunnersForFancyResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<bfnexchange.wrBF.MarketBook>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(bfnexchange.wrBF.MarketBook))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<bfnexchange.wrBF.Runner>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(bfnexchange.wrBF.Runner))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(bfnexchange.wrBF.ExchangePrices))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<bfnexchange.wrBF.PriceSize>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(bfnexchange.wrBF.PriceSize))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<bfnexchange.wrBF.Match>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(bfnexchange.wrBF.Match))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(bfnexchange.wrBF.Side))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<bfnexchange.wrBF.Order>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(bfnexchange.wrBF.Order))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(bfnexchange.wrBF.OrderType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(bfnexchange.wrBF.PersistenceType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(bfnexchange.wrBF.OrderStatus))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(bfnexchange.wrBF.StartingPrices))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(bfnexchange.wrBF.RunnerStatus))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(bfnexchange.wrBF.MarketStatus))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DateTimeOffset))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<ExternalAPI.TO.MarketCatalogue>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.MarketCatalogue))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.Competition))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.MarketDescription))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.MarketBettingType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.Event))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.EventType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<ExternalAPI.TO.RunnerDescription>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.RunnerDescription))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<ExternalAPI.TO.MarketBook>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.MarketBook))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<ExternalAPI.TO.DebitCredit>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.DebitCredit))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<ExternalAPI.TO.SP_UserMarket_GetDistinctKJMarketsbyEventID_Result>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.SP_UserMarket_GetDistinctKJMarketsbyEventID_Result))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<ExternalAPI.TO.LinevMarkets>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.LinevMarkets))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<ExternalAPI.TO.LinevMarketsIN>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.LinevMarketsIN))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<ExternalAPI.TO.Runner>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.Runner))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.ExchangePrices))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<ExternalAPI.TO.PriceSize>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.PriceSize))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<ExternalAPI.TO.Match>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.Match))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.Side))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<ExternalAPI.TO.Order>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.Order))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.OrderType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.PersistenceType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.OrderStatus))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.StartingPrices))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.RunnerStatus))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.MarketStatus))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<ExternalAPI.TO.EventTypeResult>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.EventTypeResult))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<ExternalAPI.TO.CompetitionResult>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.CompetitionResult))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<ExternalAPI.TO.EventResult>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.EventResult))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.MarketBookForindianFancy))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<ExternalAPI.TO.RunnerForIndianFancy>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.RunnerForIndianFancy))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<ExternalAPI.TO.Market>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.Market))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<ExternalAPI.TO.Events>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.Events))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<ExternalAPI.TO.Session>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.Session))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.Home))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.con))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.cs))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.i1))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.i2))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.t1))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.t2))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.Root))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.Result))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<ExternalAPI.TO.RootSCT>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.RootSCT))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.Broadcasts))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.MatchInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.Radio))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<ExternalAPI.TO.Tv>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.Tv))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.Runners))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.State))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.FullTimeElapsed))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.Score))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.Away))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<ExternalAPI.TO.MarketBookString>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.MarketBookString))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<string>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, string>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<long>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<object>))]
        ExternalAPI.TO.GetDataFancy GetRunnersForFancy(string EventID, string MarketBookID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetRunnersForFancy", ReplyAction="http://tempuri.org/IBettingService/GetRunnersForFancyResponse")]
        System.Threading.Tasks.Task<ExternalAPI.TO.GetDataFancy> GetRunnersForFancyAsync(string EventID, string MarketBookID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetUpdate", ReplyAction="http://tempuri.org/IBettingService/GetUpdateResponse")]
        ExternalAPI.TO.Home GetUpdate(string EventID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetUpdate", ReplyAction="http://tempuri.org/IBettingService/GetUpdateResponse")]
        System.Threading.Tasks.Task<ExternalAPI.TO.Home> GetUpdateAsync(string EventID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetUpdate2", ReplyAction="http://tempuri.org/IBettingService/GetUpdate2Response")]
        ExternalAPI.TO.Root GetUpdate2(string EventID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetUpdate2", ReplyAction="http://tempuri.org/IBettingService/GetUpdate2Response")]
        System.Threading.Tasks.Task<ExternalAPI.TO.Root> GetUpdate2Async(string EventID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetUpdateSCT", ReplyAction="http://tempuri.org/IBettingService/GetUpdateSCTResponse")]
        System.Collections.Generic.List<ExternalAPI.TO.RootSCT> GetUpdateSCT(string Eventtypeid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetUpdateSCT", ReplyAction="http://tempuri.org/IBettingService/GetUpdateSCTResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ExternalAPI.TO.RootSCT>> GetUpdateSCTAsync(string Eventtypeid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetDataFromBetfairReadOnly", ReplyAction="http://tempuri.org/IBettingService/GetDataFromBetfairReadOnlyResponse")]
        void GetDataFromBetfairReadOnly();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetDataFromBetfairReadOnly", ReplyAction="http://tempuri.org/IBettingService/GetDataFromBetfairReadOnlyResponse")]
        System.Threading.Tasks.Task GetDataFromBetfairReadOnlyAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetBallbyBallSummary", ReplyAction="http://tempuri.org/IBettingService/GetBallbyBallSummaryResponse")]
        void GetBallbyBallSummary();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetBallbyBallSummary", ReplyAction="http://tempuri.org/IBettingService/GetBallbyBallSummaryResponse")]
        System.Threading.Tasks.Task GetBallbyBallSummaryAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetCurrentMarketBookNew", ReplyAction="http://tempuri.org/IBettingService/GetCurrentMarketBookNewResponse")]
        System.Collections.Generic.List<bfnexchange.wrBF.MarketBook> GetCurrentMarketBookNew(string marketid, string sheetname, string MainSportsCategory, System.DateTime marketopendate, bool BettingAllowed, System.Collections.Generic.List<ExternalAPI.TO.Runner> OldRunners, ExternalAPI.TO.MarketBook currentmarketobject, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetCurrentMarketBookNew", ReplyAction="http://tempuri.org/IBettingService/GetCurrentMarketBookNewResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<bfnexchange.wrBF.MarketBook>> GetCurrentMarketBookNewAsync(string marketid, string sheetname, string MainSportsCategory, System.DateTime marketopendate, bool BettingAllowed, System.Collections.Generic.List<ExternalAPI.TO.Runner> OldRunners, ExternalAPI.TO.MarketBook currentmarketobject, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetMarketDatabyIDLive", ReplyAction="http://tempuri.org/IBettingService/GetMarketDatabyIDLiveResponse")]
        System.Collections.Generic.List<ExternalAPI.TO.MarketBook> GetMarketDatabyIDLive(System.Collections.Generic.List<string> marketID, string sheetname, System.DateTime OrignalOpenDate, string MainSportsCategory, string Password, string PasswordS);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetMarketDatabyIDLive", ReplyAction="http://tempuri.org/IBettingService/GetMarketDatabyIDLiveResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ExternalAPI.TO.MarketBook>> GetMarketDatabyIDLiveAsync(System.Collections.Generic.List<string> marketID, string sheetname, System.DateTime OrignalOpenDate, string MainSportsCategory, string Password, string PasswordS);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetAllMarketsBP", ReplyAction="http://tempuri.org/IBettingService/GetAllMarketsBPResponse")]
        string GetAllMarketsBP(System.Collections.Generic.List<string> marketIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetAllMarketsBP", ReplyAction="http://tempuri.org/IBettingService/GetAllMarketsBPResponse")]
        System.Threading.Tasks.Task<string> GetAllMarketsBPAsync(System.Collections.Generic.List<string> marketIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetAllMarketsOthers", ReplyAction="http://tempuri.org/IBettingService/GetAllMarketsOthersResponse")]
        System.Collections.Generic.List<ExternalAPI.TO.MarketBookString> GetAllMarketsOthers(System.Collections.Generic.List<string> marketIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetAllMarketsOthers", ReplyAction="http://tempuri.org/IBettingService/GetAllMarketsOthersResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ExternalAPI.TO.MarketBookString>> GetAllMarketsOthersAsync(System.Collections.Generic.List<string> marketIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetAllMarketsOthersFancy", ReplyAction="http://tempuri.org/IBettingService/GetAllMarketsOthersFancyResponse")]
        System.Collections.Generic.List<ExternalAPI.TO.MarketBookString> GetAllMarketsOthersFancy(System.Collections.Generic.List<string> marketIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetAllMarketsOthersFancy", ReplyAction="http://tempuri.org/IBettingService/GetAllMarketsOthersFancyResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ExternalAPI.TO.MarketBookString>> GetAllMarketsOthersFancyAsync(System.Collections.Generic.List<string> marketIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetAllMarketsBPFancy", ReplyAction="http://tempuri.org/IBettingService/GetAllMarketsBPFancyResponse")]
        string GetAllMarketsBPFancy(System.Collections.Generic.List<string> marketIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetAllMarketsBPFancy", ReplyAction="http://tempuri.org/IBettingService/GetAllMarketsBPFancyResponse")]
        System.Threading.Tasks.Task<string> GetAllMarketsBPFancyAsync(System.Collections.Generic.List<string> marketIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetAllMarketsFancy", ReplyAction="http://tempuri.org/IBettingService/GetAllMarketsFancyResponse")]
        System.Collections.Generic.List<ExternalAPI.TO.MarketBook> GetAllMarketsFancy(System.Collections.Generic.List<string> marketIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetAllMarketsFancy", ReplyAction="http://tempuri.org/IBettingService/GetAllMarketsFancyResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ExternalAPI.TO.MarketBook>> GetAllMarketsFancyAsync(System.Collections.Generic.List<string> marketIDs);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3-preview3.21351.2")]
    public interface IBettingServiceChannel : BettingServiceReference.IBettingService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3-preview3.21351.2")]
    public partial class BettingServiceClient : System.ServiceModel.ClientBase<BettingServiceReference.IBettingService>, BettingServiceReference.IBettingService
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public BettingServiceClient() : 
                base(BettingServiceClient.GetDefaultBinding(), BettingServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IUserServices.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public BettingServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(BettingServiceClient.GetBindingForEndpoint(endpointConfiguration), BettingServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public BettingServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(BettingServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public BettingServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(BettingServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public BettingServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Collections.Generic.List<ExternalAPI.TO.MarketCatalogue> listMarketCatalogue(string ID, System.Collections.Generic.List<string> lstMarketCatalogues, bool isInPlay, string Password)
        {
            return base.Channel.listMarketCatalogue(ID, lstMarketCatalogues, isInPlay, Password);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ExternalAPI.TO.MarketCatalogue>> listMarketCatalogueAsync(string ID, System.Collections.Generic.List<string> lstMarketCatalogues, bool isInPlay, string Password)
        {
            return base.Channel.listMarketCatalogueAsync(ID, lstMarketCatalogues, isInPlay, Password);
        }
        
        public System.Collections.Generic.List<ExternalAPI.TO.MarketBook> listMarketBookALL(System.Collections.Generic.List<string> ID, int UserID, int UserTypeID, string Password)
        {
            return base.Channel.listMarketBookALL(ID, UserID, UserTypeID, Password);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ExternalAPI.TO.MarketBook>> listMarketBookALLAsync(System.Collections.Generic.List<string> ID, int UserID, int UserTypeID, string Password)
        {
            return base.Channel.listMarketBookALLAsync(ID, UserID, UserTypeID, Password);
        }
        
        public System.Collections.Generic.List<ExternalAPI.TO.MarketBook> listMarketBook(string ID, int UserID, int UserTypeID, string Password)
        {
            return base.Channel.listMarketBook(ID, UserID, UserTypeID, Password);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ExternalAPI.TO.MarketBook>> listMarketBookAsync(string ID, int UserID, int UserTypeID, string Password)
        {
            return base.Channel.listMarketBookAsync(ID, UserID, UserTypeID, Password);
        }
        
        public System.Collections.Generic.List<ExternalAPI.TO.EventTypeResult> listEventTypes(bool isInPlay, string Password)
        {
            return base.Channel.listEventTypes(isInPlay, Password);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ExternalAPI.TO.EventTypeResult>> listEventTypesAsync(bool isInPlay, string Password)
        {
            return base.Channel.listEventTypesAsync(isInPlay, Password);
        }
        
        public System.Collections.Generic.List<ExternalAPI.TO.EventTypeResult> listEventTypesWithMarketFilter(bool isInPlay, string Password)
        {
            return base.Channel.listEventTypesWithMarketFilter(isInPlay, Password);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ExternalAPI.TO.EventTypeResult>> listEventTypesWithMarketFilterAsync(bool isInPlay, string Password)
        {
            return base.Channel.listEventTypesWithMarketFilterAsync(isInPlay, Password);
        }
        
        public System.Collections.Generic.List<ExternalAPI.TO.CompetitionResult> listCompetitions(string ID, bool isInPlay, string Password)
        {
            return base.Channel.listCompetitions(ID, isInPlay, Password);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ExternalAPI.TO.CompetitionResult>> listCompetitionsAsync(string ID, bool isInPlay, string Password)
        {
            return base.Channel.listCompetitionsAsync(ID, isInPlay, Password);
        }
        
        public System.Collections.Generic.List<ExternalAPI.TO.EventResult> listEvents(string ID, bool isInPlay, string Password)
        {
            return base.Channel.listEvents(ID, isInPlay, Password);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ExternalAPI.TO.EventResult>> listEventsAsync(string ID, bool isInPlay, string Password)
        {
            return base.Channel.listEventsAsync(ID, isInPlay, Password);
        }
        
        public System.Collections.Generic.List<ExternalAPI.TO.MarketBook> GetMarketDatabyIDResultsOnly(string marketID)
        {
            return base.Channel.GetMarketDatabyIDResultsOnly(marketID);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ExternalAPI.TO.MarketBook>> GetMarketDatabyIDResultsOnlyAsync(string marketID)
        {
            return base.Channel.GetMarketDatabyIDResultsOnlyAsync(marketID);
        }
        
        public System.Collections.Generic.List<ExternalAPI.TO.MarketBook> GetMarketDatabyID(System.Collections.Generic.List<string> marketID, string sheetname, System.DateTime OrignalOpenDate, string MainSportsCategory, string Password)
        {
            return base.Channel.GetMarketDatabyID(marketID, sheetname, OrignalOpenDate, MainSportsCategory, Password);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ExternalAPI.TO.MarketBook>> GetMarketDatabyIDAsync(System.Collections.Generic.List<string> marketID, string sheetname, System.DateTime OrignalOpenDate, string MainSportsCategory, string Password)
        {
            return base.Channel.GetMarketDatabyIDAsync(marketID, sheetname, OrignalOpenDate, MainSportsCategory, Password);
        }
        
        public ExternalAPI.TO.MarketBookForindianFancy GetMarketDatabyIDIndianFancy(string EventID, string MarketBookID)
        {
            return base.Channel.GetMarketDatabyIDIndianFancy(EventID, MarketBookID);
        }
        
        public System.Threading.Tasks.Task<ExternalAPI.TO.MarketBookForindianFancy> GetMarketDatabyIDIndianFancyAsync(string EventID, string MarketBookID)
        {
            return base.Channel.GetMarketDatabyIDIndianFancyAsync(EventID, MarketBookID);
        }
        
        public ExternalAPI.TO.GetDataFancy GetRunnersForFancy(string EventID, string MarketBookID)
        {
            return base.Channel.GetRunnersForFancy(EventID, MarketBookID);
        }
        
        public System.Threading.Tasks.Task<ExternalAPI.TO.GetDataFancy> GetRunnersForFancyAsync(string EventID, string MarketBookID)
        {
            return base.Channel.GetRunnersForFancyAsync(EventID, MarketBookID);
        }
        
        public ExternalAPI.TO.Home GetUpdate(string EventID)
        {
            return base.Channel.GetUpdate(EventID);
        }
        
        public System.Threading.Tasks.Task<ExternalAPI.TO.Home> GetUpdateAsync(string EventID)
        {
            return base.Channel.GetUpdateAsync(EventID);
        }
        
        public ExternalAPI.TO.Root GetUpdate2(string EventID)
        {
            return base.Channel.GetUpdate2(EventID);
        }
        
        public System.Threading.Tasks.Task<ExternalAPI.TO.Root> GetUpdate2Async(string EventID)
        {
            return base.Channel.GetUpdate2Async(EventID);
        }
        
        public System.Collections.Generic.List<ExternalAPI.TO.RootSCT> GetUpdateSCT(string Eventtypeid)
        {
            return base.Channel.GetUpdateSCT(Eventtypeid);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ExternalAPI.TO.RootSCT>> GetUpdateSCTAsync(string Eventtypeid)
        {
            return base.Channel.GetUpdateSCTAsync(Eventtypeid);
        }
        
        public void GetDataFromBetfairReadOnly()
        {
            base.Channel.GetDataFromBetfairReadOnly();
        }
        
        public System.Threading.Tasks.Task GetDataFromBetfairReadOnlyAsync()
        {
            return base.Channel.GetDataFromBetfairReadOnlyAsync();
        }
        
        public void GetBallbyBallSummary()
        {
            base.Channel.GetBallbyBallSummary();
        }
        
        public System.Threading.Tasks.Task GetBallbyBallSummaryAsync()
        {
            return base.Channel.GetBallbyBallSummaryAsync();
        }
        
        public System.Collections.Generic.List<bfnexchange.wrBF.MarketBook> GetCurrentMarketBookNew(string marketid, string sheetname, string MainSportsCategory, System.DateTime marketopendate, bool BettingAllowed, System.Collections.Generic.List<ExternalAPI.TO.Runner> OldRunners, ExternalAPI.TO.MarketBook currentmarketobject, string Password)
        {
            return base.Channel.GetCurrentMarketBookNew(marketid, sheetname, MainSportsCategory, marketopendate, BettingAllowed, OldRunners, currentmarketobject, Password);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<bfnexchange.wrBF.MarketBook>> GetCurrentMarketBookNewAsync(string marketid, string sheetname, string MainSportsCategory, System.DateTime marketopendate, bool BettingAllowed, System.Collections.Generic.List<ExternalAPI.TO.Runner> OldRunners, ExternalAPI.TO.MarketBook currentmarketobject, string Password)
        {
            return base.Channel.GetCurrentMarketBookNewAsync(marketid, sheetname, MainSportsCategory, marketopendate, BettingAllowed, OldRunners, currentmarketobject, Password);
        }
        
        public System.Collections.Generic.List<ExternalAPI.TO.MarketBook> GetMarketDatabyIDLive(System.Collections.Generic.List<string> marketID, string sheetname, System.DateTime OrignalOpenDate, string MainSportsCategory, string Password, string PasswordS)
        {
            return base.Channel.GetMarketDatabyIDLive(marketID, sheetname, OrignalOpenDate, MainSportsCategory, Password, PasswordS);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ExternalAPI.TO.MarketBook>> GetMarketDatabyIDLiveAsync(System.Collections.Generic.List<string> marketID, string sheetname, System.DateTime OrignalOpenDate, string MainSportsCategory, string Password, string PasswordS)
        {
            return base.Channel.GetMarketDatabyIDLiveAsync(marketID, sheetname, OrignalOpenDate, MainSportsCategory, Password, PasswordS);
        }
        
        public string GetAllMarketsBP(System.Collections.Generic.List<string> marketIDs)
        {
            return base.Channel.GetAllMarketsBP(marketIDs);
        }
        
        public System.Threading.Tasks.Task<string> GetAllMarketsBPAsync(System.Collections.Generic.List<string> marketIDs)
        {
            return base.Channel.GetAllMarketsBPAsync(marketIDs);
        }
        
        public System.Collections.Generic.List<ExternalAPI.TO.MarketBookString> GetAllMarketsOthers(System.Collections.Generic.List<string> marketIDs)
        {
            return base.Channel.GetAllMarketsOthers(marketIDs);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ExternalAPI.TO.MarketBookString>> GetAllMarketsOthersAsync(System.Collections.Generic.List<string> marketIDs)
        {
            return base.Channel.GetAllMarketsOthersAsync(marketIDs);
        }
        
        public System.Collections.Generic.List<ExternalAPI.TO.MarketBookString> GetAllMarketsOthersFancy(System.Collections.Generic.List<string> marketIDs)
        {
            return base.Channel.GetAllMarketsOthersFancy(marketIDs);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ExternalAPI.TO.MarketBookString>> GetAllMarketsOthersFancyAsync(System.Collections.Generic.List<string> marketIDs)
        {
            return base.Channel.GetAllMarketsOthersFancyAsync(marketIDs);
        }
        
        public string GetAllMarketsBPFancy(System.Collections.Generic.List<string> marketIDs)
        {
            return base.Channel.GetAllMarketsBPFancy(marketIDs);
        }
        
        public System.Threading.Tasks.Task<string> GetAllMarketsBPFancyAsync(System.Collections.Generic.List<string> marketIDs)
        {
            return base.Channel.GetAllMarketsBPFancyAsync(marketIDs);
        }
        
        public System.Collections.Generic.List<ExternalAPI.TO.MarketBook> GetAllMarketsFancy(System.Collections.Generic.List<string> marketIDs)
        {
            return base.Channel.GetAllMarketsFancy(marketIDs);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ExternalAPI.TO.MarketBook>> GetAllMarketsFancyAsync(System.Collections.Generic.List<string> marketIDs)
        {
            return base.Channel.GetAllMarketsFancyAsync(marketIDs);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IUserServices))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IUserServices))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:54524/Services/BettingService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return BettingServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IUserServices);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return BettingServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IUserServices);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IUserServices,
        }
    }
}
