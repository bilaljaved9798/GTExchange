<Application x:Class="globaltraders.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:globaltraders"
             xmlns:wpfTool="clr-namespace:Xceed.Wpf.Toolkit;assembly=Xceed.Wpf.Toolkit"
             StartupUri="LoginWindow.xaml">
    <Application.Resources>
        <!--<Style TargetType="TreeView">
            <Setter Property="FontWeight" Value="Bold"></Setter>
            <Setter Property="FontSize" Value="14"></Setter>
            <Setter Property="Padding" Value="2,0"></Setter>
        </Style>-->
        <Style TargetType="Window">
            <Setter Property="SnapsToDevicePixels" Value="True"></Setter>
        </Style>
        <Style TargetType="UserControl">
            <Setter Property="SnapsToDevicePixels" Value="True"></Setter>
        </Style>
        <Style TargetType="{x:Type local:MarketWindow}">
            <Setter Property="Background" Value="#FF2D2D30"/>
        </Style>

        <Style TargetType="{x:Type TreeView}">
            <Style.Resources>
                <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="#CBE8F6" />
                <!--<SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="#F6F6F6" />-->
                <SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrushKey}" Color="Black" />
                <SolidColorBrush x:Key="{x:Static SystemColors.ControlTextBrushKey}" Color="Black" />
            </Style.Resources>
        </Style>

        <Style x:Key="SwitchTypeToggleButton"
       TargetType="{x:Type ToggleButton}">

            <Style.Resources>
                <Color x:Key="Color.Additional.LightGrey">#FF0000</Color>
                <Color x:Key="Color.Additional.MediumGrey">#FFFFFF</Color>
                <Color x:Key="Color.MedtronicBranding.MedtronicBlue">#FFFFFF</Color>
                <Color x:Key="Color.MedtronicBranding.CobaltBlue">#006400</Color>

                <Style x:Key="ToggleButtonContentTextbox"
               TargetType="TextBlock">
                    <Setter Property="HorizontalAlignment" Value="Stretch" />
                    <Setter Property="VerticalAlignment" Value="Stretch" />
                </Style>
                <SolidColorBrush x:Key="ToggleButtonFalseBackground"
                         Color="{StaticResource Color.Additional.LightGrey}" />
                <SolidColorBrush x:Key="ToggleButtonTrueBackground"
                         Color="{StaticResource Color.MedtronicBranding.CobaltBlue}" />
                <SolidColorBrush x:Key="ToggleButtonFalseForeground"
                         Color="{StaticResource Color.Additional.MediumGrey}" />
                <SolidColorBrush x:Key="ToggleButtonTrueForeground"
                         Color="{StaticResource Color.MedtronicBranding.MedtronicBlue}" />
                <TextBlock x:Key="OffContent"
                   Style="{StaticResource ToggleButtonContentTextbox}"
                   Text="Off" />
                <Style x:Key="OnContentControl"
               TargetType="ContentControl">
                    <Setter Property="HorizontalAlignment" Value="Center" />
                    <Setter Property="HorizontalContentAlignment" Value="Center" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <TextBlock 
                                   FontSize="15"
                                   FontWeight="Bold"
                                   Foreground="White"
                          
                                   Text="on" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="VerticalAlignment" Value="Center" />
                    <Setter Property="VerticalContentAlignment" Value="Center" />
                </Style>
                <Style x:Key="OffContentControl"
               TargetType="ContentControl">
                    <Setter Property="HorizontalAlignment" Value="Center" />
                    <Setter Property="HorizontalContentAlignment" Value="Center" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <TextBlock FontSize="15"
                                   Foreground="White"
                                   Style="{StaticResource ToggleButtonContentTextbox}"
                                   Text="off" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="VerticalAlignment" Value="Center" />
                    <Setter Property="VerticalContentAlignment" Value="Center" />
                </Style>

            </Style.Resources>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Grid x:Name="MainRow">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="{Binding ElementName=TopRow,
                        Path=ActualHeight}" />
                                    <ColumnDefinition />
                                    <ColumnDefinition Width="{Binding ElementName=TopRow,
                        Path=ActualHeight}" />
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition x:Name="TopRow" />
                                    <RowDefinition />
                                </Grid.RowDefinitions>

                                <Ellipse x:Name="BackgroundEllipse1"
                                 Grid.RowSpan="2"
                                 Grid.Column="0"
                                 Grid.ColumnSpan="3"
                                 Width="{Binding ElementName=MainRow,
                                                 Path=ActualHeight}"
                                 Height="{Binding ElementName=MainRow,
                                                  Path=ActualHeight}"
                                 HorizontalAlignment="Left"
                                 Fill="{StaticResource ToggleButtonTrueBackground}" />
                                <Ellipse x:Name="BackgroundEllipse2"
                                 Grid.Row="0"
                                 Grid.RowSpan="2"
                                 Grid.Column="0"
                                 Grid.ColumnSpan="3"
                                 Width="{Binding ElementName=MainRow,
                                                 Path=ActualHeight}"
                                 Height="{Binding ElementName=MainRow,
                                                  Path=ActualHeight}"
                                 HorizontalAlignment="Right"
                                 Fill="{StaticResource ToggleButtonFalseBackground}" />
                                <Border x:Name="BackgroundBorder"
                                Grid.Row="0"
                                Grid.RowSpan="2"
                                Grid.Column="1"
                                Background="{StaticResource ToggleButtonTrueBackground}" />
                            </Grid>
                            <Grid HorizontalAlignment="Stretch">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition x:Name="AnimationWidth" />
                                    <ColumnDefinition Width="{Binding ElementName=MainRow,
                        Path=ActualHeight}" />
                                </Grid.ColumnDefinitions>
                                <Border x:Name="AnimationSizeBorder"
                                Grid.Column="0" />
                                <ContentControl Grid.Column="0"
                                        Style="{StaticResource OnContentControl}" />
                            </Grid>
                            <Grid HorizontalAlignment="Stretch">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="{Binding ElementName=MainRow,
                Path=ActualHeight}" />
                                    <ColumnDefinition />
                                </Grid.ColumnDefinitions>

                                <ContentControl Grid.Column="1"
                                        Style="{StaticResource OffContentControl}" />
                            </Grid>
                            <Grid Background="Transparent">
                                <StackPanel HorizontalAlignment="Left"
                                    Orientation="Horizontal">
                                    <Border Width="{Binding ElementName=AnimationSizeBorder,
                Path=ActualWidth}" />
                                    <Ellipse x:Name="ForegroundEllipse"
                                     Width="{Binding ElementName=MainRow,
                                                     Path=ActualHeight}"
                                     Height="{Binding ElementName=MainRow,
                                                      Path=ActualHeight}"
                                     HorizontalAlignment="Right"
                                     Fill="{StaticResource ToggleButtonTrueForeground}" />
                                </StackPanel>
                            </Grid>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="False">
                                <Setter TargetName="BackgroundBorder" Property="Background"
                Value="{StaticResource ToggleButtonFalseBackground}" />
                                <Setter TargetName="ForegroundEllipse" Property="Fill"
                Value="{StaticResource ToggleButtonFalseForeground}" />

                                <Setter TargetName="AnimationSizeBorder" Property="Width" Value="0" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="{x:Type CheckBox}" x:Key="customCheckboxStyle">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type CheckBox}">
                        <StackPanel Orientation="Horizontal">
                            <Image x:Name="checkboxImage" Source="normal_image.png" Width="32"/>
                            <ContentPresenter/>
                        </StackPanel>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter TargetName="checkboxImage" Property="Source" Value="tick.png"/>

                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>

                                    <Condition Property="IsChecked" Value="False"/>
                                </MultiTrigger.Conditions>
                                <Setter TargetName="checkboxImage" Property="Source" Value="betopen.png" />

                            </MultiTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="btnchk" TargetType="Button">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Name="Border" BorderThickness="1,1,1,0" CornerRadius="10,10,10,10"></Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>




        </Style>

        <Style TargetType="TabItem" >
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="TabItem">
                        <Border Name="Border" BorderThickness="1,1,1,0" BorderBrush="Gainsboro" CornerRadius="4,4,0,0"  Margin="2,0">
                            <ContentPresenter x:Name="ContentSite"
                                        VerticalAlignment="Center"
                                        HorizontalAlignment="Center"
                                        ContentSource="Header"
                                        Margin="10,2"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter TargetName="Border" Property="Background" Value="#5b7d8f"></Setter>
                                <Setter  Property="Foreground" Value="White" />
                                <Setter  Property="FontFamily" Value="Times New Roman" />
                                <Setter  Property="FontWeight" Value="Black" />


                            </Trigger>
                            <Trigger Property="IsSelected" Value="False">
                                <Setter TargetName="Border" Property="Background" Value="GhostWhite" />
                                <Setter  Property="Foreground" Value="Black" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="FontFamily" Value="Times New Roman"></Setter>
        </Style>



        <Style TargetType="local:ClosableTab" >
            <Setter Property="FontWeight" Value="Black"></Setter>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="local:ClosableTab">
                        <Border Name="Border" BorderThickness="1,1,1,0" BorderBrush="Gainsboro" CornerRadius="4,4,0,0" Margin="2,0">
                            <ContentPresenter x:Name="ContentSite"
                                        VerticalAlignment="Center"
                                        HorizontalAlignment="Center"
                                        ContentSource="Header"
                                        Margin="10,2"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter TargetName="Border" Property="Background" Value="#5b7d8f"></Setter>
                                <Setter  Property="Foreground" Value="Black" />
                            </Trigger>
                            <Trigger Property="IsSelected" Value="False">
                                <Setter TargetName="Border" Property="Background" Value="GhostWhite" />
                                <Setter  Property="Foreground" Value="Black" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>


        </Style>

        <Style TargetType="TreeViewItem">
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="Padding" Value="2"></Setter>
            <Setter Property="Margin" Value="1"></Setter>
            <Setter Property="Foreground" Value="Black"></Setter>
            <Setter Property="Cursor" Value="Hand"></Setter>
            <Setter Property="FontWeight" Value="Bold"></Setter>
            <Setter Property="FontSize" Value="14"></Setter>

            <!--<Style.Triggers>
                <Trigger Property="IsSelected" Value="True">
                    <Setter Property="BorderBrush" Value="#26A0DA" />
                </Trigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                    
                        <Condition Property="IsSelected" Value="False" />
                    </MultiTrigger.Conditions>
                    <Setter Property="Background" Value="White" />
                    <Setter Property="BorderBrush" Value="#70C0E7" />
                </MultiTrigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsSelected" Value="True" />
                        <Condition Property="IsSelectionActive" Value="False" />
                    </MultiTrigger.Conditions>
                    <Setter Property="BorderBrush" Value="#DADADA" />
                </MultiTrigger>
            </Style.Triggers>-->
        </Style>

        <!--<Style  TargetType="DataGridCell">
            <Style.Triggers>
                <EventTrigger RoutedEvent="Binding.TargetUpdated">
                    <BeginStoryboard>
                        <Storyboard>
                            <ColorAnimationUsingKeyFrames 
                                    BeginTime="00:00:00"
                                    Storyboard.TargetProperty="(Background).(SolidColorBrush.Color)">
                                <EasingColorKeyFrame 
                                        KeyTime="00:00:01" 
                                        Value="Red" />
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger>
            </Style.Triggers>
        </Style>-->

        <Style TargetType="{x:Type TextBlock}" x:Key="gridoddchangeblue">
            <Setter Property="Background">
                <Setter.Value>
                    <SolidColorBrush Color="#78B6E3"/>

                </Setter.Value>
            </Setter>
            <Setter Property="Foreground" Value="Black"></Setter>
            <Setter Property="Padding" Value="1,0,1,1"></Setter>
            <Setter Property="FontFamily" Value="Times New Roman"></Setter>
            <Style.Triggers>
                <DataTrigger Binding="{Binding ElementName=PriceandSize, Path=IsMouseOver}" Value="True">
                    <Setter Property= "Background" Value="#4A86A4" />
                    <Setter Property= "Foreground" Value="White" />
                </DataTrigger>
                <EventTrigger RoutedEvent="Binding.TargetUpdated">
                    <BeginStoryboard HandoffBehavior="Compose" >
                        <Storyboard TargetProperty="(TextBlock.Background).(SolidColorBrush.Color)" Timeline.DesiredFrameRate="10">
                            <ColorAnimation Duration="0:0:0.1"  To="Yellow" AutoReverse="True"/>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger>
                <DataTrigger Binding="{Binding Path=RunnerStatusstr}" Value="REMOVED">
                    <Setter Property="Visibility" Value="Hidden"/>

                </DataTrigger>

            </Style.Triggers>
        </Style>

        <Style TargetType="{x:Type TextBlock}" x:Key="gridsizechangeblue">
            <Setter Property="Background">
                <Setter.Value>
                    <SolidColorBrush Color="#78B6E3"/>

                </Setter.Value>
            </Setter>

            <Setter Property="Padding" Value="1,0"></Setter>
            <Setter Property="Margin" Value="0,0,0,0"></Setter>
            <Setter Property="Foreground" Value="Black"></Setter>
            <Setter Property="FontFamily" Value="Times New Roman"></Setter>
            <Style.Triggers>
                <DataTrigger Binding="{Binding ElementName=PriceandSize, Path=IsMouseOver}" Value="True">
                    <Setter Property= "Background" Value="#4A86A4" />
                    <Setter Property= "Foreground" Value="White" />
                </DataTrigger>
                <EventTrigger RoutedEvent="Binding.TargetUpdated">
                    <BeginStoryboard HandoffBehavior="Compose">
                        <Storyboard TargetProperty="(TextBlock.Background).(SolidColorBrush.Color)" Timeline.DesiredFrameRate="10">
                            <ColorAnimation Duration="0:0:0.1"  To="Yellow" AutoReverse="True"/>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger>
                <DataTrigger Binding="{Binding Path=RunnerStatusstr}" Value="REMOVED">
                    <Setter Property="Visibility" Value="Hidden"/>

                </DataTrigger>

            </Style.Triggers>
        </Style>

        <Style TargetType="{x:Type TextBlock}" x:Key="gridoddchangepink">
            <Setter Property="Background">
                <Setter.Value>
                    <SolidColorBrush Color="#E098AA"/>

                </Setter.Value>
            </Setter>
            <Setter Property="Foreground" Value="Black"></Setter>
            <Setter Property="Padding" Value="1,0,1,1"></Setter>

            <Style.Triggers>
                <DataTrigger Binding="{Binding ElementName=PriceandSizeLay, Path=IsMouseOver}" Value="True">
                    <Setter Property= "Background" Value="#BD687E" />
                    <Setter Property= "Foreground" Value="White" />
                </DataTrigger>
                <EventTrigger RoutedEvent="Binding.TargetUpdated">
                    <BeginStoryboard HandoffBehavior="Compose">
                        <Storyboard TargetProperty="(TextBlock.Background).(SolidColorBrush.Color)" Timeline.DesiredFrameRate="10">
                            <ColorAnimation Duration="0:0:0.1"  To="Yellow" AutoReverse="True"/>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger>
                <DataTrigger Binding="{Binding Path=RunnerStatusstr}" Value="REMOVED">
                    <Setter Property="Visibility" Value="Hidden"/>

                </DataTrigger>

            </Style.Triggers>
        </Style>

        <Style TargetType="{x:Type TextBlock}" x:Key="gridsizechangepink">

            <Setter Property="Background">
                <Setter.Value>
                    <SolidColorBrush Color="#E098AA"/>

                </Setter.Value>
            </Setter>
            <Setter Property="Foreground" Value="Black"></Setter>
            <Setter Property="Padding" Value="1,0"></Setter>
            <Setter Property="Margin" Value="0,0,0,0"></Setter>
            <Setter Property="FontFamily" Value="Times New Roman"></Setter>
            <Style.Triggers>
                <DataTrigger Binding="{Binding ElementName=PriceandSizeLay, Path=IsMouseOver}" Value="True">
                    <Setter Property= "Background" Value="#BD687E" />
                    <Setter Property= "Foreground" Value="White" />
                </DataTrigger>
                <EventTrigger RoutedEvent="Binding.TargetUpdated">
                    <BeginStoryboard HandoffBehavior="Compose">
                        <Storyboard TargetProperty="(TextBlock.Background).(SolidColorBrush.Color)" Timeline.DesiredFrameRate="10">
                            <ColorAnimation Duration="0:0:0.1"  To="Yellow" AutoReverse="True"/>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger>
                <DataTrigger Binding="{Binding Path=RunnerStatusstr}" Value="REMOVED">
                    <Setter Property="Visibility" Value="Hidden"/>

                </DataTrigger>

            </Style.Triggers>
        </Style>

        <Style TargetType="{x:Type TextBlock}" x:Key="gridoddchangeblue1">
            <Setter Property="Background">
                <Setter.Value>
                    <SolidColorBrush Color="#C1DBE8"/>

                </Setter.Value>
            </Setter>
            <Setter Property="Foreground" Value="Black"></Setter>
            <Setter Property="FontFamily" Value="Times New Roman"></Setter>
            <Setter Property="Padding" Value="1,0,1,1"></Setter>
            <Setter Property="Foreground" Value="Black"></Setter>
            <Style.Triggers>
                <DataTrigger Binding="{Binding ElementName=PriceandSize1, Path=IsMouseOver}" Value="True">
                    <Setter Property= "Background" Value="#76B5D2" />
                    <Setter Property= "Foreground" Value="White" />
                </DataTrigger>
                <EventTrigger RoutedEvent="Binding.TargetUpdated">
                    <BeginStoryboard HandoffBehavior="Compose">
                        <Storyboard TargetProperty="(TextBlock.Background).(SolidColorBrush.Color)" Timeline.DesiredFrameRate="10">
                            <ColorAnimation Duration="0:0:0.1"  To="Yellow" AutoReverse="True"/>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger>
                <DataTrigger Binding="{Binding Path=RunnerStatusstr}" Value="REMOVED">
                    <Setter Property="Visibility" Value="Hidden"/>

                </DataTrigger>

            </Style.Triggers>
        </Style>

        <Style TargetType="{x:Type TextBlock}" x:Key="gridsizechangeblue1">
            <Setter Property="Background">
                <Setter.Value>
                    <SolidColorBrush Color="#C1DBE8"/>
                </Setter.Value>
            </Setter>
            <Setter Property="Padding" Value="1,0"></Setter>
            <Setter Property="Margin" Value="0,0,0,0"></Setter>
            <Setter Property="FontFamily" Value="Times New Roman"></Setter>
            <Setter Property="Foreground" Value="Black"></Setter>
            <Style.Triggers>
                <DataTrigger Binding="{Binding ElementName=PriceandSize1, Path=IsMouseOver}" Value="True">
                    <Setter Property= "Background" Value="#76B5D2" />
                    <Setter Property= "Foreground" Value="White" />
                </DataTrigger>
                <EventTrigger RoutedEvent="Binding.TargetUpdated">
                    <BeginStoryboard HandoffBehavior="Compose">
                        <Storyboard TargetProperty="(TextBlock.Background).(SolidColorBrush.Color)" Timeline.DesiredFrameRate="10">
                            <ColorAnimation Duration="0:0:0.1"  To="Yellow" AutoReverse="True"/>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger>
                <DataTrigger Binding="{Binding Path=RunnerStatusstr}" Value="REMOVED">
                    <Setter Property="Visibility" Value="Hidden"/>

                </DataTrigger>

            </Style.Triggers>
        </Style>

        <Style TargetType="{x:Type TextBlock}" x:Key="gridoddchangeblue2">
            <Setter Property="Background">
                <Setter.Value>
                    <SolidColorBrush Color="#C1DBE8"/>

                </Setter.Value>
            </Setter>
            <Setter Property="FontFamily" Value="Times New Roman"></Setter>
            <Setter Property="Padding" Value="1,0,1,1"></Setter>
            <Setter Property="Foreground" Value="Black"></Setter>
            <Setter Property="Foreground" Value="Black"></Setter>
            <Style.Triggers>
                <DataTrigger Binding="{Binding ElementName=PriceandSize2, Path=IsMouseOver}" Value="True">
                    <Setter Property= "Background" Value="#76B5D2" />
                    <Setter Property= "Foreground" Value="White" />
                </DataTrigger>
                <EventTrigger RoutedEvent="Binding.TargetUpdated">
                    <BeginStoryboard HandoffBehavior="Compose">
                        <Storyboard TargetProperty="(TextBlock.Background).(SolidColorBrush.Color)" Timeline.DesiredFrameRate="10">
                            <ColorAnimation Duration="0:0:0.1"  To="Yellow" AutoReverse="True"/>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger>
                <DataTrigger Binding="{Binding Path=RunnerStatusstr}" Value="REMOVED">
                    <Setter Property="Visibility" Value="Hidden"/>

                </DataTrigger>

            </Style.Triggers>
        </Style>

        <Style TargetType="{x:Type TextBlock}" x:Key="gridsizechangeblue2">
            <Setter Property="Background">
                <Setter.Value>
                    <SolidColorBrush Color="#C1DBE8"/>

                </Setter.Value>
            </Setter>
            <Setter Property="Padding" Value="1,0"></Setter>
            <Setter Property="Margin" Value="0,0,0,0"></Setter>
            <Setter Property="FontFamily" Value="Times New Roman"></Setter>
            <Setter Property="Foreground" Value="Black"></Setter>
            <Style.Triggers>
                <DataTrigger Binding="{Binding ElementName=PriceandSize2, Path=IsMouseOver}" Value="True">
                    <Setter Property= "Background" Value="#76B5D2" />
                    <Setter Property= "Foreground" Value="White" />
                </DataTrigger>
                <EventTrigger RoutedEvent="Binding.TargetUpdated">
                    <BeginStoryboard HandoffBehavior="Compose">
                        <Storyboard TargetProperty="(TextBlock.Background).(SolidColorBrush.Color)" Timeline.DesiredFrameRate="10">
                            <ColorAnimation Duration="0:0:0.1"  To="Yellow" AutoReverse="True"/>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger>
                <DataTrigger Binding="{Binding Path=RunnerStatusstr}" Value="REMOVED">
                    <Setter Property="Visibility" Value="Hidden"/>

                </DataTrigger>

            </Style.Triggers>
        </Style>

        <Style TargetType="{x:Type TextBlock}" x:Key="gridoddchangepink1">
            <Setter Property="Background">
                <Setter.Value>
                    <SolidColorBrush Color="#FFE6F1"/>

                </Setter.Value>
            </Setter>
            <Setter Property="Foreground" Value="Black"></Setter>
            <Setter Property="FontFamily" Value="Calibri"></Setter>
            <Setter Property="Padding" Value="1,0,1,1"></Setter>
            <Setter Property="FontWeight" Value="Bold"></Setter>
            <Style.Triggers>
                <DataTrigger Binding="{Binding ElementName=PriceandSize1Lay, Path=IsMouseOver}" Value="True">
                    <Setter Property= "Background" Value="#F097A9" />
                    <Setter Property= "Foreground" Value="White" />
                </DataTrigger>
                <EventTrigger RoutedEvent="Binding.TargetUpdated">
                    <BeginStoryboard HandoffBehavior="Compose">
                        <Storyboard TargetProperty="(TextBlock.Background).(SolidColorBrush.Color)" Timeline.DesiredFrameRate="10">
                            <ColorAnimation Duration="0:0:0.1"  To="Yellow" AutoReverse="True"/>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger>
                <DataTrigger Binding="{Binding Path=RunnerStatusstr}" Value="REMOVED">
                    <Setter Property="Visibility" Value="Hidden"/>

                </DataTrigger>

            </Style.Triggers>
        </Style>

        <Style TargetType="{x:Type TextBlock}" x:Key="gridsizechangepink1">

            <Setter Property="Background">
                <Setter.Value>
                    <SolidColorBrush Color="#FFE6F1"/>

                </Setter.Value>
            </Setter>
            <Setter Property="Foreground" Value="Black"></Setter>
            <Setter Property="Padding" Value="1,0"></Setter>
            <Setter Property="Margin" Value="0,0,0,0"></Setter>
            <Setter Property="FontFamily" Value="Times New Roman"></Setter>
            <Style.Triggers>
                <DataTrigger Binding="{Binding ElementName=PriceandSize1Lay, Path=IsMouseOver}" Value="True">
                    <Setter Property= "Background" Value="#F097A9" />
                    <Setter Property= "Foreground" Value="White" />
                </DataTrigger>
                <EventTrigger RoutedEvent="Binding.TargetUpdated">
                    <BeginStoryboard HandoffBehavior="Compose">
                        <Storyboard TargetProperty="(TextBlock.Background).(SolidColorBrush.Color)" Timeline.DesiredFrameRate="10">
                            <ColorAnimation Duration="0:0:0.1"  To="Yellow" AutoReverse="True"/>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger>
                <DataTrigger Binding="{Binding Path=RunnerStatusstr}" Value="REMOVED">
                    <Setter Property="Visibility" Value="Hidden"/>

                </DataTrigger>

            </Style.Triggers>
        </Style>
        <Style TargetType="{x:Type TextBlock}" x:Key="gridoddchangepink2">
            <Setter Property="Background">
                <Setter.Value>
                    <SolidColorBrush Color="#FFE6F1"/>

                </Setter.Value>
            </Setter>
            <Setter Property="Foreground" Value="Black"></Setter>
            <Setter Property="FontFamily" Value="Times New Roman"></Setter>
            <Setter Property="Padding" Value="1,0,1,1"></Setter>
            <Setter Property="FontWeight" Value="Bold"></Setter>
            <Style.Triggers>
                <DataTrigger Binding="{Binding ElementName=PriceandSize2Lay, Path=IsMouseOver}" Value="True">
                    <Setter Property= "Background" Value="#F097A9" />
                    <Setter Property= "Foreground" Value="White" />
                </DataTrigger>
                <EventTrigger RoutedEvent="Binding.TargetUpdated">
                    <BeginStoryboard HandoffBehavior="Compose">
                        <Storyboard TargetProperty="(TextBlock.Background).(SolidColorBrush.Color)" Timeline.DesiredFrameRate="10">
                            <ColorAnimation Duration="0:0:0.1"  To="Yellow" AutoReverse="True"/>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger>
                <DataTrigger Binding="{Binding Path=RunnerStatusstr}" Value="REMOVED">
                    <Setter Property="Visibility" Value="Hidden"/>

                </DataTrigger>

            </Style.Triggers>
        </Style>
        <Style TargetType="Border" x:Key="HideBorer">
            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=RunnerStatusstr}" Value="REMOVED">
                    <Setter Property="Visibility" Value="Hidden"/>

                </DataTrigger>

            </Style.Triggers>
        </Style>

        <Style TargetType="{x:Type TextBlock}" x:Key="gridsizechangepink2">

            <Setter Property="Background">
                <Setter.Value>
                    <SolidColorBrush Color="#FFE6F1"/>

                </Setter.Value>
            </Setter>
            <Setter Property="Foreground" Value="Black"></Setter>
            <Setter Property="Padding" Value="1,0"></Setter>
            <Setter Property="Margin" Value="0,0,0,0"></Setter>
            <Setter Property="FontFamily" Value="Times New Roman"></Setter>
            <Style.Triggers>



                <DataTrigger Binding="{Binding ElementName=PriceandSize2Lay, Path=IsMouseOver}" Value="True">
                    <Setter Property= "Background" Value="#F097A9" />
                    <Setter Property= "Foreground" Value="White" />
                </DataTrigger>
                <EventTrigger RoutedEvent="Binding.TargetUpdated">
                    <BeginStoryboard HandoffBehavior="Compose">
                        <Storyboard TargetProperty="(TextBlock.Background).(SolidColorBrush.Color)" Timeline.DesiredFrameRate="10">
                            <ColorAnimation Duration="0:0:0.1"  To="Yellow" AutoReverse="True"/>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger>
                <DataTrigger Binding="{Binding Path=RunnerStatusstr}" Value="REMOVED">
                    <Setter Property="Visibility" Value="Hidden"/>

                </DataTrigger>

            </Style.Triggers>
        </Style>

        <Style TargetType="{x:Type DataGrid}">
            <Setter Property="HorizontalScrollBarVisibility" Value="Disabled"></Setter>
            <Setter Property="VerticalScrollBarVisibility" Value="Auto"></Setter>
        </Style>

        <Style TargetType="{x:Type DataGridCell}">
            <Style.Triggers>
                <Trigger Property="DataGridCell.IsSelected" Value="True">
                    <Setter Property="BorderBrush">
                        <Setter.Value>
                            <SolidColorBrush Color="Transparent"/>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="Foreground"
                            Value="Black"/>
                    <Setter Property="Background">
                        <Setter.Value>
                            <SolidColorBrush Color="Transparent"/>
                        </Setter.Value>
                    </Setter>

                </Trigger>

            </Style.Triggers>
        </Style>

        <Style TargetType="{x:Type Button}">
            <Setter Property="Background" Value="#8cded2" ></Setter>

            <Setter Property="Foreground" Value="Black"></Setter>
            <Setter Property="Cursor" Value="Hand"></Setter>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">

                        <Border Background="{TemplateBinding Background}"
                                
                                BorderBrush="Black" BorderThickness="0">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

        </Style>

        <Style TargetType="{x:Type Button}" x:Key="BetSlipButton">

            <Setter Property="Background" Value="#5b7d8f"></Setter>
            <Setter Property="Foreground" Value="White"></Setter>
            <Setter Property="FontSize" Value="16" >

            </Setter>
            <Setter Property="FontWeight" Value="Regular"></Setter>
            <Setter Property="Margin" Value="0,5,5,0"></Setter>
            <Setter Property="Height" Value="40"></Setter>
            <Setter Property="Width" Value="100"></Setter>
            <Setter Property="Cursor" Value="Hand"></Setter>
            <Setter Property="BorderBrush" Value="White"></Setter>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}" BorderBrush="White" BorderThickness="2">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="Gray"/>
                    <Setter Property="Foreground" Value="White"></Setter>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="gridBlue"  TargetType="{x:Type DataGridCell}">
            <Setter Property="Background" Value="LightSkyBlue"></Setter>
            <Setter Property="Margin" Value="4"></Setter>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type DataGridCell}">

                        <Grid Background="{TemplateBinding Background}">
                            <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center" />

                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="gridPink"  TargetType="{x:Type DataGridCell}">
            <Setter Property="Background" Value="LightPink"></Setter>
            <Setter Property="Margin" Value="4"></Setter>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type DataGridCell}">

                        <Grid Background="{TemplateBinding Background}">
                            <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center" />

                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="DataGridColumnHeader">
            <Setter Property="Background" Value="White"></Setter>
            <Setter Property="Foreground" Value="Black"></Setter>
            <Setter Property="FontWeight" Value="Black"></Setter>
            <Setter Property="FontSize" Value="15"></Setter>
            <Setter Property="BorderBrush" Value="Black"></Setter>
            <Setter Property="BorderThickness" Value="0,0,0,1"></Setter>
            <Setter Property="Padding" Value="0,8"></Setter>
            <Setter Property="HorizontalContentAlignment" Value="Center" />

        </Style>

        <Style TargetType="DataGridColumnHeader" x:Key="headerwithlines">
            <Setter Property="Background" Value=" #5b7d8f"></Setter>
            <Setter Property="Foreground" Value="White"></Setter>
            <Setter Property="FontWeight" Value="Black"></Setter>
            <Setter Property="FontSize" Value="13"></Setter>
            <Setter Property="Padding" Value="0,5"></Setter>
            <Setter Property="HorizontalContentAlignment" Value="Center" />
            <Setter Property="BorderBrush" Value="White"/>
            <Setter Property="BorderThickness" Value="1,1, 1,2"/>
        </Style>

        <Style x:Key="DGSelection" TargetType="DataGridColumnHeader">

            <Setter Property="Background" Value="White"></Setter>
            <Setter Property="Foreground" Value="Black"></Setter>
            <Setter Property="FontWeight" Value="Black"></Setter>
            <Setter Property="FontSize" Value="19"></Setter>
            <Setter Property="Padding" Value="0,5"></Setter>

            <Setter Property="BorderBrush" Value="Black"></Setter>
            <Setter Property="BorderThickness" Value="0,0,0,1"></Setter>
            <Setter Property="HorizontalContentAlignment" Value="Left" />

        </Style>

        <Style x:Key="DGSelectionFa" TargetType="DataGridColumnHeader">
            <Setter Property="Height" Value="50"></Setter>
            <Setter Property="Background" Value="White"></Setter>
            <Setter Property="Foreground" Value="Black"></Setter>
            <Setter Property="FontWeight" Value="Black"></Setter>
            <Setter Property="FontSize" Value="19"></Setter>
            <Setter Property="Padding" Value="0,5"></Setter>

            <Setter Property="BorderBrush" Value="Black"></Setter>
            <Setter Property="BorderThickness" Value="0,0,0,1"></Setter>
            <Setter Property="HorizontalContentAlignment" Value="Left" />

        </Style>

        <Style x:Key="DGMARKET" TargetType="DataGridColumnHeader">

            <Setter Property="Background" Value="White"></Setter>
            <Setter Property="Foreground" Value="Black"></Setter>
            <Setter Property="FontWeight" Value="Black"></Setter>
            <Setter Property="FontSize" Value="19"></Setter>
            <Setter Property="Padding" Value="0,5"></Setter>
            <Setter Property="Height" Value="50"></Setter>
            <Setter Property="BorderBrush" Value="Black"></Setter>
            <Setter Property="BorderThickness" Value="0,0,0,1"></Setter>
            <Setter Property="HorizontalContentAlignment" Value="Left" />

        </Style>


        <Style x:Key="DGSelection1" TargetType="DataGridColumnHeader">
            <Setter Property="Background" Value=" #5b7d8f"></Setter>
            <Setter Property="FontWeight" Value="Black"></Setter>
            <Setter Property="FontSize" Value="12"></Setter>
            <Setter Property="Foreground" Value="White"></Setter>
            <Setter Property="BorderBrush" Value="White"/>
            <Setter Property="HorizontalContentAlignment" Value="Center" />
            <Setter Property="Padding" Value="0,5"></Setter>
            <Setter Property="BorderThickness" Value="1,1, 1,2"/>


        </Style>
        <Style x:Key="DGSelection2" TargetType="DataGridColumnHeader">
            <Setter Property="Background" Value=" #5b7d8f"></Setter>
            <Setter Property="FontWeight" Value="Regular"></Setter>
            <Setter Property="FontSize" Value="12"></Setter>
            <Setter Property="Foreground" Value="White"></Setter>
            <Setter Property="BorderBrush" Value="White"/>
            <Setter Property="HorizontalContentAlignment" Value="Center" />
            <Setter Property="Margin" Value="0,0,9,0" />
            <Setter Property="Padding" Value="0,5"></Setter>
            <Setter Property="BorderThickness" Value="1,1, 1,2"/>


        </Style>


        <Style x:Key="txtLoss" TargetType="TextBlock">
            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=Loss}" Value="0">
                    <Setter Property="Visibility" Value="Collapsed"></Setter>
                </DataTrigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="size" TargetType="TextBlock">
            <Setter Property="FontSize" Value="12"></Setter>
            <Setter Property="Margin" Value="0,1" />
            <Setter Property="FontWeight" Value="Normal"></Setter>
            <Setter Property="TextAlignment" Value="Center"></Setter>
        </Style>

        <Style x:Key="Price" TargetType="TextBlock">
            <Setter Property="FontSize" Value="20"></Setter>
            <Setter Property="FontWeight" Value="Black"></Setter>
            <Setter Property="Margin" Value="0,0" />
            <Setter Property="TextAlignment" Value="Center"></Setter>
            <Setter Property="HorizontalAlignment" Value="Center"></Setter>
        </Style>

        <Style x:Key="txtProfit" TargetType="TextBlock">
            <Setter Property="Margin" Value="0,0,10,0"></Setter>
            <Setter Property="VerticalAlignment" Value="Center"></Setter>
            <Setter Property="HorizontalAlignment" Value="Left"></Setter>
            <Setter Property="FontSize" Value="15"></Setter>
            <Setter Property="FontWeight" Value="Black"></Setter>
            <Setter Property="TextAlignment" Value="Left"></Setter>
            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=PL}" Value="0">
                    <Setter Property="Visibility" Value="Collapsed"></Setter>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="txtStatusMainGrid" TargetType="TextBlock">
            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=MarketStatus}" Value="In Play">
                    <Setter Property="Foreground" Value="LightGreen"/>

                </DataTrigger>

                <DataTrigger Binding="{Binding Path=MarketStatus}" Value="Closed">
                    <Setter Property="Foreground" Value="DarkRed"/>

                </DataTrigger>
                <DataTrigger Binding="{Binding Path=MarketStatus}" Value="Suspended">
                    <Setter Property="Foreground" Value="DarkOrange"/>

                </DataTrigger>

                <DataTrigger Binding="{Binding Path=MarketStatus}" Value="Active">
                    <Setter Property="Foreground" Value="#FF243875"/>


                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style TargetType="Image" x:Key="marketstatusimg">
            <Style.Triggers>
                <DataTrigger Binding="{Binding NotFound}" Value="false">
                    <Setter Property="Source" Value="Image\TabFile.PNG"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding NotFound}" Value="true">
                    <Setter Property="Source" Value="Image\ErrorTabFile.PNG"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style TargetType="TextBlock" x:Key="GridBlueMouseHover1and2">

            <Setter Property= "Background" Value="Transparent"/>
            <Style.Triggers>
                <!--<DataTrigger Binding="{Binding ElementName=PriceandSize2, Path=IsMouseOver}" Value="True">
                    <Setter Property= "Background" Value="#76B5D2" />
                </DataTrigger>-->

            </Style.Triggers>

        </Style>

        <Style x:Key="txtStatusMarketWindow" TargetType="Label">
            <Style.Triggers>
                <Trigger Property="Content" Value="IN-PLAY">
                    <Setter Property="Foreground" Value="DarkGreen"/>
                    <Setter Property="FontSize" Value="16"/>
                    <Setter Property="FontWeight" Value="UltraBlack"/>
                </Trigger>
                <Trigger Property="Content" Value="CLOSED">

                    <Setter Property="Foreground" Value="Red"/>
                    <Setter Property="FontSize" Value="22"/>
                    <Setter Property="FontWeight" Value="UltraBlack"/>
                </Trigger>
                <Trigger Property="Content" Value="SUSPENDED">
                    <Setter Property="Foreground" Value="Red"/>
                    <Setter Property="FontSize" Value="22"/>
                    <Setter Property="FontWeight" Value="UltraBlack"/>
                </Trigger>
                <Trigger Property="Content" Value="GOING LIVE">
                    <Setter Property="Foreground" Value="Black"/>
                    <Setter Property="FontSize" Value="16"/>
                    <Setter Property="FontWeight" Value="UltraBlack"/>


                </Trigger>

            </Style.Triggers>
        </Style>

        <Style x:Key="txtSelectionName" TargetType="TextBlock">
            <!--<Setter Property="FontFamily" Value="Times New Roman" ></Setter>-->
            <Setter Property="FontWeight" Value="SemiBold"></Setter>
            <Setter Property="FontSize" Value="15"></Setter>
            <Setter Property="Padding" Value="0,0,0,0"></Setter>
            <Setter Property="Margin" Value="0,3,0,0"></Setter>
            <Setter Property="Foreground" Value="Black"></Setter>
            <Setter Property="VerticalAlignment" Value="Top"></Setter>
            <Setter Property="HorizontalAlignment" Value="Left"></Setter>
            <Setter Property="TextAlignment" Value="Left"></Setter>

            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=isFav}" Value="False">
                    <Setter Property="Foreground" Value="#FF141b31"/>

                </DataTrigger>
                <DataTrigger Binding="{Binding Path=RunnerStatusstr}" Value="WINNER">
                    <Setter Property="Foreground" Value="White"/>

                </DataTrigger>

                <DataTrigger Binding="{Binding Path=RunnerStatusstr}" Value="ACTIVE">
                    <Setter Property="Foreground" Value="#FF141b31"/>

                </DataTrigger>

                <DataTrigger Binding="{Binding Path=RunnerStatusstr}" Value="LOSER">
                    <Setter Property="Foreground" Value="#FF141b31"/>

                </DataTrigger>
                <DataTrigger Binding="{Binding Path=RunnerStatusstr}" Value="REMOVED_VACANT">
                    <Setter Property="Foreground" Value="#FF141b31"/>

                </DataTrigger>
                <DataTrigger Binding="{Binding Path=RunnerStatusstr}" Value="REMOVED">
                    <Setter Property="Foreground" Value="#FF141b31"/>

                </DataTrigger>
                <DataTrigger Binding="{Binding Path=isFav}" Value="True">
                    <Setter Property="Foreground" Value="Red"/>

                </DataTrigger>

            </Style.Triggers>
        </Style>

        <Style x:Key="txtJockeyname" TargetType="TextBlock">
            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=JockeyName}" Value="Not">
                    <Setter Property="Visibility" Value="Hidden"/>

                </DataTrigger>
                <DataTrigger Binding="{Binding Path=JockeyName}" Value="">
                    <Setter Property="Visibility" Value="Hidden"/>

                </DataTrigger>
                <DataTrigger Binding="{Binding Path=RunnerStatusstr}" Value="WINNER">
                    <Setter Property="Foreground" Value="White"/>

                </DataTrigger>
                <DataTrigger Binding="{Binding Path=RunnerStatusstr}" Value="ACTIVE">
                    <Setter Property="Foreground" Value="#FF141b31"/>

                </DataTrigger>

                <DataTrigger Binding="{Binding Path=RunnerStatusstr}" Value="LOSER">
                    <Setter Property="Foreground" Value="#FF141b31"/>

                </DataTrigger>
                <DataTrigger Binding="{Binding Path=RunnerStatusstr}" Value="REMOVED_VACANT">
                    <Setter Property="Foreground" Value="#FF141b31"/>

                </DataTrigger>
                <DataTrigger Binding="{Binding Path=RunnerStatusstr}" Value="REMOVED">
                    <Setter Property="Foreground" Value="#FF141b31"/>

                </DataTrigger>

            </Style.Triggers>
        </Style>

        <Style x:Key="txtRunnerStatus" TargetType="TextBlock">

            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=RunnerStatusstr}" Value="ACTIVE">
                    <Setter Property="Visibility" Value="Hidden"/>

                </DataTrigger>
                <DataTrigger Binding="{Binding Path=RunnerStatusstr}" Value="WINNER">
                    <Setter Property="Visibility" Value="Hidden"/>

                </DataTrigger>
                <DataTrigger Binding="{Binding Path=RunnerStatusstr}" Value="LOSER">
                    <Setter Property="Visibility" Value="Hidden"/>

                </DataTrigger>
                <DataTrigger Binding="{Binding Path=RunnerStatusstr}" Value="REMOVED_VACANT">
                    <Setter Property="Visibility" Value="Visible"/>

                </DataTrigger>
                <DataTrigger Binding="{Binding Path=RunnerStatusstr}" Value="REMOVED">
                    <Setter Property="Visibility" Value="Visible"/>

                </DataTrigger>

            </Style.Triggers>
        </Style>

        <Style TargetType="{x:Type wpfTool:MessageBox}">
            <Setter Property="Background" Value="White" ></Setter>

            <Setter Property="BorderBrush">
                <Setter.Value>
                    <LinearGradientBrush EndPoint="0,1"  StartPoint="0,0.5">
                        <GradientStop Color="#FF000000" Offset="1"/>
                        <GradientStop Color="#FF243875" Offset="-1"/>
                    </LinearGradientBrush>
                </Setter.Value>
            </Setter>
            <Setter Property="CaptionForeground" Value="Black" />
            <Setter Property="WindowBorderBrush">
                <Setter.Value>
                    <LinearGradientBrush EndPoint="0,1"  StartPoint="0,0.5">
                        <GradientStop Color="#FF000000" Offset="1"/>
                        <GradientStop Color="#FF243875" Offset="-1"/>
                    </LinearGradientBrush>
                </Setter.Value>
            </Setter>
            <Setter Property="WindowBackground" Value="#8cded2"></Setter>
            <Setter Property="FontSize" Value="15"></Setter>
            <Setter Property="FontWeight" Value="Bold"></Setter>
            <Setter Property="WindowOpacity" Value="1" />
            <Setter Property="Foreground" Value="Black"/>



        </Style>


    </Application.Resources>
</Application>
