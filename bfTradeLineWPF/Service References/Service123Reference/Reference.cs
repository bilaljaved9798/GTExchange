//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace globaltraders.Service123Reference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Service123Reference.IService123")]
    public interface IService123 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService123/GetMarketDatabyID", ReplyAction="http://tempuri.org/IService123/GetMarketDatabyIDResponse")]
        ExternalAPI.TO.MarketBook[] GetMarketDatabyID(string[] marketID, string sheetname, System.DateTime OrignalOpenDate, string MainSportsCategory, string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService123/GetMarketDatabyID", ReplyAction="http://tempuri.org/IService123/GetMarketDatabyIDResponse")]
        System.IAsyncResult BeginGetMarketDatabyID(string[] marketID, string sheetname, System.DateTime OrignalOpenDate, string MainSportsCategory, string Password, System.AsyncCallback callback, object asyncState);
        
        ExternalAPI.TO.MarketBook[] EndGetMarketDatabyID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService123/GetMarketDatabyIDIndianFancy", ReplyAction="http://tempuri.org/IService123/GetMarketDatabyIDIndianFancyResponse")]
        ExternalAPI.TO.MarketBookForindianFancy GetMarketDatabyIDIndianFancy(string EventID, string MarketBookID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService123/GetMarketDatabyIDIndianFancy", ReplyAction="http://tempuri.org/IService123/GetMarketDatabyIDIndianFancyResponse")]
        System.IAsyncResult BeginGetMarketDatabyIDIndianFancy(string EventID, string MarketBookID, System.AsyncCallback callback, object asyncState);
        
        ExternalAPI.TO.MarketBookForindianFancy EndGetMarketDatabyIDIndianFancy(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService123/GetRunnersForFancy", ReplyAction="http://tempuri.org/IService123/GetRunnersForFancyResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.MarketBook[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.MarketBook))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.DebitCredit[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.DebitCredit))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.SP_UserMarket_GetDistinctKJMarketsbyEventID_Result[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.SP_UserMarket_GetDistinctKJMarketsbyEventID_Result))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.LinevMarkets[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.LinevMarkets))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.LinevMarketsIN[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.LinevMarketsIN))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.Runner[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.Runner))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.ExchangePrices))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.PriceSize[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.PriceSize))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.Match[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.Match))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.Side))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.Order[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.Order))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.OrderType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.PersistenceType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.OrderStatus))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.StartingPrices))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.RunnerStatus))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.MarketStatus))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.MarketBookForindianFancy))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.RunnerForIndianFancy[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.RunnerForIndianFancy))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.Market[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.Market))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.Events[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.Events))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.Session[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.Session))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.Home))]
        //[System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.con))]
        //[System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.cs))]
        //[System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.i1))]
        //[System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.i2))]
        //[System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.t1))]
        //[System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.t2))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.Root))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.Result))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.RootSCT[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.RootSCT))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.Broadcasts))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.MatchInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.Radio))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.Tv[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.Tv))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.Runners))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.State))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.FullTimeElapsed))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.Score))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ExternalAPI.TO.Away))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.DateTimeOffset))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(string[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(long[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        ExternalAPI.TO.GetDataFancy GetRunnersForFancy(string EventID, string MarketBookID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService123/GetRunnersForFancy", ReplyAction="http://tempuri.org/IService123/GetRunnersForFancyResponse")]
        System.IAsyncResult BeginGetRunnersForFancy(string EventID, string MarketBookID, System.AsyncCallback callback, object asyncState);
        
        ExternalAPI.TO.GetDataFancy EndGetRunnersForFancy(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService123/GetEventIDFancyMarket", ReplyAction="http://tempuri.org/IService123/GetEventIDFancyMarketResponse")]
        ExternalAPI.TO.LinevMarkets[] GetEventIDFancyMarket(string EventID, string MarketBookID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService123/GetEventIDFancyMarket", ReplyAction="http://tempuri.org/IService123/GetEventIDFancyMarketResponse")]
        System.IAsyncResult BeginGetEventIDFancyMarket(string EventID, string MarketBookID, System.AsyncCallback callback, object asyncState);
        
        ExternalAPI.TO.LinevMarkets[] EndGetEventIDFancyMarket(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService123/GetUpdate", ReplyAction="http://tempuri.org/IService123/GetUpdateResponse")]
        ExternalAPI.TO.Home GetUpdate(string EventID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService123/GetUpdate", ReplyAction="http://tempuri.org/IService123/GetUpdateResponse")]
        System.IAsyncResult BeginGetUpdate(string EventID, System.AsyncCallback callback, object asyncState);
        
        ExternalAPI.TO.Home EndGetUpdate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService123/GetUpdate2", ReplyAction="http://tempuri.org/IService123/GetUpdate2Response")]
        ExternalAPI.TO.Root GetUpdate2(string EventID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService123/GetUpdate2", ReplyAction="http://tempuri.org/IService123/GetUpdate2Response")]
        System.IAsyncResult BeginGetUpdate2(string EventID, System.AsyncCallback callback, object asyncState);
        
        ExternalAPI.TO.Root EndGetUpdate2(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService123/GetUpdateSCT", ReplyAction="http://tempuri.org/IService123/GetUpdateSCTResponse")]
        ExternalAPI.TO.RootSCT[] GetUpdateSCT(string Eventtypeid);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService123/GetUpdateSCT", ReplyAction="http://tempuri.org/IService123/GetUpdateSCTResponse")]
        System.IAsyncResult BeginGetUpdateSCT(string Eventtypeid, System.AsyncCallback callback, object asyncState);
        
        ExternalAPI.TO.RootSCT[] EndGetUpdateSCT(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService123/GetAllMarketsFancyString", ReplyAction="http://tempuri.org/IService123/GetAllMarketsFancyStringResponse")]
        string GetAllMarketsFancyString(string marketID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService123/GetAllMarketsFancyString", ReplyAction="http://tempuri.org/IService123/GetAllMarketsFancyStringResponse")]
        System.IAsyncResult BeginGetAllMarketsFancyString(string marketID, System.AsyncCallback callback, object asyncState);
        
        string EndGetAllMarketsFancyString(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService123/GetAllMarketsString", ReplyAction="http://tempuri.org/IService123/GetAllMarketsStringResponse")]
        string GetAllMarketsString(string marketID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService123/GetAllMarketsString", ReplyAction="http://tempuri.org/IService123/GetAllMarketsStringResponse")]
        System.IAsyncResult BeginGetAllMarketsString(string marketID, System.AsyncCallback callback, object asyncState);
        
        string EndGetAllMarketsString(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService123/GetAllMarketsBP", ReplyAction="http://tempuri.org/IService123/GetAllMarketsBPResponse")]
        string GetAllMarketsBP(string marketID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService123/GetAllMarketsBP", ReplyAction="http://tempuri.org/IService123/GetAllMarketsBPResponse")]
        System.IAsyncResult BeginGetAllMarketsBP(string marketID, System.AsyncCallback callback, object asyncState);
        
        string EndGetAllMarketsBP(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService123/GetAllMarketsBPFancy", ReplyAction="http://tempuri.org/IService123/GetAllMarketsBPFancyResponse")]
        string GetAllMarketsBPFancy(string marketID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService123/GetAllMarketsBPFancy", ReplyAction="http://tempuri.org/IService123/GetAllMarketsBPFancyResponse")]
        System.IAsyncResult BeginGetAllMarketsBPFancy(string marketID, System.AsyncCallback callback, object asyncState);
        
        string EndGetAllMarketsBPFancy(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService123Channel : globaltraders.Service123Reference.IService123, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMarketDatabyIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMarketDatabyIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ExternalAPI.TO.MarketBook[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ExternalAPI.TO.MarketBook[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMarketDatabyIDIndianFancyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMarketDatabyIDIndianFancyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ExternalAPI.TO.MarketBookForindianFancy Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ExternalAPI.TO.MarketBookForindianFancy)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRunnersForFancyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRunnersForFancyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ExternalAPI.TO.GetDataFancy Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ExternalAPI.TO.GetDataFancy)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetEventIDFancyMarketCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetEventIDFancyMarketCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ExternalAPI.TO.LinevMarkets[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ExternalAPI.TO.LinevMarkets[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ExternalAPI.TO.Home Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ExternalAPI.TO.Home)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUpdate2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUpdate2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ExternalAPI.TO.Root Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ExternalAPI.TO.Root)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUpdateSCTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUpdateSCTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ExternalAPI.TO.RootSCT[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ExternalAPI.TO.RootSCT[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllMarketsFancyStringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllMarketsFancyStringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllMarketsStringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllMarketsStringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllMarketsBPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllMarketsBPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllMarketsBPFancyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllMarketsBPFancyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service123Client : System.ServiceModel.ClientBase<globaltraders.Service123Reference.IService123>, globaltraders.Service123Reference.IService123 {
        
        private BeginOperationDelegate onBeginGetMarketDatabyIDDelegate;
        
        private EndOperationDelegate onEndGetMarketDatabyIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetMarketDatabyIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMarketDatabyIDIndianFancyDelegate;
        
        private EndOperationDelegate onEndGetMarketDatabyIDIndianFancyDelegate;
        
        private System.Threading.SendOrPostCallback onGetMarketDatabyIDIndianFancyCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRunnersForFancyDelegate;
        
        private EndOperationDelegate onEndGetRunnersForFancyDelegate;
        
        private System.Threading.SendOrPostCallback onGetRunnersForFancyCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetEventIDFancyMarketDelegate;
        
        private EndOperationDelegate onEndGetEventIDFancyMarketDelegate;
        
        private System.Threading.SendOrPostCallback onGetEventIDFancyMarketCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUpdateDelegate;
        
        private EndOperationDelegate onEndGetUpdateDelegate;
        
        private System.Threading.SendOrPostCallback onGetUpdateCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUpdate2Delegate;
        
        private EndOperationDelegate onEndGetUpdate2Delegate;
        
        private System.Threading.SendOrPostCallback onGetUpdate2CompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUpdateSCTDelegate;
        
        private EndOperationDelegate onEndGetUpdateSCTDelegate;
        
        private System.Threading.SendOrPostCallback onGetUpdateSCTCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllMarketsFancyStringDelegate;
        
        private EndOperationDelegate onEndGetAllMarketsFancyStringDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllMarketsFancyStringCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllMarketsStringDelegate;
        
        private EndOperationDelegate onEndGetAllMarketsStringDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllMarketsStringCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllMarketsBPDelegate;
        
        private EndOperationDelegate onEndGetAllMarketsBPDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllMarketsBPCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllMarketsBPFancyDelegate;
        
        private EndOperationDelegate onEndGetAllMarketsBPFancyDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllMarketsBPFancyCompletedDelegate;
        
        public Service123Client() {
        }
        
        public Service123Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service123Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service123Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service123Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<GetMarketDatabyIDCompletedEventArgs> GetMarketDatabyIDCompleted;
        
        public event System.EventHandler<GetMarketDatabyIDIndianFancyCompletedEventArgs> GetMarketDatabyIDIndianFancyCompleted;
        
        public event System.EventHandler<GetRunnersForFancyCompletedEventArgs> GetRunnersForFancyCompleted;
        
        public event System.EventHandler<GetEventIDFancyMarketCompletedEventArgs> GetEventIDFancyMarketCompleted;
        
        public event System.EventHandler<GetUpdateCompletedEventArgs> GetUpdateCompleted;
        
        public event System.EventHandler<GetUpdate2CompletedEventArgs> GetUpdate2Completed;
        
        public event System.EventHandler<GetUpdateSCTCompletedEventArgs> GetUpdateSCTCompleted;
        
        public event System.EventHandler<GetAllMarketsFancyStringCompletedEventArgs> GetAllMarketsFancyStringCompleted;
        
        public event System.EventHandler<GetAllMarketsStringCompletedEventArgs> GetAllMarketsStringCompleted;
        
        public event System.EventHandler<GetAllMarketsBPCompletedEventArgs> GetAllMarketsBPCompleted;
        
        public event System.EventHandler<GetAllMarketsBPFancyCompletedEventArgs> GetAllMarketsBPFancyCompleted;
        
        public ExternalAPI.TO.MarketBook[] GetMarketDatabyID(string[] marketID, string sheetname, System.DateTime OrignalOpenDate, string MainSportsCategory, string Password) {
            return base.Channel.GetMarketDatabyID(marketID, sheetname, OrignalOpenDate, MainSportsCategory, Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetMarketDatabyID(string[] marketID, string sheetname, System.DateTime OrignalOpenDate, string MainSportsCategory, string Password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMarketDatabyID(marketID, sheetname, OrignalOpenDate, MainSportsCategory, Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public ExternalAPI.TO.MarketBook[] EndGetMarketDatabyID(System.IAsyncResult result) {
            return base.Channel.EndGetMarketDatabyID(result);
        }
        
        private System.IAsyncResult OnBeginGetMarketDatabyID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string[] marketID = ((string[])(inValues[0]));
            string sheetname = ((string)(inValues[1]));
            System.DateTime OrignalOpenDate = ((System.DateTime)(inValues[2]));
            string MainSportsCategory = ((string)(inValues[3]));
            string Password = ((string)(inValues[4]));
            return this.BeginGetMarketDatabyID(marketID, sheetname, OrignalOpenDate, MainSportsCategory, Password, callback, asyncState);
        }
        
        private object[] OnEndGetMarketDatabyID(System.IAsyncResult result) {
            ExternalAPI.TO.MarketBook[] retVal = this.EndGetMarketDatabyID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMarketDatabyIDCompleted(object state) {
            if ((this.GetMarketDatabyIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMarketDatabyIDCompleted(this, new GetMarketDatabyIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMarketDatabyIDAsync(string[] marketID, string sheetname, System.DateTime OrignalOpenDate, string MainSportsCategory, string Password) {
            this.GetMarketDatabyIDAsync(marketID, sheetname, OrignalOpenDate, MainSportsCategory, Password, null);
        }
        
        public void GetMarketDatabyIDAsync(string[] marketID, string sheetname, System.DateTime OrignalOpenDate, string MainSportsCategory, string Password, object userState) {
            if ((this.onBeginGetMarketDatabyIDDelegate == null)) {
                this.onBeginGetMarketDatabyIDDelegate = new BeginOperationDelegate(this.OnBeginGetMarketDatabyID);
            }
            if ((this.onEndGetMarketDatabyIDDelegate == null)) {
                this.onEndGetMarketDatabyIDDelegate = new EndOperationDelegate(this.OnEndGetMarketDatabyID);
            }
            if ((this.onGetMarketDatabyIDCompletedDelegate == null)) {
                this.onGetMarketDatabyIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMarketDatabyIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetMarketDatabyIDDelegate, new object[] {
                        marketID,
                        sheetname,
                        OrignalOpenDate,
                        MainSportsCategory,
                        Password}, this.onEndGetMarketDatabyIDDelegate, this.onGetMarketDatabyIDCompletedDelegate, userState);
        }
        
        public ExternalAPI.TO.MarketBookForindianFancy GetMarketDatabyIDIndianFancy(string EventID, string MarketBookID) {
            return base.Channel.GetMarketDatabyIDIndianFancy(EventID, MarketBookID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetMarketDatabyIDIndianFancy(string EventID, string MarketBookID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMarketDatabyIDIndianFancy(EventID, MarketBookID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public ExternalAPI.TO.MarketBookForindianFancy EndGetMarketDatabyIDIndianFancy(System.IAsyncResult result) {
            return base.Channel.EndGetMarketDatabyIDIndianFancy(result);
        }
        
        private System.IAsyncResult OnBeginGetMarketDatabyIDIndianFancy(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string EventID = ((string)(inValues[0]));
            string MarketBookID = ((string)(inValues[1]));
            return this.BeginGetMarketDatabyIDIndianFancy(EventID, MarketBookID, callback, asyncState);
        }
        
        private object[] OnEndGetMarketDatabyIDIndianFancy(System.IAsyncResult result) {
            ExternalAPI.TO.MarketBookForindianFancy retVal = this.EndGetMarketDatabyIDIndianFancy(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMarketDatabyIDIndianFancyCompleted(object state) {
            if ((this.GetMarketDatabyIDIndianFancyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMarketDatabyIDIndianFancyCompleted(this, new GetMarketDatabyIDIndianFancyCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMarketDatabyIDIndianFancyAsync(string EventID, string MarketBookID) {
            this.GetMarketDatabyIDIndianFancyAsync(EventID, MarketBookID, null);
        }
        
        public void GetMarketDatabyIDIndianFancyAsync(string EventID, string MarketBookID, object userState) {
            if ((this.onBeginGetMarketDatabyIDIndianFancyDelegate == null)) {
                this.onBeginGetMarketDatabyIDIndianFancyDelegate = new BeginOperationDelegate(this.OnBeginGetMarketDatabyIDIndianFancy);
            }
            if ((this.onEndGetMarketDatabyIDIndianFancyDelegate == null)) {
                this.onEndGetMarketDatabyIDIndianFancyDelegate = new EndOperationDelegate(this.OnEndGetMarketDatabyIDIndianFancy);
            }
            if ((this.onGetMarketDatabyIDIndianFancyCompletedDelegate == null)) {
                this.onGetMarketDatabyIDIndianFancyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMarketDatabyIDIndianFancyCompleted);
            }
            base.InvokeAsync(this.onBeginGetMarketDatabyIDIndianFancyDelegate, new object[] {
                        EventID,
                        MarketBookID}, this.onEndGetMarketDatabyIDIndianFancyDelegate, this.onGetMarketDatabyIDIndianFancyCompletedDelegate, userState);
        }
        
        public ExternalAPI.TO.GetDataFancy GetRunnersForFancy(string EventID, string MarketBookID) {
            return base.Channel.GetRunnersForFancy(EventID, MarketBookID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetRunnersForFancy(string EventID, string MarketBookID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRunnersForFancy(EventID, MarketBookID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public ExternalAPI.TO.GetDataFancy EndGetRunnersForFancy(System.IAsyncResult result) {
            return base.Channel.EndGetRunnersForFancy(result);
        }
        
        private System.IAsyncResult OnBeginGetRunnersForFancy(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string EventID = ((string)(inValues[0]));
            string MarketBookID = ((string)(inValues[1]));
            return this.BeginGetRunnersForFancy(EventID, MarketBookID, callback, asyncState);
        }
        
        private object[] OnEndGetRunnersForFancy(System.IAsyncResult result) {
            ExternalAPI.TO.GetDataFancy retVal = this.EndGetRunnersForFancy(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRunnersForFancyCompleted(object state) {
            if ((this.GetRunnersForFancyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRunnersForFancyCompleted(this, new GetRunnersForFancyCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRunnersForFancyAsync(string EventID, string MarketBookID) {
            this.GetRunnersForFancyAsync(EventID, MarketBookID, null);
        }
        
        public void GetRunnersForFancyAsync(string EventID, string MarketBookID, object userState) {
            if ((this.onBeginGetRunnersForFancyDelegate == null)) {
                this.onBeginGetRunnersForFancyDelegate = new BeginOperationDelegate(this.OnBeginGetRunnersForFancy);
            }
            if ((this.onEndGetRunnersForFancyDelegate == null)) {
                this.onEndGetRunnersForFancyDelegate = new EndOperationDelegate(this.OnEndGetRunnersForFancy);
            }
            if ((this.onGetRunnersForFancyCompletedDelegate == null)) {
                this.onGetRunnersForFancyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRunnersForFancyCompleted);
            }
            base.InvokeAsync(this.onBeginGetRunnersForFancyDelegate, new object[] {
                        EventID,
                        MarketBookID}, this.onEndGetRunnersForFancyDelegate, this.onGetRunnersForFancyCompletedDelegate, userState);
        }
        
        public ExternalAPI.TO.LinevMarkets[] GetEventIDFancyMarket(string EventID, string MarketBookID) {
            return base.Channel.GetEventIDFancyMarket(EventID, MarketBookID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetEventIDFancyMarket(string EventID, string MarketBookID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetEventIDFancyMarket(EventID, MarketBookID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public ExternalAPI.TO.LinevMarkets[] EndGetEventIDFancyMarket(System.IAsyncResult result) {
            return base.Channel.EndGetEventIDFancyMarket(result);
        }
        
        private System.IAsyncResult OnBeginGetEventIDFancyMarket(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string EventID = ((string)(inValues[0]));
            string MarketBookID = ((string)(inValues[1]));
            return this.BeginGetEventIDFancyMarket(EventID, MarketBookID, callback, asyncState);
        }
        
        private object[] OnEndGetEventIDFancyMarket(System.IAsyncResult result) {
            ExternalAPI.TO.LinevMarkets[] retVal = this.EndGetEventIDFancyMarket(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetEventIDFancyMarketCompleted(object state) {
            if ((this.GetEventIDFancyMarketCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetEventIDFancyMarketCompleted(this, new GetEventIDFancyMarketCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetEventIDFancyMarketAsync(string EventID, string MarketBookID) {
            this.GetEventIDFancyMarketAsync(EventID, MarketBookID, null);
        }
        
        public void GetEventIDFancyMarketAsync(string EventID, string MarketBookID, object userState) {
            if ((this.onBeginGetEventIDFancyMarketDelegate == null)) {
                this.onBeginGetEventIDFancyMarketDelegate = new BeginOperationDelegate(this.OnBeginGetEventIDFancyMarket);
            }
            if ((this.onEndGetEventIDFancyMarketDelegate == null)) {
                this.onEndGetEventIDFancyMarketDelegate = new EndOperationDelegate(this.OnEndGetEventIDFancyMarket);
            }
            if ((this.onGetEventIDFancyMarketCompletedDelegate == null)) {
                this.onGetEventIDFancyMarketCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetEventIDFancyMarketCompleted);
            }
            base.InvokeAsync(this.onBeginGetEventIDFancyMarketDelegate, new object[] {
                        EventID,
                        MarketBookID}, this.onEndGetEventIDFancyMarketDelegate, this.onGetEventIDFancyMarketCompletedDelegate, userState);
        }
        
        public ExternalAPI.TO.Home GetUpdate(string EventID) {
            return base.Channel.GetUpdate(EventID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetUpdate(string EventID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUpdate(EventID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public ExternalAPI.TO.Home EndGetUpdate(System.IAsyncResult result) {
            return base.Channel.EndGetUpdate(result);
        }
        
        private System.IAsyncResult OnBeginGetUpdate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string EventID = ((string)(inValues[0]));
            return this.BeginGetUpdate(EventID, callback, asyncState);
        }
        
        private object[] OnEndGetUpdate(System.IAsyncResult result) {
            ExternalAPI.TO.Home retVal = this.EndGetUpdate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUpdateCompleted(object state) {
            if ((this.GetUpdateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUpdateCompleted(this, new GetUpdateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUpdateAsync(string EventID) {
            this.GetUpdateAsync(EventID, null);
        }
        
        public void GetUpdateAsync(string EventID, object userState) {
            if ((this.onBeginGetUpdateDelegate == null)) {
                this.onBeginGetUpdateDelegate = new BeginOperationDelegate(this.OnBeginGetUpdate);
            }
            if ((this.onEndGetUpdateDelegate == null)) {
                this.onEndGetUpdateDelegate = new EndOperationDelegate(this.OnEndGetUpdate);
            }
            if ((this.onGetUpdateCompletedDelegate == null)) {
                this.onGetUpdateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUpdateCompleted);
            }
            base.InvokeAsync(this.onBeginGetUpdateDelegate, new object[] {
                        EventID}, this.onEndGetUpdateDelegate, this.onGetUpdateCompletedDelegate, userState);
        }
        
        public ExternalAPI.TO.Root GetUpdate2(string EventID) {
            return base.Channel.GetUpdate2(EventID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetUpdate2(string EventID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUpdate2(EventID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public ExternalAPI.TO.Root EndGetUpdate2(System.IAsyncResult result) {
            return base.Channel.EndGetUpdate2(result);
        }
        
        private System.IAsyncResult OnBeginGetUpdate2(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string EventID = ((string)(inValues[0]));
            return this.BeginGetUpdate2(EventID, callback, asyncState);
        }
        
        private object[] OnEndGetUpdate2(System.IAsyncResult result) {
            ExternalAPI.TO.Root retVal = this.EndGetUpdate2(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUpdate2Completed(object state) {
            if ((this.GetUpdate2Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUpdate2Completed(this, new GetUpdate2CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUpdate2Async(string EventID) {
            this.GetUpdate2Async(EventID, null);
        }
        
        public void GetUpdate2Async(string EventID, object userState) {
            if ((this.onBeginGetUpdate2Delegate == null)) {
                this.onBeginGetUpdate2Delegate = new BeginOperationDelegate(this.OnBeginGetUpdate2);
            }
            if ((this.onEndGetUpdate2Delegate == null)) {
                this.onEndGetUpdate2Delegate = new EndOperationDelegate(this.OnEndGetUpdate2);
            }
            if ((this.onGetUpdate2CompletedDelegate == null)) {
                this.onGetUpdate2CompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUpdate2Completed);
            }
            base.InvokeAsync(this.onBeginGetUpdate2Delegate, new object[] {
                        EventID}, this.onEndGetUpdate2Delegate, this.onGetUpdate2CompletedDelegate, userState);
        }
        
        public ExternalAPI.TO.RootSCT[] GetUpdateSCT(string Eventtypeid) {
            return base.Channel.GetUpdateSCT(Eventtypeid);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetUpdateSCT(string Eventtypeid, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUpdateSCT(Eventtypeid, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public ExternalAPI.TO.RootSCT[] EndGetUpdateSCT(System.IAsyncResult result) {
            return base.Channel.EndGetUpdateSCT(result);
        }
        
        private System.IAsyncResult OnBeginGetUpdateSCT(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string Eventtypeid = ((string)(inValues[0]));
            return this.BeginGetUpdateSCT(Eventtypeid, callback, asyncState);
        }
        
        private object[] OnEndGetUpdateSCT(System.IAsyncResult result) {
            ExternalAPI.TO.RootSCT[] retVal = this.EndGetUpdateSCT(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUpdateSCTCompleted(object state) {
            if ((this.GetUpdateSCTCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUpdateSCTCompleted(this, new GetUpdateSCTCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUpdateSCTAsync(string Eventtypeid) {
            this.GetUpdateSCTAsync(Eventtypeid, null);
        }
        
        public void GetUpdateSCTAsync(string Eventtypeid, object userState) {
            if ((this.onBeginGetUpdateSCTDelegate == null)) {
                this.onBeginGetUpdateSCTDelegate = new BeginOperationDelegate(this.OnBeginGetUpdateSCT);
            }
            if ((this.onEndGetUpdateSCTDelegate == null)) {
                this.onEndGetUpdateSCTDelegate = new EndOperationDelegate(this.OnEndGetUpdateSCT);
            }
            if ((this.onGetUpdateSCTCompletedDelegate == null)) {
                this.onGetUpdateSCTCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUpdateSCTCompleted);
            }
            base.InvokeAsync(this.onBeginGetUpdateSCTDelegate, new object[] {
                        Eventtypeid}, this.onEndGetUpdateSCTDelegate, this.onGetUpdateSCTCompletedDelegate, userState);
        }
        
        public string GetAllMarketsFancyString(string marketID) {
            return base.Channel.GetAllMarketsFancyString(marketID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAllMarketsFancyString(string marketID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllMarketsFancyString(marketID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetAllMarketsFancyString(System.IAsyncResult result) {
            return base.Channel.EndGetAllMarketsFancyString(result);
        }
        
        private System.IAsyncResult OnBeginGetAllMarketsFancyString(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string marketID = ((string)(inValues[0]));
            return this.BeginGetAllMarketsFancyString(marketID, callback, asyncState);
        }
        
        private object[] OnEndGetAllMarketsFancyString(System.IAsyncResult result) {
            string retVal = this.EndGetAllMarketsFancyString(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllMarketsFancyStringCompleted(object state) {
            if ((this.GetAllMarketsFancyStringCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllMarketsFancyStringCompleted(this, new GetAllMarketsFancyStringCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllMarketsFancyStringAsync(string marketID) {
            this.GetAllMarketsFancyStringAsync(marketID, null);
        }
        
        public void GetAllMarketsFancyStringAsync(string marketID, object userState) {
            if ((this.onBeginGetAllMarketsFancyStringDelegate == null)) {
                this.onBeginGetAllMarketsFancyStringDelegate = new BeginOperationDelegate(this.OnBeginGetAllMarketsFancyString);
            }
            if ((this.onEndGetAllMarketsFancyStringDelegate == null)) {
                this.onEndGetAllMarketsFancyStringDelegate = new EndOperationDelegate(this.OnEndGetAllMarketsFancyString);
            }
            if ((this.onGetAllMarketsFancyStringCompletedDelegate == null)) {
                this.onGetAllMarketsFancyStringCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllMarketsFancyStringCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllMarketsFancyStringDelegate, new object[] {
                        marketID}, this.onEndGetAllMarketsFancyStringDelegate, this.onGetAllMarketsFancyStringCompletedDelegate, userState);
        }
        
        public string GetAllMarketsString(string marketID) {
            return base.Channel.GetAllMarketsString(marketID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAllMarketsString(string marketID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllMarketsString(marketID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetAllMarketsString(System.IAsyncResult result) {
            return base.Channel.EndGetAllMarketsString(result);
        }
        
        private System.IAsyncResult OnBeginGetAllMarketsString(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string marketID = ((string)(inValues[0]));
            return this.BeginGetAllMarketsString(marketID, callback, asyncState);
        }
        
        private object[] OnEndGetAllMarketsString(System.IAsyncResult result) {
            string retVal = this.EndGetAllMarketsString(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllMarketsStringCompleted(object state) {
            if ((this.GetAllMarketsStringCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllMarketsStringCompleted(this, new GetAllMarketsStringCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllMarketsStringAsync(string marketID) {
            this.GetAllMarketsStringAsync(marketID, null);
        }
        
        public void GetAllMarketsStringAsync(string marketID, object userState) {
            if ((this.onBeginGetAllMarketsStringDelegate == null)) {
                this.onBeginGetAllMarketsStringDelegate = new BeginOperationDelegate(this.OnBeginGetAllMarketsString);
            }
            if ((this.onEndGetAllMarketsStringDelegate == null)) {
                this.onEndGetAllMarketsStringDelegate = new EndOperationDelegate(this.OnEndGetAllMarketsString);
            }
            if ((this.onGetAllMarketsStringCompletedDelegate == null)) {
                this.onGetAllMarketsStringCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllMarketsStringCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllMarketsStringDelegate, new object[] {
                        marketID}, this.onEndGetAllMarketsStringDelegate, this.onGetAllMarketsStringCompletedDelegate, userState);
        }
        
        public string GetAllMarketsBP(string marketID) {
            return base.Channel.GetAllMarketsBP(marketID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAllMarketsBP(string marketID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllMarketsBP(marketID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetAllMarketsBP(System.IAsyncResult result) {
            return base.Channel.EndGetAllMarketsBP(result);
        }
        
        private System.IAsyncResult OnBeginGetAllMarketsBP(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string marketID = ((string)(inValues[0]));
            return this.BeginGetAllMarketsBP(marketID, callback, asyncState);
        }
        
        private object[] OnEndGetAllMarketsBP(System.IAsyncResult result) {
            string retVal = this.EndGetAllMarketsBP(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllMarketsBPCompleted(object state) {
            if ((this.GetAllMarketsBPCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllMarketsBPCompleted(this, new GetAllMarketsBPCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllMarketsBPAsync(string marketID) {
            this.GetAllMarketsBPAsync(marketID, null);
        }
        
        public void GetAllMarketsBPAsync(string marketID, object userState) {
            if ((this.onBeginGetAllMarketsBPDelegate == null)) {
                this.onBeginGetAllMarketsBPDelegate = new BeginOperationDelegate(this.OnBeginGetAllMarketsBP);
            }
            if ((this.onEndGetAllMarketsBPDelegate == null)) {
                this.onEndGetAllMarketsBPDelegate = new EndOperationDelegate(this.OnEndGetAllMarketsBP);
            }
            if ((this.onGetAllMarketsBPCompletedDelegate == null)) {
                this.onGetAllMarketsBPCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllMarketsBPCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllMarketsBPDelegate, new object[] {
                        marketID}, this.onEndGetAllMarketsBPDelegate, this.onGetAllMarketsBPCompletedDelegate, userState);
        }
        
        public string GetAllMarketsBPFancy(string marketID) {
            return base.Channel.GetAllMarketsBPFancy(marketID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAllMarketsBPFancy(string marketID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllMarketsBPFancy(marketID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetAllMarketsBPFancy(System.IAsyncResult result) {
            return base.Channel.EndGetAllMarketsBPFancy(result);
        }
        
        private System.IAsyncResult OnBeginGetAllMarketsBPFancy(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string marketID = ((string)(inValues[0]));
            return this.BeginGetAllMarketsBPFancy(marketID, callback, asyncState);
        }
        
        private object[] OnEndGetAllMarketsBPFancy(System.IAsyncResult result) {
            string retVal = this.EndGetAllMarketsBPFancy(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllMarketsBPFancyCompleted(object state) {
            if ((this.GetAllMarketsBPFancyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllMarketsBPFancyCompleted(this, new GetAllMarketsBPFancyCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllMarketsBPFancyAsync(string marketID) {
            this.GetAllMarketsBPFancyAsync(marketID, null);
        }
        
        public void GetAllMarketsBPFancyAsync(string marketID, object userState) {
            if ((this.onBeginGetAllMarketsBPFancyDelegate == null)) {
                this.onBeginGetAllMarketsBPFancyDelegate = new BeginOperationDelegate(this.OnBeginGetAllMarketsBPFancy);
            }
            if ((this.onEndGetAllMarketsBPFancyDelegate == null)) {
                this.onEndGetAllMarketsBPFancyDelegate = new EndOperationDelegate(this.OnEndGetAllMarketsBPFancy);
            }
            if ((this.onGetAllMarketsBPFancyCompletedDelegate == null)) {
                this.onGetAllMarketsBPFancyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllMarketsBPFancyCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllMarketsBPFancyDelegate, new object[] {
                        marketID}, this.onEndGetAllMarketsBPFancyDelegate, this.onGetAllMarketsBPFancyCompletedDelegate, userState);
        }
    }
}
