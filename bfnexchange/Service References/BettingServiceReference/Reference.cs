//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace bfnexchange.BettingServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="BettingServiceReference.IBettingService")]
    public interface IBettingService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/listMarketCatalogue", ReplyAction="http://tempuri.org/IBettingService/listMarketCatalogueResponse")]
        ExternalAPI.TO.MarketCatalogue[] listMarketCatalogue(string ID, string[] lstMarketCatalogues, bool isInPlay, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/listMarketCatalogue", ReplyAction="http://tempuri.org/IBettingService/listMarketCatalogueResponse")]
        System.Threading.Tasks.Task<ExternalAPI.TO.MarketCatalogue[]> listMarketCatalogueAsync(string ID, string[] lstMarketCatalogues, bool isInPlay, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/listMarketBookALL", ReplyAction="http://tempuri.org/IBettingService/listMarketBookALLResponse")]
        ExternalAPI.TO.MarketBook[] listMarketBookALL(string[] ID, int UserID, int UserTypeID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/listMarketBookALL", ReplyAction="http://tempuri.org/IBettingService/listMarketBookALLResponse")]
        System.Threading.Tasks.Task<ExternalAPI.TO.MarketBook[]> listMarketBookALLAsync(string[] ID, int UserID, int UserTypeID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/listMarketBook", ReplyAction="http://tempuri.org/IBettingService/listMarketBookResponse")]
        ExternalAPI.TO.MarketBook[] listMarketBook(string ID, int UserID, int UserTypeID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/listMarketBook", ReplyAction="http://tempuri.org/IBettingService/listMarketBookResponse")]
        System.Threading.Tasks.Task<ExternalAPI.TO.MarketBook[]> listMarketBookAsync(string ID, int UserID, int UserTypeID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/listEventTypes", ReplyAction="http://tempuri.org/IBettingService/listEventTypesResponse")]
        ExternalAPI.TO.EventTypeResult[] listEventTypes(bool isInPlay, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/listEventTypes", ReplyAction="http://tempuri.org/IBettingService/listEventTypesResponse")]
        System.Threading.Tasks.Task<ExternalAPI.TO.EventTypeResult[]> listEventTypesAsync(bool isInPlay, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/listEventTypesWithMarketFilter", ReplyAction="http://tempuri.org/IBettingService/listEventTypesWithMarketFilterResponse")]
        ExternalAPI.TO.EventTypeResult[] listEventTypesWithMarketFilter(bool isInPlay, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/listEventTypesWithMarketFilter", ReplyAction="http://tempuri.org/IBettingService/listEventTypesWithMarketFilterResponse")]
        System.Threading.Tasks.Task<ExternalAPI.TO.EventTypeResult[]> listEventTypesWithMarketFilterAsync(bool isInPlay, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/listCompetitions", ReplyAction="http://tempuri.org/IBettingService/listCompetitionsResponse")]
        ExternalAPI.TO.CompetitionResult[] listCompetitions(string ID, bool isInPlay, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/listCompetitions", ReplyAction="http://tempuri.org/IBettingService/listCompetitionsResponse")]
        System.Threading.Tasks.Task<ExternalAPI.TO.CompetitionResult[]> listCompetitionsAsync(string ID, bool isInPlay, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/listEvents", ReplyAction="http://tempuri.org/IBettingService/listEventsResponse")]
        ExternalAPI.TO.EventResult[] listEvents(string ID, bool isInPlay, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/listEvents", ReplyAction="http://tempuri.org/IBettingService/listEventsResponse")]
        System.Threading.Tasks.Task<ExternalAPI.TO.EventResult[]> listEventsAsync(string ID, bool isInPlay, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetMarketDatabyIDResultsOnly", ReplyAction="http://tempuri.org/IBettingService/GetMarketDatabyIDResultsOnlyResponse")]
        ExternalAPI.TO.MarketBook[] GetMarketDatabyIDResultsOnly(string marketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetMarketDatabyIDResultsOnly", ReplyAction="http://tempuri.org/IBettingService/GetMarketDatabyIDResultsOnlyResponse")]
        System.Threading.Tasks.Task<ExternalAPI.TO.MarketBook[]> GetMarketDatabyIDResultsOnlyAsync(string marketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetMarketDatabyID", ReplyAction="http://tempuri.org/IBettingService/GetMarketDatabyIDResponse")]
        ExternalAPI.TO.MarketBook[] GetMarketDatabyID(string[] marketID, string sheetname, System.DateTime OrignalOpenDate, string MainSportsCategory, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetMarketDatabyID", ReplyAction="http://tempuri.org/IBettingService/GetMarketDatabyIDResponse")]
        System.Threading.Tasks.Task<ExternalAPI.TO.MarketBook[]> GetMarketDatabyIDAsync(string[] marketID, string sheetname, System.DateTime OrignalOpenDate, string MainSportsCategory, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetMarketDatabyIDIndianFancy", ReplyAction="http://tempuri.org/IBettingService/GetMarketDatabyIDIndianFancyResponse")]
        ExternalAPI.TO.MarketBookForindianFancy GetMarketDatabyIDIndianFancy(string EventID, string MarketBookID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetMarketDatabyIDIndianFancy", ReplyAction="http://tempuri.org/IBettingService/GetMarketDatabyIDIndianFancyResponse")]
        System.Threading.Tasks.Task<ExternalAPI.TO.MarketBookForindianFancy> GetMarketDatabyIDIndianFancyAsync(string EventID, string MarketBookID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetRunnersForFancy", ReplyAction="http://tempuri.org/IBettingService/GetRunnersForFancyResponse")]
        string GetRunnersForFancy(string EventID, string MarketBookID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetRunnersForFancy", ReplyAction="http://tempuri.org/IBettingService/GetRunnersForFancyResponse")]
        System.Threading.Tasks.Task<string> GetRunnersForFancyAsync(string EventID, string MarketBookID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetUpdate", ReplyAction="http://tempuri.org/IBettingService/GetUpdateResponse")]
        ExternalAPI.TO.Home GetUpdate(string EventID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetUpdate", ReplyAction="http://tempuri.org/IBettingService/GetUpdateResponse")]
        System.Threading.Tasks.Task<ExternalAPI.TO.Home> GetUpdateAsync(string EventID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetUpdateNew", ReplyAction="http://tempuri.org/IBettingService/GetUpdateNewResponse")]
        ExternalAPI.TO.UpdateNew GetUpdateNew(string EventID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetUpdateNew", ReplyAction="http://tempuri.org/IBettingService/GetUpdateNewResponse")]
        System.Threading.Tasks.Task<ExternalAPI.TO.UpdateNew> GetUpdateNewAsync(string EventID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetUpdate2", ReplyAction="http://tempuri.org/IBettingService/GetUpdate2Response")]
        ExternalAPI.TO.Root GetUpdate2(string EventID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetUpdate2", ReplyAction="http://tempuri.org/IBettingService/GetUpdate2Response")]
        System.Threading.Tasks.Task<ExternalAPI.TO.Root> GetUpdate2Async(string EventID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetUpdateSCT", ReplyAction="http://tempuri.org/IBettingService/GetUpdateSCTResponse")]
        ExternalAPI.TO.RootSCT[] GetUpdateSCT(string Eventtypeid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetUpdateSCT", ReplyAction="http://tempuri.org/IBettingService/GetUpdateSCTResponse")]
        System.Threading.Tasks.Task<ExternalAPI.TO.RootSCT[]> GetUpdateSCTAsync(string Eventtypeid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetSoccorUpdate", ReplyAction="http://tempuri.org/IBettingService/GetSoccorUpdateResponse")]
        string GetSoccorUpdate(string Eventtypeid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetSoccorUpdate", ReplyAction="http://tempuri.org/IBettingService/GetSoccorUpdateResponse")]
        System.Threading.Tasks.Task<string> GetSoccorUpdateAsync(string Eventtypeid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetDataFromBetfairReadOnly", ReplyAction="http://tempuri.org/IBettingService/GetDataFromBetfairReadOnlyResponse")]
        void GetDataFromBetfairReadOnly();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetDataFromBetfairReadOnly", ReplyAction="http://tempuri.org/IBettingService/GetDataFromBetfairReadOnlyResponse")]
        System.Threading.Tasks.Task GetDataFromBetfairReadOnlyAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetBallbyBallSummary", ReplyAction="http://tempuri.org/IBettingService/GetBallbyBallSummaryResponse")]
        void GetBallbyBallSummary();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetBallbyBallSummary", ReplyAction="http://tempuri.org/IBettingService/GetBallbyBallSummaryResponse")]
        System.Threading.Tasks.Task GetBallbyBallSummaryAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetBallbyBallSummaryNew", ReplyAction="http://tempuri.org/IBettingService/GetBallbyBallSummaryNewResponse")]
        void GetBallbyBallSummaryNew();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetBallbyBallSummaryNew", ReplyAction="http://tempuri.org/IBettingService/GetBallbyBallSummaryNewResponse")]
        System.Threading.Tasks.Task GetBallbyBallSummaryNewAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetCurrentMarketBookNew", ReplyAction="http://tempuri.org/IBettingService/GetCurrentMarketBookNewResponse")]
        bfnexchange.wrBF.MarketBook[] GetCurrentMarketBookNew(string marketid, string sheetname, string MainSportsCategory, System.DateTime marketopendate, bool BettingAllowed, ExternalAPI.TO.Runner[] OldRunners, ExternalAPI.TO.MarketBook currentmarketobject, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetCurrentMarketBookNew", ReplyAction="http://tempuri.org/IBettingService/GetCurrentMarketBookNewResponse")]
        System.Threading.Tasks.Task<bfnexchange.wrBF.MarketBook[]> GetCurrentMarketBookNewAsync(string marketid, string sheetname, string MainSportsCategory, System.DateTime marketopendate, bool BettingAllowed, ExternalAPI.TO.Runner[] OldRunners, ExternalAPI.TO.MarketBook currentmarketobject, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetMarketDatabyIDLive", ReplyAction="http://tempuri.org/IBettingService/GetMarketDatabyIDLiveResponse")]
        ExternalAPI.TO.MarketBook[] GetMarketDatabyIDLive(string[] marketID, string sheetname, System.DateTime OrignalOpenDate, string MainSportsCategory, string Password, string PasswordS);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetMarketDatabyIDLive", ReplyAction="http://tempuri.org/IBettingService/GetMarketDatabyIDLiveResponse")]
        System.Threading.Tasks.Task<ExternalAPI.TO.MarketBook[]> GetMarketDatabyIDLiveAsync(string[] marketID, string sheetname, System.DateTime OrignalOpenDate, string MainSportsCategory, string Password, string PasswordS);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetAllMarketsBP", ReplyAction="http://tempuri.org/IBettingService/GetAllMarketsBPResponse")]
        string GetAllMarketsBP(string[] marketIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetAllMarketsBP", ReplyAction="http://tempuri.org/IBettingService/GetAllMarketsBPResponse")]
        System.Threading.Tasks.Task<string> GetAllMarketsBPAsync(string[] marketIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetAllMarketsOthers", ReplyAction="http://tempuri.org/IBettingService/GetAllMarketsOthersResponse")]
        ExternalAPI.TO.MarketBookString[] GetAllMarketsOthers(string[] marketIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetAllMarketsOthers", ReplyAction="http://tempuri.org/IBettingService/GetAllMarketsOthersResponse")]
        System.Threading.Tasks.Task<ExternalAPI.TO.MarketBookString[]> GetAllMarketsOthersAsync(string[] marketIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetAllMarketsOthersFancy", ReplyAction="http://tempuri.org/IBettingService/GetAllMarketsOthersFancyResponse")]
        ExternalAPI.TO.MarketBookString[] GetAllMarketsOthersFancy(string[] marketIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetAllMarketsOthersFancy", ReplyAction="http://tempuri.org/IBettingService/GetAllMarketsOthersFancyResponse")]
        System.Threading.Tasks.Task<ExternalAPI.TO.MarketBookString[]> GetAllMarketsOthersFancyAsync(string[] marketIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetAllMarketsBPFancy", ReplyAction="http://tempuri.org/IBettingService/GetAllMarketsBPFancyResponse")]
        string GetAllMarketsBPFancy(string[] marketIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetAllMarketsBPFancy", ReplyAction="http://tempuri.org/IBettingService/GetAllMarketsBPFancyResponse")]
        System.Threading.Tasks.Task<string> GetAllMarketsBPFancyAsync(string[] marketIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetAllMarketsFancy", ReplyAction="http://tempuri.org/IBettingService/GetAllMarketsFancyResponse")]
        ExternalAPI.TO.MarketBook[] GetAllMarketsFancy(string[] marketIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBettingService/GetAllMarketsFancy", ReplyAction="http://tempuri.org/IBettingService/GetAllMarketsFancyResponse")]
        System.Threading.Tasks.Task<ExternalAPI.TO.MarketBook[]> GetAllMarketsFancyAsync(string[] marketIDs);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBettingServiceChannel : bfnexchange.BettingServiceReference.IBettingService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BettingServiceClient : System.ServiceModel.ClientBase<bfnexchange.BettingServiceReference.IBettingService>, bfnexchange.BettingServiceReference.IBettingService {
        
        public BettingServiceClient() {
        }
        
        public BettingServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BettingServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BettingServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BettingServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ExternalAPI.TO.MarketCatalogue[] listMarketCatalogue(string ID, string[] lstMarketCatalogues, bool isInPlay, string Password) {
            return base.Channel.listMarketCatalogue(ID, lstMarketCatalogues, isInPlay, Password);
        }
        
        public System.Threading.Tasks.Task<ExternalAPI.TO.MarketCatalogue[]> listMarketCatalogueAsync(string ID, string[] lstMarketCatalogues, bool isInPlay, string Password) {
            return base.Channel.listMarketCatalogueAsync(ID, lstMarketCatalogues, isInPlay, Password);
        }
        
        public ExternalAPI.TO.MarketBook[] listMarketBookALL(string[] ID, int UserID, int UserTypeID, string Password) {
            return base.Channel.listMarketBookALL(ID, UserID, UserTypeID, Password);
        }
        
        public System.Threading.Tasks.Task<ExternalAPI.TO.MarketBook[]> listMarketBookALLAsync(string[] ID, int UserID, int UserTypeID, string Password) {
            return base.Channel.listMarketBookALLAsync(ID, UserID, UserTypeID, Password);
        }
        
        public ExternalAPI.TO.MarketBook[] listMarketBook(string ID, int UserID, int UserTypeID, string Password) {
            return base.Channel.listMarketBook(ID, UserID, UserTypeID, Password);
        }
        
        public System.Threading.Tasks.Task<ExternalAPI.TO.MarketBook[]> listMarketBookAsync(string ID, int UserID, int UserTypeID, string Password) {
            return base.Channel.listMarketBookAsync(ID, UserID, UserTypeID, Password);
        }
        
        public ExternalAPI.TO.EventTypeResult[] listEventTypes(bool isInPlay, string Password) {
            return base.Channel.listEventTypes(isInPlay, Password);
        }
        
        public System.Threading.Tasks.Task<ExternalAPI.TO.EventTypeResult[]> listEventTypesAsync(bool isInPlay, string Password) {
            return base.Channel.listEventTypesAsync(isInPlay, Password);
        }
        
        public ExternalAPI.TO.EventTypeResult[] listEventTypesWithMarketFilter(bool isInPlay, string Password) {
            return base.Channel.listEventTypesWithMarketFilter(isInPlay, Password);
        }
        
        public System.Threading.Tasks.Task<ExternalAPI.TO.EventTypeResult[]> listEventTypesWithMarketFilterAsync(bool isInPlay, string Password) {
            return base.Channel.listEventTypesWithMarketFilterAsync(isInPlay, Password);
        }
        
        public ExternalAPI.TO.CompetitionResult[] listCompetitions(string ID, bool isInPlay, string Password) {
            return base.Channel.listCompetitions(ID, isInPlay, Password);
        }
        
        public System.Threading.Tasks.Task<ExternalAPI.TO.CompetitionResult[]> listCompetitionsAsync(string ID, bool isInPlay, string Password) {
            return base.Channel.listCompetitionsAsync(ID, isInPlay, Password);
        }
        
        public ExternalAPI.TO.EventResult[] listEvents(string ID, bool isInPlay, string Password) {
            return base.Channel.listEvents(ID, isInPlay, Password);
        }
        
        public System.Threading.Tasks.Task<ExternalAPI.TO.EventResult[]> listEventsAsync(string ID, bool isInPlay, string Password) {
            return base.Channel.listEventsAsync(ID, isInPlay, Password);
        }
        
        public ExternalAPI.TO.MarketBook[] GetMarketDatabyIDResultsOnly(string marketID) {
            return base.Channel.GetMarketDatabyIDResultsOnly(marketID);
        }
        
        public System.Threading.Tasks.Task<ExternalAPI.TO.MarketBook[]> GetMarketDatabyIDResultsOnlyAsync(string marketID) {
            return base.Channel.GetMarketDatabyIDResultsOnlyAsync(marketID);
        }
        
        public ExternalAPI.TO.MarketBook[] GetMarketDatabyID(string[] marketID, string sheetname, System.DateTime OrignalOpenDate, string MainSportsCategory, string Password) {
            return base.Channel.GetMarketDatabyID(marketID, sheetname, OrignalOpenDate, MainSportsCategory, Password);
        }
        
        public System.Threading.Tasks.Task<ExternalAPI.TO.MarketBook[]> GetMarketDatabyIDAsync(string[] marketID, string sheetname, System.DateTime OrignalOpenDate, string MainSportsCategory, string Password) {
            return base.Channel.GetMarketDatabyIDAsync(marketID, sheetname, OrignalOpenDate, MainSportsCategory, Password);
        }
        
        public ExternalAPI.TO.MarketBookForindianFancy GetMarketDatabyIDIndianFancy(string EventID, string MarketBookID) {
            return base.Channel.GetMarketDatabyIDIndianFancy(EventID, MarketBookID);
        }
        
        public System.Threading.Tasks.Task<ExternalAPI.TO.MarketBookForindianFancy> GetMarketDatabyIDIndianFancyAsync(string EventID, string MarketBookID) {
            return base.Channel.GetMarketDatabyIDIndianFancyAsync(EventID, MarketBookID);
        }
        
        public string GetRunnersForFancy(string EventID, string MarketBookID) {
            return base.Channel.GetRunnersForFancy(EventID, MarketBookID);
        }
        
        public System.Threading.Tasks.Task<string> GetRunnersForFancyAsync(string EventID, string MarketBookID) {
            return base.Channel.GetRunnersForFancyAsync(EventID, MarketBookID);
        }
        
        public ExternalAPI.TO.Home GetUpdate(string EventID) {
            return base.Channel.GetUpdate(EventID);
        }
        
        public System.Threading.Tasks.Task<ExternalAPI.TO.Home> GetUpdateAsync(string EventID) {
            return base.Channel.GetUpdateAsync(EventID);
        }
        
        public ExternalAPI.TO.UpdateNew GetUpdateNew(string EventID) {
            return base.Channel.GetUpdateNew(EventID);
        }
        
        public System.Threading.Tasks.Task<ExternalAPI.TO.UpdateNew> GetUpdateNewAsync(string EventID) {
            return base.Channel.GetUpdateNewAsync(EventID);
        }
        
        public ExternalAPI.TO.Root GetUpdate2(string EventID) {
            return base.Channel.GetUpdate2(EventID);
        }
        
        public System.Threading.Tasks.Task<ExternalAPI.TO.Root> GetUpdate2Async(string EventID) {
            return base.Channel.GetUpdate2Async(EventID);
        }
        
        public ExternalAPI.TO.RootSCT[] GetUpdateSCT(string Eventtypeid) {
            return base.Channel.GetUpdateSCT(Eventtypeid);
        }
        
        public System.Threading.Tasks.Task<ExternalAPI.TO.RootSCT[]> GetUpdateSCTAsync(string Eventtypeid) {
            return base.Channel.GetUpdateSCTAsync(Eventtypeid);
        }
        
        public string GetSoccorUpdate(string Eventtypeid) {
            return base.Channel.GetSoccorUpdate(Eventtypeid);
        }
        
        public System.Threading.Tasks.Task<string> GetSoccorUpdateAsync(string Eventtypeid) {
            return base.Channel.GetSoccorUpdateAsync(Eventtypeid);
        }
        
        public void GetDataFromBetfairReadOnly() {
            base.Channel.GetDataFromBetfairReadOnly();
        }
        
        public System.Threading.Tasks.Task GetDataFromBetfairReadOnlyAsync() {
            return base.Channel.GetDataFromBetfairReadOnlyAsync();
        }
        
        public void GetBallbyBallSummary() {
            base.Channel.GetBallbyBallSummary();
        }
        
        public System.Threading.Tasks.Task GetBallbyBallSummaryAsync() {
            return base.Channel.GetBallbyBallSummaryAsync();
        }
        
        public void GetBallbyBallSummaryNew() {
            base.Channel.GetBallbyBallSummaryNew();
        }
        
        public System.Threading.Tasks.Task GetBallbyBallSummaryNewAsync() {
            return base.Channel.GetBallbyBallSummaryNewAsync();
        }
        
        public bfnexchange.wrBF.MarketBook[] GetCurrentMarketBookNew(string marketid, string sheetname, string MainSportsCategory, System.DateTime marketopendate, bool BettingAllowed, ExternalAPI.TO.Runner[] OldRunners, ExternalAPI.TO.MarketBook currentmarketobject, string Password) {
            return base.Channel.GetCurrentMarketBookNew(marketid, sheetname, MainSportsCategory, marketopendate, BettingAllowed, OldRunners, currentmarketobject, Password);
        }
        
        public System.Threading.Tasks.Task<bfnexchange.wrBF.MarketBook[]> GetCurrentMarketBookNewAsync(string marketid, string sheetname, string MainSportsCategory, System.DateTime marketopendate, bool BettingAllowed, ExternalAPI.TO.Runner[] OldRunners, ExternalAPI.TO.MarketBook currentmarketobject, string Password) {
            return base.Channel.GetCurrentMarketBookNewAsync(marketid, sheetname, MainSportsCategory, marketopendate, BettingAllowed, OldRunners, currentmarketobject, Password);
        }
        
        public ExternalAPI.TO.MarketBook[] GetMarketDatabyIDLive(string[] marketID, string sheetname, System.DateTime OrignalOpenDate, string MainSportsCategory, string Password, string PasswordS) {
            return base.Channel.GetMarketDatabyIDLive(marketID, sheetname, OrignalOpenDate, MainSportsCategory, Password, PasswordS);
        }
        
        public System.Threading.Tasks.Task<ExternalAPI.TO.MarketBook[]> GetMarketDatabyIDLiveAsync(string[] marketID, string sheetname, System.DateTime OrignalOpenDate, string MainSportsCategory, string Password, string PasswordS) {
            return base.Channel.GetMarketDatabyIDLiveAsync(marketID, sheetname, OrignalOpenDate, MainSportsCategory, Password, PasswordS);
        }
        
        public string GetAllMarketsBP(string[] marketIDs) {
            return base.Channel.GetAllMarketsBP(marketIDs);
        }
        
        public System.Threading.Tasks.Task<string> GetAllMarketsBPAsync(string[] marketIDs) {
            return base.Channel.GetAllMarketsBPAsync(marketIDs);
        }
        
        public ExternalAPI.TO.MarketBookString[] GetAllMarketsOthers(string[] marketIDs) {
            return base.Channel.GetAllMarketsOthers(marketIDs);
        }
        
        public System.Threading.Tasks.Task<ExternalAPI.TO.MarketBookString[]> GetAllMarketsOthersAsync(string[] marketIDs) {
            return base.Channel.GetAllMarketsOthersAsync(marketIDs);
        }
        
        public ExternalAPI.TO.MarketBookString[] GetAllMarketsOthersFancy(string[] marketIDs) {
            return base.Channel.GetAllMarketsOthersFancy(marketIDs);
        }
        
        public System.Threading.Tasks.Task<ExternalAPI.TO.MarketBookString[]> GetAllMarketsOthersFancyAsync(string[] marketIDs) {
            return base.Channel.GetAllMarketsOthersFancyAsync(marketIDs);
        }
        
        public string GetAllMarketsBPFancy(string[] marketIDs) {
            return base.Channel.GetAllMarketsBPFancy(marketIDs);
        }
        
        public System.Threading.Tasks.Task<string> GetAllMarketsBPFancyAsync(string[] marketIDs) {
            return base.Channel.GetAllMarketsBPFancyAsync(marketIDs);
        }
        
        public ExternalAPI.TO.MarketBook[] GetAllMarketsFancy(string[] marketIDs) {
            return base.Channel.GetAllMarketsFancy(marketIDs);
        }
        
        public System.Threading.Tasks.Task<ExternalAPI.TO.MarketBook[]> GetAllMarketsFancyAsync(string[] marketIDs) {
            return base.Channel.GetAllMarketsFancyAsync(marketIDs);
        }
    }
}
