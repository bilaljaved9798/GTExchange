@model IEnumerable<ExternalAPI.TO.MarketBook>

@foreach (var item in Model)
{
    if (LoggedinUserDetail.GetUserTypeID() == 1)
    {


        <div id="averagecalculationDynamic@(item.MarketId.ToString().Replace(".", ""))"  class="col-md-12 no-padding" style="display:none">
            <div class="col-md-2">

                <div class="col-md-12">


                    @Html.DropDownListFor(item1 => item.Runners,
   new SelectList(item.Runners, "SelectionId", "RunnerName"),
   new { @id = "ddlRunners1" + (item.MarketId.ToString().Replace(".", "")) ,@class="ddlaveragerunners"})
                </div>
                <div class="col-md-12">
                    <input type="text" class="averagerates" id="averageamt1@(item.MarketId.ToString().Replace(".", ""))" />
                </div>
                <div class="col-md-12">
                  <label class="averageLateover1" id="averageamt1@(item.MarketId.ToString().Replace(".", ""))" >L</label>
                </div>
            </div>
            <div class="col-md-2">

                <div class="col-md-12">
                    @Html.DropDownListFor(item1 => item.Runners,
   new SelectList(item.Runners, "SelectionId", "RunnerName"),
   new { @id = "ddlRunners2" + (item.MarketId.ToString().Replace(".", "")), @class = "ddlaveragerunners" })
                </div>
                <div class="col-md-12">
                    <input type="text" class="averagerates" id="averageamt2@(item.MarketId.ToString().Replace(".", ""))" />
                </div>
                <div class="col-md-12">
                    <label class="averageLateover2" id="averageamt2@(item.MarketId.ToString().Replace(".", ""))">L</label>
                </div>
                </div>
            
           
           
        </div>
    }

    int valueid = 0;
    <input type="hidden" id="marketbooksheet@(item.MarketId.ToString().Replace(".", ""))" value="@item.SheetName" />

    <div class="col-md-12 no-padding marketinfo">
        <label class="marketname">@item.MarketBookName</label>
        <label class="markettime" id="lbltimer@(item.MarketId.ToString().Replace(".", ""))">@item.OpenDate</label>

        @if (item.MarketStatusstr == "In Play")
                {
            <label id="marketbookstatus@(item.MarketId.ToString().Replace(".", ""))" class="marketstatus inplay">In-Play</label>
        }
        else
        {
            if (item.MarketStatusstr == "Suspended")
            {
                <label id="marketbookstatus@(item.MarketId.ToString().Replace(".", ""))" class="marketstatus suspended">Suspended</label>
            }
            else
            {
                if (item.MarketStatusstr == "Closed")
                {
                    <label id="marketbookstatus@(item.MarketId.ToString().Replace(".", ""))" class="marketstatus completed">Closed</label>
                }
                else
                {
                    <label id="marketbookstatus@(item.MarketId.ToString().Replace(".", ""))" class="marketstatus active">Active</label>
                }

            }
        }

        @*else
            {
                if (item.IsInplay == false && item.Status == ExternalAPI.TO.MarketStatus.SUSPENDED)
                {
                    <label id="marketbookstatus@(item.MarketId.ToString().Replace(".", ""))" class="marketstatus suspended">Suspended</label>
                }
                else
                {
                    if (item.IsInplay == false && item.Status == ExternalAPI.TO.MarketStatus.CLOSED)
                    {
                        <label id="marketbookstatus@(item.MarketId.ToString().Replace(".", ""))" class="marketstatus completed">Completed</label>
                    }
                    else
                    {
                        if (item.IsInplay == false && item.Status == ExternalAPI.TO.MarketStatus.OPEN)
                        {
                            <label id="marketbookstatus@(item.MarketId.ToString().Replace(".", ""))" class="marketstatus suspended">Suspended</label>
                        }
                    }
                }
            }*@

    </div>
        <div class="col-md-12 no-padding">

            <div id="favoriteselectionfixed@(item.MarketId.ToString().Replace(".", ""))" class="favoriteselection">

                <div class="favoriteselectionname">
                    @if (item.FavoriteSelectionName != "")
                    {
                        <label id="lblfavoritename@(item.MarketId.ToString().Replace(".", ""))">@item.FavoriteSelectionName</label>
                    }
                    else
                    {
                        <label id="lblfavoritename@(item.MarketId.ToString().Replace(".", ""))"></label>
                    }

                </div>
                <div class="favoritepricebackandlay matchcolors">
                    <div class="favoritebackprice">
                        <label id="lblfavoritebackprice@(item.MarketId.ToString().Replace(".", ""))" onclick="showbetslipmultiple('@(item.FavoriteID)','back',' @(Convert.ToDecimal(item.FavoriteBack) + 1)','4000','0','@item.MarketId','@item.MarketBookName','@item.FavoriteBackSize','0')">@item.FavoriteBack</label>
                    </div>
                    <div class="favoritelayprice">
                        <label id="lblfavoritelayprice@(item.MarketId.ToString().Replace(".", ""))" onclick="showbetslipmultiple('@(item.FavoriteID)','lay',' @(Convert.ToDecimal(item.FavoriteLay) + 1)','4000','0','@item.MarketId','@item.MarketBookName','@item.FavoriteLaySize','0')">@item.FavoriteLay</label>
                    </div>
                </div>
                <div class="favoritesizebackandlay">
                    <div class="favoritebacksize">
                        <label id="lblfavoritebacksize@(item.MarketId.ToString().Replace(".", ""))" onclick="showbetslipmultiple('@(item.FavoriteID)','back',' @(Convert.ToDecimal(item.FavoriteBack) + 1)','4000','0','@item.MarketId','@item.MarketBookName','@item.FavoriteBackSize','0')">@item.FavoriteBackSize</label>
                    </div>
                    <div class="favoritelaysize">
                        <label id="lblfavoritelaysize@(item.MarketId.ToString().Replace(".", ""))" onclick="showbetslipmultiple('@(item.FavoriteID)','lay',' @(Convert.ToDecimal(item.FavoriteLay) + 1)','4000','0','@item.MarketId','@item.MarketBookName','@item.FavoriteLaySize','0')">@item.FavoriteLaySize</label>
                    </div>
                </div>

            </div>

        </div>

        <div class="col-md-12 pull-left no-padding runnerswrapper">
            <div class="col-md-2 no-padding runnernamediv">
                <label class="runnersname">
                    Selection
                </label>



            </div>
            <div class="col-md-1 no-padding runnerlastpricediv">
                <label class="runnerslastprice">
                    Price
                </label>
            </div>
            <div class="col-md-2 no-padding runnerprofitandlossdiv">
                <label class="runnersprofitloss">
                    P/L
                </label>
            </div>
            <div class="col-md-7 no-padding  runnerbackandlaydiv">
                <div class="col-md-12 no-padding">
                    <div class="col-md-6 no-padding backhead">
                        <div class="col-md-12 no-padding">
                            <div class="col-md-4 no-padding">

                            </div>
                            <div class="col-md-4 no-padding">

                            </div>
                            <div class="col-md-4 no-padding">
                                <label>Back</label>
                            </div>

                        </div>

                    </div>
                    <div class="col-md-6 no-padding layhead">
                        <div class="col-md-12 no-padding">
                            <div class="col-md-4 no-padding">
                                <label>Lay</label>
                            </div>
                            <div class="col-md-4 no-padding">

                            </div>
                            <div class="col-md-4 no-padding">

                            </div>
                        </div>
                    </div>
                </div>
            </div>

        </div>


        <div class="backgroundimageforSuspended">
            @foreach (var runner in item.Runners)
                {
                <div id="selection@(runner.SelectionId.Replace(" ",""))" class="col-md-12 pull-left no-padding runnerswrapper">

                    <div id="runnernamediv@(runner.SelectionId)" class="col-md-2 no-padding runnernamediv">
                        <label style="display:none">
                            @runner.SelectionId
                        </label>
                        @if (item.MainSportsname == "Horse Racing" && runner.JockeyName != "Not")
                    {<input type="checkbox" id="chkselection@(runner.SelectionId)" class="checkboxrunnername" onchange="AddRunnersformultiplebets('@runner.SelectionId')" />
                            <label data-value="@runner.SelectionId" class="runners runnersclothnumber" id="lblSelectionClothnumber@(runner.SelectionId)">
                                @runner.Clothnumber
                            </label>
                            <img class="runnerwearing" src="@runner.WearingURL" title="@runner.WearingDesc" onerror="this.onerror = null; this.src = '../Content/images/not-found.png';" />
                            <label for="chkselection@(runner.SelectionId)" data-value="@runner.SelectionId" class="runners runnersnameHorse" id="lblSelectionName@(runner.SelectionId)">
                                @runner.RunnerName
                            </label>
                            <label id="lbljockey@(runner.SelectionId)" class="jockeyname">@runner.JockeyName</label>
                        }
                        else
                        {
                            <input type="checkbox" id="chkselection@(runner.SelectionId)" class="checkboxrunnername" onchange="AddRunnersformultiplebets('@runner.SelectionId')" />
                            <label for="chkselection@(runner.SelectionId)" data-value="@runner.SelectionId" class="runners runnersname" id="lblSelectionName@(runner.SelectionId)">
                                @runner.RunnerName
                            </label>
                        }
                        @*<input type="checkbox" id="chkselection@(runner.SelectionId)" class="checkboxrunnername" onchange="AddRunnersformultiplebets('@runner.SelectionId')" />
                            <label for="chkselection@(runner.SelectionId)" data-value="@runner.SelectionId" class="runners runnersname" id="lblSelectionName@(runner.SelectionId)">
                                @runner.RunnerName
                            </label>*@

                    </div>
                    <div class="col-md-1 no-padding runnerlastpricediv">
                        <label id="lblrunnerlastprice@(runner.SelectionId)" class="runnerslastprice">
                            @runner.LastPriceTraded
                        </label>

                    </div>
                    <div class="col-md-1 no-padding runnerprofitandlossdiv">
                        @if (runner.ProfitandLoss >= 0)
                    {
                            <label id="lblprofitandloss@(runner.SelectionId)" class="runnersprofitlossgreen">
                                @runner.ProfitandLoss
                            </label>
                        }
                        else
                        {
                            <label id="lblprofitandloss@(runner.SelectionId)" class="runnersprofitlossred">
                                @runner.ProfitandLoss
                            </label>
                        }

                    </div>
                    <div class="col-md-8 no-padding priceandsize matchcolors runnerbackandlaydiv">
                        <div class="col-md-12 no-padding">
                            <div class="col-md-6 no-padding">

                                @for (int i = 2; i >= 0; i--)
                                {
                                    if (runner.ExchangePrices.AvailableToBack.Count - 1 >= i && runner.ExchangePrices.AvailableToBack.Count > 0 && runner.ExchangePrices.AvailableToBack[i].Price > 0)
                                    {
                                        <div class="col-md-4 no-padding backitem">
                                            <label id="lblbackprice@(i.ToString() + runner.SelectionId.ToString().Replace(" ",""))" class="selectionprice" onclick="showbetslip('@runner.SelectionId.Replace(" ","")','back',' @runner.ExchangePrices.AvailableToBack[i].Price','2000','0','@item.MarketId','@item.MarketBookName','@runner.ExchangePrices.AvailableToBack[i].Size','@i','0')">
                                                @runner.ExchangePrices.AvailableToBack[i].Price
                                            </label><br />
                                            <label id="lblbacksize@(i.ToString() + runner.SelectionId.ToString().Replace(" ",""))" class="selectionsize" onclick="showbetslip('@runner.SelectionId.Replace(" ","")','back',' @runner.ExchangePrices.AvailableToBack[i].Price','2000','0','@item.MarketId','@item.MarketBookName','@runner.ExchangePrices.AvailableToBack[i].Size','@i','0')">
                                                @runner.ExchangePrices.AvailableToBack[i].Size
                                            </label>

                                        </div>
                                    }
                                    else
                                    {
                                        <div class="col-md-4 no-padding backitem">
                                            <label id="lblbackprice@(i.ToString() + runner.SelectionId.ToString().Replace(" ",""))" class="selectionprice">
                                                0
                                            </label><br />
                                            <label id="lblbacksize@(i.ToString() + runner.SelectionId.ToString().Replace(" ",""))" class="selectionsize">
                                                0
                                            </label>
                                        </div>
                                    }
                                }

                            </div>

                            <div class="col-md-6 no-padding">
                                @for (int i = 0; i < 3; i++)
                                {
                                    if (runner.ExchangePrices.AvailableToLay.Count > i && runner.ExchangePrices.AvailableToLay.Count > 0 && runner.ExchangePrices.AvailableToLay[i].Price > 0)
                                    {
                                        <div class="col-md-4 no-padding layitem">

                                            <label id="lbllayprice@(i.ToString() + runner.SelectionId.ToString().Replace(" ",""))" class="selectionprice" onclick="showbetslip('@runner.SelectionId.Replace(" ","")','lay',' @runner.ExchangePrices.AvailableToLay[i].Price','2000','0','@item.MarketId','@item.MarketBookName','@runner.ExchangePrices.AvailableToLay[i].Size','@i','0')">
                                                @runner.ExchangePrices.AvailableToLay[i].Price
                                            </label><br />
                                            <label id="lbllaysize@(i.ToString() + runner.SelectionId.ToString().Replace(" ",""))" class="selectionsize" onclick="showbetslip('@runner.SelectionId.Replace(" ","")','lay',' @runner.ExchangePrices.AvailableToLay[i].Price','2000','0','@item.MarketId','@item.MarketBookName','@runner.ExchangePrices.AvailableToLay[i].Size','@i','0')">
                                                @runner.ExchangePrices.AvailableToLay[i].Size
                                            </label>


                                        </div>
                                    }
                                    else
                                    {
                                        <div class="col-md-4 no-padding layitem">
                                            <label id="lbllayprice@(i.ToString() + runner.SelectionId.ToString().Replace(" ",""))" class="selectionprice">
                                                0
                                            </label><br />
                                            <label id="lbllaysize@(i.ToString() + runner.SelectionId.ToString().Replace(" ",""))" class="selectionsize">
                                                0
                                            </label>
                                        </div>
                                    }

                                }
                            </div>

                        </div>
                    </div>

                </div>
                valueid = valueid + 1;
            }
        </div>



    <script type="text/javascript">
        $(document).ready(function () {
            
            var newid = $("#lastloadedmarket").val().replace(".", "");
            var status = $("#marketbookstatus" + newid).html();
            if (status == "Suspended") {
                $(".backgroundimageforSuspended").addClass("backgroundsuspended");
            }
            if (status == "Closed") {
                $(".backgroundimageforSuspended").addClass("backgroundclosed");
            }
            $(".runners").each(function () {

                var id = $(this).attr("data-value");
                //LoadRunnername(id);

                if ($("#openedbetslipid").val() == id) {

                    SetBackandlayonbetslip(id);
                }

            });

        });

    </script>
}


